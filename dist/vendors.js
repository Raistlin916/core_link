/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	var parentJsonpFunction = window["webpackJsonp"];
/******/ 	window["webpackJsonp"] = function webpackJsonpCallback(chunkIds, moreModules) {
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, callbacks = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(installedChunks[chunkId])
/******/ 				callbacks.push.apply(callbacks, installedChunks[chunkId]);
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			modules[moduleId] = moreModules[moduleId];
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(chunkIds, moreModules);
/******/ 		while(callbacks.length)
/******/ 			callbacks.shift().call(null, __webpack_require__);
/******/ 		if(moreModules[0]) {
/******/ 			installedModules[0] = 0;
/******/ 			return __webpack_require__(0);
/******/ 		}
/******/ 	};

/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// object to store loaded and loading chunks
/******/ 	// "0" means "already loaded"
/******/ 	// Array means "loading", array contains callbacks
/******/ 	var installedChunks = {
/******/ 		1:0
/******/ 	};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}

/******/ 	// This file contains only the entry chunk.
/******/ 	// The chunk loading function for additional chunks
/******/ 	__webpack_require__.e = function requireEnsure(chunkId, callback) {
/******/ 		// "0" is the signal for "already loaded"
/******/ 		if(installedChunks[chunkId] === 0)
/******/ 			return callback.call(null, __webpack_require__);

/******/ 		// an array means "currently loading".
/******/ 		if(installedChunks[chunkId] !== undefined) {
/******/ 			installedChunks[chunkId].push(callback);
/******/ 		} else {
/******/ 			// start chunk loading
/******/ 			installedChunks[chunkId] = [callback];
/******/ 			var head = document.getElementsByTagName('head')[0];
/******/ 			var script = document.createElement('script');
/******/ 			script.type = 'text/javascript';
/******/ 			script.charset = 'utf-8';
/******/ 			script.async = true;

/******/ 			script.src = __webpack_require__.p + "" + chunkId + ".bundle.js";
/******/ 			head.appendChild(script);
/******/ 		}
/******/ 	};

/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "http://localhost:8091/assets/dist";
/******/ })
/************************************************************************/
/******/ ([
/* 0 */,
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(2);


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule React
	 */

	/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

	'use strict';

	var EventPluginUtils = __webpack_require__(4);
	var ReactChildren = __webpack_require__(8);
	var ReactComponent = __webpack_require__(22);
	var ReactClass = __webpack_require__(37);
	var ReactContext = __webpack_require__(12);
	var ReactCurrentOwner = __webpack_require__(17);
	var ReactElement = __webpack_require__(11);
	var ReactElementValidator = __webpack_require__(30);
	var ReactDOM = __webpack_require__(40);
	var ReactDOMTextComponent = __webpack_require__(42);
	var ReactDefaultInjection = __webpack_require__(91);
	var ReactInstanceHandles = __webpack_require__(20);
	var ReactMount = __webpack_require__(67);
	var ReactPerf = __webpack_require__(26);
	var ReactPropTypes = __webpack_require__(122);
	var ReactReconciler = __webpack_require__(27);
	var ReactServerRendering = __webpack_require__(154);

	var assign = __webpack_require__(13);
	var findDOMNode = __webpack_require__(111);
	var onlyChild = __webpack_require__(156);

	ReactDefaultInjection.inject();

	var createElement = ReactElement.createElement;
	var createFactory = ReactElement.createFactory;
	var cloneElement = ReactElement.cloneElement;

	if ("production" !== process.env.NODE_ENV) {
	  createElement = ReactElementValidator.createElement;
	  createFactory = ReactElementValidator.createFactory;
	  cloneElement = ReactElementValidator.cloneElement;
	}

	var render = ReactPerf.measure('React', 'render', ReactMount.render);

	var React = {
	  Children: {
	    map: ReactChildren.map,
	    forEach: ReactChildren.forEach,
	    count: ReactChildren.count,
	    only: onlyChild
	  },
	  Component: ReactComponent,
	  DOM: ReactDOM,
	  PropTypes: ReactPropTypes,
	  initializeTouchEvents: function(shouldUseTouch) {
	    EventPluginUtils.useTouchEvents = shouldUseTouch;
	  },
	  createClass: ReactClass.createClass,
	  createElement: createElement,
	  cloneElement: cloneElement,
	  createFactory: createFactory,
	  createMixin: function(mixin) {
	    // Currently a noop. Will be used to validate and trace mixins.
	    return mixin;
	  },
	  constructAndRenderComponent: ReactMount.constructAndRenderComponent,
	  constructAndRenderComponentByID: ReactMount.constructAndRenderComponentByID,
	  findDOMNode: findDOMNode,
	  render: render,
	  renderToString: ReactServerRendering.renderToString,
	  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
	  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
	  isValidElement: ReactElement.isValidElement,
	  withContext: ReactContext.withContext,

	  // Hook for JSX spread, don't use this for anything else.
	  __spread: assign
	};

	// Inject the runtime into a devtools global hook regardless of browser.
	// Allows for debugging when the hook is injected on the page.
	if (
	  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
	  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
	    CurrentOwner: ReactCurrentOwner,
	    InstanceHandles: ReactInstanceHandles,
	    Mount: ReactMount,
	    Reconciler: ReactReconciler,
	    TextComponent: ReactDOMTextComponent
	  });
	}

	if ("production" !== process.env.NODE_ENV) {
	  var ExecutionEnvironment = __webpack_require__(51);
	  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

	    // If we're in Chrome, look for the devtools marker and provide a download
	    // link if not installed.
	    if (navigator.userAgent.indexOf('Chrome') > -1) {
	      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	        console.debug(
	          'Download the React DevTools for a better development experience: ' +
	          'https://fb.me/react-devtools'
	        );
	      }
	    }

	    var expectedFeatures = [
	      // shims
	      Array.isArray,
	      Array.prototype.every,
	      Array.prototype.forEach,
	      Array.prototype.indexOf,
	      Array.prototype.map,
	      Date.now,
	      Function.prototype.bind,
	      Object.keys,
	      String.prototype.split,
	      String.prototype.trim,

	      // shams
	      Object.create,
	      Object.freeze
	    ];

	    for (var i = 0; i < expectedFeatures.length; i++) {
	      if (!expectedFeatures[i]) {
	        console.error(
	          'One or more ES5 shim/shams expected by React are not available: ' +
	          'https://fb.me/react-warning-polyfills'
	        );
	        break;
	      }
	    }
	  }
	}

	React.version = '0.13.3';

	module.exports = React;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 3 */
/***/ function(module, exports) {

	// shim for using process in browser

	var process = module.exports = {};
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = setTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            currentQueue[queueIndex].run();
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    clearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        setTimeout(drainQueue, 0);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	// TODO(shtylman)
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginUtils
	 */

	'use strict';

	var EventConstants = __webpack_require__(5);

	var invariant = __webpack_require__(7);

	/**
	 * Injected dependencies:
	 */

	/**
	 * - `Mount`: [required] Module that can convert between React dom IDs and
	 *   actual node references.
	 */
	var injection = {
	  Mount: null,
	  injectMount: function(InjectedMount) {
	    injection.Mount = InjectedMount;
	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        InjectedMount && InjectedMount.getNode,
	        'EventPluginUtils.injection.injectMount(...): Injected Mount module ' +
	        'is missing getNode.'
	      ) : invariant(InjectedMount && InjectedMount.getNode));
	    }
	  }
	};

	var topLevelTypes = EventConstants.topLevelTypes;

	function isEndish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseUp ||
	         topLevelType === topLevelTypes.topTouchEnd ||
	         topLevelType === topLevelTypes.topTouchCancel;
	}

	function isMoveish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseMove ||
	         topLevelType === topLevelTypes.topTouchMove;
	}
	function isStartish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseDown ||
	         topLevelType === topLevelTypes.topTouchStart;
	}


	var validateEventDispatches;
	if ("production" !== process.env.NODE_ENV) {
	  validateEventDispatches = function(event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchIDs = event._dispatchIDs;

	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var idsIsArr = Array.isArray(dispatchIDs);
	    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
	    var listenersLen = listenersIsArr ?
	      dispatchListeners.length :
	      dispatchListeners ? 1 : 0;

	    ("production" !== process.env.NODE_ENV ? invariant(
	      idsIsArr === listenersIsArr && IDsLen === listenersLen,
	      'EventPluginUtils: Invalid `event`.'
	    ) : invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen));
	  };
	}

	/**
	 * Invokes `cb(event, listener, id)`. Avoids using call if no scope is
	 * provided. The `(listener,id)` pair effectively forms the "dispatch" but are
	 * kept separate to conserve memory.
	 */
	function forEachEventDispatch(event, cb) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if ("production" !== process.env.NODE_ENV) {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      cb(event, dispatchListeners[i], dispatchIDs[i]);
	    }
	  } else if (dispatchListeners) {
	    cb(event, dispatchListeners, dispatchIDs);
	  }
	}

	/**
	 * Default implementation of PluginModule.executeDispatch().
	 * @param {SyntheticEvent} SyntheticEvent to handle
	 * @param {function} Application-level callback
	 * @param {string} domID DOM id to pass to the callback.
	 */
	function executeDispatch(event, listener, domID) {
	  event.currentTarget = injection.Mount.getNode(domID);
	  var returnValue = listener(event, domID);
	  event.currentTarget = null;
	  return returnValue;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */
	function executeDispatchesInOrder(event, cb) {
	  forEachEventDispatch(event, cb);
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches, but stops
	 * at the first dispatch execution returning true, and returns that id.
	 *
	 * @return id of the first dispatch execution who's listener returns true, or
	 * null if no listener returned true.
	 */
	function executeDispatchesInOrderStopAtTrueImpl(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if ("production" !== process.env.NODE_ENV) {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      if (dispatchListeners[i](event, dispatchIDs[i])) {
	        return dispatchIDs[i];
	      }
	    }
	  } else if (dispatchListeners) {
	    if (dispatchListeners(event, dispatchIDs)) {
	      return dispatchIDs;
	    }
	  }
	  return null;
	}

	/**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */
	function executeDispatchesInOrderStopAtTrue(event) {
	  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
	  event._dispatchIDs = null;
	  event._dispatchListeners = null;
	  return ret;
	}

	/**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return The return value of executing the single dispatch.
	 */
	function executeDirectDispatch(event) {
	  if ("production" !== process.env.NODE_ENV) {
	    validateEventDispatches(event);
	  }
	  var dispatchListener = event._dispatchListeners;
	  var dispatchID = event._dispatchIDs;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !Array.isArray(dispatchListener),
	    'executeDirectDispatch(...): Invalid `event`.'
	  ) : invariant(!Array.isArray(dispatchListener)));
	  var res = dispatchListener ?
	    dispatchListener(event, dispatchID) :
	    null;
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	  return res;
	}

	/**
	 * @param {SyntheticEvent} event
	 * @return {bool} True iff number of dispatches accumulated is greater than 0.
	 */
	function hasDispatches(event) {
	  return !!event._dispatchListeners;
	}

	/**
	 * General utilities that are useful in creating custom Event Plugins.
	 */
	var EventPluginUtils = {
	  isEndish: isEndish,
	  isMoveish: isMoveish,
	  isStartish: isStartish,

	  executeDirectDispatch: executeDirectDispatch,
	  executeDispatch: executeDispatch,
	  executeDispatchesInOrder: executeDispatchesInOrder,
	  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
	  hasDispatches: hasDispatches,
	  injection: injection,
	  useTouchEvents: false
	};

	module.exports = EventPluginUtils;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventConstants
	 */

	'use strict';

	var keyMirror = __webpack_require__(6);

	var PropagationPhases = keyMirror({bubbled: null, captured: null});

	/**
	 * Types of raw signals from the browser caught at the top level.
	 */
	var topLevelTypes = keyMirror({
	  topBlur: null,
	  topChange: null,
	  topClick: null,
	  topCompositionEnd: null,
	  topCompositionStart: null,
	  topCompositionUpdate: null,
	  topContextMenu: null,
	  topCopy: null,
	  topCut: null,
	  topDoubleClick: null,
	  topDrag: null,
	  topDragEnd: null,
	  topDragEnter: null,
	  topDragExit: null,
	  topDragLeave: null,
	  topDragOver: null,
	  topDragStart: null,
	  topDrop: null,
	  topError: null,
	  topFocus: null,
	  topInput: null,
	  topKeyDown: null,
	  topKeyPress: null,
	  topKeyUp: null,
	  topLoad: null,
	  topMouseDown: null,
	  topMouseMove: null,
	  topMouseOut: null,
	  topMouseOver: null,
	  topMouseUp: null,
	  topPaste: null,
	  topReset: null,
	  topScroll: null,
	  topSelectionChange: null,
	  topSubmit: null,
	  topTextInput: null,
	  topTouchCancel: null,
	  topTouchEnd: null,
	  topTouchMove: null,
	  topTouchStart: null,
	  topWheel: null
	});

	var EventConstants = {
	  topLevelTypes: topLevelTypes,
	  PropagationPhases: PropagationPhases
	};

	module.exports = EventConstants;


/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyMirror
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(7);

	/**
	 * Constructs an enumeration with keys equal to their value.
	 *
	 * For example:
	 *
	 *   var COLORS = keyMirror({blue: null, red: null});
	 *   var myColor = COLORS.blue;
	 *   var isColorValid = !!COLORS[myColor];
	 *
	 * The last line could not be performed if the values of the generated enum were
	 * not equal to their keys.
	 *
	 *   Input:  {key1: val1, key2: val2}
	 *   Output: {key1: key1, key2: key2}
	 *
	 * @param {object} obj
	 * @return {object}
	 */
	var keyMirror = function(obj) {
	  var ret = {};
	  var key;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    obj instanceof Object && !Array.isArray(obj),
	    'keyMirror(...): Argument must be an object.'
	  ) : invariant(obj instanceof Object && !Array.isArray(obj)));
	  for (key in obj) {
	    if (!obj.hasOwnProperty(key)) {
	      continue;
	    }
	    ret[key] = key;
	  }
	  return ret;
	};

	module.exports = keyMirror;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule invariant
	 */

	"use strict";

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var invariant = function(condition, format, a, b, c, d, e, f) {
	  if ("production" !== process.env.NODE_ENV) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error(
	        'Minified exception occurred; use the non-minified dev environment ' +
	        'for the full error message and additional helpful warnings.'
	      );
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(
	        'Invariant Violation: ' +
	        format.replace(/%s/g, function() { return args[argIndex++]; })
	      );
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};

	module.exports = invariant;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildren
	 */

	'use strict';

	var PooledClass = __webpack_require__(9);
	var ReactFragment = __webpack_require__(10);

	var traverseAllChildren = __webpack_require__(18);
	var warning = __webpack_require__(15);

	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var threeArgumentPooler = PooledClass.threeArgumentPooler;

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * traversal. Allows avoiding binding callbacks.
	 *
	 * @constructor ForEachBookKeeping
	 * @param {!function} forEachFunction Function to perform traversal with.
	 * @param {?*} forEachContext Context to perform context with.
	 */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
	  this.forEachFunction = forEachFunction;
	  this.forEachContext = forEachContext;
	}
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

	function forEachSingleChild(traverseContext, child, name, i) {
	  var forEachBookKeeping = traverseContext;
	  forEachBookKeeping.forEachFunction.call(
	    forEachBookKeeping.forEachContext, child, i);
	}

	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc.
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }

	  var traverseContext =
	    ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  ForEachBookKeeping.release(traverseContext);
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * mapping. Allows avoiding binding callbacks.
	 *
	 * @constructor MapBookKeeping
	 * @param {!*} mapResult Object containing the ordered map of results.
	 * @param {!function} mapFunction Function to perform mapping with.
	 * @param {?*} mapContext Context to perform mapping with.
	 */
	function MapBookKeeping(mapResult, mapFunction, mapContext) {
	  this.mapResult = mapResult;
	  this.mapFunction = mapFunction;
	  this.mapContext = mapContext;
	}
	PooledClass.addPoolingTo(MapBookKeeping, threeArgumentPooler);

	function mapSingleChildIntoContext(traverseContext, child, name, i) {
	  var mapBookKeeping = traverseContext;
	  var mapResult = mapBookKeeping.mapResult;

	  var keyUnique = !mapResult.hasOwnProperty(name);
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      keyUnique,
	      'ReactChildren.map(...): Encountered two children with the same key, ' +
	      '`%s`. Child keys must be unique; when two children share a key, only ' +
	      'the first child will be used.',
	      name
	    ) : null);
	  }

	  if (keyUnique) {
	    var mappedChild =
	      mapBookKeeping.mapFunction.call(mapBookKeeping.mapContext, child, i);
	    mapResult[name] = mappedChild;
	  }
	}

	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * TODO: This may likely break any calls to `ReactChildren.map` that were
	 * previously relying on the fact that we guarded against null children.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} mapFunction.
	 * @param {*} mapContext Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }

	  var mapResult = {};
	  var traverseContext = MapBookKeeping.getPooled(mapResult, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  MapBookKeeping.release(traverseContext);
	  return ReactFragment.create(mapResult);
	}

	function forEachSingleChildDummy(traverseContext, child, name, i) {
	  return null;
	}

	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children, context) {
	  return traverseAllChildren(children, forEachSingleChildDummy, null);
	}

	var ReactChildren = {
	  forEach: forEachChildren,
	  map: mapChildren,
	  count: countChildren
	};

	module.exports = ReactChildren;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule PooledClass
	 */

	'use strict';

	var invariant = __webpack_require__(7);

	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function(copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};

	var twoArgumentPooler = function(a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};

	var threeArgumentPooler = function(a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};

	var fiveArgumentPooler = function(a1, a2, a3, a4, a5) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4, a5);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4, a5);
	  }
	};

	var standardReleaser = function(instance) {
	  var Klass = this;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    instance instanceof Klass,
	    'Trying to release an instance into a pool of a different type.'
	  ) : invariant(instance instanceof Klass));
	  if (instance.destructor) {
	    instance.destructor();
	  }
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};

	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;

	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances (optional).
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function(CopyConstructor, pooler) {
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};

	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fiveArgumentPooler: fiveArgumentPooler
	};

	module.exports = PooledClass;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	* @providesModule ReactFragment
	*/

	'use strict';

	var ReactElement = __webpack_require__(11);

	var warning = __webpack_require__(15);

	/**
	 * We used to allow keyed objects to serve as a collection of ReactElements,
	 * or nested sets. This allowed us a way to explicitly key a set a fragment of
	 * components. This is now being replaced with an opaque data structure.
	 * The upgrade path is to call React.addons.createFragment({ key: value }) to
	 * create a keyed fragment. The resulting data structure is opaque, for now.
	 */

	if ("production" !== process.env.NODE_ENV) {
	  var fragmentKey = '_reactFragment';
	  var didWarnKey = '_reactDidWarn';
	  var canWarnForReactFragment = false;

	  try {
	    // Feature test. Don't even try to issue this warning if we can't use
	    // enumerable: false.

	    var dummy = function() {
	      return 1;
	    };

	    Object.defineProperty(
	      {},
	      fragmentKey,
	      {enumerable: false, value: true}
	    );

	    Object.defineProperty(
	      {},
	      'key',
	      {enumerable: true, get: dummy}
	    );

	    canWarnForReactFragment = true;
	  } catch (x) { }

	  var proxyPropertyAccessWithWarning = function(obj, key) {
	    Object.defineProperty(obj, key, {
	      enumerable: true,
	      get: function() {
	        ("production" !== process.env.NODE_ENV ? warning(
	          this[didWarnKey],
	          'A ReactFragment is an opaque type. Accessing any of its ' +
	          'properties is deprecated. Pass it to one of the React.Children ' +
	          'helpers.'
	        ) : null);
	        this[didWarnKey] = true;
	        return this[fragmentKey][key];
	      },
	      set: function(value) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          this[didWarnKey],
	          'A ReactFragment is an immutable opaque type. Mutating its ' +
	          'properties is deprecated.'
	        ) : null);
	        this[didWarnKey] = true;
	        this[fragmentKey][key] = value;
	      }
	    });
	  };

	  var issuedWarnings = {};

	  var didWarnForFragment = function(fragment) {
	    // We use the keys and the type of the value as a heuristic to dedupe the
	    // warning to avoid spamming too much.
	    var fragmentCacheKey = '';
	    for (var key in fragment) {
	      fragmentCacheKey += key + ':' + (typeof fragment[key]) + ',';
	    }
	    var alreadyWarnedOnce = !!issuedWarnings[fragmentCacheKey];
	    issuedWarnings[fragmentCacheKey] = true;
	    return alreadyWarnedOnce;
	  };
	}

	var ReactFragment = {
	  // Wrap a keyed object in an opaque proxy that warns you if you access any
	  // of its properties.
	  create: function(object) {
	    if ("production" !== process.env.NODE_ENV) {
	      if (typeof object !== 'object' || !object || Array.isArray(object)) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          false,
	          'React.addons.createFragment only accepts a single object.',
	          object
	        ) : null);
	        return object;
	      }
	      if (ReactElement.isValidElement(object)) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          false,
	          'React.addons.createFragment does not accept a ReactElement ' +
	          'without a wrapper object.'
	        ) : null);
	        return object;
	      }
	      if (canWarnForReactFragment) {
	        var proxy = {};
	        Object.defineProperty(proxy, fragmentKey, {
	          enumerable: false,
	          value: object
	        });
	        Object.defineProperty(proxy, didWarnKey, {
	          writable: true,
	          enumerable: false,
	          value: false
	        });
	        for (var key in object) {
	          proxyPropertyAccessWithWarning(proxy, key);
	        }
	        Object.preventExtensions(proxy);
	        return proxy;
	      }
	    }
	    return object;
	  },
	  // Extract the original keyed object from the fragment opaque type. Warn if
	  // a plain object is passed here.
	  extract: function(fragment) {
	    if ("production" !== process.env.NODE_ENV) {
	      if (canWarnForReactFragment) {
	        if (!fragment[fragmentKey]) {
	          ("production" !== process.env.NODE_ENV ? warning(
	            didWarnForFragment(fragment),
	            'Any use of a keyed object should be wrapped in ' +
	            'React.addons.createFragment(object) before being passed as a ' +
	            'child.'
	          ) : null);
	          return fragment;
	        }
	        return fragment[fragmentKey];
	      }
	    }
	    return fragment;
	  },
	  // Check if this is a fragment and if so, extract the keyed object. If it
	  // is a fragment-like object, warn that it should be wrapped. Ignore if we
	  // can't determine what kind of object this is.
	  extractIfFragment: function(fragment) {
	    if ("production" !== process.env.NODE_ENV) {
	      if (canWarnForReactFragment) {
	        // If it is the opaque type, return the keyed object.
	        if (fragment[fragmentKey]) {
	          return fragment[fragmentKey];
	        }
	        // Otherwise, check each property if it has an element, if it does
	        // it is probably meant as a fragment, so we can warn early. Defer,
	        // the warning to extract.
	        for (var key in fragment) {
	          if (fragment.hasOwnProperty(key) &&
	              ReactElement.isValidElement(fragment[key])) {
	            // This looks like a fragment object, we should provide an
	            // early warning.
	            return ReactFragment.extract(fragment);
	          }
	        }
	      }
	    }
	    return fragment;
	  }
	};

	module.exports = ReactFragment;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElement
	 */

	'use strict';

	var ReactContext = __webpack_require__(12);
	var ReactCurrentOwner = __webpack_require__(17);

	var assign = __webpack_require__(13);
	var warning = __webpack_require__(15);

	var RESERVED_PROPS = {
	  key: true,
	  ref: true
	};

	/**
	 * Warn for mutations.
	 *
	 * @internal
	 * @param {object} object
	 * @param {string} key
	 */
	function defineWarningProperty(object, key) {
	  Object.defineProperty(object, key, {

	    configurable: false,
	    enumerable: true,

	    get: function() {
	      if (!this._store) {
	        return null;
	      }
	      return this._store[key];
	    },

	    set: function(value) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        false,
	        'Don\'t set the %s property of the React element. Instead, ' +
	        'specify the correct value when initially creating the element.',
	        key
	      ) : null);
	      this._store[key] = value;
	    }

	  });
	}

	/**
	 * This is updated to true if the membrane is successfully created.
	 */
	var useMutationMembrane = false;

	/**
	 * Warn for mutations.
	 *
	 * @internal
	 * @param {object} element
	 */
	function defineMutationMembrane(prototype) {
	  try {
	    var pseudoFrozenProperties = {
	      props: true
	    };
	    for (var key in pseudoFrozenProperties) {
	      defineWarningProperty(prototype, key);
	    }
	    useMutationMembrane = true;
	  } catch (x) {
	    // IE will fail on defineProperty
	  }
	}

	/**
	 * Base constructor for all React elements. This is only used to make this
	 * work with a dynamic instanceof check. Nothing should live on this prototype.
	 *
	 * @param {*} type
	 * @param {string|object} ref
	 * @param {*} key
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function(type, key, ref, owner, context, props) {
	  // Built-in properties that belong on the element
	  this.type = type;
	  this.key = key;
	  this.ref = ref;

	  // Record the component responsible for creating this element.
	  this._owner = owner;

	  // TODO: Deprecate withContext, and then the context becomes accessible
	  // through the owner.
	  this._context = context;

	  if ("production" !== process.env.NODE_ENV) {
	    // The validation flag and props are currently mutative. We put them on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    this._store = {props: props, originalProps: assign({}, props)};

	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    try {
	      Object.defineProperty(this._store, 'validated', {
	        configurable: false,
	        enumerable: false,
	        writable: true
	      });
	    } catch (x) {
	    }
	    this._store.validated = false;

	    // We're not allowed to set props directly on the object so we early
	    // return and rely on the prototype membrane to forward to the backing
	    // store.
	    if (useMutationMembrane) {
	      Object.freeze(this);
	      return;
	    }
	  }

	  this.props = props;
	};

	// We intentionally don't expose the function on the constructor property.
	// ReactElement should be indistinguishable from a plain object.
	ReactElement.prototype = {
	  _isReactElement: true
	};

	if ("production" !== process.env.NODE_ENV) {
	  defineMutationMembrane(ReactElement.prototype);
	}

	ReactElement.createElement = function(type, config, children) {
	  var propName;

	  // Reserved names are extracted
	  var props = {};

	  var key = null;
	  var ref = null;

	  if (config != null) {
	    ref = config.ref === undefined ? null : config.ref;
	    key = config.key === undefined ? null : '' + config.key;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) &&
	          !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (typeof props[propName] === 'undefined') {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }

	  return new ReactElement(
	    type,
	    key,
	    ref,
	    ReactCurrentOwner.current,
	    ReactContext.current,
	    props
	  );
	};

	ReactElement.createFactory = function(type) {
	  var factory = ReactElement.createElement.bind(null, type);
	  // Expose the type on the factory and the prototype so that it can be
	  // easily accessed on elements. E.g. <Foo />.type === Foo.type.
	  // This should not be named `constructor` since this may not be the function
	  // that created the element, and it may not even be a constructor.
	  // Legacy hook TODO: Warn if this is accessed
	  factory.type = type;
	  return factory;
	};

	ReactElement.cloneAndReplaceProps = function(oldElement, newProps) {
	  var newElement = new ReactElement(
	    oldElement.type,
	    oldElement.key,
	    oldElement.ref,
	    oldElement._owner,
	    oldElement._context,
	    newProps
	  );

	  if ("production" !== process.env.NODE_ENV) {
	    // If the key on the original is valid, then the clone is valid
	    newElement._store.validated = oldElement._store.validated;
	  }
	  return newElement;
	};

	ReactElement.cloneElement = function(element, config, children) {
	  var propName;

	  // Original props are copied
	  var props = assign({}, element.props);

	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;

	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;

	  if (config != null) {
	    if (config.ref !== undefined) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (config.key !== undefined) {
	      key = '' + config.key;
	    }
	    // Remaining properties override existing props
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) &&
	          !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  return new ReactElement(
	    element.type,
	    key,
	    ref,
	    owner,
	    element._context,
	    props
	  );
	};

	/**
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
	ReactElement.isValidElement = function(object) {
	  // ReactTestUtils is often used outside of beforeEach where as React is
	  // within it. This leads to two different instances of React on the same
	  // page. To identify a element from a different React instance we use
	  // a flag instead of an instanceof check.
	  var isElement = !!(object && object._isReactElement);
	  // if (isElement && !(object instanceof ReactElement)) {
	  // This is an indicator that you're using multiple versions of React at the
	  // same time. This will screw with ownership and stuff. Fix it, please.
	  // TODO: We could possibly warn here.
	  // }
	  return isElement;
	};

	module.exports = ReactElement;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactContext
	 */

	'use strict';

	var assign = __webpack_require__(13);
	var emptyObject = __webpack_require__(14);
	var warning = __webpack_require__(15);

	var didWarn = false;

	/**
	 * Keeps track of the current context.
	 *
	 * The context is automatically passed down the component ownership hierarchy
	 * and is accessible via `this.context` on ReactCompositeComponents.
	 */
	var ReactContext = {

	  /**
	   * @internal
	   * @type {object}
	   */
	  current: emptyObject,

	  /**
	   * Temporarily extends the current context while executing scopedCallback.
	   *
	   * A typical use case might look like
	   *
	   *  render: function() {
	   *    var children = ReactContext.withContext({foo: 'foo'}, () => (
	   *
	   *    ));
	   *    return <div>{children}</div>;
	   *  }
	   *
	   * @param {object} newContext New context to merge into the existing context
	   * @param {function} scopedCallback Callback to run with the new context
	   * @return {ReactComponent|array<ReactComponent>}
	   */
	  withContext: function(newContext, scopedCallback) {
	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        didWarn,
	        'withContext is deprecated and will be removed in a future version. ' +
	        'Use a wrapper component with getChildContext instead.'
	      ) : null);

	      didWarn = true;
	    }

	    var result;
	    var previousContext = ReactContext.current;
	    ReactContext.current = assign({}, previousContext, newContext);
	    try {
	      result = scopedCallback();
	    } finally {
	      ReactContext.current = previousContext;
	    }
	    return result;
	  }

	};

	module.exports = ReactContext;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 13 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Object.assign
	 */

	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign

	'use strict';

	function assign(target, sources) {
	  if (target == null) {
	    throw new TypeError('Object.assign target cannot be null or undefined');
	  }

	  var to = Object(target);
	  var hasOwnProperty = Object.prototype.hasOwnProperty;

	  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
	    var nextSource = arguments[nextIndex];
	    if (nextSource == null) {
	      continue;
	    }

	    var from = Object(nextSource);

	    // We don't currently support accessors nor proxies. Therefore this
	    // copy cannot throw. If we ever supported this then we must handle
	    // exceptions and side-effects. We don't support symbols so they won't
	    // be transferred.

	    for (var key in from) {
	      if (hasOwnProperty.call(from, key)) {
	        to[key] = from[key];
	      }
	    }
	  }

	  return to;
	}

	module.exports = assign;


/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyObject
	 */

	"use strict";

	var emptyObject = {};

	if ("production" !== process.env.NODE_ENV) {
	  Object.freeze(emptyObject);
	}

	module.exports = emptyObject;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule warning
	 */

	"use strict";

	var emptyFunction = __webpack_require__(16);

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = emptyFunction;

	if ("production" !== process.env.NODE_ENV) {
	  warning = function(condition, format ) {for (var args=[],$__0=2,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
	    if (format === undefined) {
	      throw new Error(
	        '`warning(condition, format, ...args)` requires a warning ' +
	        'message argument'
	      );
	    }

	    if (format.length < 10 || /^[s\W]*$/.test(format)) {
	      throw new Error(
	        'The warning format should be able to uniquely identify this ' +
	        'warning. Please, use a more descriptive format than: ' + format
	      );
	    }

	    if (format.indexOf('Failed Composite propType: ') === 0) {
	      return; // Ignore CompositeComponent proptype check.
	    }

	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function()  {return args[argIndex++];});
	      console.warn(message);
	      try {
	        // --- Welcome to debugging React ---
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch(x) {}
	    }
	  };
	}

	module.exports = warning;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 16 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyFunction
	 */

	function makeEmptyFunction(arg) {
	  return function() {
	    return arg;
	  };
	}

	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	function emptyFunction() {}

	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function() { return this; };
	emptyFunction.thatReturnsArgument = function(arg) { return arg; };

	module.exports = emptyFunction;


/***/ },
/* 17 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCurrentOwner
	 */

	'use strict';

	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 *
	 * The depth indicate how many composite components are above this render level.
	 */
	var ReactCurrentOwner = {

	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null

	};

	module.exports = ReactCurrentOwner;


/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule traverseAllChildren
	 */

	'use strict';

	var ReactElement = __webpack_require__(11);
	var ReactFragment = __webpack_require__(10);
	var ReactInstanceHandles = __webpack_require__(20);

	var getIteratorFn = __webpack_require__(19);
	var invariant = __webpack_require__(7);
	var warning = __webpack_require__(15);

	var SEPARATOR = ReactInstanceHandles.SEPARATOR;
	var SUBSEPARATOR = ':';

	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */

	var userProvidedKeyEscaperLookup = {
	  '=': '=0',
	  '.': '=1',
	  ':': '=2'
	};

	var userProvidedKeyEscapeRegex = /[=.:]/g;

	var didWarnAboutMaps = false;

	function userProvidedKeyEscaper(match) {
	  return userProvidedKeyEscaperLookup[match];
	}

	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  if (component && component.key != null) {
	    // Explicit key
	    return wrapUserProvidedKey(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}

	/**
	 * Escape a component key so that it is safe to use in a reactid.
	 *
	 * @param {*} key Component key to be escaped.
	 * @return {string} An escaped string.
	 */
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(
	    userProvidedKeyEscapeRegex,
	    userProvidedKeyEscaper
	  );
	}

	/**
	 * Wrap a `key` value explicitly provided by the user to distinguish it from
	 * implicitly-generated keys generated by a component's index in its parent.
	 *
	 * @param {string} key Value of a user-provided `key` attribute
	 * @return {string}
	 */
	function wrapUserProvidedKey(key) {
	  return '$' + escapeUserProvidedKey(key);
	}

	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!number} indexSoFar Number of children encountered until this point.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(
	  children,
	  nameSoFar,
	  indexSoFar,
	  callback,
	  traverseContext
	) {
	  var type = typeof children;

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  if (children === null ||
	      type === 'string' ||
	      type === 'number' ||
	      ReactElement.isValidElement(children)) {
	    callback(
	      traverseContext,
	      children,
	      // If it's the only child, treat the name as if it was wrapped in an array
	      // so that it's consistent if the number of children grows.
	      nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar,
	      indexSoFar
	    );
	    return 1;
	  }

	  var child, nextName, nextIndex;
	  var subtreeCount = 0; // Count of children found in the current subtree.

	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = (
	        (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
	        getComponentKey(child, i)
	      );
	      nextIndex = indexSoFar + subtreeCount;
	      subtreeCount += traverseAllChildrenImpl(
	        child,
	        nextName,
	        nextIndex,
	        callback,
	        traverseContext
	      );
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = (
	            (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
	            getComponentKey(child, ii++)
	          );
	          nextIndex = indexSoFar + subtreeCount;
	          subtreeCount += traverseAllChildrenImpl(
	            child,
	            nextName,
	            nextIndex,
	            callback,
	            traverseContext
	          );
	        }
	      } else {
	        if ("production" !== process.env.NODE_ENV) {
	          ("production" !== process.env.NODE_ENV ? warning(
	            didWarnAboutMaps,
	            'Using Maps as children is not yet fully supported. It is an ' +
	            'experimental feature that might be removed. Convert it to a ' +
	            'sequence / iterable of keyed ReactElements instead.'
	          ) : null);
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = (
	              (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
	              wrapUserProvidedKey(entry[0]) + SUBSEPARATOR +
	              getComponentKey(child, 0)
	            );
	            nextIndex = indexSoFar + subtreeCount;
	            subtreeCount += traverseAllChildrenImpl(
	              child,
	              nextName,
	              nextIndex,
	              callback,
	              traverseContext
	            );
	          }
	        }
	      }
	    } else if (type === 'object') {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        children.nodeType !== 1,
	        'traverseAllChildren(...): Encountered an invalid child; DOM ' +
	        'elements are not valid children of React components.'
	      ) : invariant(children.nodeType !== 1));
	      var fragment = ReactFragment.extract(children);
	      for (var key in fragment) {
	        if (fragment.hasOwnProperty(key)) {
	          child = fragment[key];
	          nextName = (
	            (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
	            wrapUserProvidedKey(key) + SUBSEPARATOR +
	            getComponentKey(child, 0)
	          );
	          nextIndex = indexSoFar + subtreeCount;
	          subtreeCount += traverseAllChildrenImpl(
	            child,
	            nextName,
	            nextIndex,
	            callback,
	            traverseContext
	          );
	        }
	      }
	    }
	  }

	  return subtreeCount;
	}

	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }

	  return traverseAllChildrenImpl(children, '', 0, callback, traverseContext);
	}

	module.exports = traverseAllChildren;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 19 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getIteratorFn
	 * @typechecks static-only
	 */

	'use strict';

	/* global Symbol */
	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (
	    (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL])
	  );
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}

	module.exports = getIteratorFn;


/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceHandles
	 * @typechecks static-only
	 */

	'use strict';

	var ReactRootIndex = __webpack_require__(21);

	var invariant = __webpack_require__(7);

	var SEPARATOR = '.';
	var SEPARATOR_LENGTH = SEPARATOR.length;

	/**
	 * Maximum depth of traversals before we consider the possibility of a bad ID.
	 */
	var MAX_TREE_DEPTH = 100;

	/**
	 * Creates a DOM ID prefix to use when mounting React components.
	 *
	 * @param {number} index A unique integer
	 * @return {string} React root ID.
	 * @internal
	 */
	function getReactRootIDString(index) {
	  return SEPARATOR + index.toString(36);
	}

	/**
	 * Checks if a character in the supplied ID is a separator or the end.
	 *
	 * @param {string} id A React DOM ID.
	 * @param {number} index Index of the character to check.
	 * @return {boolean} True if the character is a separator or end of the ID.
	 * @private
	 */
	function isBoundary(id, index) {
	  return id.charAt(index) === SEPARATOR || index === id.length;
	}

	/**
	 * Checks if the supplied string is a valid React DOM ID.
	 *
	 * @param {string} id A React DOM ID, maybe.
	 * @return {boolean} True if the string is a valid React DOM ID.
	 * @private
	 */
	function isValidID(id) {
	  return id === '' || (
	    id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR
	  );
	}

	/**
	 * Checks if the first ID is an ancestor of or equal to the second ID.
	 *
	 * @param {string} ancestorID
	 * @param {string} descendantID
	 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
	 * @internal
	 */
	function isAncestorIDOf(ancestorID, descendantID) {
	  return (
	    descendantID.indexOf(ancestorID) === 0 &&
	    isBoundary(descendantID, ancestorID.length)
	  );
	}

	/**
	 * Gets the parent ID of the supplied React DOM ID, `id`.
	 *
	 * @param {string} id ID of a component.
	 * @return {string} ID of the parent, or an empty string.
	 * @private
	 */
	function getParentID(id) {
	  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
	}

	/**
	 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
	 * supplied `destinationID`. If they are equal, the ID is returned.
	 *
	 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
	 * @param {string} destinationID ID of the destination node.
	 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
	 * @private
	 */
	function getNextDescendantID(ancestorID, destinationID) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    isValidID(ancestorID) && isValidID(destinationID),
	    'getNextDescendantID(%s, %s): Received an invalid React DOM ID.',
	    ancestorID,
	    destinationID
	  ) : invariant(isValidID(ancestorID) && isValidID(destinationID)));
	  ("production" !== process.env.NODE_ENV ? invariant(
	    isAncestorIDOf(ancestorID, destinationID),
	    'getNextDescendantID(...): React has made an invalid assumption about ' +
	    'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.',
	    ancestorID,
	    destinationID
	  ) : invariant(isAncestorIDOf(ancestorID, destinationID)));
	  if (ancestorID === destinationID) {
	    return ancestorID;
	  }
	  // Skip over the ancestor and the immediate separator. Traverse until we hit
	  // another separator or we reach the end of `destinationID`.
	  var start = ancestorID.length + SEPARATOR_LENGTH;
	  var i;
	  for (i = start; i < destinationID.length; i++) {
	    if (isBoundary(destinationID, i)) {
	      break;
	    }
	  }
	  return destinationID.substr(0, i);
	}

	/**
	 * Gets the nearest common ancestor ID of two IDs.
	 *
	 * Using this ID scheme, the nearest common ancestor ID is the longest common
	 * prefix of the two IDs that immediately preceded a "marker" in both strings.
	 *
	 * @param {string} oneID
	 * @param {string} twoID
	 * @return {string} Nearest common ancestor ID, or the empty string if none.
	 * @private
	 */
	function getFirstCommonAncestorID(oneID, twoID) {
	  var minLength = Math.min(oneID.length, twoID.length);
	  if (minLength === 0) {
	    return '';
	  }
	  var lastCommonMarkerIndex = 0;
	  // Use `<=` to traverse until the "EOL" of the shorter string.
	  for (var i = 0; i <= minLength; i++) {
	    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
	      lastCommonMarkerIndex = i;
	    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
	      break;
	    }
	  }
	  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
	  ("production" !== process.env.NODE_ENV ? invariant(
	    isValidID(longestCommonID),
	    'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s',
	    oneID,
	    twoID,
	    longestCommonID
	  ) : invariant(isValidID(longestCommonID)));
	  return longestCommonID;
	}

	/**
	 * Traverses the parent path between two IDs (either up or down). The IDs must
	 * not be the same, and there must exist a parent path between them. If the
	 * callback returns `false`, traversal is stopped.
	 *
	 * @param {?string} start ID at which to start traversal.
	 * @param {?string} stop ID at which to end traversal.
	 * @param {function} cb Callback to invoke each ID with.
	 * @param {?boolean} skipFirst Whether or not to skip the first node.
	 * @param {?boolean} skipLast Whether or not to skip the last node.
	 * @private
	 */
	function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
	  start = start || '';
	  stop = stop || '';
	  ("production" !== process.env.NODE_ENV ? invariant(
	    start !== stop,
	    'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.',
	    start
	  ) : invariant(start !== stop));
	  var traverseUp = isAncestorIDOf(stop, start);
	  ("production" !== process.env.NODE_ENV ? invariant(
	    traverseUp || isAncestorIDOf(start, stop),
	    'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' +
	    'not have a parent path.',
	    start,
	    stop
	  ) : invariant(traverseUp || isAncestorIDOf(start, stop)));
	  // Traverse from `start` to `stop` one depth at a time.
	  var depth = 0;
	  var traverse = traverseUp ? getParentID : getNextDescendantID;
	  for (var id = start; /* until break */; id = traverse(id, stop)) {
	    var ret;
	    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
	      ret = cb(id, traverseUp, arg);
	    }
	    if (ret === false || id === stop) {
	      // Only break //after// visiting `stop`.
	      break;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      depth++ < MAX_TREE_DEPTH,
	      'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' +
	      'traversing the React DOM ID tree. This may be due to malformed IDs: %s',
	      start, stop
	    ) : invariant(depth++ < MAX_TREE_DEPTH));
	  }
	}

	/**
	 * Manages the IDs assigned to DOM representations of React components. This
	 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
	 * order to simulate events).
	 *
	 * @internal
	 */
	var ReactInstanceHandles = {

	  /**
	   * Constructs a React root ID
	   * @return {string} A React root ID.
	   */
	  createReactRootID: function() {
	    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
	  },

	  /**
	   * Constructs a React ID by joining a root ID with a name.
	   *
	   * @param {string} rootID Root ID of a parent component.
	   * @param {string} name A component's name (as flattened children).
	   * @return {string} A React ID.
	   * @internal
	   */
	  createReactID: function(rootID, name) {
	    return rootID + name;
	  },

	  /**
	   * Gets the DOM ID of the React component that is the root of the tree that
	   * contains the React component with the supplied DOM ID.
	   *
	   * @param {string} id DOM ID of a React component.
	   * @return {?string} DOM ID of the React component that is the root.
	   * @internal
	   */
	  getReactRootIDFromNodeID: function(id) {
	    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
	      var index = id.indexOf(SEPARATOR, 1);
	      return index > -1 ? id.substr(0, index) : id;
	    }
	    return null;
	  },

	  /**
	   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	   * should would receive a `mouseEnter` or `mouseLeave` event.
	   *
	   * NOTE: Does not invoke the callback on the nearest common ancestor because
	   * nothing "entered" or "left" that element.
	   *
	   * @param {string} leaveID ID being left.
	   * @param {string} enterID ID being entered.
	   * @param {function} cb Callback to invoke on each entered/left ID.
	   * @param {*} upArg Argument to invoke the callback with on left IDs.
	   * @param {*} downArg Argument to invoke the callback with on entered IDs.
	   * @internal
	   */
	  traverseEnterLeave: function(leaveID, enterID, cb, upArg, downArg) {
	    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
	    if (ancestorID !== leaveID) {
	      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
	    }
	    if (ancestorID !== enterID) {
	      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
	    }
	  },

	  /**
	   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseTwoPhase: function(targetID, cb, arg) {
	    if (targetID) {
	      traverseParentPath('', targetID, cb, arg, true, false);
	      traverseParentPath(targetID, '', cb, arg, false, true);
	    }
	  },

	  /**
	   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
	   * example, passing `.0.$row-0.1` would result in `cb` getting called
	   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseAncestors: function(targetID, cb, arg) {
	    traverseParentPath('', targetID, cb, arg, true, false);
	  },

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _getFirstCommonAncestorID: getFirstCommonAncestorID,

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _getNextDescendantID: getNextDescendantID,

	  isAncestorIDOf: isAncestorIDOf,

	  SEPARATOR: SEPARATOR

	};

	module.exports = ReactInstanceHandles;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 21 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRootIndex
	 * @typechecks
	 */

	'use strict';

	var ReactRootIndexInjection = {
	  /**
	   * @param {function} _createReactRootIndex
	   */
	  injectCreateReactRootIndex: function(_createReactRootIndex) {
	    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
	  }
	};

	var ReactRootIndex = {
	  createReactRootIndex: null,
	  injection: ReactRootIndexInjection
	};

	module.exports = ReactRootIndex;


/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponent
	 */

	'use strict';

	var ReactUpdateQueue = __webpack_require__(23);

	var invariant = __webpack_require__(7);
	var warning = __webpack_require__(15);

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactComponent(props, context) {
	  this.props = props;
	  this.context = context;
	}

	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.setState = function(partialState, callback) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    typeof partialState === 'object' ||
	    typeof partialState === 'function' ||
	    partialState == null,
	    'setState(...): takes an object of state variables to update or a ' +
	    'function which returns an object of state variables.'
	  ) : invariant(typeof partialState === 'object' ||
	  typeof partialState === 'function' ||
	  partialState == null));
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      partialState != null,
	      'setState(...): You passed an undefined or null state object; ' +
	      'instead, use forceUpdate().'
	    ) : null);
	  }
	  ReactUpdateQueue.enqueueSetState(this, partialState);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallback(this, callback);
	  }
	};

	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.forceUpdate = function(callback) {
	  ReactUpdateQueue.enqueueForceUpdate(this);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallback(this, callback);
	  }
	};

	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
	if ("production" !== process.env.NODE_ENV) {
	  var deprecatedAPIs = {
	    getDOMNode: [
	      'getDOMNode',
	      'Use React.findDOMNode(component) instead.'
	    ],
	    isMounted: [
	      'isMounted',
	      'Instead, make sure to clean up subscriptions and pending requests in ' +
	      'componentWillUnmount to prevent memory leaks.'
	    ],
	    replaceProps: [
	      'replaceProps',
	      'Instead, call React.render again at the top level.'
	    ],
	    replaceState: [
	      'replaceState',
	      'Refactor your code to use setState instead (see ' +
	      'https://github.com/facebook/react/issues/3236).'
	    ],
	    setProps: [
	      'setProps',
	      'Instead, call React.render again at the top level.'
	    ]
	  };
	  var defineDeprecationWarning = function(methodName, info) {
	    try {
	      Object.defineProperty(ReactComponent.prototype, methodName, {
	        get: function() {
	          ("production" !== process.env.NODE_ENV ? warning(
	            false,
	            '%s(...) is deprecated in plain JavaScript React classes. %s',
	            info[0],
	            info[1]
	          ) : null);
	          return undefined;
	        }
	      });
	    } catch (x) {
	      // IE will fail on defineProperty (es5-shim/sham too)
	    }
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}

	module.exports = ReactComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdateQueue
	 */

	'use strict';

	var ReactLifeCycle = __webpack_require__(35);
	var ReactCurrentOwner = __webpack_require__(17);
	var ReactElement = __webpack_require__(11);
	var ReactInstanceMap = __webpack_require__(36);
	var ReactUpdates = __webpack_require__(24);

	var assign = __webpack_require__(13);
	var invariant = __webpack_require__(7);
	var warning = __webpack_require__(15);

	function enqueueUpdate(internalInstance) {
	  if (internalInstance !== ReactLifeCycle.currentlyMountingInstance) {
	    // If we're in a componentWillMount handler, don't enqueue a rerender
	    // because ReactUpdates assumes we're in a browser context (which is
	    // wrong for server rendering) and we're about to do a render anyway.
	    // See bug in #1740.
	    ReactUpdates.enqueueUpdate(internalInstance);
	  }
	}

	function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactCurrentOwner.current == null,
	    '%s(...): Cannot update during an existing state transition ' +
	    '(such as within `render`). Render methods should be a pure function ' +
	    'of props and state.',
	    callerName
	  ) : invariant(ReactCurrentOwner.current == null));

	  var internalInstance = ReactInstanceMap.get(publicInstance);
	  if (!internalInstance) {
	    if ("production" !== process.env.NODE_ENV) {
	      // Only warn when we have a callerName. Otherwise we should be silent.
	      // We're probably calling from enqueueCallback. We don't want to warn
	      // there because we already warned for the corresponding lifecycle method.
	      ("production" !== process.env.NODE_ENV ? warning(
	        !callerName,
	        '%s(...): Can only update a mounted or mounting component. ' +
	        'This usually means you called %s() on an unmounted ' +
	        'component. This is a no-op.',
	        callerName,
	        callerName
	      ) : null);
	    }
	    return null;
	  }

	  if (internalInstance === ReactLifeCycle.currentlyUnmountingInstance) {
	    return null;
	  }

	  return internalInstance;
	}

	/**
	 * ReactUpdateQueue allows for state updates to be scheduled into a later
	 * reconciliation step.
	 */
	var ReactUpdateQueue = {

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function(publicInstance, callback) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof callback === 'function',
	      'enqueueCallback(...): You called `setProps`, `replaceProps`, ' +
	      '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +
	      'isn\'t callable.'
	    ) : invariant(typeof callback === 'function'));
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

	    // Previously we would throw an error if we didn't have an internal
	    // instance. Since we want to make it a no-op instead, we mirror the same
	    // behavior we have in other enqueue* methods.
	    // We also need to ignore callbacks in componentWillMount. See
	    // enqueueUpdates.
	    if (!internalInstance ||
	        internalInstance === ReactLifeCycle.currentlyMountingInstance) {
	      return null;
	    }

	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    // TODO: The callback here is ignored when setState is called from
	    // componentWillMount. Either fix it or disallow doing so completely in
	    // favor of getInitialState. Alternatively, we can disallow
	    // componentWillMount during server-side rendering.
	    enqueueUpdate(internalInstance);
	  },

	  enqueueCallbackInternal: function(internalInstance, callback) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof callback === 'function',
	      'enqueueCallback(...): You called `setProps`, `replaceProps`, ' +
	      '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +
	      'isn\'t callable.'
	    ) : invariant(typeof callback === 'function'));
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldUpdateComponent`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function(publicInstance) {
	    var internalInstance = getInternalInstanceReadyForUpdate(
	      publicInstance,
	      'forceUpdate'
	    );

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingForceUpdate = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function(publicInstance, completeState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(
	      publicInstance,
	      'replaceState'
	    );

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingStateQueue = [completeState];
	    internalInstance._pendingReplaceState = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function(publicInstance, partialState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(
	      publicInstance,
	      'setState'
	    );

	    if (!internalInstance) {
	      return;
	    }

	    var queue =
	      internalInstance._pendingStateQueue ||
	      (internalInstance._pendingStateQueue = []);
	    queue.push(partialState);

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialProps Subset of the next props.
	   * @internal
	   */
	  enqueueSetProps: function(publicInstance, partialProps) {
	    var internalInstance = getInternalInstanceReadyForUpdate(
	      publicInstance,
	      'setProps'
	    );

	    if (!internalInstance) {
	      return;
	    }

	    ("production" !== process.env.NODE_ENV ? invariant(
	      internalInstance._isTopLevel,
	      'setProps(...): You called `setProps` on a ' +
	      'component with a parent. This is an anti-pattern since props will ' +
	      'get reactively updated when rendered. Instead, change the owner\'s ' +
	      '`render` method to pass the correct value as props to the component ' +
	      'where it is created.'
	    ) : invariant(internalInstance._isTopLevel));

	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var element = internalInstance._pendingElement ||
	                  internalInstance._currentElement;
	    var props = assign({}, element.props, partialProps);
	    internalInstance._pendingElement = ReactElement.cloneAndReplaceProps(
	      element,
	      props
	    );

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Replaces all of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} props New props.
	   * @internal
	   */
	  enqueueReplaceProps: function(publicInstance, props) {
	    var internalInstance = getInternalInstanceReadyForUpdate(
	      publicInstance,
	      'replaceProps'
	    );

	    if (!internalInstance) {
	      return;
	    }

	    ("production" !== process.env.NODE_ENV ? invariant(
	      internalInstance._isTopLevel,
	      'replaceProps(...): You called `replaceProps` on a ' +
	      'component with a parent. This is an anti-pattern since props will ' +
	      'get reactively updated when rendered. Instead, change the owner\'s ' +
	      '`render` method to pass the correct value as props to the component ' +
	      'where it is created.'
	    ) : invariant(internalInstance._isTopLevel));

	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var element = internalInstance._pendingElement ||
	                  internalInstance._currentElement;
	    internalInstance._pendingElement = ReactElement.cloneAndReplaceProps(
	      element,
	      props
	    );

	    enqueueUpdate(internalInstance);
	  },

	  enqueueElementInternal: function(internalInstance, newElement) {
	    internalInstance._pendingElement = newElement;
	    enqueueUpdate(internalInstance);
	  }

	};

	module.exports = ReactUpdateQueue;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdates
	 */

	'use strict';

	var CallbackQueue = __webpack_require__(25);
	var PooledClass = __webpack_require__(9);
	var ReactCurrentOwner = __webpack_require__(17);
	var ReactPerf = __webpack_require__(26);
	var ReactReconciler = __webpack_require__(27);
	var Transaction = __webpack_require__(34);

	var assign = __webpack_require__(13);
	var invariant = __webpack_require__(7);
	var warning = __webpack_require__(15);

	var dirtyComponents = [];
	var asapCallbackQueue = CallbackQueue.getPooled();
	var asapEnqueued = false;

	var batchingStrategy = null;

	function ensureInjected() {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactUpdates.ReactReconcileTransaction && batchingStrategy,
	    'ReactUpdates: must inject a reconcile transaction class and batching ' +
	    'strategy'
	  ) : invariant(ReactUpdates.ReactReconcileTransaction && batchingStrategy));
	}

	var NESTED_UPDATES = {
	  initialize: function() {
	    this.dirtyComponentsLength = dirtyComponents.length;
	  },
	  close: function() {
	    if (this.dirtyComponentsLength !== dirtyComponents.length) {
	      // Additional updates were enqueued by componentDidUpdate handlers or
	      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
	      // these new updates so that if A's componentDidUpdate calls setState on
	      // B, B will update before the callback A's updater provided when calling
	      // setState.
	      dirtyComponents.splice(0, this.dirtyComponentsLength);
	      flushBatchedUpdates();
	    } else {
	      dirtyComponents.length = 0;
	    }
	  }
	};

	var UPDATE_QUEUEING = {
	  initialize: function() {
	    this.callbackQueue.reset();
	  },
	  close: function() {
	    this.callbackQueue.notifyAll();
	  }
	};

	var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

	function ReactUpdatesFlushTransaction() {
	  this.reinitializeTransaction();
	  this.dirtyComponentsLength = null;
	  this.callbackQueue = CallbackQueue.getPooled();
	  this.reconcileTransaction =
	    ReactUpdates.ReactReconcileTransaction.getPooled();
	}

	assign(
	  ReactUpdatesFlushTransaction.prototype,
	  Transaction.Mixin, {
	  getTransactionWrappers: function() {
	    return TRANSACTION_WRAPPERS;
	  },

	  destructor: function() {
	    this.dirtyComponentsLength = null;
	    CallbackQueue.release(this.callbackQueue);
	    this.callbackQueue = null;
	    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
	    this.reconcileTransaction = null;
	  },

	  perform: function(method, scope, a) {
	    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
	    // with this transaction's wrappers around it.
	    return Transaction.Mixin.perform.call(
	      this,
	      this.reconcileTransaction.perform,
	      this.reconcileTransaction,
	      method,
	      scope,
	      a
	    );
	  }
	});

	PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

	function batchedUpdates(callback, a, b, c, d) {
	  ensureInjected();
	  batchingStrategy.batchedUpdates(callback, a, b, c, d);
	}

	/**
	 * Array comparator for ReactComponents by mount ordering.
	 *
	 * @param {ReactComponent} c1 first component you're comparing
	 * @param {ReactComponent} c2 second component you're comparing
	 * @return {number} Return value usable by Array.prototype.sort().
	 */
	function mountOrderComparator(c1, c2) {
	  return c1._mountOrder - c2._mountOrder;
	}

	function runBatchedUpdates(transaction) {
	  var len = transaction.dirtyComponentsLength;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    len === dirtyComponents.length,
	    'Expected flush transaction\'s stored dirty-components length (%s) to ' +
	    'match dirty-components array length (%s).',
	    len,
	    dirtyComponents.length
	  ) : invariant(len === dirtyComponents.length));

	  // Since reconciling a component higher in the owner hierarchy usually (not
	  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
	  // them before their children by sorting the array.
	  dirtyComponents.sort(mountOrderComparator);

	  for (var i = 0; i < len; i++) {
	    // If a component is unmounted before pending changes apply, it will still
	    // be here, but we assume that it has cleared its _pendingCallbacks and
	    // that performUpdateIfNecessary is a noop.
	    var component = dirtyComponents[i];

	    // If performUpdateIfNecessary happens to enqueue any new updates, we
	    // shouldn't execute the callbacks until the next render happens, so
	    // stash the callbacks first
	    var callbacks = component._pendingCallbacks;
	    component._pendingCallbacks = null;

	    ReactReconciler.performUpdateIfNecessary(
	      component,
	      transaction.reconcileTransaction
	    );

	    if (callbacks) {
	      for (var j = 0; j < callbacks.length; j++) {
	        transaction.callbackQueue.enqueue(
	          callbacks[j],
	          component.getPublicInstance()
	        );
	      }
	    }
	  }
	}

	var flushBatchedUpdates = function() {
	  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
	  // array and perform any updates enqueued by mount-ready handlers (i.e.,
	  // componentDidUpdate) but we need to check here too in order to catch
	  // updates enqueued by setState callbacks and asap calls.
	  while (dirtyComponents.length || asapEnqueued) {
	    if (dirtyComponents.length) {
	      var transaction = ReactUpdatesFlushTransaction.getPooled();
	      transaction.perform(runBatchedUpdates, null, transaction);
	      ReactUpdatesFlushTransaction.release(transaction);
	    }

	    if (asapEnqueued) {
	      asapEnqueued = false;
	      var queue = asapCallbackQueue;
	      asapCallbackQueue = CallbackQueue.getPooled();
	      queue.notifyAll();
	      CallbackQueue.release(queue);
	    }
	  }
	};
	flushBatchedUpdates = ReactPerf.measure(
	  'ReactUpdates',
	  'flushBatchedUpdates',
	  flushBatchedUpdates
	);

	/**
	 * Mark a component as needing a rerender, adding an optional callback to a
	 * list of functions which will be executed once the rerender occurs.
	 */
	function enqueueUpdate(component) {
	  ensureInjected();

	  // Various parts of our code (such as ReactCompositeComponent's
	  // _renderValidatedComponent) assume that calls to render aren't nested;
	  // verify that that's the case. (This is called by each top-level update
	  // function, like setProps, setState, forceUpdate, etc.; creation and
	  // destruction of top-level components is guarded in ReactMount.)
	  ("production" !== process.env.NODE_ENV ? warning(
	    ReactCurrentOwner.current == null,
	    'enqueueUpdate(): Render methods should be a pure function of props ' +
	    'and state; triggering nested component updates from render is not ' +
	    'allowed. If necessary, trigger nested updates in ' +
	    'componentDidUpdate.'
	  ) : null);

	  if (!batchingStrategy.isBatchingUpdates) {
	    batchingStrategy.batchedUpdates(enqueueUpdate, component);
	    return;
	  }

	  dirtyComponents.push(component);
	}

	/**
	 * Enqueue a callback to be run at the end of the current batching cycle. Throws
	 * if no updates are currently being performed.
	 */
	function asap(callback, context) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    batchingStrategy.isBatchingUpdates,
	    'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' +
	    'updates are not being batched.'
	  ) : invariant(batchingStrategy.isBatchingUpdates));
	  asapCallbackQueue.enqueue(callback, context);
	  asapEnqueued = true;
	}

	var ReactUpdatesInjection = {
	  injectReconcileTransaction: function(ReconcileTransaction) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ReconcileTransaction,
	      'ReactUpdates: must provide a reconcile transaction class'
	    ) : invariant(ReconcileTransaction));
	    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
	  },

	  injectBatchingStrategy: function(_batchingStrategy) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      _batchingStrategy,
	      'ReactUpdates: must provide a batching strategy'
	    ) : invariant(_batchingStrategy));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof _batchingStrategy.batchedUpdates === 'function',
	      'ReactUpdates: must provide a batchedUpdates() function'
	    ) : invariant(typeof _batchingStrategy.batchedUpdates === 'function'));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof _batchingStrategy.isBatchingUpdates === 'boolean',
	      'ReactUpdates: must provide an isBatchingUpdates boolean attribute'
	    ) : invariant(typeof _batchingStrategy.isBatchingUpdates === 'boolean'));
	    batchingStrategy = _batchingStrategy;
	  }
	};

	var ReactUpdates = {
	  /**
	   * React references `ReactReconcileTransaction` using this property in order
	   * to allow dependency injection.
	   *
	   * @internal
	   */
	  ReactReconcileTransaction: null,

	  batchedUpdates: batchedUpdates,
	  enqueueUpdate: enqueueUpdate,
	  flushBatchedUpdates: flushBatchedUpdates,
	  injection: ReactUpdatesInjection,
	  asap: asap
	};

	module.exports = ReactUpdates;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CallbackQueue
	 */

	'use strict';

	var PooledClass = __webpack_require__(9);

	var assign = __webpack_require__(13);
	var invariant = __webpack_require__(7);

	/**
	 * A specialized pseudo-event module to help keep track of components waiting to
	 * be notified when their DOM representations are available for use.
	 *
	 * This implements `PooledClass`, so you should never need to instantiate this.
	 * Instead, use `CallbackQueue.getPooled()`.
	 *
	 * @class ReactMountReady
	 * @implements PooledClass
	 * @internal
	 */
	function CallbackQueue() {
	  this._callbacks = null;
	  this._contexts = null;
	}

	assign(CallbackQueue.prototype, {

	  /**
	   * Enqueues a callback to be invoked when `notifyAll` is invoked.
	   *
	   * @param {function} callback Invoked when `notifyAll` is invoked.
	   * @param {?object} context Context to call `callback` with.
	   * @internal
	   */
	  enqueue: function(callback, context) {
	    this._callbacks = this._callbacks || [];
	    this._contexts = this._contexts || [];
	    this._callbacks.push(callback);
	    this._contexts.push(context);
	  },

	  /**
	   * Invokes all enqueued callbacks and clears the queue. This is invoked after
	   * the DOM representation of a component has been created or updated.
	   *
	   * @internal
	   */
	  notifyAll: function() {
	    var callbacks = this._callbacks;
	    var contexts = this._contexts;
	    if (callbacks) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        callbacks.length === contexts.length,
	        'Mismatched list of contexts in callback queue'
	      ) : invariant(callbacks.length === contexts.length));
	      this._callbacks = null;
	      this._contexts = null;
	      for (var i = 0, l = callbacks.length; i < l; i++) {
	        callbacks[i].call(contexts[i]);
	      }
	      callbacks.length = 0;
	      contexts.length = 0;
	    }
	  },

	  /**
	   * Resets the internal queue.
	   *
	   * @internal
	   */
	  reset: function() {
	    this._callbacks = null;
	    this._contexts = null;
	  },

	  /**
	   * `PooledClass` looks for this.
	   */
	  destructor: function() {
	    this.reset();
	  }

	});

	PooledClass.addPoolingTo(CallbackQueue);

	module.exports = CallbackQueue;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPerf
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * ReactPerf is a general AOP system designed to measure performance. This
	 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
	 */
	var ReactPerf = {
	  /**
	   * Boolean to enable/disable measurement. Set to false by default to prevent
	   * accidental logging and perf loss.
	   */
	  enableMeasure: false,

	  /**
	   * Holds onto the measure function in use. By default, don't measure
	   * anything, but we'll override this if we inject a measure function.
	   */
	  storedMeasure: _noMeasure,

	  /**
	   * @param {object} object
	   * @param {string} objectName
	   * @param {object<string>} methodNames
	   */
	  measureMethods: function(object, objectName, methodNames) {
	    if ("production" !== process.env.NODE_ENV) {
	      for (var key in methodNames) {
	        if (!methodNames.hasOwnProperty(key)) {
	          continue;
	        }
	        object[key] = ReactPerf.measure(
	          objectName,
	          methodNames[key],
	          object[key]
	        );
	      }
	    }
	  },

	  /**
	   * Use this to wrap methods you want to measure. Zero overhead in production.
	   *
	   * @param {string} objName
	   * @param {string} fnName
	   * @param {function} func
	   * @return {function}
	   */
	  measure: function(objName, fnName, func) {
	    if ("production" !== process.env.NODE_ENV) {
	      var measuredFunc = null;
	      var wrapper = function() {
	        if (ReactPerf.enableMeasure) {
	          if (!measuredFunc) {
	            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
	          }
	          return measuredFunc.apply(this, arguments);
	        }
	        return func.apply(this, arguments);
	      };
	      wrapper.displayName = objName + '_' + fnName;
	      return wrapper;
	    }
	    return func;
	  },

	  injection: {
	    /**
	     * @param {function} measure
	     */
	    injectMeasure: function(measure) {
	      ReactPerf.storedMeasure = measure;
	    }
	  }
	};

	/**
	 * Simply passes through the measured function, without measuring it.
	 *
	 * @param {string} objName
	 * @param {string} fnName
	 * @param {function} func
	 * @return {function}
	 */
	function _noMeasure(objName, fnName, func) {
	  return func;
	}

	module.exports = ReactPerf;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconciler
	 */

	'use strict';

	var ReactRef = __webpack_require__(28);
	var ReactElementValidator = __webpack_require__(30);

	/**
	 * Helper to call ReactRef.attachRefs with this composite component, split out
	 * to avoid allocations in the transaction mount-ready queue.
	 */
	function attachRefs() {
	  ReactRef.attachRefs(this, this._currentElement);
	}

	var ReactReconciler = {

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function(internalInstance, rootID, transaction, context) {
	    var markup = internalInstance.mountComponent(rootID, transaction, context);
	    if ("production" !== process.env.NODE_ENV) {
	      ReactElementValidator.checkAndWarnForMutatedProps(
	        internalInstance._currentElement
	      );
	    }
	    transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    return markup;
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function(internalInstance) {
	    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
	    internalInstance.unmountComponent();
	  },

	  /**
	   * Update a component using a new element.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @internal
	   */
	  receiveComponent: function(
	    internalInstance, nextElement, transaction, context
	  ) {
	    var prevElement = internalInstance._currentElement;

	    if (nextElement === prevElement && nextElement._owner != null) {
	      // Since elements are immutable after the owner is rendered,
	      // we can do a cheap identity compare here to determine if this is a
	      // superfluous reconcile. It's possible for state to be mutable but such
	      // change should trigger an update of the owner which would recreate
	      // the element. We explicitly check for the existence of an owner since
	      // it's possible for an element created outside a composite to be
	      // deeply mutated and reused.
	      return;
	    }

	    if ("production" !== process.env.NODE_ENV) {
	      ReactElementValidator.checkAndWarnForMutatedProps(nextElement);
	    }

	    var refsChanged = ReactRef.shouldUpdateRefs(
	      prevElement,
	      nextElement
	    );

	    if (refsChanged) {
	      ReactRef.detachRefs(internalInstance, prevElement);
	    }

	    internalInstance.receiveComponent(nextElement, transaction, context);

	    if (refsChanged) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	  },

	  /**
	   * Flush any dirty changes in a component.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function(
	    internalInstance,
	    transaction
	  ) {
	    internalInstance.performUpdateIfNecessary(transaction);
	  }

	};

	module.exports = ReactReconciler;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRef
	 */

	'use strict';

	var ReactOwner = __webpack_require__(29);

	var ReactRef = {};

	function attachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(component.getPublicInstance());
	  } else {
	    // Legacy ref
	    ReactOwner.addComponentAsRefTo(component, ref, owner);
	  }
	}

	function detachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(null);
	  } else {
	    // Legacy ref
	    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
	  }
	}

	ReactRef.attachRefs = function(instance, element) {
	  var ref = element.ref;
	  if (ref != null) {
	    attachRef(ref, instance, element._owner);
	  }
	};

	ReactRef.shouldUpdateRefs = function(prevElement, nextElement) {
	  // If either the owner or a `ref` has changed, make sure the newest owner
	  // has stored a reference to `this`, and the previous owner (if different)
	  // has forgotten the reference to `this`. We use the element instead
	  // of the public this.props because the post processing cannot determine
	  // a ref. The ref conceptually lives on the element.

	  // TODO: Should this even be possible? The owner cannot change because
	  // it's forbidden by shouldUpdateReactComponent. The ref can change
	  // if you swap the keys of but not the refs. Reconsider where this check
	  // is made. It probably belongs where the key checking and
	  // instantiateReactComponent is done.

	  return (
	    nextElement._owner !== prevElement._owner ||
	    nextElement.ref !== prevElement.ref
	  );
	};

	ReactRef.detachRefs = function(instance, element) {
	  var ref = element.ref;
	  if (ref != null) {
	    detachRef(ref, instance, element._owner);
	  }
	};

	module.exports = ReactRef;


/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactOwner
	 */

	'use strict';

	var invariant = __webpack_require__(7);

	/**
	 * ReactOwners are capable of storing references to owned components.
	 *
	 * All components are capable of //being// referenced by owner components, but
	 * only ReactOwner components are capable of //referencing// owned components.
	 * The named reference is known as a "ref".
	 *
	 * Refs are available when mounted and updated during reconciliation.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return (
	 *         <div onClick={this.handleClick}>
	 *           <CustomComponent ref="custom" />
	 *         </div>
	 *       );
	 *     },
	 *     handleClick: function() {
	 *       this.refs.custom.handleClick();
	 *     },
	 *     componentDidMount: function() {
	 *       this.refs.custom.initialize();
	 *     }
	 *   });
	 *
	 * Refs should rarely be used. When refs are used, they should only be done to
	 * control data that is not handled by React's data flow.
	 *
	 * @class ReactOwner
	 */
	var ReactOwner = {

	  /**
	   * @param {?object} object
	   * @return {boolean} True if `object` is a valid owner.
	   * @final
	   */
	  isValidOwner: function(object) {
	    return !!(
	      (object &&
	      typeof object.attachRef === 'function' && typeof object.detachRef === 'function')
	    );
	  },

	  /**
	   * Adds a component by ref to an owner component.
	   *
	   * @param {ReactComponent} component Component to reference.
	   * @param {string} ref Name by which to refer to the component.
	   * @param {ReactOwner} owner Component on which to record the ref.
	   * @final
	   * @internal
	   */
	  addComponentAsRefTo: function(component, ref, owner) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ReactOwner.isValidOwner(owner),
	      'addComponentAsRefTo(...): Only a ReactOwner can have refs. This ' +
	      'usually means that you\'re trying to add a ref to a component that ' +
	      'doesn\'t have an owner (that is, was not created inside of another ' +
	      'component\'s `render` method). Try rendering this component inside of ' +
	      'a new top-level component which will hold the ref.'
	    ) : invariant(ReactOwner.isValidOwner(owner)));
	    owner.attachRef(ref, component);
	  },

	  /**
	   * Removes a component by ref from an owner component.
	   *
	   * @param {ReactComponent} component Component to dereference.
	   * @param {string} ref Name of the ref to remove.
	   * @param {ReactOwner} owner Component on which the ref is recorded.
	   * @final
	   * @internal
	   */
	  removeComponentAsRefFrom: function(component, ref, owner) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ReactOwner.isValidOwner(owner),
	      'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. This ' +
	      'usually means that you\'re trying to remove a ref to a component that ' +
	      'doesn\'t have an owner (that is, was not created inside of another ' +
	      'component\'s `render` method). Try rendering this component inside of ' +
	      'a new top-level component which will hold the ref.'
	    ) : invariant(ReactOwner.isValidOwner(owner)));
	    // Check that `component` is still the current ref because we do not want to
	    // detach the ref if another component stole it.
	    if (owner.getPublicInstance().refs[ref] === component.getPublicInstance()) {
	      owner.detachRef(ref);
	    }
	  }

	};

	module.exports = ReactOwner;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElementValidator
	 */

	/**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */

	'use strict';

	var ReactElement = __webpack_require__(11);
	var ReactFragment = __webpack_require__(10);
	var ReactPropTypeLocations = __webpack_require__(31);
	var ReactPropTypeLocationNames = __webpack_require__(32);
	var ReactCurrentOwner = __webpack_require__(17);
	var ReactNativeComponent = __webpack_require__(33);

	var getIteratorFn = __webpack_require__(19);
	var invariant = __webpack_require__(7);
	var warning = __webpack_require__(15);

	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = ReactCurrentOwner.current.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
	var ownerHasKeyUseWarning = {};

	var loggedTypeFailures = {};

	var NUMERIC_PROPERTY_REGEX = /^\d+$/;

	/**
	 * Gets the instance's name for use in warnings.
	 *
	 * @internal
	 * @return {?string} Display name or undefined
	 */
	function getName(instance) {
	  var publicInstance = instance && instance.getPublicInstance();
	  if (!publicInstance) {
	    return undefined;
	  }
	  var constructor = publicInstance.constructor;
	  if (!constructor) {
	    return undefined;
	  }
	  return constructor.displayName || constructor.name || undefined;
	}

	/**
	 * Gets the current owner's displayName for use in warnings.
	 *
	 * @internal
	 * @return {?string} Display name or undefined
	 */
	function getCurrentOwnerDisplayName() {
	  var current = ReactCurrentOwner.current;
	  return (
	    current && getName(current) || undefined
	  );
	}

	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validateExplicitKey(element, parentType) {
	  if (element._store.validated || element.key != null) {
	    return;
	  }
	  element._store.validated = true;

	  warnAndMonitorForKeyUse(
	    'Each child in an array or iterator should have a unique "key" prop.',
	    element,
	    parentType
	  );
	}

	/**
	 * Warn if the key is being defined as an object property but has an incorrect
	 * value.
	 *
	 * @internal
	 * @param {string} name Property name of the key.
	 * @param {ReactElement} element Component that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validatePropertyKey(name, element, parentType) {
	  if (!NUMERIC_PROPERTY_REGEX.test(name)) {
	    return;
	  }
	  warnAndMonitorForKeyUse(
	    'Child objects should have non-numeric keys so ordering is preserved.',
	    element,
	    parentType
	  );
	}

	/**
	 * Shared warning and monitoring code for the key warnings.
	 *
	 * @internal
	 * @param {string} message The base warning that gets output.
	 * @param {ReactElement} element Component that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function warnAndMonitorForKeyUse(message, element, parentType) {
	  var ownerName = getCurrentOwnerDisplayName();
	  var parentName = typeof parentType === 'string' ?
	    parentType : parentType.displayName || parentType.name;

	  var useName = ownerName || parentName;
	  var memoizer = ownerHasKeyUseWarning[message] || (
	    (ownerHasKeyUseWarning[message] = {})
	  );
	  if (memoizer.hasOwnProperty(useName)) {
	    return;
	  }
	  memoizer[useName] = true;

	  var parentOrOwnerAddendum =
	    ownerName ? (" Check the render method of " + ownerName + ".") :
	    parentName ? (" Check the React.render call using <" + parentName + ">.") :
	    '';

	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  var childOwnerAddendum = '';
	  if (element &&
	      element._owner &&
	      element._owner !== ReactCurrentOwner.current) {
	    // Name of the component that originally created this child.
	    var childOwnerName = getName(element._owner);

	    childOwnerAddendum = (" It was passed a child from " + childOwnerName + ".");
	  }

	  ("production" !== process.env.NODE_ENV ? warning(
	    false,
	    message + '%s%s See https://fb.me/react-warning-keys for more information.',
	    parentOrOwnerAddendum,
	    childOwnerAddendum
	  ) : null);
	}

	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */
	function validateChildKeys(node, parentType) {
	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];
	      if (ReactElement.isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (ReactElement.isValidElement(node)) {
	    // This element was passed in a valid location.
	    node._store.validated = true;
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);
	    // Entry iterators provide implicit keys.
	    if (iteratorFn) {
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (ReactElement.isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    } else if (typeof node === 'object') {
	      var fragment = ReactFragment.extractIfFragment(node);
	      for (var key in fragment) {
	        if (fragment.hasOwnProperty(key)) {
	          validatePropertyKey(key, fragment[key], parentType);
	        }
	      }
	    }
	  }
	}

	/**
	 * Assert that the props are valid
	 *
	 * @param {string} componentName Name of the component for error messages.
	 * @param {object} propTypes Map of prop name to a ReactPropType
	 * @param {object} props
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @private
	 */
	function checkPropTypes(componentName, propTypes, props, location) {
	  for (var propName in propTypes) {
	    if (propTypes.hasOwnProperty(propName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        ("production" !== process.env.NODE_ENV ? invariant(
	          typeof propTypes[propName] === 'function',
	          '%s: %s type `%s` is invalid; it must be a function, usually from ' +
	          'React.PropTypes.',
	          componentName || 'React class',
	          ReactPropTypeLocationNames[location],
	          propName
	        ) : invariant(typeof propTypes[propName] === 'function'));
	        error = propTypes[propName](props, propName, componentName, location);
	      } catch (ex) {
	        error = ex;
	      }
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var addendum = getDeclarationErrorAddendum(this);
	        ("production" !== process.env.NODE_ENV ? warning(false, 'Failed propType: %s%s', error.message, addendum) : null);
	      }
	    }
	  }
	}

	var warnedPropsMutations = {};

	/**
	 * Warn about mutating props when setting `propName` on `element`.
	 *
	 * @param {string} propName The string key within props that was set
	 * @param {ReactElement} element
	 */
	function warnForPropsMutation(propName, element) {
	  var type = element.type;
	  var elementName = typeof type === 'string' ? type : type.displayName;
	  var ownerName = element._owner ?
	    element._owner.getPublicInstance().constructor.displayName : null;

	  var warningKey = propName + '|' + elementName + '|' + ownerName;
	  if (warnedPropsMutations.hasOwnProperty(warningKey)) {
	    return;
	  }
	  warnedPropsMutations[warningKey] = true;

	  var elementInfo = '';
	  if (elementName) {
	    elementInfo = ' <' + elementName + ' />';
	  }
	  var ownerInfo = '';
	  if (ownerName) {
	    ownerInfo = ' The element was created by ' + ownerName + '.';
	  }

	  ("production" !== process.env.NODE_ENV ? warning(
	    false,
	    'Don\'t set .props.%s of the React component%s. Instead, specify the ' +
	    'correct value when initially creating the element or use ' +
	    'React.cloneElement to make a new element with updated props.%s',
	    propName,
	    elementInfo,
	    ownerInfo
	  ) : null);
	}

	// Inline Object.is polyfill
	function is(a, b) {
	  if (a !== a) {
	    // NaN
	    return b !== b;
	  }
	  if (a === 0 && b === 0) {
	    // +-0
	    return 1 / a === 1 / b;
	  }
	  return a === b;
	}

	/**
	 * Given an element, check if its props have been mutated since element
	 * creation (or the last call to this function). In particular, check if any
	 * new props have been added, which we can't directly catch by defining warning
	 * properties on the props object.
	 *
	 * @param {ReactElement} element
	 */
	function checkAndWarnForMutatedProps(element) {
	  if (!element._store) {
	    // Element was created using `new ReactElement` directly or with
	    // `ReactElement.createElement`; skip mutation checking
	    return;
	  }

	  var originalProps = element._store.originalProps;
	  var props = element.props;

	  for (var propName in props) {
	    if (props.hasOwnProperty(propName)) {
	      if (!originalProps.hasOwnProperty(propName) ||
	          !is(originalProps[propName], props[propName])) {
	        warnForPropsMutation(propName, element);

	        // Copy over the new value so that the two props objects match again
	        originalProps[propName] = props[propName];
	      }
	    }
	  }
	}

	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */
	function validatePropTypes(element) {
	  if (element.type == null) {
	    // This has already warned. Don't throw.
	    return;
	  }
	  // Extract the component class from the element. Converts string types
	  // to a composite class which may have propTypes.
	  // TODO: Validating a string's propTypes is not decoupled from the
	  // rendering target which is problematic.
	  var componentClass = ReactNativeComponent.getComponentClassForElement(
	    element
	  );
	  var name = componentClass.displayName || componentClass.name;
	  if (componentClass.propTypes) {
	    checkPropTypes(
	      name,
	      componentClass.propTypes,
	      element.props,
	      ReactPropTypeLocations.prop
	    );
	  }
	  if (typeof componentClass.getDefaultProps === 'function') {
	    ("production" !== process.env.NODE_ENV ? warning(
	      componentClass.getDefaultProps.isReactClassApproved,
	      'getDefaultProps is only used on classic React.createClass ' +
	      'definitions. Use a static property named `defaultProps` instead.'
	    ) : null);
	  }
	}

	var ReactElementValidator = {

	  checkAndWarnForMutatedProps: checkAndWarnForMutatedProps,

	  createElement: function(type, props, children) {
	    // We warn in this case but don't throw. We expect the element creation to
	    // succeed and there will likely be errors in render.
	    ("production" !== process.env.NODE_ENV ? warning(
	      type != null,
	      'React.createElement: type should not be null or undefined. It should ' +
	        'be a string (for DOM elements) or a ReactClass (for composite ' +
	        'components).'
	    ) : null);

	    var element = ReactElement.createElement.apply(this, arguments);

	    // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.
	    if (element == null) {
	      return element;
	    }

	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], type);
	    }

	    validatePropTypes(element);

	    return element;
	  },

	  createFactory: function(type) {
	    var validatedFactory = ReactElementValidator.createElement.bind(
	      null,
	      type
	    );
	    // Legacy hook TODO: Warn if this is accessed
	    validatedFactory.type = type;

	    if ("production" !== process.env.NODE_ENV) {
	      try {
	        Object.defineProperty(
	          validatedFactory,
	          'type',
	          {
	            enumerable: false,
	            get: function() {
	              ("production" !== process.env.NODE_ENV ? warning(
	                false,
	                'Factory.type is deprecated. Access the class directly ' +
	                'before passing it to createFactory.'
	              ) : null);
	              Object.defineProperty(this, 'type', {
	                value: type
	              });
	              return type;
	            }
	          }
	        );
	      } catch (x) {
	        // IE will fail on defineProperty (es5-shim/sham too)
	      }
	    }


	    return validatedFactory;
	  },

	  cloneElement: function(element, props, children) {
	    var newElement = ReactElement.cloneElement.apply(this, arguments);
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], newElement.type);
	    }
	    validatePropTypes(newElement);
	    return newElement;
	  }

	};

	module.exports = ReactElementValidator;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocations
	 */

	'use strict';

	var keyMirror = __webpack_require__(6);

	var ReactPropTypeLocations = keyMirror({
	  prop: null,
	  context: null,
	  childContext: null
	});

	module.exports = ReactPropTypeLocations;


/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocationNames
	 */

	'use strict';

	var ReactPropTypeLocationNames = {};

	if ("production" !== process.env.NODE_ENV) {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}

	module.exports = ReactPropTypeLocationNames;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNativeComponent
	 */

	'use strict';

	var assign = __webpack_require__(13);
	var invariant = __webpack_require__(7);

	var autoGenerateWrapperClass = null;
	var genericComponentClass = null;
	// This registry keeps track of wrapper classes around native tags
	var tagToComponentClass = {};
	var textComponentClass = null;

	var ReactNativeComponentInjection = {
	  // This accepts a class that receives the tag string. This is a catch all
	  // that can render any kind of tag.
	  injectGenericComponentClass: function(componentClass) {
	    genericComponentClass = componentClass;
	  },
	  // This accepts a text component class that takes the text string to be
	  // rendered as props.
	  injectTextComponentClass: function(componentClass) {
	    textComponentClass = componentClass;
	  },
	  // This accepts a keyed object with classes as values. Each key represents a
	  // tag. That particular tag will use this class instead of the generic one.
	  injectComponentClasses: function(componentClasses) {
	    assign(tagToComponentClass, componentClasses);
	  },
	  // Temporary hack since we expect DOM refs to behave like composites,
	  // for this release.
	  injectAutoWrapper: function(wrapperFactory) {
	    autoGenerateWrapperClass = wrapperFactory;
	  }
	};

	/**
	 * Get a composite component wrapper class for a specific tag.
	 *
	 * @param {ReactElement} element The tag for which to get the class.
	 * @return {function} The React class constructor function.
	 */
	function getComponentClassForElement(element) {
	  if (typeof element.type === 'function') {
	    return element.type;
	  }
	  var tag = element.type;
	  var componentClass = tagToComponentClass[tag];
	  if (componentClass == null) {
	    tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);
	  }
	  return componentClass;
	}

	/**
	 * Get a native internal component class for a specific tag.
	 *
	 * @param {ReactElement} element The element to create.
	 * @return {function} The internal class constructor function.
	 */
	function createInternalComponent(element) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    genericComponentClass,
	    'There is no registered component for the tag %s',
	    element.type
	  ) : invariant(genericComponentClass));
	  return new genericComponentClass(element.type, element.props);
	}

	/**
	 * @param {ReactText} text
	 * @return {ReactComponent}
	 */
	function createInstanceForText(text) {
	  return new textComponentClass(text);
	}

	/**
	 * @param {ReactComponent} component
	 * @return {boolean}
	 */
	function isTextComponent(component) {
	  return component instanceof textComponentClass;
	}

	var ReactNativeComponent = {
	  getComponentClassForElement: getComponentClassForElement,
	  createInternalComponent: createInternalComponent,
	  createInstanceForText: createInstanceForText,
	  isTextComponent: isTextComponent,
	  injection: ReactNativeComponentInjection
	};

	module.exports = ReactNativeComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Transaction
	 */

	'use strict';

	var invariant = __webpack_require__(7);

	/**
	 * `Transaction` creates a black box that is able to wrap any method such that
	 * certain invariants are maintained before and after the method is invoked
	 * (Even if an exception is thrown while invoking the wrapped method). Whoever
	 * instantiates a transaction can provide enforcers of the invariants at
	 * creation time. The `Transaction` class itself will supply one additional
	 * automatic invariant for you - the invariant that any transaction instance
	 * should not be run while it is already being run. You would typically create a
	 * single instance of a `Transaction` for reuse multiple times, that potentially
	 * is used to wrap several different methods. Wrappers are extremely simple -
	 * they only require implementing two methods.
	 *
	 * <pre>
	 *                       wrappers (injected at creation time)
	 *                                      +        +
	 *                                      |        |
	 *                    +-----------------|--------|--------------+
	 *                    |                 v        |              |
	 *                    |      +---------------+   |              |
	 *                    |   +--|    wrapper1   |---|----+         |
	 *                    |   |  +---------------+   v    |         |
	 *                    |   |          +-------------+  |         |
	 *                    |   |     +----|   wrapper2  |--------+   |
	 *                    |   |     |    +-------------+  |     |   |
	 *                    |   |     |                     |     |   |
	 *                    |   v     v                     v     v   | wrapper
	 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
	 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
	 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | +---+ +---+   +---------+   +---+ +---+ |
	 *                    |  initialize                    close    |
	 *                    +-----------------------------------------+
	 * </pre>
	 *
	 * Use cases:
	 * - Preserving the input selection ranges before/after reconciliation.
	 *   Restoring selection even in the event of an unexpected error.
	 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
	 *   while guaranteeing that afterwards, the event system is reactivated.
	 * - Flushing a queue of collected DOM mutations to the main UI thread after a
	 *   reconciliation takes place in a worker thread.
	 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
	 *   content.
	 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
	 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
	 * - (Future use case): Layout calculations before and after DOM updates.
	 *
	 * Transactional plugin API:
	 * - A module that has an `initialize` method that returns any precomputation.
	 * - and a `close` method that accepts the precomputation. `close` is invoked
	 *   when the wrapped process is completed, or has failed.
	 *
	 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
	 * that implement `initialize` and `close`.
	 * @return {Transaction} Single transaction for reuse in thread.
	 *
	 * @class Transaction
	 */
	var Mixin = {
	  /**
	   * Sets up this instance so that it is prepared for collecting metrics. Does
	   * so such that this setup method may be used on an instance that is already
	   * initialized, in a way that does not consume additional memory upon reuse.
	   * That can be useful if you decide to make your subclass of this mixin a
	   * "PooledClass".
	   */
	  reinitializeTransaction: function() {
	    this.transactionWrappers = this.getTransactionWrappers();
	    if (!this.wrapperInitData) {
	      this.wrapperInitData = [];
	    } else {
	      this.wrapperInitData.length = 0;
	    }
	    this._isInTransaction = false;
	  },

	  _isInTransaction: false,

	  /**
	   * @abstract
	   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
	   */
	  getTransactionWrappers: null,

	  isInTransaction: function() {
	    return !!this._isInTransaction;
	  },

	  /**
	   * Executes the function within a safety window. Use this for the top level
	   * methods that result in large amounts of computation/mutations that would
	   * need to be safety checked.
	   *
	   * @param {function} method Member of scope to call.
	   * @param {Object} scope Scope to invoke from.
	   * @param {Object?=} args... Arguments to pass to the method (optional).
	   *                           Helps prevent need to bind in many cases.
	   * @return Return value from `method`.
	   */
	  perform: function(method, scope, a, b, c, d, e, f) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !this.isInTransaction(),
	      'Transaction.perform(...): Cannot initialize a transaction when there ' +
	      'is already an outstanding transaction.'
	    ) : invariant(!this.isInTransaction()));
	    var errorThrown;
	    var ret;
	    try {
	      this._isInTransaction = true;
	      // Catching errors makes debugging more difficult, so we start with
	      // errorThrown set to true before setting it to false after calling
	      // close -- if it's still set to true in the finally block, it means
	      // one of these calls threw.
	      errorThrown = true;
	      this.initializeAll(0);
	      ret = method.call(scope, a, b, c, d, e, f);
	      errorThrown = false;
	    } finally {
	      try {
	        if (errorThrown) {
	          // If `method` throws, prefer to show that stack trace over any thrown
	          // by invoking `closeAll`.
	          try {
	            this.closeAll(0);
	          } catch (err) {
	          }
	        } else {
	          // Since `method` didn't throw, we don't want to silence the exception
	          // here.
	          this.closeAll(0);
	        }
	      } finally {
	        this._isInTransaction = false;
	      }
	    }
	    return ret;
	  },

	  initializeAll: function(startIndex) {
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      try {
	        // Catching errors makes debugging more difficult, so we start with the
	        // OBSERVED_ERROR state before overwriting it with the real return value
	        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
	        // block, it means wrapper.initialize threw.
	        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
	        this.wrapperInitData[i] = wrapper.initialize ?
	          wrapper.initialize.call(this) :
	          null;
	      } finally {
	        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
	          // The initializer for wrapper i threw an error; initialize the
	          // remaining wrappers but silence any exceptions from them to ensure
	          // that the first error is the one to bubble up.
	          try {
	            this.initializeAll(i + 1);
	          } catch (err) {
	          }
	        }
	      }
	    }
	  },

	  /**
	   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
	   * them the respective return values of `this.transactionWrappers.init[i]`
	   * (`close`rs that correspond to initializers that failed will not be
	   * invoked).
	   */
	  closeAll: function(startIndex) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      this.isInTransaction(),
	      'Transaction.closeAll(): Cannot close transaction when none are open.'
	    ) : invariant(this.isInTransaction()));
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      var initData = this.wrapperInitData[i];
	      var errorThrown;
	      try {
	        // Catching errors makes debugging more difficult, so we start with
	        // errorThrown set to true before setting it to false after calling
	        // close -- if it's still set to true in the finally block, it means
	        // wrapper.close threw.
	        errorThrown = true;
	        if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {
	          wrapper.close.call(this, initData);
	        }
	        errorThrown = false;
	      } finally {
	        if (errorThrown) {
	          // The closer for wrapper i threw an error; close the remaining
	          // wrappers but silence any exceptions from them to ensure that the
	          // first error is the one to bubble up.
	          try {
	            this.closeAll(i + 1);
	          } catch (e) {
	          }
	        }
	      }
	    }
	    this.wrapperInitData.length = 0;
	  }
	};

	var Transaction = {

	  Mixin: Mixin,

	  /**
	   * Token to look for to determine if an error occured.
	   */
	  OBSERVED_ERROR: {}

	};

	module.exports = Transaction;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 35 */
/***/ function(module, exports) {

	/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactLifeCycle
	 */

	'use strict';

	/**
	 * This module manages the bookkeeping when a component is in the process
	 * of being mounted or being unmounted. This is used as a way to enforce
	 * invariants (or warnings) when it is not recommended to call
	 * setState/forceUpdate.
	 *
	 * currentlyMountingInstance: During the construction phase, it is not possible
	 * to trigger an update since the instance is not fully mounted yet. However, we
	 * currently allow this as a convenience for mutating the initial state.
	 *
	 * currentlyUnmountingInstance: During the unmounting phase, the instance is
	 * still mounted and can therefore schedule an update. However, this is not
	 * recommended and probably an error since it's about to be unmounted.
	 * Therefore we still want to trigger in an error for that case.
	 */

	var ReactLifeCycle = {
	  currentlyMountingInstance: null,
	  currentlyUnmountingInstance: null
	};

	module.exports = ReactLifeCycle;


/***/ },
/* 36 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceMap
	 */

	'use strict';

	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 */

	// TODO: Replace this with ES6: var ReactInstanceMap = new Map();
	var ReactInstanceMap = {

	  /**
	   * This API should be called `delete` but we'd have to make sure to always
	   * transform these to strings for IE support. When this transform is fully
	   * supported we can rename it.
	   */
	  remove: function(key) {
	    key._reactInternalInstance = undefined;
	  },

	  get: function(key) {
	    return key._reactInternalInstance;
	  },

	  has: function(key) {
	    return key._reactInternalInstance !== undefined;
	  },

	  set: function(key, value) {
	    key._reactInternalInstance = value;
	  }

	};

	module.exports = ReactInstanceMap;


/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactClass
	 */

	'use strict';

	var ReactComponent = __webpack_require__(22);
	var ReactCurrentOwner = __webpack_require__(17);
	var ReactElement = __webpack_require__(11);
	var ReactErrorUtils = __webpack_require__(38);
	var ReactInstanceMap = __webpack_require__(36);
	var ReactLifeCycle = __webpack_require__(35);
	var ReactPropTypeLocations = __webpack_require__(31);
	var ReactPropTypeLocationNames = __webpack_require__(32);
	var ReactUpdateQueue = __webpack_require__(23);

	var assign = __webpack_require__(13);
	var invariant = __webpack_require__(7);
	var keyMirror = __webpack_require__(6);
	var keyOf = __webpack_require__(39);
	var warning = __webpack_require__(15);

	var MIXINS_KEY = keyOf({mixins: null});

	/**
	 * Policies that describe methods in `ReactClassInterface`.
	 */
	var SpecPolicy = keyMirror({
	  /**
	   * These methods may be defined only once by the class specification or mixin.
	   */
	  DEFINE_ONCE: null,
	  /**
	   * These methods may be defined by both the class specification and mixins.
	   * Subsequent definitions will be chained. These methods must return void.
	   */
	  DEFINE_MANY: null,
	  /**
	   * These methods are overriding the base class.
	   */
	  OVERRIDE_BASE: null,
	  /**
	   * These methods are similar to DEFINE_MANY, except we assume they return
	   * objects. We try to merge the keys of the return values of all the mixed in
	   * functions. If there is a key conflict we throw.
	   */
	  DEFINE_MANY_MERGED: null
	});


	var injectedMixins = [];

	/**
	 * Composite components are higher-level components that compose other composite
	 * or native components.
	 *
	 * To create a new type of `ReactClass`, pass a specification of
	 * your new class to `React.createClass`. The only requirement of your class
	 * specification is that you implement a `render` method.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return <div>Hello World</div>;
	 *     }
	 *   });
	 *
	 * The class specification supports a specific protocol of methods that have
	 * special meaning (e.g. `render`). See `ReactClassInterface` for
	 * more the comprehensive protocol. Any other properties and methods in the
	 * class specification will available on the prototype.
	 *
	 * @interface ReactClassInterface
	 * @internal
	 */
	var ReactClassInterface = {

	  /**
	   * An array of Mixin objects to include when defining your component.
	   *
	   * @type {array}
	   * @optional
	   */
	  mixins: SpecPolicy.DEFINE_MANY,

	  /**
	   * An object containing properties and methods that should be defined on
	   * the component's constructor instead of its prototype (static methods).
	   *
	   * @type {object}
	   * @optional
	   */
	  statics: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of prop types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  propTypes: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of context types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  contextTypes: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of context types this component sets for its children.
	   *
	   * @type {object}
	   * @optional
	   */
	  childContextTypes: SpecPolicy.DEFINE_MANY,

	  // ==== Definition methods ====

	  /**
	   * Invoked when the component is mounted. Values in the mapping will be set on
	   * `this.props` if that prop is not specified (i.e. using an `in` check).
	   *
	   * This method is invoked before `getInitialState` and therefore cannot rely
	   * on `this.state` or use `this.setState`.
	   *
	   * @return {object}
	   * @optional
	   */
	  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * Invoked once before the component is mounted. The return value will be used
	   * as the initial value of `this.state`.
	   *
	   *   getInitialState: function() {
	   *     return {
	   *       isOn: false,
	   *       fooBaz: new BazFoo()
	   *     }
	   *   }
	   *
	   * @return {object}
	   * @optional
	   */
	  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * @return {object}
	   * @optional
	   */
	  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * Uses props from `this.props` and state from `this.state` to render the
	   * structure of the component.
	   *
	   * No guarantees are made about when or how often this method is invoked, so
	   * it must not have side effects.
	   *
	   *   render: function() {
	   *     var name = this.props.name;
	   *     return <div>Hello, {name}!</div>;
	   *   }
	   *
	   * @return {ReactComponent}
	   * @nosideeffects
	   * @required
	   */
	  render: SpecPolicy.DEFINE_ONCE,



	  // ==== Delegate methods ====

	  /**
	   * Invoked when the component is initially created and about to be mounted.
	   * This may have side effects, but any external subscriptions or data created
	   * by this method must be cleaned up in `componentWillUnmount`.
	   *
	   * @optional
	   */
	  componentWillMount: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component has been mounted and has a DOM representation.
	   * However, there is no guarantee that the DOM node is in the document.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been mounted (initialized and rendered) for the first time.
	   *
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidMount: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked before the component receives new props.
	   *
	   * Use this as an opportunity to react to a prop transition by updating the
	   * state using `this.setState`. Current props are accessed via `this.props`.
	   *
	   *   componentWillReceiveProps: function(nextProps, nextContext) {
	   *     this.setState({
	   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	   *     });
	   *   }
	   *
	   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	   * transition may cause a state change, but the opposite is not true. If you
	   * need it, you are probably looking for `componentWillUpdate`.
	   *
	   * @param {object} nextProps
	   * @optional
	   */
	  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked while deciding if the component should be updated as a result of
	   * receiving new props, state and/or context.
	   *
	   * Use this as an opportunity to `return false` when you're certain that the
	   * transition to the new props/state/context will not require a component
	   * update.
	   *
	   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	   *     return !equal(nextProps, this.props) ||
	   *       !equal(nextState, this.state) ||
	   *       !equal(nextContext, this.context);
	   *   }
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @return {boolean} True if the component should update.
	   * @optional
	   */
	  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

	  /**
	   * Invoked when the component is about to update due to a transition from
	   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	   * and `nextContext`.
	   *
	   * Use this as an opportunity to perform preparation before an update occurs.
	   *
	   * NOTE: You **cannot** use `this.setState()` in this method.
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @param {ReactReconcileTransaction} transaction
	   * @optional
	   */
	  componentWillUpdate: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component's DOM representation has been updated.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been updated.
	   *
	   * @param {object} prevProps
	   * @param {?object} prevState
	   * @param {?object} prevContext
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidUpdate: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component is about to be removed from its parent and have
	   * its DOM representation destroyed.
	   *
	   * Use this as an opportunity to deallocate any external resources.
	   *
	   * NOTE: There is no `componentDidUnmount` since your component will have been
	   * destroyed by that point.
	   *
	   * @optional
	   */
	  componentWillUnmount: SpecPolicy.DEFINE_MANY,



	  // ==== Advanced methods ====

	  /**
	   * Updates the component's currently mounted DOM representation.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   * @overridable
	   */
	  updateComponent: SpecPolicy.OVERRIDE_BASE

	};

	/**
	 * Mapping from class specification keys to special processing functions.
	 *
	 * Although these are declared like instance properties in the specification
	 * when defining classes using `React.createClass`, they are actually static
	 * and are accessible on the constructor instead of the prototype. Despite
	 * being static, they must be defined outside of the "statics" key under
	 * which all other static methods are defined.
	 */
	var RESERVED_SPEC_KEYS = {
	  displayName: function(Constructor, displayName) {
	    Constructor.displayName = displayName;
	  },
	  mixins: function(Constructor, mixins) {
	    if (mixins) {
	      for (var i = 0; i < mixins.length; i++) {
	        mixSpecIntoComponent(Constructor, mixins[i]);
	      }
	    }
	  },
	  childContextTypes: function(Constructor, childContextTypes) {
	    if ("production" !== process.env.NODE_ENV) {
	      validateTypeDef(
	        Constructor,
	        childContextTypes,
	        ReactPropTypeLocations.childContext
	      );
	    }
	    Constructor.childContextTypes = assign(
	      {},
	      Constructor.childContextTypes,
	      childContextTypes
	    );
	  },
	  contextTypes: function(Constructor, contextTypes) {
	    if ("production" !== process.env.NODE_ENV) {
	      validateTypeDef(
	        Constructor,
	        contextTypes,
	        ReactPropTypeLocations.context
	      );
	    }
	    Constructor.contextTypes = assign(
	      {},
	      Constructor.contextTypes,
	      contextTypes
	    );
	  },
	  /**
	   * Special case getDefaultProps which should move into statics but requires
	   * automatic merging.
	   */
	  getDefaultProps: function(Constructor, getDefaultProps) {
	    if (Constructor.getDefaultProps) {
	      Constructor.getDefaultProps = createMergedResultFunction(
	        Constructor.getDefaultProps,
	        getDefaultProps
	      );
	    } else {
	      Constructor.getDefaultProps = getDefaultProps;
	    }
	  },
	  propTypes: function(Constructor, propTypes) {
	    if ("production" !== process.env.NODE_ENV) {
	      validateTypeDef(
	        Constructor,
	        propTypes,
	        ReactPropTypeLocations.prop
	      );
	    }
	    Constructor.propTypes = assign(
	      {},
	      Constructor.propTypes,
	      propTypes
	    );
	  },
	  statics: function(Constructor, statics) {
	    mixStaticSpecIntoComponent(Constructor, statics);
	  }
	};

	function validateTypeDef(Constructor, typeDef, location) {
	  for (var propName in typeDef) {
	    if (typeDef.hasOwnProperty(propName)) {
	      // use a warning instead of an invariant so components
	      // don't show up in prod but not in __DEV__
	      ("production" !== process.env.NODE_ENV ? warning(
	        typeof typeDef[propName] === 'function',
	        '%s: %s type `%s` is invalid; it must be a function, usually from ' +
	        'React.PropTypes.',
	        Constructor.displayName || 'ReactClass',
	        ReactPropTypeLocationNames[location],
	        propName
	      ) : null);
	    }
	  }
	}

	function validateMethodOverride(proto, name) {
	  var specPolicy = ReactClassInterface.hasOwnProperty(name) ?
	    ReactClassInterface[name] :
	    null;

	  // Disallow overriding of base class methods unless explicitly allowed.
	  if (ReactClassMixin.hasOwnProperty(name)) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      specPolicy === SpecPolicy.OVERRIDE_BASE,
	      'ReactClassInterface: You are attempting to override ' +
	      '`%s` from your class specification. Ensure that your method names ' +
	      'do not overlap with React methods.',
	      name
	    ) : invariant(specPolicy === SpecPolicy.OVERRIDE_BASE));
	  }

	  // Disallow defining methods more than once unless explicitly allowed.
	  if (proto.hasOwnProperty(name)) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      specPolicy === SpecPolicy.DEFINE_MANY ||
	      specPolicy === SpecPolicy.DEFINE_MANY_MERGED,
	      'ReactClassInterface: You are attempting to define ' +
	      '`%s` on your component more than once. This conflict may be due ' +
	      'to a mixin.',
	      name
	    ) : invariant(specPolicy === SpecPolicy.DEFINE_MANY ||
	    specPolicy === SpecPolicy.DEFINE_MANY_MERGED));
	  }
	}

	/**
	 * Mixin helper which handles policy validation and reserved
	 * specification keys when building React classses.
	 */
	function mixSpecIntoComponent(Constructor, spec) {
	  if (!spec) {
	    return;
	  }

	  ("production" !== process.env.NODE_ENV ? invariant(
	    typeof spec !== 'function',
	    'ReactClass: You\'re attempting to ' +
	    'use a component class as a mixin. Instead, just use a regular object.'
	  ) : invariant(typeof spec !== 'function'));
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !ReactElement.isValidElement(spec),
	    'ReactClass: You\'re attempting to ' +
	    'use a component as a mixin. Instead, just use a regular object.'
	  ) : invariant(!ReactElement.isValidElement(spec)));

	  var proto = Constructor.prototype;

	  // By handling mixins before any other properties, we ensure the same
	  // chaining order is applied to methods with DEFINE_MANY policy, whether
	  // mixins are listed before or after these methods in the spec.
	  if (spec.hasOwnProperty(MIXINS_KEY)) {
	    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	  }

	  for (var name in spec) {
	    if (!spec.hasOwnProperty(name)) {
	      continue;
	    }

	    if (name === MIXINS_KEY) {
	      // We have already handled mixins in a special case above
	      continue;
	    }

	    var property = spec[name];
	    validateMethodOverride(proto, name);

	    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	      RESERVED_SPEC_KEYS[name](Constructor, property);
	    } else {
	      // Setup methods on prototype:
	      // The following member methods should not be automatically bound:
	      // 1. Expected ReactClass methods (in the "interface").
	      // 2. Overridden methods (that were mixed in).
	      var isReactClassMethod =
	        ReactClassInterface.hasOwnProperty(name);
	      var isAlreadyDefined = proto.hasOwnProperty(name);
	      var markedDontBind = property && property.__reactDontBind;
	      var isFunction = typeof property === 'function';
	      var shouldAutoBind =
	        isFunction &&
	        !isReactClassMethod &&
	        !isAlreadyDefined &&
	        !markedDontBind;

	      if (shouldAutoBind) {
	        if (!proto.__reactAutoBindMap) {
	          proto.__reactAutoBindMap = {};
	        }
	        proto.__reactAutoBindMap[name] = property;
	        proto[name] = property;
	      } else {
	        if (isAlreadyDefined) {
	          var specPolicy = ReactClassInterface[name];

	          // These cases should already be caught by validateMethodOverride
	          ("production" !== process.env.NODE_ENV ? invariant(
	            isReactClassMethod && (
	              (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)
	            ),
	            'ReactClass: Unexpected spec policy %s for key %s ' +
	            'when mixing in component specs.',
	            specPolicy,
	            name
	          ) : invariant(isReactClassMethod && (
	            (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)
	          )));

	          // For methods which are defined more than once, call the existing
	          // methods before calling the new property, merging if appropriate.
	          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
	            proto[name] = createMergedResultFunction(proto[name], property);
	          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
	            proto[name] = createChainedFunction(proto[name], property);
	          }
	        } else {
	          proto[name] = property;
	          if ("production" !== process.env.NODE_ENV) {
	            // Add verbose displayName to the function, which helps when looking
	            // at profiling tools.
	            if (typeof property === 'function' && spec.displayName) {
	              proto[name].displayName = spec.displayName + '_' + name;
	            }
	          }
	        }
	      }
	    }
	  }
	}

	function mixStaticSpecIntoComponent(Constructor, statics) {
	  if (!statics) {
	    return;
	  }
	  for (var name in statics) {
	    var property = statics[name];
	    if (!statics.hasOwnProperty(name)) {
	      continue;
	    }

	    var isReserved = name in RESERVED_SPEC_KEYS;
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !isReserved,
	      'ReactClass: You are attempting to define a reserved ' +
	      'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' +
	      'as an instance property instead; it will still be accessible on the ' +
	      'constructor.',
	      name
	    ) : invariant(!isReserved));

	    var isInherited = name in Constructor;
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !isInherited,
	      'ReactClass: You are attempting to define ' +
	      '`%s` on your component more than once. This conflict may be ' +
	      'due to a mixin.',
	      name
	    ) : invariant(!isInherited));
	    Constructor[name] = property;
	  }
	}

	/**
	 * Merge two objects, but throw if both contain the same key.
	 *
	 * @param {object} one The first object, which is mutated.
	 * @param {object} two The second object
	 * @return {object} one after it has been mutated to contain everything in two.
	 */
	function mergeIntoWithNoDuplicateKeys(one, two) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    one && two && typeof one === 'object' && typeof two === 'object',
	    'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.'
	  ) : invariant(one && two && typeof one === 'object' && typeof two === 'object'));

	  for (var key in two) {
	    if (two.hasOwnProperty(key)) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        one[key] === undefined,
	        'mergeIntoWithNoDuplicateKeys(): ' +
	        'Tried to merge two objects with the same key: `%s`. This conflict ' +
	        'may be due to a mixin; in particular, this may be caused by two ' +
	        'getInitialState() or getDefaultProps() methods returning objects ' +
	        'with clashing keys.',
	        key
	      ) : invariant(one[key] === undefined));
	      one[key] = two[key];
	    }
	  }
	  return one;
	}

	/**
	 * Creates a function that invokes two functions and merges their return values.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createMergedResultFunction(one, two) {
	  return function mergedResult() {
	    var a = one.apply(this, arguments);
	    var b = two.apply(this, arguments);
	    if (a == null) {
	      return b;
	    } else if (b == null) {
	      return a;
	    }
	    var c = {};
	    mergeIntoWithNoDuplicateKeys(c, a);
	    mergeIntoWithNoDuplicateKeys(c, b);
	    return c;
	  };
	}

	/**
	 * Creates a function that invokes two functions and ignores their return vales.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createChainedFunction(one, two) {
	  return function chainedFunction() {
	    one.apply(this, arguments);
	    two.apply(this, arguments);
	  };
	}

	/**
	 * Binds a method to the component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 * @param {function} method Method to be bound.
	 * @return {function} The bound method.
	 */
	function bindAutoBindMethod(component, method) {
	  var boundMethod = method.bind(component);
	  if ("production" !== process.env.NODE_ENV) {
	    boundMethod.__reactBoundContext = component;
	    boundMethod.__reactBoundMethod = method;
	    boundMethod.__reactBoundArguments = null;
	    var componentName = component.constructor.displayName;
	    var _bind = boundMethod.bind;
	    /* eslint-disable block-scoped-var, no-undef */
	    boundMethod.bind = function(newThis ) {for (var args=[],$__0=1,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
	      // User is trying to bind() an autobound method; we effectively will
	      // ignore the value of "this" that the user is trying to use, so
	      // let's warn.
	      if (newThis !== component && newThis !== null) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          false,
	          'bind(): React component methods may only be bound to the ' +
	          'component instance. See %s',
	          componentName
	        ) : null);
	      } else if (!args.length) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          false,
	          'bind(): You are binding a component method to the component. ' +
	          'React does this for you automatically in a high-performance ' +
	          'way, so you can safely remove this call. See %s',
	          componentName
	        ) : null);
	        return boundMethod;
	      }
	      var reboundMethod = _bind.apply(boundMethod, arguments);
	      reboundMethod.__reactBoundContext = component;
	      reboundMethod.__reactBoundMethod = method;
	      reboundMethod.__reactBoundArguments = args;
	      return reboundMethod;
	      /* eslint-enable */
	    };
	  }
	  return boundMethod;
	}

	/**
	 * Binds all auto-bound methods in a component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 */
	function bindAutoBindMethods(component) {
	  for (var autoBindKey in component.__reactAutoBindMap) {
	    if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
	      var method = component.__reactAutoBindMap[autoBindKey];
	      component[autoBindKey] = bindAutoBindMethod(
	        component,
	        ReactErrorUtils.guard(
	          method,
	          component.constructor.displayName + '.' + autoBindKey
	        )
	      );
	    }
	  }
	}

	var typeDeprecationDescriptor = {
	  enumerable: false,
	  get: function() {
	    var displayName = this.displayName || this.name || 'Component';
	    ("production" !== process.env.NODE_ENV ? warning(
	      false,
	      '%s.type is deprecated. Use %s directly to access the class.',
	      displayName,
	      displayName
	    ) : null);
	    Object.defineProperty(this, 'type', {
	      value: this
	    });
	    return this;
	  }
	};

	/**
	 * Add more to the ReactClass base class. These are all legacy features and
	 * therefore not already part of the modern ReactComponent.
	 */
	var ReactClassMixin = {

	  /**
	   * TODO: This will be deprecated because state should always keep a consistent
	   * type signature and the only use case for this, is to avoid that.
	   */
	  replaceState: function(newState, callback) {
	    ReactUpdateQueue.enqueueReplaceState(this, newState);
	    if (callback) {
	      ReactUpdateQueue.enqueueCallback(this, callback);
	    }
	  },

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function() {
	    if ("production" !== process.env.NODE_ENV) {
	      var owner = ReactCurrentOwner.current;
	      if (owner !== null) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          owner._warnedAboutRefsInRender,
	          '%s is accessing isMounted inside its render() function. ' +
	          'render() should be a pure function of props and state. It should ' +
	          'never access something that requires stale data from the previous ' +
	          'render, such as refs. Move this logic to componentDidMount and ' +
	          'componentDidUpdate instead.',
	          owner.getName() || 'A component'
	        ) : null);
	        owner._warnedAboutRefsInRender = true;
	      }
	    }
	    var internalInstance = ReactInstanceMap.get(this);
	    return (
	      internalInstance &&
	      internalInstance !== ReactLifeCycle.currentlyMountingInstance
	    );
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {object} partialProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @public
	   * @deprecated
	   */
	  setProps: function(partialProps, callback) {
	    ReactUpdateQueue.enqueueSetProps(this, partialProps);
	    if (callback) {
	      ReactUpdateQueue.enqueueCallback(this, callback);
	    }
	  },

	  /**
	   * Replace all the props.
	   *
	   * @param {object} newProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @public
	   * @deprecated
	   */
	  replaceProps: function(newProps, callback) {
	    ReactUpdateQueue.enqueueReplaceProps(this, newProps);
	    if (callback) {
	      ReactUpdateQueue.enqueueCallback(this, callback);
	    }
	  }
	};

	var ReactClassComponent = function() {};
	assign(
	  ReactClassComponent.prototype,
	  ReactComponent.prototype,
	  ReactClassMixin
	);

	/**
	 * Module for creating composite components.
	 *
	 * @class ReactClass
	 */
	var ReactClass = {

	  /**
	   * Creates a composite component class given a class specification.
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */
	  createClass: function(spec) {
	    var Constructor = function(props, context) {
	      // This constructor is overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted.

	      if ("production" !== process.env.NODE_ENV) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          this instanceof Constructor,
	          'Something is calling a React component directly. Use a factory or ' +
	          'JSX instead. See: https://fb.me/react-legacyfactory'
	        ) : null);
	      }

	      // Wire up auto-binding
	      if (this.__reactAutoBindMap) {
	        bindAutoBindMethods(this);
	      }

	      this.props = props;
	      this.context = context;
	      this.state = null;

	      // ReactClasses doesn't have constructors. Instead, they use the
	      // getInitialState and componentWillMount methods for initialization.

	      var initialState = this.getInitialState ? this.getInitialState() : null;
	      if ("production" !== process.env.NODE_ENV) {
	        // We allow auto-mocks to proceed as if they're returning null.
	        if (typeof initialState === 'undefined' &&
	            this.getInitialState._isMockFunction) {
	          // This is probably bad practice. Consider warning here and
	          // deprecating this convenience.
	          initialState = null;
	        }
	      }
	      ("production" !== process.env.NODE_ENV ? invariant(
	        typeof initialState === 'object' && !Array.isArray(initialState),
	        '%s.getInitialState(): must return an object or null',
	        Constructor.displayName || 'ReactCompositeComponent'
	      ) : invariant(typeof initialState === 'object' && !Array.isArray(initialState)));

	      this.state = initialState;
	    };
	    Constructor.prototype = new ReactClassComponent();
	    Constructor.prototype.constructor = Constructor;

	    injectedMixins.forEach(
	      mixSpecIntoComponent.bind(null, Constructor)
	    );

	    mixSpecIntoComponent(Constructor, spec);

	    // Initialize the defaultProps property after all mixins have been merged
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }

	    if ("production" !== process.env.NODE_ENV) {
	      // This is a tag to indicate that the use of these method names is ok,
	      // since it's used with createClass. If it's not, then it's likely a
	      // mistake so we'll warn you to use the static property, property
	      // initializer or constructor respectively.
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps.isReactClassApproved = {};
	      }
	      if (Constructor.prototype.getInitialState) {
	        Constructor.prototype.getInitialState.isReactClassApproved = {};
	      }
	    }

	    ("production" !== process.env.NODE_ENV ? invariant(
	      Constructor.prototype.render,
	      'createClass(...): Class specification must implement a `render` method.'
	    ) : invariant(Constructor.prototype.render));

	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        !Constructor.prototype.componentShouldUpdate,
	        '%s has a method called ' +
	        'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
	        'The name is phrased as a question because the function is ' +
	        'expected to return a value.',
	        spec.displayName || 'A component'
	      ) : null);
	    }

	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactClassInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }

	    // Legacy hook
	    Constructor.type = Constructor;
	    if ("production" !== process.env.NODE_ENV) {
	      try {
	        Object.defineProperty(Constructor, 'type', typeDeprecationDescriptor);
	      } catch (x) {
	        // IE will fail on defineProperty (es5-shim/sham too)
	      }
	    }

	    return Constructor;
	  },

	  injection: {
	    injectMixin: function(mixin) {
	      injectedMixins.push(mixin);
	    }
	  }

	};

	module.exports = ReactClass;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 38 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactErrorUtils
	 * @typechecks
	 */

	"use strict";

	var ReactErrorUtils = {
	  /**
	   * Creates a guarded version of a function. This is supposed to make debugging
	   * of event handlers easier. To aid debugging with the browser's debugger,
	   * this currently simply returns the original function.
	   *
	   * @param {function} func Function to be executed
	   * @param {string} name The name of the guard
	   * @return {function}
	   */
	  guard: function(func, name) {
	    return func;
	  }
	};

	module.exports = ReactErrorUtils;


/***/ },
/* 39 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyOf
	 */

	/**
	 * Allows extraction of a minified key. Let's the build system minify keys
	 * without loosing the ability to dynamically use key strings as values
	 * themselves. Pass in an object with a single key/val pair and it will return
	 * you the string key of that single record. Suppose you want to grab the
	 * value for a key 'className' inside of an object. Key/val minification may
	 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
	 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
	 * reuse those resolutions.
	 */
	var keyOf = function(oneKeyObj) {
	  var key;
	  for (key in oneKeyObj) {
	    if (!oneKeyObj.hasOwnProperty(key)) {
	      continue;
	    }
	    return key;
	  }
	  return null;
	};


	module.exports = keyOf;


/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOM
	 * @typechecks static-only
	 */

	'use strict';

	var ReactElement = __webpack_require__(11);
	var ReactElementValidator = __webpack_require__(30);

	var mapObject = __webpack_require__(41);

	/**
	 * Create a factory that creates HTML tag elements.
	 *
	 * @param {string} tag Tag name (e.g. `div`).
	 * @private
	 */
	function createDOMFactory(tag) {
	  if ("production" !== process.env.NODE_ENV) {
	    return ReactElementValidator.createFactory(tag);
	  }
	  return ReactElement.createFactory(tag);
	}

	/**
	 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	 * This is also accessible via `React.DOM`.
	 *
	 * @public
	 */
	var ReactDOM = mapObject({
	  a: 'a',
	  abbr: 'abbr',
	  address: 'address',
	  area: 'area',
	  article: 'article',
	  aside: 'aside',
	  audio: 'audio',
	  b: 'b',
	  base: 'base',
	  bdi: 'bdi',
	  bdo: 'bdo',
	  big: 'big',
	  blockquote: 'blockquote',
	  body: 'body',
	  br: 'br',
	  button: 'button',
	  canvas: 'canvas',
	  caption: 'caption',
	  cite: 'cite',
	  code: 'code',
	  col: 'col',
	  colgroup: 'colgroup',
	  data: 'data',
	  datalist: 'datalist',
	  dd: 'dd',
	  del: 'del',
	  details: 'details',
	  dfn: 'dfn',
	  dialog: 'dialog',
	  div: 'div',
	  dl: 'dl',
	  dt: 'dt',
	  em: 'em',
	  embed: 'embed',
	  fieldset: 'fieldset',
	  figcaption: 'figcaption',
	  figure: 'figure',
	  footer: 'footer',
	  form: 'form',
	  h1: 'h1',
	  h2: 'h2',
	  h3: 'h3',
	  h4: 'h4',
	  h5: 'h5',
	  h6: 'h6',
	  head: 'head',
	  header: 'header',
	  hr: 'hr',
	  html: 'html',
	  i: 'i',
	  iframe: 'iframe',
	  img: 'img',
	  input: 'input',
	  ins: 'ins',
	  kbd: 'kbd',
	  keygen: 'keygen',
	  label: 'label',
	  legend: 'legend',
	  li: 'li',
	  link: 'link',
	  main: 'main',
	  map: 'map',
	  mark: 'mark',
	  menu: 'menu',
	  menuitem: 'menuitem',
	  meta: 'meta',
	  meter: 'meter',
	  nav: 'nav',
	  noscript: 'noscript',
	  object: 'object',
	  ol: 'ol',
	  optgroup: 'optgroup',
	  option: 'option',
	  output: 'output',
	  p: 'p',
	  param: 'param',
	  picture: 'picture',
	  pre: 'pre',
	  progress: 'progress',
	  q: 'q',
	  rp: 'rp',
	  rt: 'rt',
	  ruby: 'ruby',
	  s: 's',
	  samp: 'samp',
	  script: 'script',
	  section: 'section',
	  select: 'select',
	  small: 'small',
	  source: 'source',
	  span: 'span',
	  strong: 'strong',
	  style: 'style',
	  sub: 'sub',
	  summary: 'summary',
	  sup: 'sup',
	  table: 'table',
	  tbody: 'tbody',
	  td: 'td',
	  textarea: 'textarea',
	  tfoot: 'tfoot',
	  th: 'th',
	  thead: 'thead',
	  time: 'time',
	  title: 'title',
	  tr: 'tr',
	  track: 'track',
	  u: 'u',
	  ul: 'ul',
	  'var': 'var',
	  video: 'video',
	  wbr: 'wbr',

	  // SVG
	  circle: 'circle',
	  clipPath: 'clipPath',
	  defs: 'defs',
	  ellipse: 'ellipse',
	  g: 'g',
	  line: 'line',
	  linearGradient: 'linearGradient',
	  mask: 'mask',
	  path: 'path',
	  pattern: 'pattern',
	  polygon: 'polygon',
	  polyline: 'polyline',
	  radialGradient: 'radialGradient',
	  rect: 'rect',
	  stop: 'stop',
	  svg: 'svg',
	  text: 'text',
	  tspan: 'tspan'

	}, createDOMFactory);

	module.exports = ReactDOM;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 41 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule mapObject
	 */

	'use strict';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	 * Executes the provided `callback` once for each enumerable own property in the
	 * object and constructs a new object from the results. The `callback` is
	 * invoked with three arguments:
	 *
	 *  - the property value
	 *  - the property name
	 *  - the object being traversed
	 *
	 * Properties that are added after the call to `mapObject` will not be visited
	 * by `callback`. If the values of existing properties are changed, the value
	 * passed to `callback` will be the value at the time `mapObject` visits them.
	 * Properties that are deleted before being visited are not visited.
	 *
	 * @grep function objectMap()
	 * @grep function objMap()
	 *
	 * @param {?object} object
	 * @param {function} callback
	 * @param {*} context
	 * @return {?object}
	 */
	function mapObject(object, callback, context) {
	  if (!object) {
	    return null;
	  }
	  var result = {};
	  for (var name in object) {
	    if (hasOwnProperty.call(object, name)) {
	      result[name] = callback.call(context, object[name], name, object);
	    }
	  }
	  return result;
	}

	module.exports = mapObject;


/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextComponent
	 * @typechecks static-only
	 */

	'use strict';

	var DOMPropertyOperations = __webpack_require__(43);
	var ReactComponentBrowserEnvironment =
	  __webpack_require__(47);
	var ReactDOMComponent = __webpack_require__(87);

	var assign = __webpack_require__(13);
	var escapeTextContentForBrowser = __webpack_require__(46);

	/**
	 * Text nodes violate a couple assumptions that React makes about components:
	 *
	 *  - When mounting text into the DOM, adjacent text nodes are merged.
	 *  - Text nodes cannot be assigned a React root ID.
	 *
	 * This component is used to wrap strings in elements so that they can undergo
	 * the same reconciliation that is applied to elements.
	 *
	 * TODO: Investigate representing React components in the DOM with text nodes.
	 *
	 * @class ReactDOMTextComponent
	 * @extends ReactComponent
	 * @internal
	 */
	var ReactDOMTextComponent = function(props) {
	  // This constructor and its argument is currently used by mocks.
	};

	assign(ReactDOMTextComponent.prototype, {

	  /**
	   * @param {ReactText} text
	   * @internal
	   */
	  construct: function(text) {
	    // TODO: This is really a ReactText (ReactNode), not a ReactElement
	    this._currentElement = text;
	    this._stringText = '' + text;

	    // Properties
	    this._rootNodeID = null;
	    this._mountIndex = 0;
	  },

	  /**
	   * Creates the markup for this text node. This node is not intended to have
	   * any features besides containing text content.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup for this text node.
	   * @internal
	   */
	  mountComponent: function(rootID, transaction, context) {
	    this._rootNodeID = rootID;
	    var escapedText = escapeTextContentForBrowser(this._stringText);

	    if (transaction.renderToStaticMarkup) {
	      // Normally we'd wrap this in a `span` for the reasons stated above, but
	      // since this is a situation where React won't take over (static pages),
	      // we can simply return the text as it is.
	      return escapedText;
	    }

	    return (
	      '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' +
	        escapedText +
	      '</span>'
	    );
	  },

	  /**
	   * Updates this component by updating the text content.
	   *
	   * @param {ReactText} nextText The next text content
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  receiveComponent: function(nextText, transaction) {
	    if (nextText !== this._currentElement) {
	      this._currentElement = nextText;
	      var nextStringText = '' + nextText;
	      if (nextStringText !== this._stringText) {
	        // TODO: Save this as pending props and use performUpdateIfNecessary
	        // and/or updateComponent to do the actual update for consistency with
	        // other component types?
	        this._stringText = nextStringText;
	        ReactDOMComponent.BackendIDOperations.updateTextContentByID(
	          this._rootNodeID,
	          nextStringText
	        );
	      }
	    }
	  },

	  unmountComponent: function() {
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	  }

	});

	module.exports = ReactDOMTextComponent;


/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMPropertyOperations
	 * @typechecks static-only
	 */

	'use strict';

	var DOMProperty = __webpack_require__(44);

	var quoteAttributeValueForBrowser = __webpack_require__(45);
	var warning = __webpack_require__(15);

	function shouldIgnoreValue(name, value) {
	  return value == null ||
	    (DOMProperty.hasBooleanValue[name] && !value) ||
	    (DOMProperty.hasNumericValue[name] && isNaN(value)) ||
	    (DOMProperty.hasPositiveNumericValue[name] && (value < 1)) ||
	    (DOMProperty.hasOverloadedBooleanValue[name] && value === false);
	}

	if ("production" !== process.env.NODE_ENV) {
	  var reactProps = {
	    children: true,
	    dangerouslySetInnerHTML: true,
	    key: true,
	    ref: true
	  };
	  var warnedProperties = {};

	  var warnUnknownProperty = function(name) {
	    if (reactProps.hasOwnProperty(name) && reactProps[name] ||
	        warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	      return;
	    }

	    warnedProperties[name] = true;
	    var lowerCasedName = name.toLowerCase();

	    // data-* attributes should be lowercase; suggest the lowercase version
	    var standardName = (
	      DOMProperty.isCustomAttribute(lowerCasedName) ?
	        lowerCasedName :
	      DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ?
	        DOMProperty.getPossibleStandardName[lowerCasedName] :
	        null
	    );

	    // For now, only warn when we have a suggested correction. This prevents
	    // logging too much when using transferPropsTo.
	    ("production" !== process.env.NODE_ENV ? warning(
	      standardName == null,
	      'Unknown DOM property %s. Did you mean %s?',
	      name,
	      standardName
	    ) : null);

	  };
	}

	/**
	 * Operations for dealing with DOM properties.
	 */
	var DOMPropertyOperations = {

	  /**
	   * Creates markup for the ID property.
	   *
	   * @param {string} id Unescaped ID.
	   * @return {string} Markup string.
	   */
	  createMarkupForID: function(id) {
	    return DOMProperty.ID_ATTRIBUTE_NAME + '=' +
	      quoteAttributeValueForBrowser(id);
	  },

	  /**
	   * Creates markup for a property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {?string} Markup string, or null if the property was invalid.
	   */
	  createMarkupForProperty: function(name, value) {
	    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
	        DOMProperty.isStandardName[name]) {
	      if (shouldIgnoreValue(name, value)) {
	        return '';
	      }
	      var attributeName = DOMProperty.getAttributeName[name];
	      if (DOMProperty.hasBooleanValue[name] ||
	          (DOMProperty.hasOverloadedBooleanValue[name] && value === true)) {
	        return attributeName;
	      }
	      return attributeName + '=' + quoteAttributeValueForBrowser(value);
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        return '';
	      }
	      return name + '=' + quoteAttributeValueForBrowser(value);
	    } else if ("production" !== process.env.NODE_ENV) {
	      warnUnknownProperty(name);
	    }
	    return null;
	  },

	  /**
	   * Sets the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   * @param {*} value
	   */
	  setValueForProperty: function(node, name, value) {
	    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
	        DOMProperty.isStandardName[name]) {
	      var mutationMethod = DOMProperty.getMutationMethod[name];
	      if (mutationMethod) {
	        mutationMethod(node, value);
	      } else if (shouldIgnoreValue(name, value)) {
	        this.deleteValueForProperty(node, name);
	      } else if (DOMProperty.mustUseAttribute[name]) {
	        // `setAttribute` with objects becomes only `[object]` in IE8/9,
	        // ('' + value) makes it output the correct toString()-value.
	        node.setAttribute(DOMProperty.getAttributeName[name], '' + value);
	      } else {
	        var propName = DOMProperty.getPropertyName[name];
	        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
	        // property type before comparing; only `value` does and is string.
	        if (!DOMProperty.hasSideEffects[name] ||
	            ('' + node[propName]) !== ('' + value)) {
	          // Contrary to `setAttribute`, object properties are properly
	          // `toString`ed by IE8/9.
	          node[propName] = value;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        node.removeAttribute(name);
	      } else {
	        node.setAttribute(name, '' + value);
	      }
	    } else if ("production" !== process.env.NODE_ENV) {
	      warnUnknownProperty(name);
	    }
	  },

	  /**
	   * Deletes the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForProperty: function(node, name) {
	    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
	        DOMProperty.isStandardName[name]) {
	      var mutationMethod = DOMProperty.getMutationMethod[name];
	      if (mutationMethod) {
	        mutationMethod(node, undefined);
	      } else if (DOMProperty.mustUseAttribute[name]) {
	        node.removeAttribute(DOMProperty.getAttributeName[name]);
	      } else {
	        var propName = DOMProperty.getPropertyName[name];
	        var defaultValue = DOMProperty.getDefaultValueForProperty(
	          node.nodeName,
	          propName
	        );
	        if (!DOMProperty.hasSideEffects[name] ||
	            ('' + node[propName]) !== defaultValue) {
	          node[propName] = defaultValue;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      node.removeAttribute(name);
	    } else if ("production" !== process.env.NODE_ENV) {
	      warnUnknownProperty(name);
	    }
	  }

	};

	module.exports = DOMPropertyOperations;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMProperty
	 * @typechecks static-only
	 */

	/*jslint bitwise: true */

	'use strict';

	var invariant = __webpack_require__(7);

	function checkMask(value, bitmask) {
	  return (value & bitmask) === bitmask;
	}

	var DOMPropertyInjection = {
	  /**
	   * Mapping from normalized, camelcased property names to a configuration that
	   * specifies how the associated DOM property should be accessed or rendered.
	   */
	  MUST_USE_ATTRIBUTE: 0x1,
	  MUST_USE_PROPERTY: 0x2,
	  HAS_SIDE_EFFECTS: 0x4,
	  HAS_BOOLEAN_VALUE: 0x8,
	  HAS_NUMERIC_VALUE: 0x10,
	  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
	  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,

	  /**
	   * Inject some specialized knowledge about the DOM. This takes a config object
	   * with the following properties:
	   *
	   * isCustomAttribute: function that given an attribute name will return true
	   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
	   * attributes where it's impossible to enumerate all of the possible
	   * attribute names,
	   *
	   * Properties: object mapping DOM property name to one of the
	   * DOMPropertyInjection constants or null. If your attribute isn't in here,
	   * it won't get written to the DOM.
	   *
	   * DOMAttributeNames: object mapping React attribute name to the DOM
	   * attribute name. Attribute names not specified use the **lowercase**
	   * normalized name.
	   *
	   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
	   * Property names not specified use the normalized name.
	   *
	   * DOMMutationMethods: Properties that require special mutation methods. If
	   * `value` is undefined, the mutation method should unset the property.
	   *
	   * @param {object} domPropertyConfig the config as described above.
	   */
	  injectDOMPropertyConfig: function(domPropertyConfig) {
	    var Properties = domPropertyConfig.Properties || {};
	    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
	    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
	    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

	    if (domPropertyConfig.isCustomAttribute) {
	      DOMProperty._isCustomAttributeFunctions.push(
	        domPropertyConfig.isCustomAttribute
	      );
	    }

	    for (var propName in Properties) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        !DOMProperty.isStandardName.hasOwnProperty(propName),
	        'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' +
	        '\'%s\' which has already been injected. You may be accidentally ' +
	        'injecting the same DOM property config twice, or you may be ' +
	        'injecting two configs that have conflicting property names.',
	        propName
	      ) : invariant(!DOMProperty.isStandardName.hasOwnProperty(propName)));

	      DOMProperty.isStandardName[propName] = true;

	      var lowerCased = propName.toLowerCase();
	      DOMProperty.getPossibleStandardName[lowerCased] = propName;

	      if (DOMAttributeNames.hasOwnProperty(propName)) {
	        var attributeName = DOMAttributeNames[propName];
	        DOMProperty.getPossibleStandardName[attributeName] = propName;
	        DOMProperty.getAttributeName[propName] = attributeName;
	      } else {
	        DOMProperty.getAttributeName[propName] = lowerCased;
	      }

	      DOMProperty.getPropertyName[propName] =
	        DOMPropertyNames.hasOwnProperty(propName) ?
	          DOMPropertyNames[propName] :
	          propName;

	      if (DOMMutationMethods.hasOwnProperty(propName)) {
	        DOMProperty.getMutationMethod[propName] = DOMMutationMethods[propName];
	      } else {
	        DOMProperty.getMutationMethod[propName] = null;
	      }

	      var propConfig = Properties[propName];
	      DOMProperty.mustUseAttribute[propName] =
	        checkMask(propConfig, DOMPropertyInjection.MUST_USE_ATTRIBUTE);
	      DOMProperty.mustUseProperty[propName] =
	        checkMask(propConfig, DOMPropertyInjection.MUST_USE_PROPERTY);
	      DOMProperty.hasSideEffects[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_SIDE_EFFECTS);
	      DOMProperty.hasBooleanValue[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_BOOLEAN_VALUE);
	      DOMProperty.hasNumericValue[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_NUMERIC_VALUE);
	      DOMProperty.hasPositiveNumericValue[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_POSITIVE_NUMERIC_VALUE);
	      DOMProperty.hasOverloadedBooleanValue[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_OVERLOADED_BOOLEAN_VALUE);

	      ("production" !== process.env.NODE_ENV ? invariant(
	        !DOMProperty.mustUseAttribute[propName] ||
	          !DOMProperty.mustUseProperty[propName],
	        'DOMProperty: Cannot require using both attribute and property: %s',
	        propName
	      ) : invariant(!DOMProperty.mustUseAttribute[propName] ||
	        !DOMProperty.mustUseProperty[propName]));
	      ("production" !== process.env.NODE_ENV ? invariant(
	        DOMProperty.mustUseProperty[propName] ||
	          !DOMProperty.hasSideEffects[propName],
	        'DOMProperty: Properties that have side effects must use property: %s',
	        propName
	      ) : invariant(DOMProperty.mustUseProperty[propName] ||
	        !DOMProperty.hasSideEffects[propName]));
	      ("production" !== process.env.NODE_ENV ? invariant(
	        !!DOMProperty.hasBooleanValue[propName] +
	          !!DOMProperty.hasNumericValue[propName] +
	          !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1,
	        'DOMProperty: Value can be one of boolean, overloaded boolean, or ' +
	        'numeric value, but not a combination: %s',
	        propName
	      ) : invariant(!!DOMProperty.hasBooleanValue[propName] +
	        !!DOMProperty.hasNumericValue[propName] +
	        !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1));
	    }
	  }
	};
	var defaultValueCache = {};

	/**
	 * DOMProperty exports lookup objects that can be used like functions:
	 *
	 *   > DOMProperty.isValid['id']
	 *   true
	 *   > DOMProperty.isValid['foobar']
	 *   undefined
	 *
	 * Although this may be confusing, it performs better in general.
	 *
	 * @see http://jsperf.com/key-exists
	 * @see http://jsperf.com/key-missing
	 */
	var DOMProperty = {

	  ID_ATTRIBUTE_NAME: 'data-reactid',

	  /**
	   * Checks whether a property name is a standard property.
	   * @type {Object}
	   */
	  isStandardName: {},

	  /**
	   * Mapping from lowercase property names to the properly cased version, used
	   * to warn in the case of missing properties.
	   * @type {Object}
	   */
	  getPossibleStandardName: {},

	  /**
	   * Mapping from normalized names to attribute names that differ. Attribute
	   * names are used when rendering markup or with `*Attribute()`.
	   * @type {Object}
	   */
	  getAttributeName: {},

	  /**
	   * Mapping from normalized names to properties on DOM node instances.
	   * (This includes properties that mutate due to external factors.)
	   * @type {Object}
	   */
	  getPropertyName: {},

	  /**
	   * Mapping from normalized names to mutation methods. This will only exist if
	   * mutation cannot be set simply by the property or `setAttribute()`.
	   * @type {Object}
	   */
	  getMutationMethod: {},

	  /**
	   * Whether the property must be accessed and mutated as an object property.
	   * @type {Object}
	   */
	  mustUseAttribute: {},

	  /**
	   * Whether the property must be accessed and mutated using `*Attribute()`.
	   * (This includes anything that fails `<propName> in <element>`.)
	   * @type {Object}
	   */
	  mustUseProperty: {},

	  /**
	   * Whether or not setting a value causes side effects such as triggering
	   * resources to be loaded or text selection changes. We must ensure that
	   * the value is only set if it has changed.
	   * @type {Object}
	   */
	  hasSideEffects: {},

	  /**
	   * Whether the property should be removed when set to a falsey value.
	   * @type {Object}
	   */
	  hasBooleanValue: {},

	  /**
	   * Whether the property must be numeric or parse as a
	   * numeric and should be removed when set to a falsey value.
	   * @type {Object}
	   */
	  hasNumericValue: {},

	  /**
	   * Whether the property must be positive numeric or parse as a positive
	   * numeric and should be removed when set to a falsey value.
	   * @type {Object}
	   */
	  hasPositiveNumericValue: {},

	  /**
	   * Whether the property can be used as a flag as well as with a value. Removed
	   * when strictly equal to false; present without a value when strictly equal
	   * to true; present with a value otherwise.
	   * @type {Object}
	   */
	  hasOverloadedBooleanValue: {},

	  /**
	   * All of the isCustomAttribute() functions that have been injected.
	   */
	  _isCustomAttributeFunctions: [],

	  /**
	   * Checks whether a property name is a custom attribute.
	   * @method
	   */
	  isCustomAttribute: function(attributeName) {
	    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
	      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
	      if (isCustomAttributeFn(attributeName)) {
	        return true;
	      }
	    }
	    return false;
	  },

	  /**
	   * Returns the default property value for a DOM property (i.e., not an
	   * attribute). Most default values are '' or false, but not all. Worse yet,
	   * some (in particular, `type`) vary depending on the type of element.
	   *
	   * TODO: Is it better to grab all the possible properties when creating an
	   * element to avoid having to create the same element twice?
	   */
	  getDefaultValueForProperty: function(nodeName, prop) {
	    var nodeDefaults = defaultValueCache[nodeName];
	    var testElement;
	    if (!nodeDefaults) {
	      defaultValueCache[nodeName] = nodeDefaults = {};
	    }
	    if (!(prop in nodeDefaults)) {
	      testElement = document.createElement(nodeName);
	      nodeDefaults[prop] = testElement[prop];
	    }
	    return nodeDefaults[prop];
	  },

	  injection: DOMPropertyInjection
	};

	module.exports = DOMProperty;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule quoteAttributeValueForBrowser
	 */

	'use strict';

	var escapeTextContentForBrowser = __webpack_require__(46);

	/**
	 * Escapes attribute value to prevent scripting attacks.
	 *
	 * @param {*} value Value to escape.
	 * @return {string} An escaped string.
	 */
	function quoteAttributeValueForBrowser(value) {
	  return '"' + escapeTextContentForBrowser(value) + '"';
	}

	module.exports = quoteAttributeValueForBrowser;


/***/ },
/* 46 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule escapeTextContentForBrowser
	 */

	'use strict';

	var ESCAPE_LOOKUP = {
	  '&': '&amp;',
	  '>': '&gt;',
	  '<': '&lt;',
	  '"': '&quot;',
	  '\'': '&#x27;'
	};

	var ESCAPE_REGEX = /[&><"']/g;

	function escaper(match) {
	  return ESCAPE_LOOKUP[match];
	}

	/**
	 * Escapes text to prevent scripting attacks.
	 *
	 * @param {*} text Text value to escape.
	 * @return {string} An escaped string.
	 */
	function escapeTextContentForBrowser(text) {
	  return ('' + text).replace(ESCAPE_REGEX, escaper);
	}

	module.exports = escapeTextContentForBrowser;


/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentBrowserEnvironment
	 */

	/*jslint evil: true */

	'use strict';

	var ReactDOMIDOperations = __webpack_require__(48);
	var ReactMount = __webpack_require__(67);

	/**
	 * Abstracts away all functionality of the reconciler that requires knowledge of
	 * the browser context. TODO: These callers should be refactored to avoid the
	 * need for this injection.
	 */
	var ReactComponentBrowserEnvironment = {

	  processChildrenUpdates:
	    ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

	  replaceNodeWithMarkupByID:
	    ReactDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,

	  /**
	   * If a particular environment requires that some resources be cleaned up,
	   * specify this in the injected Mixin. In the DOM, we would likely want to
	   * purge any cached node ID lookups.
	   *
	   * @private
	   */
	  unmountIDFromEnvironment: function(rootNodeID) {
	    ReactMount.purgeID(rootNodeID);
	  }

	};

	module.exports = ReactComponentBrowserEnvironment;


/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMIDOperations
	 * @typechecks static-only
	 */

	/*jslint evil: true */

	'use strict';

	var CSSPropertyOperations = __webpack_require__(49);
	var DOMChildrenOperations = __webpack_require__(58);
	var DOMPropertyOperations = __webpack_require__(43);
	var ReactMount = __webpack_require__(67);
	var ReactPerf = __webpack_require__(26);

	var invariant = __webpack_require__(7);
	var setInnerHTML = __webpack_require__(66);

	/**
	 * Errors for properties that should not be updated with `updatePropertyById()`.
	 *
	 * @type {object}
	 * @private
	 */
	var INVALID_PROPERTY_ERRORS = {
	  dangerouslySetInnerHTML:
	    '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
	  style: '`style` must be set using `updateStylesByID()`.'
	};

	/**
	 * Operations used to process updates to DOM nodes. This is made injectable via
	 * `ReactDOMComponent.BackendIDOperations`.
	 */
	var ReactDOMIDOperations = {

	  /**
	   * Updates a DOM node with new property values. This should only be used to
	   * update DOM properties in `DOMProperty`.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} name A valid property name, see `DOMProperty`.
	   * @param {*} value New value of the property.
	   * @internal
	   */
	  updatePropertyByID: function(id, name, value) {
	    var node = ReactMount.getNode(id);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
	      'updatePropertyByID(...): %s',
	      INVALID_PROPERTY_ERRORS[name]
	    ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));

	    // If we're updating to null or undefined, we should remove the property
	    // from the DOM node instead of inadvertantly setting to a string. This
	    // brings us in line with the same behavior we have on initial render.
	    if (value != null) {
	      DOMPropertyOperations.setValueForProperty(node, name, value);
	    } else {
	      DOMPropertyOperations.deleteValueForProperty(node, name);
	    }
	  },

	  /**
	   * Updates a DOM node to remove a property. This should only be used to remove
	   * DOM properties in `DOMProperty`.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} name A property name to remove, see `DOMProperty`.
	   * @internal
	   */
	  deletePropertyByID: function(id, name, value) {
	    var node = ReactMount.getNode(id);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
	      'updatePropertyByID(...): %s',
	      INVALID_PROPERTY_ERRORS[name]
	    ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));
	    DOMPropertyOperations.deleteValueForProperty(node, name, value);
	  },

	  /**
	   * Updates a DOM node with new style values. If a value is specified as '',
	   * the corresponding style property will be unset.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {object} styles Mapping from styles to values.
	   * @internal
	   */
	  updateStylesByID: function(id, styles) {
	    var node = ReactMount.getNode(id);
	    CSSPropertyOperations.setValueForStyles(node, styles);
	  },

	  /**
	   * Updates a DOM node's innerHTML.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} html An HTML string.
	   * @internal
	   */
	  updateInnerHTMLByID: function(id, html) {
	    var node = ReactMount.getNode(id);
	    setInnerHTML(node, html);
	  },

	  /**
	   * Updates a DOM node's text content set by `props.content`.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} content Text content.
	   * @internal
	   */
	  updateTextContentByID: function(id, content) {
	    var node = ReactMount.getNode(id);
	    DOMChildrenOperations.updateTextContent(node, content);
	  },

	  /**
	   * Replaces a DOM node that exists in the document with markup.
	   *
	   * @param {string} id ID of child to be replaced.
	   * @param {string} markup Dangerous markup to inject in place of child.
	   * @internal
	   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
	   */
	  dangerouslyReplaceNodeWithMarkupByID: function(id, markup) {
	    var node = ReactMount.getNode(id);
	    DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
	  },

	  /**
	   * Updates a component's children by processing a series of updates.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markup List of markup strings.
	   * @internal
	   */
	  dangerouslyProcessChildrenUpdates: function(updates, markup) {
	    for (var i = 0; i < updates.length; i++) {
	      updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
	    }
	    DOMChildrenOperations.processUpdates(updates, markup);
	  }
	};

	ReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {
	  updatePropertyByID: 'updatePropertyByID',
	  deletePropertyByID: 'deletePropertyByID',
	  updateStylesByID: 'updateStylesByID',
	  updateInnerHTMLByID: 'updateInnerHTMLByID',
	  updateTextContentByID: 'updateTextContentByID',
	  dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',
	  dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'
	});

	module.exports = ReactDOMIDOperations;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSPropertyOperations
	 * @typechecks static-only
	 */

	'use strict';

	var CSSProperty = __webpack_require__(50);
	var ExecutionEnvironment = __webpack_require__(51);

	var camelizeStyleName = __webpack_require__(52);
	var dangerousStyleValue = __webpack_require__(54);
	var hyphenateStyleName = __webpack_require__(55);
	var memoizeStringOnly = __webpack_require__(57);
	var warning = __webpack_require__(15);

	var processStyleName = memoizeStringOnly(function(styleName) {
	  return hyphenateStyleName(styleName);
	});

	var styleFloatAccessor = 'cssFloat';
	if (ExecutionEnvironment.canUseDOM) {
	  // IE8 only supports accessing cssFloat (standard) as styleFloat
	  if (document.documentElement.style.cssFloat === undefined) {
	    styleFloatAccessor = 'styleFloat';
	  }
	}

	if ("production" !== process.env.NODE_ENV) {
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

	  // style values shouldn't contain a semicolon
	  var badStyleValueWithSemicolonPattern = /;\s*$/;

	  var warnedStyleNames = {};
	  var warnedStyleValues = {};

	  var warnHyphenatedStyleName = function(name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    ("production" !== process.env.NODE_ENV ? warning(
	      false,
	      'Unsupported style property %s. Did you mean %s?',
	      name,
	      camelizeStyleName(name)
	    ) : null);
	  };

	  var warnBadVendoredStyleName = function(name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    ("production" !== process.env.NODE_ENV ? warning(
	      false,
	      'Unsupported vendor-prefixed style property %s. Did you mean %s?',
	      name,
	      name.charAt(0).toUpperCase() + name.slice(1)
	    ) : null);
	  };

	  var warnStyleValueWithSemicolon = function(name, value) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }

	    warnedStyleValues[value] = true;
	    ("production" !== process.env.NODE_ENV ? warning(
	      false,
	      'Style property values shouldn\'t contain a semicolon. ' +
	      'Try "%s: %s" instead.',
	      name,
	      value.replace(badStyleValueWithSemicolonPattern, '')
	    ) : null);
	  };

	  /**
	   * @param {string} name
	   * @param {*} value
	   */
	  var warnValidStyle = function(name, value) {
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value);
	    }
	  };
	}

	/**
	 * Operations for dealing with CSS properties.
	 */
	var CSSPropertyOperations = {

	  /**
	   * Serializes a mapping of style properties for use as inline styles:
	   *
	   *   > createMarkupForStyles({width: '200px', height: 0})
	   *   "width:200px;height:0;"
	   *
	   * Undefined values are ignored so that declarative programming is easier.
	   * The result should be HTML-escaped before insertion into the DOM.
	   *
	   * @param {object} styles
	   * @return {?string}
	   */
	  createMarkupForStyles: function(styles) {
	    var serialized = '';
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var styleValue = styles[styleName];
	      if ("production" !== process.env.NODE_ENV) {
	        warnValidStyle(styleName, styleValue);
	      }
	      if (styleValue != null) {
	        serialized += processStyleName(styleName) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue) + ';';
	      }
	    }
	    return serialized || null;
	  },

	  /**
	   * Sets the value for multiple styles on a node.  If a value is specified as
	   * '' (empty string), the corresponding style property will be unset.
	   *
	   * @param {DOMElement} node
	   * @param {object} styles
	   */
	  setValueForStyles: function(node, styles) {
	    var style = node.style;
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      if ("production" !== process.env.NODE_ENV) {
	        warnValidStyle(styleName, styles[styleName]);
	      }
	      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
	      if (styleName === 'float') {
	        styleName = styleFloatAccessor;
	      }
	      if (styleValue) {
	        style[styleName] = styleValue;
	      } else {
	        var expansion = CSSProperty.shorthandPropertyExpansions[styleName];
	        if (expansion) {
	          // Shorthand property that IE8 won't like unsetting, so unset each
	          // component to placate it
	          for (var individualStyleName in expansion) {
	            style[individualStyleName] = '';
	          }
	        } else {
	          style[styleName] = '';
	        }
	      }
	    }
	  }

	};

	module.exports = CSSPropertyOperations;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 50 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSProperty
	 */

	'use strict';

	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */
	var isUnitlessNumber = {
	  boxFlex: true,
	  boxFlexGroup: true,
	  columnCount: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,

	  // SVG-related properties
	  fillOpacity: true,
	  strokeDashoffset: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};

	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}

	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function(prop) {
	  prefixes.forEach(function(prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});

	/**
	 * Most style properties can be unset by doing .style[prop] = '' but IE8
	 * doesn't like doing that with shorthand properties so for the properties that
	 * IE8 breaks on, which are listed here, we instead unset each of the
	 * individual properties. See http://bugs.jquery.com/ticket/12385.
	 * The 4-value 'clock' properties like margin, padding, border-width seem to
	 * behave without any problems. Curiously, list-style works too without any
	 * special prodding.
	 */
	var shorthandPropertyExpansions = {
	  background: {
	    backgroundImage: true,
	    backgroundPosition: true,
	    backgroundRepeat: true,
	    backgroundColor: true
	  },
	  border: {
	    borderWidth: true,
	    borderStyle: true,
	    borderColor: true
	  },
	  borderBottom: {
	    borderBottomWidth: true,
	    borderBottomStyle: true,
	    borderBottomColor: true
	  },
	  borderLeft: {
	    borderLeftWidth: true,
	    borderLeftStyle: true,
	    borderLeftColor: true
	  },
	  borderRight: {
	    borderRightWidth: true,
	    borderRightStyle: true,
	    borderRightColor: true
	  },
	  borderTop: {
	    borderTopWidth: true,
	    borderTopStyle: true,
	    borderTopColor: true
	  },
	  font: {
	    fontStyle: true,
	    fontVariant: true,
	    fontWeight: true,
	    fontSize: true,
	    lineHeight: true,
	    fontFamily: true
	  }
	};

	var CSSProperty = {
	  isUnitlessNumber: isUnitlessNumber,
	  shorthandPropertyExpansions: shorthandPropertyExpansions
	};

	module.exports = CSSProperty;


/***/ },
/* 51 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ExecutionEnvironment
	 */

	/*jslint evil: true */

	"use strict";

	var canUseDOM = !!(
	  (typeof window !== 'undefined' &&
	  window.document && window.document.createElement)
	);

	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {

	  canUseDOM: canUseDOM,

	  canUseWorkers: typeof Worker !== 'undefined',

	  canUseEventListeners:
	    canUseDOM && !!(window.addEventListener || window.attachEvent),

	  canUseViewport: canUseDOM && !!window.screen,

	  isInWorker: !canUseDOM // For now, this is true - might change in the future.

	};

	module.exports = ExecutionEnvironment;


/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelizeStyleName
	 * @typechecks
	 */

	"use strict";

	var camelize = __webpack_require__(53);

	var msPattern = /^-ms-/;

	/**
	 * Camelcases a hyphenated CSS property name, for example:
	 *
	 *   > camelizeStyleName('background-color')
	 *   < "backgroundColor"
	 *   > camelizeStyleName('-moz-transition')
	 *   < "MozTransition"
	 *   > camelizeStyleName('-ms-transition')
	 *   < "msTransition"
	 *
	 * As Andi Smith suggests
	 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	 * is converted to lowercase `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelizeStyleName(string) {
	  return camelize(string.replace(msPattern, 'ms-'));
	}

	module.exports = camelizeStyleName;


/***/ },
/* 53 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelize
	 * @typechecks
	 */

	var _hyphenPattern = /-(.)/g;

	/**
	 * Camelcases a hyphenated string, for example:
	 *
	 *   > camelize('background-color')
	 *   < "backgroundColor"
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelize(string) {
	  return string.replace(_hyphenPattern, function(_, character) {
	    return character.toUpperCase();
	  });
	}

	module.exports = camelize;


/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule dangerousStyleValue
	 * @typechecks static-only
	 */

	'use strict';

	var CSSProperty = __webpack_require__(50);

	var isUnitlessNumber = CSSProperty.isUnitlessNumber;

	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @return {string} Normalized style value with dimensions applied.
	 */
	function dangerousStyleValue(name, value) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901

	  var isEmpty = value == null || typeof value === 'boolean' || value === '';
	  if (isEmpty) {
	    return '';
	  }

	  var isNonNumeric = isNaN(value);
	  if (isNonNumeric || value === 0 ||
	      isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
	    return '' + value; // cast to string
	  }

	  if (typeof value === 'string') {
	    value = value.trim();
	  }
	  return value + 'px';
	}

	module.exports = dangerousStyleValue;


/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenateStyleName
	 * @typechecks
	 */

	"use strict";

	var hyphenate = __webpack_require__(56);

	var msPattern = /^ms-/;

	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenateStyleName(string) {
	  return hyphenate(string).replace(msPattern, '-ms-');
	}

	module.exports = hyphenateStyleName;


/***/ },
/* 56 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenate
	 * @typechecks
	 */

	var _uppercasePattern = /([A-Z])/g;

	/**
	 * Hyphenates a camelcased string, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *
	 * For CSS style names, use `hyphenateStyleName` instead which works properly
	 * with all vendor prefixes, including `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenate(string) {
	  return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}

	module.exports = hyphenate;


/***/ },
/* 57 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule memoizeStringOnly
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Memoizes the return value of a function that accepts one string argument.
	 *
	 * @param {function} callback
	 * @return {function}
	 */
	function memoizeStringOnly(callback) {
	  var cache = {};
	  return function(string) {
	    if (!cache.hasOwnProperty(string)) {
	      cache[string] = callback.call(this, string);
	    }
	    return cache[string];
	  };
	}

	module.exports = memoizeStringOnly;


/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMChildrenOperations
	 * @typechecks static-only
	 */

	'use strict';

	var Danger = __webpack_require__(59);
	var ReactMultiChildUpdateTypes = __webpack_require__(64);

	var setTextContent = __webpack_require__(65);
	var invariant = __webpack_require__(7);

	/**
	 * Inserts `childNode` as a child of `parentNode` at the `index`.
	 *
	 * @param {DOMElement} parentNode Parent node in which to insert.
	 * @param {DOMElement} childNode Child node to insert.
	 * @param {number} index Index at which to insert the child.
	 * @internal
	 */
	function insertChildAt(parentNode, childNode, index) {
	  // By exploiting arrays returning `undefined` for an undefined index, we can
	  // rely exclusively on `insertBefore(node, null)` instead of also using
	  // `appendChild(node)`. However, using `undefined` is not allowed by all
	  // browsers so we must replace it with `null`.
	  parentNode.insertBefore(
	    childNode,
	    parentNode.childNodes[index] || null
	  );
	}

	/**
	 * Operations for updating with DOM children.
	 */
	var DOMChildrenOperations = {

	  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

	  updateTextContent: setTextContent,

	  /**
	   * Updates a component's children by processing a series of updates. The
	   * update configurations are each expected to have a `parentNode` property.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markupList List of markup strings.
	   * @internal
	   */
	  processUpdates: function(updates, markupList) {
	    var update;
	    // Mapping from parent IDs to initial child orderings.
	    var initialChildren = null;
	    // List of children that will be moved or removed.
	    var updatedChildren = null;

	    for (var i = 0; i < updates.length; i++) {
	      update = updates[i];
	      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING ||
	          update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
	        var updatedIndex = update.fromIndex;
	        var updatedChild = update.parentNode.childNodes[updatedIndex];
	        var parentID = update.parentID;

	        ("production" !== process.env.NODE_ENV ? invariant(
	          updatedChild,
	          'processUpdates(): Unable to find child %s of element. This ' +
	          'probably means the DOM was unexpectedly mutated (e.g., by the ' +
	          'browser), usually due to forgetting a <tbody> when using tables, ' +
	          'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' +
	          'in an <svg> parent. Try inspecting the child nodes of the element ' +
	          'with React ID `%s`.',
	          updatedIndex,
	          parentID
	        ) : invariant(updatedChild));

	        initialChildren = initialChildren || {};
	        initialChildren[parentID] = initialChildren[parentID] || [];
	        initialChildren[parentID][updatedIndex] = updatedChild;

	        updatedChildren = updatedChildren || [];
	        updatedChildren.push(updatedChild);
	      }
	    }

	    var renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);

	    // Remove updated children first so that `toIndex` is consistent.
	    if (updatedChildren) {
	      for (var j = 0; j < updatedChildren.length; j++) {
	        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
	      }
	    }

	    for (var k = 0; k < updates.length; k++) {
	      update = updates[k];
	      switch (update.type) {
	        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
	          insertChildAt(
	            update.parentNode,
	            renderedMarkup[update.markupIndex],
	            update.toIndex
	          );
	          break;
	        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
	          insertChildAt(
	            update.parentNode,
	            initialChildren[update.parentID][update.fromIndex],
	            update.toIndex
	          );
	          break;
	        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
	          setTextContent(
	            update.parentNode,
	            update.textContent
	          );
	          break;
	        case ReactMultiChildUpdateTypes.REMOVE_NODE:
	          // Already removed by the for-loop above.
	          break;
	      }
	    }
	  }

	};

	module.exports = DOMChildrenOperations;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Danger
	 * @typechecks static-only
	 */

	/*jslint evil: true, sub: true */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(51);

	var createNodesFromMarkup = __webpack_require__(60);
	var emptyFunction = __webpack_require__(16);
	var getMarkupWrap = __webpack_require__(63);
	var invariant = __webpack_require__(7);

	var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
	var RESULT_INDEX_ATTR = 'data-danger-index';

	/**
	 * Extracts the `nodeName` from a string of markup.
	 *
	 * NOTE: Extracting the `nodeName` does not require a regular expression match
	 * because we make assumptions about React-generated markup (i.e. there are no
	 * spaces surrounding the opening tag and there is at least one attribute).
	 *
	 * @param {string} markup String of markup.
	 * @return {string} Node name of the supplied markup.
	 * @see http://jsperf.com/extract-nodename
	 */
	function getNodeName(markup) {
	  return markup.substring(1, markup.indexOf(' '));
	}

	var Danger = {

	  /**
	   * Renders markup into an array of nodes. The markup is expected to render
	   * into a list of root nodes. Also, the length of `resultList` and
	   * `markupList` should be the same.
	   *
	   * @param {array<string>} markupList List of markup strings to render.
	   * @return {array<DOMElement>} List of rendered nodes.
	   * @internal
	   */
	  dangerouslyRenderMarkup: function(markupList) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ExecutionEnvironment.canUseDOM,
	      'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' +
	      'thread. Make sure `window` and `document` are available globally ' +
	      'before requiring React when unit testing or use ' +
	      'React.renderToString for server rendering.'
	    ) : invariant(ExecutionEnvironment.canUseDOM));
	    var nodeName;
	    var markupByNodeName = {};
	    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
	    for (var i = 0; i < markupList.length; i++) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        markupList[i],
	        'dangerouslyRenderMarkup(...): Missing markup.'
	      ) : invariant(markupList[i]));
	      nodeName = getNodeName(markupList[i]);
	      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
	      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
	      markupByNodeName[nodeName][i] = markupList[i];
	    }
	    var resultList = [];
	    var resultListAssignmentCount = 0;
	    for (nodeName in markupByNodeName) {
	      if (!markupByNodeName.hasOwnProperty(nodeName)) {
	        continue;
	      }
	      var markupListByNodeName = markupByNodeName[nodeName];

	      // This for-in loop skips the holes of the sparse array. The order of
	      // iteration should follow the order of assignment, which happens to match
	      // numerical index order, but we don't rely on that.
	      var resultIndex;
	      for (resultIndex in markupListByNodeName) {
	        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
	          var markup = markupListByNodeName[resultIndex];

	          // Push the requested markup with an additional RESULT_INDEX_ATTR
	          // attribute.  If the markup does not start with a < character, it
	          // will be discarded below (with an appropriate console.error).
	          markupListByNodeName[resultIndex] = markup.replace(
	            OPEN_TAG_NAME_EXP,
	            // This index will be parsed back out below.
	            '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" '
	          );
	        }
	      }

	      // Render each group of markup with similar wrapping `nodeName`.
	      var renderNodes = createNodesFromMarkup(
	        markupListByNodeName.join(''),
	        emptyFunction // Do nothing special with <script> tags.
	      );

	      for (var j = 0; j < renderNodes.length; ++j) {
	        var renderNode = renderNodes[j];
	        if (renderNode.hasAttribute &&
	            renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

	          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
	          renderNode.removeAttribute(RESULT_INDEX_ATTR);

	          ("production" !== process.env.NODE_ENV ? invariant(
	            !resultList.hasOwnProperty(resultIndex),
	            'Danger: Assigning to an already-occupied result index.'
	          ) : invariant(!resultList.hasOwnProperty(resultIndex)));

	          resultList[resultIndex] = renderNode;

	          // This should match resultList.length and markupList.length when
	          // we're done.
	          resultListAssignmentCount += 1;

	        } else if ("production" !== process.env.NODE_ENV) {
	          console.error(
	            'Danger: Discarding unexpected node:',
	            renderNode
	          );
	        }
	      }
	    }

	    // Although resultList was populated out of order, it should now be a dense
	    // array.
	    ("production" !== process.env.NODE_ENV ? invariant(
	      resultListAssignmentCount === resultList.length,
	      'Danger: Did not assign to every index of resultList.'
	    ) : invariant(resultListAssignmentCount === resultList.length));

	    ("production" !== process.env.NODE_ENV ? invariant(
	      resultList.length === markupList.length,
	      'Danger: Expected markup to render %s nodes, but rendered %s.',
	      markupList.length,
	      resultList.length
	    ) : invariant(resultList.length === markupList.length));

	    return resultList;
	  },

	  /**
	   * Replaces a node with a string of markup at its current position within its
	   * parent. The markup must render into a single root node.
	   *
	   * @param {DOMElement} oldChild Child node to replace.
	   * @param {string} markup Markup to render in place of the child node.
	   * @internal
	   */
	  dangerouslyReplaceNodeWithMarkup: function(oldChild, markup) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ExecutionEnvironment.canUseDOM,
	      'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' +
	      'worker thread. Make sure `window` and `document` are available ' +
	      'globally before requiring React when unit testing or use ' +
	      'React.renderToString for server rendering.'
	    ) : invariant(ExecutionEnvironment.canUseDOM));
	    ("production" !== process.env.NODE_ENV ? invariant(markup, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(markup));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      oldChild.tagName.toLowerCase() !== 'html',
	      'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' +
	      '<html> node. This is because browser quirks make this unreliable ' +
	      'and/or slow. If you want to render to the root you must use ' +
	      'server rendering. See React.renderToString().'
	    ) : invariant(oldChild.tagName.toLowerCase() !== 'html'));

	    var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
	    oldChild.parentNode.replaceChild(newChild, oldChild);
	  }

	};

	module.exports = Danger;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createNodesFromMarkup
	 * @typechecks
	 */

	/*jslint evil: true, sub: true */

	var ExecutionEnvironment = __webpack_require__(51);

	var createArrayFromMixed = __webpack_require__(61);
	var getMarkupWrap = __webpack_require__(63);
	var invariant = __webpack_require__(7);

	/**
	 * Dummy container used to render all markup.
	 */
	var dummyNode =
	  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Pattern used by `getNodeName`.
	 */
	var nodeNamePattern = /^\s*<(\w+)/;

	/**
	 * Extracts the `nodeName` of the first element in a string of markup.
	 *
	 * @param {string} markup String of markup.
	 * @return {?string} Node name of the supplied markup.
	 */
	function getNodeName(markup) {
	  var nodeNameMatch = markup.match(nodeNamePattern);
	  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
	}

	/**
	 * Creates an array containing the nodes rendered from the supplied markup. The
	 * optionally supplied `handleScript` function will be invoked once for each
	 * <script> element that is rendered. If no `handleScript` function is supplied,
	 * an exception is thrown if any <script> elements are rendered.
	 *
	 * @param {string} markup A string of valid HTML markup.
	 * @param {?function} handleScript Invoked once for each rendered <script>.
	 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
	 */
	function createNodesFromMarkup(markup, handleScript) {
	  var node = dummyNode;
	  ("production" !== process.env.NODE_ENV ? invariant(!!dummyNode, 'createNodesFromMarkup dummy not initialized') : invariant(!!dummyNode));
	  var nodeName = getNodeName(markup);

	  var wrap = nodeName && getMarkupWrap(nodeName);
	  if (wrap) {
	    node.innerHTML = wrap[1] + markup + wrap[2];

	    var wrapDepth = wrap[0];
	    while (wrapDepth--) {
	      node = node.lastChild;
	    }
	  } else {
	    node.innerHTML = markup;
	  }

	  var scripts = node.getElementsByTagName('script');
	  if (scripts.length) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      handleScript,
	      'createNodesFromMarkup(...): Unexpected <script> element rendered.'
	    ) : invariant(handleScript));
	    createArrayFromMixed(scripts).forEach(handleScript);
	  }

	  var nodes = createArrayFromMixed(node.childNodes);
	  while (node.lastChild) {
	    node.removeChild(node.lastChild);
	  }
	  return nodes;
	}

	module.exports = createNodesFromMarkup;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createArrayFromMixed
	 * @typechecks
	 */

	var toArray = __webpack_require__(62);

	/**
	 * Perform a heuristic test to determine if an object is "array-like".
	 *
	 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
	 *   Joshu replied: "Mu."
	 *
	 * This function determines if its argument has "array nature": it returns
	 * true if the argument is an actual array, an `arguments' object, or an
	 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
	 *
	 * It will return false for other array-like objects like Filelist.
	 *
	 * @param {*} obj
	 * @return {boolean}
	 */
	function hasArrayNature(obj) {
	  return (
	    // not null/false
	    !!obj &&
	    // arrays are objects, NodeLists are functions in Safari
	    (typeof obj == 'object' || typeof obj == 'function') &&
	    // quacks like an array
	    ('length' in obj) &&
	    // not window
	    !('setInterval' in obj) &&
	    // no DOM node should be considered an array-like
	    // a 'select' element has 'length' and 'item' properties on IE8
	    (typeof obj.nodeType != 'number') &&
	    (
	      // a real array
	      (// HTMLCollection/NodeList
	      (Array.isArray(obj) ||
	      // arguments
	      ('callee' in obj) || 'item' in obj))
	    )
	  );
	}

	/**
	 * Ensure that the argument is an array by wrapping it in an array if it is not.
	 * Creates a copy of the argument if it is already an array.
	 *
	 * This is mostly useful idiomatically:
	 *
	 *   var createArrayFromMixed = require('createArrayFromMixed');
	 *
	 *   function takesOneOrMoreThings(things) {
	 *     things = createArrayFromMixed(things);
	 *     ...
	 *   }
	 *
	 * This allows you to treat `things' as an array, but accept scalars in the API.
	 *
	 * If you need to convert an array-like object, like `arguments`, into an array
	 * use toArray instead.
	 *
	 * @param {*} obj
	 * @return {array}
	 */
	function createArrayFromMixed(obj) {
	  if (!hasArrayNature(obj)) {
	    return [obj];
	  } else if (Array.isArray(obj)) {
	    return obj.slice();
	  } else {
	    return toArray(obj);
	  }
	}

	module.exports = createArrayFromMixed;


/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule toArray
	 * @typechecks
	 */

	var invariant = __webpack_require__(7);

	/**
	 * Convert array-like objects to arrays.
	 *
	 * This API assumes the caller knows the contents of the data type. For less
	 * well defined inputs use createArrayFromMixed.
	 *
	 * @param {object|function|filelist} obj
	 * @return {array}
	 */
	function toArray(obj) {
	  var length = obj.length;

	  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
	  // old versions of Safari).
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !Array.isArray(obj) &&
	    (typeof obj === 'object' || typeof obj === 'function'),
	    'toArray: Array-like object expected'
	  ) : invariant(!Array.isArray(obj) &&
	  (typeof obj === 'object' || typeof obj === 'function')));

	  ("production" !== process.env.NODE_ENV ? invariant(
	    typeof length === 'number',
	    'toArray: Object needs a length property'
	  ) : invariant(typeof length === 'number'));

	  ("production" !== process.env.NODE_ENV ? invariant(
	    length === 0 ||
	    (length - 1) in obj,
	    'toArray: Object should have keys for indices'
	  ) : invariant(length === 0 ||
	  (length - 1) in obj));

	  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
	  // without method will throw during the slice call and skip straight to the
	  // fallback.
	  if (obj.hasOwnProperty) {
	    try {
	      return Array.prototype.slice.call(obj);
	    } catch (e) {
	      // IE < 9 does not support Array#slice on collections objects
	    }
	  }

	  // Fall back to copying key by key. This assumes all keys have a value,
	  // so will not preserve sparsely populated inputs.
	  var ret = Array(length);
	  for (var ii = 0; ii < length; ii++) {
	    ret[ii] = obj[ii];
	  }
	  return ret;
	}

	module.exports = toArray;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getMarkupWrap
	 */

	var ExecutionEnvironment = __webpack_require__(51);

	var invariant = __webpack_require__(7);

	/**
	 * Dummy container used to detect which wraps are necessary.
	 */
	var dummyNode =
	  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Some browsers cannot use `innerHTML` to render certain elements standalone,
	 * so we wrap them, render the wrapped nodes, then extract the desired node.
	 *
	 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
	 */
	var shouldWrap = {
	  // Force wrapping for SVG elements because if they get created inside a <div>,
	  // they will be initialized in the wrong namespace (and will not display).
	  'circle': true,
	  'clipPath': true,
	  'defs': true,
	  'ellipse': true,
	  'g': true,
	  'line': true,
	  'linearGradient': true,
	  'path': true,
	  'polygon': true,
	  'polyline': true,
	  'radialGradient': true,
	  'rect': true,
	  'stop': true,
	  'text': true
	};

	var selectWrap = [1, '<select multiple="true">', '</select>'];
	var tableWrap = [1, '<table>', '</table>'];
	var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

	var svgWrap = [1, '<svg>', '</svg>'];

	var markupWrap = {
	  '*': [1, '?<div>', '</div>'],

	  'area': [1, '<map>', '</map>'],
	  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  'legend': [1, '<fieldset>', '</fieldset>'],
	  'param': [1, '<object>', '</object>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],

	  'optgroup': selectWrap,
	  'option': selectWrap,

	  'caption': tableWrap,
	  'colgroup': tableWrap,
	  'tbody': tableWrap,
	  'tfoot': tableWrap,
	  'thead': tableWrap,

	  'td': trWrap,
	  'th': trWrap,

	  'circle': svgWrap,
	  'clipPath': svgWrap,
	  'defs': svgWrap,
	  'ellipse': svgWrap,
	  'g': svgWrap,
	  'line': svgWrap,
	  'linearGradient': svgWrap,
	  'path': svgWrap,
	  'polygon': svgWrap,
	  'polyline': svgWrap,
	  'radialGradient': svgWrap,
	  'rect': svgWrap,
	  'stop': svgWrap,
	  'text': svgWrap
	};

	/**
	 * Gets the markup wrap configuration for the supplied `nodeName`.
	 *
	 * NOTE: This lazily detects which wraps are necessary for the current browser.
	 *
	 * @param {string} nodeName Lowercase `nodeName`.
	 * @return {?array} Markup wrap configuration, if applicable.
	 */
	function getMarkupWrap(nodeName) {
	  ("production" !== process.env.NODE_ENV ? invariant(!!dummyNode, 'Markup wrapping node not initialized') : invariant(!!dummyNode));
	  if (!markupWrap.hasOwnProperty(nodeName)) {
	    nodeName = '*';
	  }
	  if (!shouldWrap.hasOwnProperty(nodeName)) {
	    if (nodeName === '*') {
	      dummyNode.innerHTML = '<link />';
	    } else {
	      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
	    }
	    shouldWrap[nodeName] = !dummyNode.firstChild;
	  }
	  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
	}


	module.exports = getMarkupWrap;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChildUpdateTypes
	 */

	'use strict';

	var keyMirror = __webpack_require__(6);

	/**
	 * When a component's children are updated, a series of update configuration
	 * objects are created in order to batch and serialize the required changes.
	 *
	 * Enumerates all the possible types of update configurations.
	 *
	 * @internal
	 */
	var ReactMultiChildUpdateTypes = keyMirror({
	  INSERT_MARKUP: null,
	  MOVE_EXISTING: null,
	  REMOVE_NODE: null,
	  TEXT_CONTENT: null
	});

	module.exports = ReactMultiChildUpdateTypes;


/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setTextContent
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(51);
	var escapeTextContentForBrowser = __webpack_require__(46);
	var setInnerHTML = __webpack_require__(66);

	/**
	 * Set the textContent property of a node, ensuring that whitespace is preserved
	 * even in IE8. innerText is a poor substitute for textContent and, among many
	 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
	 * as it should.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */
	var setTextContent = function(node, text) {
	  node.textContent = text;
	};

	if (ExecutionEnvironment.canUseDOM) {
	  if (!('textContent' in document.documentElement)) {
	    setTextContent = function(node, text) {
	      setInnerHTML(node, escapeTextContentForBrowser(text));
	    };
	  }
	}

	module.exports = setTextContent;


/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setInnerHTML
	 */

	/* globals MSApp */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(51);

	var WHITESPACE_TEST = /^[ \r\n\t\f]/;
	var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

	/**
	 * Set the innerHTML property of a node, ensuring that whitespace is preserved
	 * even in IE8.
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */
	var setInnerHTML = function(node, html) {
	  node.innerHTML = html;
	};

	// Win8 apps: Allow all html to be inserted
	if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	  setInnerHTML = function(node, html) {
	    MSApp.execUnsafeLocalFunction(function() {
	      node.innerHTML = html;
	    });
	  };
	}

	if (ExecutionEnvironment.canUseDOM) {
	  // IE8: When updating a just created node with innerHTML only leading
	  // whitespace is removed. When updating an existing node with innerHTML
	  // whitespace in root TextNodes is also collapsed.
	  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

	  // Feature detection; only IE8 is known to behave improperly like this.
	  var testElement = document.createElement('div');
	  testElement.innerHTML = ' ';
	  if (testElement.innerHTML === '') {
	    setInnerHTML = function(node, html) {
	      // Magic theory: IE8 supposedly differentiates between added and updated
	      // nodes when processing innerHTML, innerHTML on updated nodes suffers
	      // from worse whitespace behavior. Re-adding a node like this triggers
	      // the initial and more favorable whitespace behavior.
	      // TODO: What to do on a detached node?
	      if (node.parentNode) {
	        node.parentNode.replaceChild(node, node);
	      }

	      // We also implement a workaround for non-visible tags disappearing into
	      // thin air on IE8, this only happens if there is no visible text
	      // in-front of the non-visible tags. Piggyback on the whitespace fix
	      // and simply check if any non-visible tags appear in the source.
	      if (WHITESPACE_TEST.test(html) ||
	          html[0] === '<' && NONVISIBLE_TEST.test(html)) {
	        // Recover leading whitespace by temporarily prepending any character.
	        // \uFEFF has the potential advantage of being zero-width/invisible.
	        node.innerHTML = '\uFEFF' + html;

	        // deleteData leaves an empty `TextNode` which offsets the index of all
	        // children. Definitely want to avoid this.
	        var textNode = node.firstChild;
	        if (textNode.data.length === 1) {
	          node.removeChild(textNode);
	        } else {
	          textNode.deleteData(0, 1);
	        }
	      } else {
	        node.innerHTML = html;
	      }
	    };
	  }
	}

	module.exports = setInnerHTML;


/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMount
	 */

	'use strict';

	var DOMProperty = __webpack_require__(44);
	var ReactBrowserEventEmitter = __webpack_require__(68);
	var ReactCurrentOwner = __webpack_require__(17);
	var ReactElement = __webpack_require__(11);
	var ReactElementValidator = __webpack_require__(30);
	var ReactEmptyComponent = __webpack_require__(76);
	var ReactInstanceHandles = __webpack_require__(20);
	var ReactInstanceMap = __webpack_require__(36);
	var ReactMarkupChecksum = __webpack_require__(77);
	var ReactPerf = __webpack_require__(26);
	var ReactReconciler = __webpack_require__(27);
	var ReactUpdateQueue = __webpack_require__(23);
	var ReactUpdates = __webpack_require__(24);

	var emptyObject = __webpack_require__(14);
	var containsNode = __webpack_require__(79);
	var getReactRootElementInContainer = __webpack_require__(82);
	var instantiateReactComponent = __webpack_require__(83);
	var invariant = __webpack_require__(7);
	var setInnerHTML = __webpack_require__(66);
	var shouldUpdateReactComponent = __webpack_require__(86);
	var warning = __webpack_require__(15);

	var SEPARATOR = ReactInstanceHandles.SEPARATOR;

	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var nodeCache = {};

	var ELEMENT_NODE_TYPE = 1;
	var DOC_NODE_TYPE = 9;

	/** Mapping from reactRootID to React component instance. */
	var instancesByReactRootID = {};

	/** Mapping from reactRootID to `container` nodes. */
	var containersByReactRootID = {};

	if ("production" !== process.env.NODE_ENV) {
	  /** __DEV__-only mapping from reactRootID to root elements. */
	  var rootElementsByReactRootID = {};
	}

	// Used to store breadth-first search state in findComponentRoot.
	var findComponentRootReusableArray = [];

	/**
	 * Finds the index of the first character
	 * that's not common between the two given strings.
	 *
	 * @return {number} the index of the character where the strings diverge
	 */
	function firstDifferenceIndex(string1, string2) {
	  var minLen = Math.min(string1.length, string2.length);
	  for (var i = 0; i < minLen; i++) {
	    if (string1.charAt(i) !== string2.charAt(i)) {
	      return i;
	    }
	  }
	  return string1.length === string2.length ? -1 : minLen;
	}

	/**
	 * @param {DOMElement} container DOM element that may contain a React component.
	 * @return {?string} A "reactRoot" ID, if a React component is rendered.
	 */
	function getReactRootID(container) {
	  var rootElement = getReactRootElementInContainer(container);
	  return rootElement && ReactMount.getID(rootElement);
	}

	/**
	 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
	 * element can return its control whose name or ID equals ATTR_NAME. All
	 * DOM nodes support `getAttributeNode` but this can also get called on
	 * other objects so just return '' if we're given something other than a
	 * DOM node (such as window).
	 *
	 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
	 * @return {string} ID of the supplied `domNode`.
	 */
	function getID(node) {
	  var id = internalGetID(node);
	  if (id) {
	    if (nodeCache.hasOwnProperty(id)) {
	      var cached = nodeCache[id];
	      if (cached !== node) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          !isValid(cached, id),
	          'ReactMount: Two valid but unequal nodes with the same `%s`: %s',
	          ATTR_NAME, id
	        ) : invariant(!isValid(cached, id)));

	        nodeCache[id] = node;
	      }
	    } else {
	      nodeCache[id] = node;
	    }
	  }

	  return id;
	}

	function internalGetID(node) {
	  // If node is something like a window, document, or text node, none of
	  // which support attributes or a .getAttribute method, gracefully return
	  // the empty string, as if the attribute were missing.
	  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
	}

	/**
	 * Sets the React-specific ID of the given node.
	 *
	 * @param {DOMElement} node The DOM node whose ID will be set.
	 * @param {string} id The value of the ID attribute.
	 */
	function setID(node, id) {
	  var oldID = internalGetID(node);
	  if (oldID !== id) {
	    delete nodeCache[oldID];
	  }
	  node.setAttribute(ATTR_NAME, id);
	  nodeCache[id] = node;
	}

	/**
	 * Finds the node with the supplied React-generated DOM ID.
	 *
	 * @param {string} id A React-generated DOM ID.
	 * @return {DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNode(id) {
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}

	/**
	 * Finds the node with the supplied public React instance.
	 *
	 * @param {*} instance A public React instance.
	 * @return {?DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNodeFromInstance(instance) {
	  var id = ReactInstanceMap.get(instance)._rootNodeID;
	  if (ReactEmptyComponent.isNullComponentID(id)) {
	    return null;
	  }
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}

	/**
	 * A node is "valid" if it is contained by a currently mounted container.
	 *
	 * This means that the node does not have to be contained by a document in
	 * order to be considered valid.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @param {string} id The expected ID of the node.
	 * @return {boolean} Whether the node is contained by a mounted container.
	 */
	function isValid(node, id) {
	  if (node) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      internalGetID(node) === id,
	      'ReactMount: Unexpected modification of `%s`',
	      ATTR_NAME
	    ) : invariant(internalGetID(node) === id));

	    var container = ReactMount.findReactContainerForID(id);
	    if (container && containsNode(container, node)) {
	      return true;
	    }
	  }

	  return false;
	}

	/**
	 * Causes the cache to forget about one React-specific ID.
	 *
	 * @param {string} id The ID to forget.
	 */
	function purgeID(id) {
	  delete nodeCache[id];
	}

	var deepestNodeSoFar = null;
	function findDeepestCachedAncestorImpl(ancestorID) {
	  var ancestor = nodeCache[ancestorID];
	  if (ancestor && isValid(ancestor, ancestorID)) {
	    deepestNodeSoFar = ancestor;
	  } else {
	    // This node isn't populated in the cache, so presumably none of its
	    // descendants are. Break out of the loop.
	    return false;
	  }
	}

	/**
	 * Return the deepest cached node whose ID is a prefix of `targetID`.
	 */
	function findDeepestCachedAncestor(targetID) {
	  deepestNodeSoFar = null;
	  ReactInstanceHandles.traverseAncestors(
	    targetID,
	    findDeepestCachedAncestorImpl
	  );

	  var foundNode = deepestNodeSoFar;
	  deepestNodeSoFar = null;
	  return foundNode;
	}

	/**
	 * Mounts this component and inserts it into the DOM.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {ReactReconcileTransaction} transaction
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function mountComponentIntoNode(
	    componentInstance,
	    rootID,
	    container,
	    transaction,
	    shouldReuseMarkup) {
	  var markup = ReactReconciler.mountComponent(
	    componentInstance, rootID, transaction, emptyObject
	  );
	  componentInstance._isTopLevel = true;
	  ReactMount._mountImageIntoNode(markup, container, shouldReuseMarkup);
	}

	/**
	 * Batched mount.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function batchedMountComponentIntoNode(
	    componentInstance,
	    rootID,
	    container,
	    shouldReuseMarkup) {
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();
	  transaction.perform(
	    mountComponentIntoNode,
	    null,
	    componentInstance,
	    rootID,
	    container,
	    transaction,
	    shouldReuseMarkup
	  );
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	}

	/**
	 * Mounting is the process of initializing a React component by creating its
	 * representative DOM elements and inserting them into a supplied `container`.
	 * Any prior content inside `container` is destroyed in the process.
	 *
	 *   ReactMount.render(
	 *     component,
	 *     document.getElementById('container')
	 *   );
	 *
	 *   <div id="container">                   <-- Supplied `container`.
	 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
	 *       // ...                                 component.
	 *     </div>
	 *   </div>
	 *
	 * Inside of `container`, the first element rendered is the "reactRoot".
	 */
	var ReactMount = {
	  /** Exposed for debugging purposes **/
	  _instancesByReactRootID: instancesByReactRootID,

	  /**
	   * This is a hook provided to support rendering React components while
	   * ensuring that the apparent scroll position of its `container` does not
	   * change.
	   *
	   * @param {DOMElement} container The `container` being rendered into.
	   * @param {function} renderCallback This must be called once to do the render.
	   */
	  scrollMonitor: function(container, renderCallback) {
	    renderCallback();
	  },

	  /**
	   * Take a component that's already mounted into the DOM and replace its props
	   * @param {ReactComponent} prevComponent component instance already in the DOM
	   * @param {ReactElement} nextElement component instance to render
	   * @param {DOMElement} container container to render into
	   * @param {?function} callback function triggered on completion
	   */
	  _updateRootComponent: function(
	      prevComponent,
	      nextElement,
	      container,
	      callback) {
	    if ("production" !== process.env.NODE_ENV) {
	      ReactElementValidator.checkAndWarnForMutatedProps(nextElement);
	    }

	    ReactMount.scrollMonitor(container, function() {
	      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);
	      if (callback) {
	        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
	      }
	    });

	    if ("production" !== process.env.NODE_ENV) {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[getReactRootID(container)] =
	        getReactRootElementInContainer(container);
	    }

	    return prevComponent;
	  },

	  /**
	   * Register a component into the instance map and starts scroll value
	   * monitoring
	   * @param {ReactComponent} nextComponent component instance to render
	   * @param {DOMElement} container container to render into
	   * @return {string} reactRoot ID prefix
	   */
	  _registerComponent: function(nextComponent, container) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      container && (
	        (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	      ),
	      '_registerComponent(...): Target container is not a DOM element.'
	    ) : invariant(container && (
	      (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	    )));

	    ReactBrowserEventEmitter.ensureScrollValueMonitoring();

	    var reactRootID = ReactMount.registerContainer(container);
	    instancesByReactRootID[reactRootID] = nextComponent;
	    return reactRootID;
	  },

	  /**
	   * Render a new component into the DOM.
	   * @param {ReactElement} nextElement element to render
	   * @param {DOMElement} container container to render into
	   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
	   * @return {ReactComponent} nextComponent
	   */
	  _renderNewRootComponent: function(
	    nextElement,
	    container,
	    shouldReuseMarkup
	  ) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case.
	    ("production" !== process.env.NODE_ENV ? warning(
	      ReactCurrentOwner.current == null,
	      '_renderNewRootComponent(): Render methods should be a pure function ' +
	      'of props and state; triggering nested component updates from ' +
	      'render is not allowed. If necessary, trigger nested updates in ' +
	      'componentDidUpdate.'
	    ) : null);

	    var componentInstance = instantiateReactComponent(nextElement, null);
	    var reactRootID = ReactMount._registerComponent(
	      componentInstance,
	      container
	    );

	    // The initial render is synchronous but any updates that happen during
	    // rendering, in componentWillMount or componentDidMount, will be batched
	    // according to the current batching strategy.

	    ReactUpdates.batchedUpdates(
	      batchedMountComponentIntoNode,
	      componentInstance,
	      reactRootID,
	      container,
	      shouldReuseMarkup
	    );

	    if ("production" !== process.env.NODE_ENV) {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[reactRootID] =
	        getReactRootElementInContainer(container);
	    }

	    return componentInstance;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  render: function(nextElement, container, callback) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ReactElement.isValidElement(nextElement),
	      'React.render(): Invalid component element.%s',
	      (
	        typeof nextElement === 'string' ?
	          ' Instead of passing an element string, make sure to instantiate ' +
	          'it by passing it to React.createElement.' :
	        typeof nextElement === 'function' ?
	          ' Instead of passing a component class, make sure to instantiate ' +
	          'it by passing it to React.createElement.' :
	        // Check if it quacks like an element
	        nextElement != null && nextElement.props !== undefined ?
	          ' This may be caused by unintentionally loading two independent ' +
	          'copies of React.' :
	          ''
	      )
	    ) : invariant(ReactElement.isValidElement(nextElement)));

	    var prevComponent = instancesByReactRootID[getReactRootID(container)];

	    if (prevComponent) {
	      var prevElement = prevComponent._currentElement;
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        return ReactMount._updateRootComponent(
	          prevComponent,
	          nextElement,
	          container,
	          callback
	        ).getPublicInstance();
	      } else {
	        ReactMount.unmountComponentAtNode(container);
	      }
	    }

	    var reactRootElement = getReactRootElementInContainer(container);
	    var containerHasReactMarkup =
	      reactRootElement && ReactMount.isRenderedByReact(reactRootElement);

	    if ("production" !== process.env.NODE_ENV) {
	      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
	        var rootElementSibling = reactRootElement;
	        while (rootElementSibling) {
	          if (ReactMount.isRenderedByReact(rootElementSibling)) {
	            ("production" !== process.env.NODE_ENV ? warning(
	              false,
	              'render(): Target node has markup rendered by React, but there ' +
	              'are unrelated nodes as well. This is most commonly caused by ' +
	              'white-space inserted around server-rendered markup.'
	            ) : null);
	            break;
	          }

	          rootElementSibling = rootElementSibling.nextSibling;
	        }
	      }
	    }

	    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent;

	    var component = ReactMount._renderNewRootComponent(
	      nextElement,
	      container,
	      shouldReuseMarkup
	    ).getPublicInstance();
	    if (callback) {
	      callback.call(component);
	    }
	    return component;
	  },

	  /**
	   * Constructs a component instance of `constructor` with `initialProps` and
	   * renders it into the supplied `container`.
	   *
	   * @param {function} constructor React component constructor.
	   * @param {?object} props Initial props of the component instance.
	   * @param {DOMElement} container DOM element to render into.
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  constructAndRenderComponent: function(constructor, props, container) {
	    var element = ReactElement.createElement(constructor, props);
	    return ReactMount.render(element, container);
	  },

	  /**
	   * Constructs a component instance of `constructor` with `initialProps` and
	   * renders it into a container node identified by supplied `id`.
	   *
	   * @param {function} componentConstructor React component constructor
	   * @param {?object} props Initial props of the component instance.
	   * @param {string} id ID of the DOM element to render into.
	   * @return {ReactComponent} Component instance rendered in the container node.
	   */
	  constructAndRenderComponentByID: function(constructor, props, id) {
	    var domNode = document.getElementById(id);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      domNode,
	      'Tried to get element with id of "%s" but it is not present on the page.',
	      id
	    ) : invariant(domNode));
	    return ReactMount.constructAndRenderComponent(constructor, props, domNode);
	  },

	  /**
	   * Registers a container node into which React components will be rendered.
	   * This also creates the "reactRoot" ID that will be assigned to the element
	   * rendered within.
	   *
	   * @param {DOMElement} container DOM element to register as a container.
	   * @return {string} The "reactRoot" ID of elements rendered within.
	   */
	  registerContainer: function(container) {
	    var reactRootID = getReactRootID(container);
	    if (reactRootID) {
	      // If one exists, make sure it is a valid "reactRoot" ID.
	      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
	    }
	    if (!reactRootID) {
	      // No valid "reactRoot" ID found, create one.
	      reactRootID = ReactInstanceHandles.createReactRootID();
	    }
	    containersByReactRootID[reactRootID] = container;
	    return reactRootID;
	  },

	  /**
	   * Unmounts and destroys the React component rendered in the `container`.
	   *
	   * @param {DOMElement} container DOM element containing a React component.
	   * @return {boolean} True if a component was found in and unmounted from
	   *                   `container`
	   */
	  unmountComponentAtNode: function(container) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case. (Strictly speaking, unmounting won't cause a
	    // render but we still don't expect to be in a render call here.)
	    ("production" !== process.env.NODE_ENV ? warning(
	      ReactCurrentOwner.current == null,
	      'unmountComponentAtNode(): Render methods should be a pure function of ' +
	      'props and state; triggering nested component updates from render is ' +
	      'not allowed. If necessary, trigger nested updates in ' +
	      'componentDidUpdate.'
	    ) : null);

	    ("production" !== process.env.NODE_ENV ? invariant(
	      container && (
	        (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	      ),
	      'unmountComponentAtNode(...): Target container is not a DOM element.'
	    ) : invariant(container && (
	      (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	    )));

	    var reactRootID = getReactRootID(container);
	    var component = instancesByReactRootID[reactRootID];
	    if (!component) {
	      return false;
	    }
	    ReactMount.unmountComponentFromNode(component, container);
	    delete instancesByReactRootID[reactRootID];
	    delete containersByReactRootID[reactRootID];
	    if ("production" !== process.env.NODE_ENV) {
	      delete rootElementsByReactRootID[reactRootID];
	    }
	    return true;
	  },

	  /**
	   * Unmounts a component and removes it from the DOM.
	   *
	   * @param {ReactComponent} instance React component instance.
	   * @param {DOMElement} container DOM element to unmount from.
	   * @final
	   * @internal
	   * @see {ReactMount.unmountComponentAtNode}
	   */
	  unmountComponentFromNode: function(instance, container) {
	    ReactReconciler.unmountComponent(instance);

	    if (container.nodeType === DOC_NODE_TYPE) {
	      container = container.documentElement;
	    }

	    // http://jsperf.com/emptying-a-node
	    while (container.lastChild) {
	      container.removeChild(container.lastChild);
	    }
	  },

	  /**
	   * Finds the container DOM element that contains React component to which the
	   * supplied DOM `id` belongs.
	   *
	   * @param {string} id The ID of an element rendered by a React component.
	   * @return {?DOMElement} DOM element that contains the `id`.
	   */
	  findReactContainerForID: function(id) {
	    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
	    var container = containersByReactRootID[reactRootID];

	    if ("production" !== process.env.NODE_ENV) {
	      var rootElement = rootElementsByReactRootID[reactRootID];
	      if (rootElement && rootElement.parentNode !== container) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          // Call internalGetID here because getID calls isValid which calls
	          // findReactContainerForID (this function).
	          internalGetID(rootElement) === reactRootID,
	          'ReactMount: Root element ID differed from reactRootID.'
	        ) : invariant(// Call internalGetID here because getID calls isValid which calls
	        // findReactContainerForID (this function).
	        internalGetID(rootElement) === reactRootID));

	        var containerChild = container.firstChild;
	        if (containerChild &&
	            reactRootID === internalGetID(containerChild)) {
	          // If the container has a new child with the same ID as the old
	          // root element, then rootElementsByReactRootID[reactRootID] is
	          // just stale and needs to be updated. The case that deserves a
	          // warning is when the container is empty.
	          rootElementsByReactRootID[reactRootID] = containerChild;
	        } else {
	          ("production" !== process.env.NODE_ENV ? warning(
	            false,
	            'ReactMount: Root element has been removed from its original ' +
	            'container. New container:', rootElement.parentNode
	          ) : null);
	        }
	      }
	    }

	    return container;
	  },

	  /**
	   * Finds an element rendered by React with the supplied ID.
	   *
	   * @param {string} id ID of a DOM node in the React component.
	   * @return {DOMElement} Root DOM node of the React component.
	   */
	  findReactNodeByID: function(id) {
	    var reactRoot = ReactMount.findReactContainerForID(id);
	    return ReactMount.findComponentRoot(reactRoot, id);
	  },

	  /**
	   * True if the supplied `node` is rendered by React.
	   *
	   * @param {*} node DOM Element to check.
	   * @return {boolean} True if the DOM Element appears to be rendered by React.
	   * @internal
	   */
	  isRenderedByReact: function(node) {
	    if (node.nodeType !== 1) {
	      // Not a DOMElement, therefore not a React component
	      return false;
	    }
	    var id = ReactMount.getID(node);
	    return id ? id.charAt(0) === SEPARATOR : false;
	  },

	  /**
	   * Traverses up the ancestors of the supplied node to find a node that is a
	   * DOM representation of a React component.
	   *
	   * @param {*} node
	   * @return {?DOMEventTarget}
	   * @internal
	   */
	  getFirstReactDOM: function(node) {
	    var current = node;
	    while (current && current.parentNode !== current) {
	      if (ReactMount.isRenderedByReact(current)) {
	        return current;
	      }
	      current = current.parentNode;
	    }
	    return null;
	  },

	  /**
	   * Finds a node with the supplied `targetID` inside of the supplied
	   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
	   * quickly.
	   *
	   * @param {DOMEventTarget} ancestorNode Search from this root.
	   * @pararm {string} targetID ID of the DOM representation of the component.
	   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
	   * @internal
	   */
	  findComponentRoot: function(ancestorNode, targetID) {
	    var firstChildren = findComponentRootReusableArray;
	    var childIndex = 0;

	    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;

	    firstChildren[0] = deepestAncestor.firstChild;
	    firstChildren.length = 1;

	    while (childIndex < firstChildren.length) {
	      var child = firstChildren[childIndex++];
	      var targetChild;

	      while (child) {
	        var childID = ReactMount.getID(child);
	        if (childID) {
	          // Even if we find the node we're looking for, we finish looping
	          // through its siblings to ensure they're cached so that we don't have
	          // to revisit this node again. Otherwise, we make n^2 calls to getID
	          // when visiting the many children of a single node in order.

	          if (targetID === childID) {
	            targetChild = child;
	          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
	            // If we find a child whose ID is an ancestor of the given ID,
	            // then we can be sure that we only want to search the subtree
	            // rooted at this child, so we can throw out the rest of the
	            // search state.
	            firstChildren.length = childIndex = 0;
	            firstChildren.push(child.firstChild);
	          }

	        } else {
	          // If this child had no ID, then there's a chance that it was
	          // injected automatically by the browser, as when a `<table>`
	          // element sprouts an extra `<tbody>` child as a side effect of
	          // `.innerHTML` parsing. Optimistically continue down this
	          // branch, but not before examining the other siblings.
	          firstChildren.push(child.firstChild);
	        }

	        child = child.nextSibling;
	      }

	      if (targetChild) {
	        // Emptying firstChildren/findComponentRootReusableArray is
	        // not necessary for correctness, but it helps the GC reclaim
	        // any nodes that were left at the end of the search.
	        firstChildren.length = 0;

	        return targetChild;
	      }
	    }

	    firstChildren.length = 0;

	    ("production" !== process.env.NODE_ENV ? invariant(
	      false,
	      'findComponentRoot(..., %s): Unable to find element. This probably ' +
	      'means the DOM was unexpectedly mutated (e.g., by the browser), ' +
	      'usually due to forgetting a <tbody> when using tables, nesting tags ' +
	      'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' +
	      'parent. ' +
	      'Try inspecting the child nodes of the element with React ID `%s`.',
	      targetID,
	      ReactMount.getID(ancestorNode)
	    ) : invariant(false));
	  },

	  _mountImageIntoNode: function(markup, container, shouldReuseMarkup) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      container && (
	        (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	      ),
	      'mountComponentIntoNode(...): Target container is not valid.'
	    ) : invariant(container && (
	      (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	    )));

	    if (shouldReuseMarkup) {
	      var rootElement = getReactRootElementInContainer(container);
	      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
	        return;
	      } else {
	        var checksum = rootElement.getAttribute(
	          ReactMarkupChecksum.CHECKSUM_ATTR_NAME
	        );
	        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

	        var rootMarkup = rootElement.outerHTML;
	        rootElement.setAttribute(
	          ReactMarkupChecksum.CHECKSUM_ATTR_NAME,
	          checksum
	        );

	        var diffIndex = firstDifferenceIndex(markup, rootMarkup);
	        var difference = ' (client) ' +
	          markup.substring(diffIndex - 20, diffIndex + 20) +
	          '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

	        ("production" !== process.env.NODE_ENV ? invariant(
	          container.nodeType !== DOC_NODE_TYPE,
	          'You\'re trying to render a component to the document using ' +
	          'server rendering but the checksum was invalid. This usually ' +
	          'means you rendered a different component type or props on ' +
	          'the client from the one on the server, or your render() ' +
	          'methods are impure. React cannot handle this case due to ' +
	          'cross-browser quirks by rendering at the document root. You ' +
	          'should look for environment dependent code in your components ' +
	          'and ensure the props are the same client and server side:\n%s',
	          difference
	        ) : invariant(container.nodeType !== DOC_NODE_TYPE));

	        if ("production" !== process.env.NODE_ENV) {
	          ("production" !== process.env.NODE_ENV ? warning(
	            false,
	            'React attempted to reuse markup in a container but the ' +
	            'checksum was invalid. This generally means that you are ' +
	            'using server rendering and the markup generated on the ' +
	            'server was not what the client was expecting. React injected ' +
	            'new markup to compensate which works but you have lost many ' +
	            'of the benefits of server rendering. Instead, figure out ' +
	            'why the markup being generated is different on the client ' +
	            'or server:\n%s',
	            difference
	          ) : null);
	        }
	      }
	    }

	    ("production" !== process.env.NODE_ENV ? invariant(
	      container.nodeType !== DOC_NODE_TYPE,
	      'You\'re trying to render a component to the document but ' +
	        'you didn\'t use server rendering. We can\'t do this ' +
	        'without using server rendering due to cross-browser quirks. ' +
	        'See React.renderToString() for server rendering.'
	    ) : invariant(container.nodeType !== DOC_NODE_TYPE));

	    setInnerHTML(container, markup);
	  },

	  /**
	   * React ID utilities.
	   */

	  getReactRootID: getReactRootID,

	  getID: getID,

	  setID: setID,

	  getNode: getNode,

	  getNodeFromInstance: getNodeFromInstance,

	  purgeID: purgeID
	};

	ReactPerf.measureMethods(ReactMount, 'ReactMount', {
	  _renderNewRootComponent: '_renderNewRootComponent',
	  _mountImageIntoNode: '_mountImageIntoNode'
	});

	module.exports = ReactMount;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserEventEmitter
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(5);
	var EventPluginHub = __webpack_require__(69);
	var EventPluginRegistry = __webpack_require__(70);
	var ReactEventEmitterMixin = __webpack_require__(73);
	var ViewportMetrics = __webpack_require__(74);

	var assign = __webpack_require__(13);
	var isEventSupported = __webpack_require__(75);

	/**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactEventListener, which is injected and can therefore support pluggable
	 *    event sources. This is the only work that occurs in the main thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */

	var alreadyListeningTo = {};
	var isMonitoringScrollValue = false;
	var reactTopListenersCounter = 0;

	// For events like 'submit' which don't consistently bubble (which we trap at a
	// lower node than `document`), binding at `document` would cause duplicate
	// events so we don't include them here
	var topEventMapping = {
	  topBlur: 'blur',
	  topChange: 'change',
	  topClick: 'click',
	  topCompositionEnd: 'compositionend',
	  topCompositionStart: 'compositionstart',
	  topCompositionUpdate: 'compositionupdate',
	  topContextMenu: 'contextmenu',
	  topCopy: 'copy',
	  topCut: 'cut',
	  topDoubleClick: 'dblclick',
	  topDrag: 'drag',
	  topDragEnd: 'dragend',
	  topDragEnter: 'dragenter',
	  topDragExit: 'dragexit',
	  topDragLeave: 'dragleave',
	  topDragOver: 'dragover',
	  topDragStart: 'dragstart',
	  topDrop: 'drop',
	  topFocus: 'focus',
	  topInput: 'input',
	  topKeyDown: 'keydown',
	  topKeyPress: 'keypress',
	  topKeyUp: 'keyup',
	  topMouseDown: 'mousedown',
	  topMouseMove: 'mousemove',
	  topMouseOut: 'mouseout',
	  topMouseOver: 'mouseover',
	  topMouseUp: 'mouseup',
	  topPaste: 'paste',
	  topScroll: 'scroll',
	  topSelectionChange: 'selectionchange',
	  topTextInput: 'textInput',
	  topTouchCancel: 'touchcancel',
	  topTouchEnd: 'touchend',
	  topTouchMove: 'touchmove',
	  topTouchStart: 'touchstart',
	  topWheel: 'wheel'
	};

	/**
	 * To ensure no conflicts with other potential React instances on the page
	 */
	var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

	function getListeningForDocument(mountAt) {
	  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
	  // directly.
	  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
	    mountAt[topListenersIDKey] = reactTopListenersCounter++;
	    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
	  }
	  return alreadyListeningTo[mountAt[topListenersIDKey]];
	}

	/**
	 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
	 * example:
	 *
	 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
	 *
	 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
	 *
	 * @internal
	 */
	var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {

	  /**
	   * Injectable event backend
	   */
	  ReactEventListener: null,

	  injection: {
	    /**
	     * @param {object} ReactEventListener
	     */
	    injectReactEventListener: function(ReactEventListener) {
	      ReactEventListener.setHandleTopLevel(
	        ReactBrowserEventEmitter.handleTopLevel
	      );
	      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
	    }
	  },

	  /**
	   * Sets whether or not any created callbacks should be enabled.
	   *
	   * @param {boolean} enabled True if callbacks should be enabled.
	   */
	  setEnabled: function(enabled) {
	    if (ReactBrowserEventEmitter.ReactEventListener) {
	      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
	    }
	  },

	  /**
	   * @return {boolean} True if callbacks are enabled.
	   */
	  isEnabled: function() {
	    return !!(
	      (ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled())
	    );
	  },

	  /**
	   * We listen for bubbled touch events on the document object.
	   *
	   * Firefox v8.01 (and possibly others) exhibited strange behavior when
	   * mounting `onmousemove` events at some node that was not the document
	   * element. The symptoms were that if your mouse is not moving over something
	   * contained within that mount point (for example on the background) the
	   * top-level listeners for `onmousemove` won't be called. However, if you
	   * register the `mousemove` on the document object, then it will of course
	   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	   * top-level listeners to the document object only, at least for these
	   * movement types of events and possibly all events.
	   *
	   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	   *
	   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	   * they bubble to document.
	   *
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {object} contentDocumentHandle Document which owns the container
	   */
	  listenTo: function(registrationName, contentDocumentHandle) {
	    var mountAt = contentDocumentHandle;
	    var isListening = getListeningForDocument(mountAt);
	    var dependencies = EventPluginRegistry.
	      registrationNameDependencies[registrationName];

	    var topLevelTypes = EventConstants.topLevelTypes;
	    for (var i = 0, l = dependencies.length; i < l; i++) {
	      var dependency = dependencies[i];
	      if (!(
	            (isListening.hasOwnProperty(dependency) && isListening[dependency])
	          )) {
	        if (dependency === topLevelTypes.topWheel) {
	          if (isEventSupported('wheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topWheel,
	              'wheel',
	              mountAt
	            );
	          } else if (isEventSupported('mousewheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topWheel,
	              'mousewheel',
	              mountAt
	            );
	          } else {
	            // Firefox needs to capture a different mouse scroll event.
	            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topWheel,
	              'DOMMouseScroll',
	              mountAt
	            );
	          }
	        } else if (dependency === topLevelTypes.topScroll) {

	          if (isEventSupported('scroll', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
	              topLevelTypes.topScroll,
	              'scroll',
	              mountAt
	            );
	          } else {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topScroll,
	              'scroll',
	              ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE
	            );
	          }
	        } else if (dependency === topLevelTypes.topFocus ||
	            dependency === topLevelTypes.topBlur) {

	          if (isEventSupported('focus', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
	              topLevelTypes.topFocus,
	              'focus',
	              mountAt
	            );
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
	              topLevelTypes.topBlur,
	              'blur',
	              mountAt
	            );
	          } else if (isEventSupported('focusin')) {
	            // IE has `focusin` and `focusout` events which bubble.
	            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topFocus,
	              'focusin',
	              mountAt
	            );
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topBlur,
	              'focusout',
	              mountAt
	            );
	          }

	          // to make sure blur and focus event listeners are only attached once
	          isListening[topLevelTypes.topBlur] = true;
	          isListening[topLevelTypes.topFocus] = true;
	        } else if (topEventMapping.hasOwnProperty(dependency)) {
	          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	            dependency,
	            topEventMapping[dependency],
	            mountAt
	          );
	        }

	        isListening[dependency] = true;
	      }
	    }
	  },

	  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	      topLevelType,
	      handlerBaseName,
	      handle
	    );
	  },

	  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
	      topLevelType,
	      handlerBaseName,
	      handle
	    );
	  },

	  /**
	   * Listens to window scroll and resize events. We cache scroll values so that
	   * application code can access them without triggering reflows.
	   *
	   * NOTE: Scroll events do not bubble.
	   *
	   * @see http://www.quirksmode.org/dom/events/scroll.html
	   */
	  ensureScrollValueMonitoring: function() {
	    if (!isMonitoringScrollValue) {
	      var refresh = ViewportMetrics.refreshScrollValues;
	      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
	      isMonitoringScrollValue = true;
	    }
	  },

	  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,

	  registrationNameModules: EventPluginHub.registrationNameModules,

	  putListener: EventPluginHub.putListener,

	  getListener: EventPluginHub.getListener,

	  deleteListener: EventPluginHub.deleteListener,

	  deleteAllListeners: EventPluginHub.deleteAllListeners

	});

	module.exports = ReactBrowserEventEmitter;


/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginHub
	 */

	'use strict';

	var EventPluginRegistry = __webpack_require__(70);
	var EventPluginUtils = __webpack_require__(4);

	var accumulateInto = __webpack_require__(71);
	var forEachAccumulated = __webpack_require__(72);
	var invariant = __webpack_require__(7);

	/**
	 * Internal store for event listeners
	 */
	var listenerBank = {};

	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */
	var eventQueue = null;

	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @private
	 */
	var executeDispatchesAndRelease = function(event) {
	  if (event) {
	    var executeDispatch = EventPluginUtils.executeDispatch;
	    // Plugins can provide custom behavior when dispatching events.
	    var PluginModule = EventPluginRegistry.getPluginModuleForEvent(event);
	    if (PluginModule && PluginModule.executeDispatch) {
	      executeDispatch = PluginModule.executeDispatch;
	    }
	    EventPluginUtils.executeDispatchesInOrder(event, executeDispatch);

	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};

	/**
	 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
	 *   hierarchy given ids of the logical DOM elements involved.
	 */
	var InstanceHandle = null;

	function validateInstanceHandle() {
	  var valid =
	    InstanceHandle &&
	    InstanceHandle.traverseTwoPhase &&
	    InstanceHandle.traverseEnterLeave;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    valid,
	    'InstanceHandle not injected before use!'
	  ) : invariant(valid));
	}

	/**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */
	var EventPluginHub = {

	  /**
	   * Methods for injecting dependencies.
	   */
	  injection: {

	    /**
	     * @param {object} InjectedMount
	     * @public
	     */
	    injectMount: EventPluginUtils.injection.injectMount,

	    /**
	     * @param {object} InjectedInstanceHandle
	     * @public
	     */
	    injectInstanceHandle: function(InjectedInstanceHandle) {
	      InstanceHandle = InjectedInstanceHandle;
	      if ("production" !== process.env.NODE_ENV) {
	        validateInstanceHandle();
	      }
	    },

	    getInstanceHandle: function() {
	      if ("production" !== process.env.NODE_ENV) {
	        validateInstanceHandle();
	      }
	      return InstanceHandle;
	    },

	    /**
	     * @param {array} InjectedEventPluginOrder
	     * @public
	     */
	    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

	    /**
	     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	     */
	    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

	  },

	  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,

	  registrationNameModules: EventPluginRegistry.registrationNameModules,

	  /**
	   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {?function} listener The callback to store.
	   */
	  putListener: function(id, registrationName, listener) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !listener || typeof listener === 'function',
	      'Expected %s listener to be a function, instead got type %s',
	      registrationName, typeof listener
	    ) : invariant(!listener || typeof listener === 'function'));

	    var bankForRegistrationName =
	      listenerBank[registrationName] || (listenerBank[registrationName] = {});
	    bankForRegistrationName[id] = listener;
	  },

	  /**
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @return {?function} The stored callback.
	   */
	  getListener: function(id, registrationName) {
	    var bankForRegistrationName = listenerBank[registrationName];
	    return bankForRegistrationName && bankForRegistrationName[id];
	  },

	  /**
	   * Deletes a listener from the registration bank.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   */
	  deleteListener: function(id, registrationName) {
	    var bankForRegistrationName = listenerBank[registrationName];
	    if (bankForRegistrationName) {
	      delete bankForRegistrationName[id];
	    }
	  },

	  /**
	   * Deletes all listeners for the DOM element with the supplied ID.
	   *
	   * @param {string} id ID of the DOM element.
	   */
	  deleteAllListeners: function(id) {
	    for (var registrationName in listenerBank) {
	      delete listenerBank[registrationName][id];
	    }
	  },

	  /**
	   * Allows registered plugins an opportunity to extract events from top-level
	   * native browser events.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @internal
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    var events;
	    var plugins = EventPluginRegistry.plugins;
	    for (var i = 0, l = plugins.length; i < l; i++) {
	      // Not every plugin in the ordering may be loaded at runtime.
	      var possiblePlugin = plugins[i];
	      if (possiblePlugin) {
	        var extractedEvents = possiblePlugin.extractEvents(
	          topLevelType,
	          topLevelTarget,
	          topLevelTargetID,
	          nativeEvent
	        );
	        if (extractedEvents) {
	          events = accumulateInto(events, extractedEvents);
	        }
	      }
	    }
	    return events;
	  },

	  /**
	   * Enqueues a synthetic event that should be dispatched when
	   * `processEventQueue` is invoked.
	   *
	   * @param {*} events An accumulation of synthetic events.
	   * @internal
	   */
	  enqueueEvents: function(events) {
	    if (events) {
	      eventQueue = accumulateInto(eventQueue, events);
	    }
	  },

	  /**
	   * Dispatches all synthetic events on the event queue.
	   *
	   * @internal
	   */
	  processEventQueue: function() {
	    // Set `eventQueue` to null before processing it so that we can tell if more
	    // events get enqueued while processing.
	    var processingEventQueue = eventQueue;
	    eventQueue = null;
	    forEachAccumulated(processingEventQueue, executeDispatchesAndRelease);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !eventQueue,
	      'processEventQueue(): Additional events were enqueued while processing ' +
	      'an event queue. Support for this has not yet been implemented.'
	    ) : invariant(!eventQueue));
	  },

	  /**
	   * These are needed for tests only. Do not use!
	   */
	  __purge: function() {
	    listenerBank = {};
	  },

	  __getListenerBank: function() {
	    return listenerBank;
	  }

	};

	module.exports = EventPluginHub;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginRegistry
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(7);

	/**
	 * Injectable ordering of event plugins.
	 */
	var EventPluginOrder = null;

	/**
	 * Injectable mapping from names to event plugin modules.
	 */
	var namesToPlugins = {};

	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */
	function recomputePluginOrdering() {
	  if (!EventPluginOrder) {
	    // Wait until an `EventPluginOrder` is injected.
	    return;
	  }
	  for (var pluginName in namesToPlugins) {
	    var PluginModule = namesToPlugins[pluginName];
	    var pluginIndex = EventPluginOrder.indexOf(pluginName);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      pluginIndex > -1,
	      'EventPluginRegistry: Cannot inject event plugins that do not exist in ' +
	      'the plugin ordering, `%s`.',
	      pluginName
	    ) : invariant(pluginIndex > -1));
	    if (EventPluginRegistry.plugins[pluginIndex]) {
	      continue;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      PluginModule.extractEvents,
	      'EventPluginRegistry: Event plugins must implement an `extractEvents` ' +
	      'method, but `%s` does not.',
	      pluginName
	    ) : invariant(PluginModule.extractEvents));
	    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
	    var publishedEvents = PluginModule.eventTypes;
	    for (var eventName in publishedEvents) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        publishEventForPlugin(
	          publishedEvents[eventName],
	          PluginModule,
	          eventName
	        ),
	        'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.',
	        eventName,
	        pluginName
	      ) : invariant(publishEventForPlugin(
	        publishedEvents[eventName],
	        PluginModule,
	        eventName
	      )));
	    }
	  }
	}

	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */
	function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName),
	    'EventPluginHub: More than one plugin attempted to publish the same ' +
	    'event name, `%s`.',
	    eventName
	  ) : invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName)));
	  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(
	          phasedRegistrationName,
	          PluginModule,
	          eventName
	        );
	      }
	    }
	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(
	      dispatchConfig.registrationName,
	      PluginModule,
	      eventName
	    );
	    return true;
	  }
	  return false;
	}

	/**
	 * Publishes a registration name that is used to identify dispatched events and
	 * can be used with `EventPluginHub.putListener` to register listeners.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */
	function publishRegistrationName(registrationName, PluginModule, eventName) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !EventPluginRegistry.registrationNameModules[registrationName],
	    'EventPluginHub: More than one plugin attempted to publish the same ' +
	    'registration name, `%s`.',
	    registrationName
	  ) : invariant(!EventPluginRegistry.registrationNameModules[registrationName]));
	  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
	  EventPluginRegistry.registrationNameDependencies[registrationName] =
	    PluginModule.eventTypes[eventName].dependencies;
	}

	/**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */
	var EventPluginRegistry = {

	  /**
	   * Ordered list of injected plugins.
	   */
	  plugins: [],

	  /**
	   * Mapping from event name to dispatch config
	   */
	  eventNameDispatchConfigs: {},

	  /**
	   * Mapping from registration name to plugin module
	   */
	  registrationNameModules: {},

	  /**
	   * Mapping from registration name to event name
	   */
	  registrationNameDependencies: {},

	  /**
	   * Injects an ordering of plugins (by plugin name). This allows the ordering
	   * to be decoupled from injection of the actual plugins so that ordering is
	   * always deterministic regardless of packaging, on-the-fly injection, etc.
	   *
	   * @param {array} InjectedEventPluginOrder
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginOrder}
	   */
	  injectEventPluginOrder: function(InjectedEventPluginOrder) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !EventPluginOrder,
	      'EventPluginRegistry: Cannot inject event plugin ordering more than ' +
	      'once. You are likely trying to load more than one copy of React.'
	    ) : invariant(!EventPluginOrder));
	    // Clone the ordering so it cannot be dynamically mutated.
	    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
	    recomputePluginOrdering();
	  },

	  /**
	   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	   * in the ordering injected by `injectEventPluginOrder`.
	   *
	   * Plugins can be injected as part of page initialization or on-the-fly.
	   *
	   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginsByName}
	   */
	  injectEventPluginsByName: function(injectedNamesToPlugins) {
	    var isOrderingDirty = false;
	    for (var pluginName in injectedNamesToPlugins) {
	      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	        continue;
	      }
	      var PluginModule = injectedNamesToPlugins[pluginName];
	      if (!namesToPlugins.hasOwnProperty(pluginName) ||
	          namesToPlugins[pluginName] !== PluginModule) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          !namesToPlugins[pluginName],
	          'EventPluginRegistry: Cannot inject two different event plugins ' +
	          'using the same name, `%s`.',
	          pluginName
	        ) : invariant(!namesToPlugins[pluginName]));
	        namesToPlugins[pluginName] = PluginModule;
	        isOrderingDirty = true;
	      }
	    }
	    if (isOrderingDirty) {
	      recomputePluginOrdering();
	    }
	  },

	  /**
	   * Looks up the plugin for the supplied event.
	   *
	   * @param {object} event A synthetic event.
	   * @return {?object} The plugin that created the supplied event.
	   * @internal
	   */
	  getPluginModuleForEvent: function(event) {
	    var dispatchConfig = event.dispatchConfig;
	    if (dispatchConfig.registrationName) {
	      return EventPluginRegistry.registrationNameModules[
	        dispatchConfig.registrationName
	      ] || null;
	    }
	    for (var phase in dispatchConfig.phasedRegistrationNames) {
	      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
	        continue;
	      }
	      var PluginModule = EventPluginRegistry.registrationNameModules[
	        dispatchConfig.phasedRegistrationNames[phase]
	      ];
	      if (PluginModule) {
	        return PluginModule;
	      }
	    }
	    return null;
	  },

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _resetEventPlugins: function() {
	    EventPluginOrder = null;
	    for (var pluginName in namesToPlugins) {
	      if (namesToPlugins.hasOwnProperty(pluginName)) {
	        delete namesToPlugins[pluginName];
	      }
	    }
	    EventPluginRegistry.plugins.length = 0;

	    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
	    for (var eventName in eventNameDispatchConfigs) {
	      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
	        delete eventNameDispatchConfigs[eventName];
	      }
	    }

	    var registrationNameModules = EventPluginRegistry.registrationNameModules;
	    for (var registrationName in registrationNameModules) {
	      if (registrationNameModules.hasOwnProperty(registrationName)) {
	        delete registrationNameModules[registrationName];
	      }
	    }
	  }

	};

	module.exports = EventPluginRegistry;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule accumulateInto
	 */

	'use strict';

	var invariant = __webpack_require__(7);

	/**
	 *
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */

	function accumulateInto(current, next) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    next != null,
	    'accumulateInto(...): Accumulated items must not be null or undefined.'
	  ) : invariant(next != null));
	  if (current == null) {
	    return next;
	  }

	  // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).
	  var currentIsArray = Array.isArray(current);
	  var nextIsArray = Array.isArray(next);

	  if (currentIsArray && nextIsArray) {
	    current.push.apply(current, next);
	    return current;
	  }

	  if (currentIsArray) {
	    current.push(next);
	    return current;
	  }

	  if (nextIsArray) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }

	  return [current, next];
	}

	module.exports = accumulateInto;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 72 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule forEachAccumulated
	 */

	'use strict';

	/**
	 * @param {array} an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 */
	var forEachAccumulated = function(arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	};

	module.exports = forEachAccumulated;


/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventEmitterMixin
	 */

	'use strict';

	var EventPluginHub = __webpack_require__(69);

	function runEventQueueInBatch(events) {
	  EventPluginHub.enqueueEvents(events);
	  EventPluginHub.processEventQueue();
	}

	var ReactEventEmitterMixin = {

	  /**
	   * Streams a fired top-level event to `EventPluginHub` where plugins have the
	   * opportunity to create `ReactEvent`s to be dispatched.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {object} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native environment event.
	   */
	  handleTopLevel: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    var events = EventPluginHub.extractEvents(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent
	    );

	    runEventQueueInBatch(events);
	  }
	};

	module.exports = ReactEventEmitterMixin;


/***/ },
/* 74 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ViewportMetrics
	 */

	'use strict';

	var ViewportMetrics = {

	  currentScrollLeft: 0,

	  currentScrollTop: 0,

	  refreshScrollValues: function(scrollPosition) {
	    ViewportMetrics.currentScrollLeft = scrollPosition.x;
	    ViewportMetrics.currentScrollTop = scrollPosition.y;
	  }

	};

	module.exports = ViewportMetrics;


/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isEventSupported
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(51);

	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
	  useHasFeature =
	    document.implementation &&
	    document.implementation.hasFeature &&
	    // always returns true in newer browsers as per the standard.
	    // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
	    document.implementation.hasFeature('', '') !== true;
	}

	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix, capture) {
	  if (!ExecutionEnvironment.canUseDOM ||
	      capture && !('addEventListener' in document)) {
	    return false;
	  }

	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = eventName in document;

	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }

	  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
	    // This is the only way to test support for the `wheel` event in IE9+.
	    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
	  }

	  return isSupported;
	}

	module.exports = isEventSupported;


/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEmptyComponent
	 */

	'use strict';

	var ReactElement = __webpack_require__(11);
	var ReactInstanceMap = __webpack_require__(36);

	var invariant = __webpack_require__(7);

	var component;
	// This registry keeps track of the React IDs of the components that rendered to
	// `null` (in reality a placeholder such as `noscript`)
	var nullComponentIDsRegistry = {};

	var ReactEmptyComponentInjection = {
	  injectEmptyComponent: function(emptyComponent) {
	    component = ReactElement.createFactory(emptyComponent);
	  }
	};

	var ReactEmptyComponentType = function() {};
	ReactEmptyComponentType.prototype.componentDidMount = function() {
	  var internalInstance = ReactInstanceMap.get(this);
	  // TODO: Make sure we run these methods in the correct order, we shouldn't
	  // need this check. We're going to assume if we're here it means we ran
	  // componentWillUnmount already so there is no internal instance (it gets
	  // removed as part of the unmounting process).
	  if (!internalInstance) {
	    return;
	  }
	  registerNullComponentID(internalInstance._rootNodeID);
	};
	ReactEmptyComponentType.prototype.componentWillUnmount = function() {
	  var internalInstance = ReactInstanceMap.get(this);
	  // TODO: Get rid of this check. See TODO in componentDidMount.
	  if (!internalInstance) {
	    return;
	  }
	  deregisterNullComponentID(internalInstance._rootNodeID);
	};
	ReactEmptyComponentType.prototype.render = function() {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    component,
	    'Trying to return null from a render, but no null placeholder component ' +
	    'was injected.'
	  ) : invariant(component));
	  return component();
	};

	var emptyElement = ReactElement.createElement(ReactEmptyComponentType);

	/**
	 * Mark the component as having rendered to null.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function registerNullComponentID(id) {
	  nullComponentIDsRegistry[id] = true;
	}

	/**
	 * Unmark the component as having rendered to null: it renders to something now.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function deregisterNullComponentID(id) {
	  delete nullComponentIDsRegistry[id];
	}

	/**
	 * @param {string} id Component's `_rootNodeID`.
	 * @return {boolean} True if the component is rendered to null.
	 */
	function isNullComponentID(id) {
	  return !!nullComponentIDsRegistry[id];
	}

	var ReactEmptyComponent = {
	  emptyElement: emptyElement,
	  injection: ReactEmptyComponentInjection,
	  isNullComponentID: isNullComponentID
	};

	module.exports = ReactEmptyComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMarkupChecksum
	 */

	'use strict';

	var adler32 = __webpack_require__(78);

	var ReactMarkupChecksum = {
	  CHECKSUM_ATTR_NAME: 'data-react-checksum',

	  /**
	   * @param {string} markup Markup string
	   * @return {string} Markup string with checksum attribute attached
	   */
	  addChecksumToMarkup: function(markup) {
	    var checksum = adler32(markup);
	    return markup.replace(
	      '>',
	      ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '">'
	    );
	  },

	  /**
	   * @param {string} markup to use
	   * @param {DOMElement} element root React element
	   * @returns {boolean} whether or not the markup is the same
	   */
	  canReuseMarkup: function(markup, element) {
	    var existingChecksum = element.getAttribute(
	      ReactMarkupChecksum.CHECKSUM_ATTR_NAME
	    );
	    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
	    var markupChecksum = adler32(markup);
	    return markupChecksum === existingChecksum;
	  }
	};

	module.exports = ReactMarkupChecksum;


/***/ },
/* 78 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule adler32
	 */

	/* jslint bitwise:true */

	'use strict';

	var MOD = 65521;

	// This is a clean-room implementation of adler32 designed for detecting
	// if markup is not what we expect it to be. It does not need to be
	// cryptographically strong, only reasonably good at detecting if markup
	// generated on the server is different than that on the client.
	function adler32(data) {
	  var a = 1;
	  var b = 0;
	  for (var i = 0; i < data.length; i++) {
	    a = (a + data.charCodeAt(i)) % MOD;
	    b = (b + a) % MOD;
	  }
	  return a | (b << 16);
	}

	module.exports = adler32;


/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule containsNode
	 * @typechecks
	 */

	var isTextNode = __webpack_require__(80);

	/*jslint bitwise:true */

	/**
	 * Checks if a given DOM node contains or is another DOM node.
	 *
	 * @param {?DOMNode} outerNode Outer DOM node.
	 * @param {?DOMNode} innerNode Inner DOM node.
	 * @return {boolean} True if `outerNode` contains or is `innerNode`.
	 */
	function containsNode(outerNode, innerNode) {
	  if (!outerNode || !innerNode) {
	    return false;
	  } else if (outerNode === innerNode) {
	    return true;
	  } else if (isTextNode(outerNode)) {
	    return false;
	  } else if (isTextNode(innerNode)) {
	    return containsNode(outerNode, innerNode.parentNode);
	  } else if (outerNode.contains) {
	    return outerNode.contains(innerNode);
	  } else if (outerNode.compareDocumentPosition) {
	    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	  } else {
	    return false;
	  }
	}

	module.exports = containsNode;


/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextNode
	 * @typechecks
	 */

	var isNode = __webpack_require__(81);

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM text node.
	 */
	function isTextNode(object) {
	  return isNode(object) && object.nodeType == 3;
	}

	module.exports = isTextNode;


/***/ },
/* 81 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isNode
	 * @typechecks
	 */

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM node.
	 */
	function isNode(object) {
	  return !!(object && (
	    ((typeof Node === 'function' ? object instanceof Node : typeof object === 'object' &&
	    typeof object.nodeType === 'number' &&
	    typeof object.nodeName === 'string'))
	  ));
	}

	module.exports = isNode;


/***/ },
/* 82 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getReactRootElementInContainer
	 */

	'use strict';

	var DOC_NODE_TYPE = 9;

	/**
	 * @param {DOMElement|DOMDocument} container DOM element that may contain
	 *                                           a React component
	 * @return {?*} DOM element that may have the reactRoot ID, or null.
	 */
	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }

	  if (container.nodeType === DOC_NODE_TYPE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}

	module.exports = getReactRootElementInContainer;


/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule instantiateReactComponent
	 * @typechecks static-only
	 */

	'use strict';

	var ReactCompositeComponent = __webpack_require__(84);
	var ReactEmptyComponent = __webpack_require__(76);
	var ReactNativeComponent = __webpack_require__(33);

	var assign = __webpack_require__(13);
	var invariant = __webpack_require__(7);
	var warning = __webpack_require__(15);

	// To avoid a cyclic dependency, we create the final class in this module
	var ReactCompositeComponentWrapper = function() { };
	assign(
	  ReactCompositeComponentWrapper.prototype,
	  ReactCompositeComponent.Mixin,
	  {
	    _instantiateReactComponent: instantiateReactComponent
	  }
	);

	/**
	 * Check if the type reference is a known internal type. I.e. not a user
	 * provided composite type.
	 *
	 * @param {function} type
	 * @return {boolean} Returns true if this is a valid internal type.
	 */
	function isInternalComponentType(type) {
	  return (
	    typeof type === 'function' &&
	    typeof type.prototype !== 'undefined' &&
	    typeof type.prototype.mountComponent === 'function' &&
	    typeof type.prototype.receiveComponent === 'function'
	  );
	}

	/**
	 * Given a ReactNode, create an instance that will actually be mounted.
	 *
	 * @param {ReactNode} node
	 * @param {*} parentCompositeType The composite type that resolved this.
	 * @return {object} A new instance of the element's constructor.
	 * @protected
	 */
	function instantiateReactComponent(node, parentCompositeType) {
	  var instance;

	  if (node === null || node === false) {
	    node = ReactEmptyComponent.emptyElement;
	  }

	  if (typeof node === 'object') {
	    var element = node;
	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        element && (typeof element.type === 'function' ||
	                    typeof element.type === 'string'),
	        'Only functions or strings can be mounted as React components.'
	      ) : null);
	    }

	    // Special case string values
	    if (parentCompositeType === element.type &&
	        typeof element.type === 'string') {
	      // Avoid recursion if the wrapper renders itself.
	      instance = ReactNativeComponent.createInternalComponent(element);
	      // All native components are currently wrapped in a composite so we're
	      // safe to assume that this is what we should instantiate.
	    } else if (isInternalComponentType(element.type)) {
	      // This is temporarily available for custom components that are not string
	      // represenations. I.e. ART. Once those are updated to use the string
	      // representation, we can drop this code path.
	      instance = new element.type(element);
	    } else {
	      instance = new ReactCompositeComponentWrapper();
	    }
	  } else if (typeof node === 'string' || typeof node === 'number') {
	    instance = ReactNativeComponent.createInstanceForText(node);
	  } else {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      false,
	      'Encountered invalid React node of type %s',
	      typeof node
	    ) : invariant(false));
	  }

	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      typeof instance.construct === 'function' &&
	      typeof instance.mountComponent === 'function' &&
	      typeof instance.receiveComponent === 'function' &&
	      typeof instance.unmountComponent === 'function',
	      'Only React Components can be mounted.'
	    ) : null);
	  }

	  // Sets up the instance. This can probably just move into the constructor now.
	  instance.construct(node);

	  // These two fields are used by the DOM and ART diffing algorithms
	  // respectively. Instead of using expandos on components, we should be
	  // storing the state needed by the diffing algorithms elsewhere.
	  instance._mountIndex = 0;
	  instance._mountImage = null;

	  if ("production" !== process.env.NODE_ENV) {
	    instance._isOwnerNecessary = false;
	    instance._warnedAboutRefsInRender = false;
	  }

	  // Internal instances should fully constructed at this point, so they should
	  // not get any new fields added to them at this point.
	  if ("production" !== process.env.NODE_ENV) {
	    if (Object.preventExtensions) {
	      Object.preventExtensions(instance);
	    }
	  }

	  return instance;
	}

	module.exports = instantiateReactComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCompositeComponent
	 */

	'use strict';

	var ReactComponentEnvironment = __webpack_require__(85);
	var ReactContext = __webpack_require__(12);
	var ReactCurrentOwner = __webpack_require__(17);
	var ReactElement = __webpack_require__(11);
	var ReactElementValidator = __webpack_require__(30);
	var ReactInstanceMap = __webpack_require__(36);
	var ReactLifeCycle = __webpack_require__(35);
	var ReactNativeComponent = __webpack_require__(33);
	var ReactPerf = __webpack_require__(26);
	var ReactPropTypeLocations = __webpack_require__(31);
	var ReactPropTypeLocationNames = __webpack_require__(32);
	var ReactReconciler = __webpack_require__(27);
	var ReactUpdates = __webpack_require__(24);

	var assign = __webpack_require__(13);
	var emptyObject = __webpack_require__(14);
	var invariant = __webpack_require__(7);
	var shouldUpdateReactComponent = __webpack_require__(86);
	var warning = __webpack_require__(15);

	function getDeclarationErrorAddendum(component) {
	  var owner = component._currentElement._owner || null;
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * ------------------ The Life-Cycle of a Composite Component ------------------
	 *
	 * - constructor: Initialization of state. The instance is now retained.
	 *   - componentWillMount
	 *   - render
	 *   - [children's constructors]
	 *     - [children's componentWillMount and render]
	 *     - [children's componentDidMount]
	 *     - componentDidMount
	 *
	 *       Update Phases:
	 *       - componentWillReceiveProps (only called if parent updated)
	 *       - shouldComponentUpdate
	 *         - componentWillUpdate
	 *           - render
	 *           - [children's constructors or receive props phases]
	 *         - componentDidUpdate
	 *
	 *     - componentWillUnmount
	 *     - [children's componentWillUnmount]
	 *   - [children destroyed]
	 * - (destroyed): The instance is now blank, released by React and ready for GC.
	 *
	 * -----------------------------------------------------------------------------
	 */

	/**
	 * An incrementing ID assigned to each component when it is mounted. This is
	 * used to enforce the order in which `ReactUpdates` updates dirty components.
	 *
	 * @private
	 */
	var nextMountID = 1;

	/**
	 * @lends {ReactCompositeComponent.prototype}
	 */
	var ReactCompositeComponentMixin = {

	  /**
	   * Base constructor for all composite component.
	   *
	   * @param {ReactElement} element
	   * @final
	   * @internal
	   */
	  construct: function(element) {
	    this._currentElement = element;
	    this._rootNodeID = null;
	    this._instance = null;

	    // See ReactUpdateQueue
	    this._pendingElement = null;
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    this._renderedComponent = null;

	    this._context = null;
	    this._mountOrder = 0;
	    this._isTopLevel = false;

	    // See ReactUpdates and ReactUpdateQueue.
	    this._pendingCallbacks = null;
	  },

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function(rootID, transaction, context) {
	    this._context = context;
	    this._mountOrder = nextMountID++;
	    this._rootNodeID = rootID;

	    var publicProps = this._processProps(this._currentElement.props);
	    var publicContext = this._processContext(this._currentElement._context);

	    var Component = ReactNativeComponent.getComponentClassForElement(
	      this._currentElement
	    );

	    // Initialize the public class
	    var inst = new Component(publicProps, publicContext);

	    if ("production" !== process.env.NODE_ENV) {
	      // This will throw later in _renderValidatedComponent, but add an early
	      // warning now to help debugging
	      ("production" !== process.env.NODE_ENV ? warning(
	        inst.render != null,
	        '%s(...): No `render` method found on the returned component ' +
	        'instance: you may have forgotten to define `render` in your ' +
	        'component or you may have accidentally tried to render an element ' +
	        'whose type is a function that isn\'t a React component.',
	        Component.displayName || Component.name || 'Component'
	      ) : null);
	    }

	    // These should be set up in the constructor, but as a convenience for
	    // simpler class abstractions, we set them up after the fact.
	    inst.props = publicProps;
	    inst.context = publicContext;
	    inst.refs = emptyObject;

	    this._instance = inst;

	    // Store a reference from the instance back to the internal representation
	    ReactInstanceMap.set(inst, this);

	    if ("production" !== process.env.NODE_ENV) {
	      this._warnIfContextsDiffer(this._currentElement._context, context);
	    }

	    if ("production" !== process.env.NODE_ENV) {
	      // Since plain JS classes are defined without any special initialization
	      // logic, we can not catch common errors early. Therefore, we have to
	      // catch them here, at initialization time, instead.
	      ("production" !== process.env.NODE_ENV ? warning(
	        !inst.getInitialState ||
	        inst.getInitialState.isReactClassApproved,
	        'getInitialState was defined on %s, a plain JavaScript class. ' +
	        'This is only supported for classes created using React.createClass. ' +
	        'Did you mean to define a state property instead?',
	        this.getName() || 'a component'
	      ) : null);
	      ("production" !== process.env.NODE_ENV ? warning(
	        !inst.getDefaultProps ||
	        inst.getDefaultProps.isReactClassApproved,
	        'getDefaultProps was defined on %s, a plain JavaScript class. ' +
	        'This is only supported for classes created using React.createClass. ' +
	        'Use a static property to define defaultProps instead.',
	        this.getName() || 'a component'
	      ) : null);
	      ("production" !== process.env.NODE_ENV ? warning(
	        !inst.propTypes,
	        'propTypes was defined as an instance property on %s. Use a static ' +
	        'property to define propTypes instead.',
	        this.getName() || 'a component'
	      ) : null);
	      ("production" !== process.env.NODE_ENV ? warning(
	        !inst.contextTypes,
	        'contextTypes was defined as an instance property on %s. Use a ' +
	        'static property to define contextTypes instead.',
	        this.getName() || 'a component'
	      ) : null);
	      ("production" !== process.env.NODE_ENV ? warning(
	        typeof inst.componentShouldUpdate !== 'function',
	        '%s has a method called ' +
	        'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
	        'The name is phrased as a question because the function is ' +
	        'expected to return a value.',
	        (this.getName() || 'A component')
	      ) : null);
	    }

	    var initialState = inst.state;
	    if (initialState === undefined) {
	      inst.state = initialState = null;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof initialState === 'object' && !Array.isArray(initialState),
	      '%s.state: must be set to an object or null',
	      this.getName() || 'ReactCompositeComponent'
	    ) : invariant(typeof initialState === 'object' && !Array.isArray(initialState)));

	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    var childContext;
	    var renderedElement;

	    var previouslyMounting = ReactLifeCycle.currentlyMountingInstance;
	    ReactLifeCycle.currentlyMountingInstance = this;
	    try {
	      if (inst.componentWillMount) {
	        inst.componentWillMount();
	        // When mounting, calls to `setState` by `componentWillMount` will set
	        // `this._pendingStateQueue` without triggering a re-render.
	        if (this._pendingStateQueue) {
	          inst.state = this._processPendingState(inst.props, inst.context);
	        }
	      }

	      childContext = this._getValidatedChildContext(context);
	      renderedElement = this._renderValidatedComponent(childContext);
	    } finally {
	      ReactLifeCycle.currentlyMountingInstance = previouslyMounting;
	    }

	    this._renderedComponent = this._instantiateReactComponent(
	      renderedElement,
	      this._currentElement.type // The wrapping type
	    );

	    var markup = ReactReconciler.mountComponent(
	      this._renderedComponent,
	      rootID,
	      transaction,
	      this._mergeChildContext(context, childContext)
	    );
	    if (inst.componentDidMount) {
	      transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
	    }

	    return markup;
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function() {
	    var inst = this._instance;

	    if (inst.componentWillUnmount) {
	      var previouslyUnmounting = ReactLifeCycle.currentlyUnmountingInstance;
	      ReactLifeCycle.currentlyUnmountingInstance = this;
	      try {
	        inst.componentWillUnmount();
	      } finally {
	        ReactLifeCycle.currentlyUnmountingInstance = previouslyUnmounting;
	      }
	    }

	    ReactReconciler.unmountComponent(this._renderedComponent);
	    this._renderedComponent = null;

	    // Reset pending fields
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	    this._pendingCallbacks = null;
	    this._pendingElement = null;

	    // These fields do not really need to be reset since this object is no
	    // longer accessible.
	    this._context = null;
	    this._rootNodeID = null;

	    // Delete the reference from the instance to this internal representation
	    // which allow the internals to be properly cleaned up even if the user
	    // leaks a reference to the public instance.
	    ReactInstanceMap.remove(inst);

	    // Some existing components rely on inst.props even after they've been
	    // destroyed (in event handlers).
	    // TODO: inst.props = null;
	    // TODO: inst.state = null;
	    // TODO: inst.context = null;
	  },

	  /**
	   * Schedule a partial update to the props. Only used for internal testing.
	   *
	   * @param {object} partialProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @internal
	   */
	  _setPropsInternal: function(partialProps, callback) {
	    // This is a deoptimized path. We optimize for always having an element.
	    // This creates an extra internal element.
	    var element = this._pendingElement || this._currentElement;
	    this._pendingElement = ReactElement.cloneAndReplaceProps(
	      element,
	      assign({}, element.props, partialProps)
	    );
	    ReactUpdates.enqueueUpdate(this, callback);
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _maskContext: function(context) {
	    var maskedContext = null;
	    // This really should be getting the component class for the element,
	    // but we know that we're not going to need it for built-ins.
	    if (typeof this._currentElement.type === 'string') {
	      return emptyObject;
	    }
	    var contextTypes = this._currentElement.type.contextTypes;
	    if (!contextTypes) {
	      return emptyObject;
	    }
	    maskedContext = {};
	    for (var contextName in contextTypes) {
	      maskedContext[contextName] = context[contextName];
	    }
	    return maskedContext;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`, and asserts that they are valid.
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _processContext: function(context) {
	    var maskedContext = this._maskContext(context);
	    if ("production" !== process.env.NODE_ENV) {
	      var Component = ReactNativeComponent.getComponentClassForElement(
	        this._currentElement
	      );
	      if (Component.contextTypes) {
	        this._checkPropTypes(
	          Component.contextTypes,
	          maskedContext,
	          ReactPropTypeLocations.context
	        );
	      }
	    }
	    return maskedContext;
	  },

	  /**
	   * @param {object} currentContext
	   * @return {object}
	   * @private
	   */
	  _getValidatedChildContext: function(currentContext) {
	    var inst = this._instance;
	    var childContext = inst.getChildContext && inst.getChildContext();
	    if (childContext) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        typeof inst.constructor.childContextTypes === 'object',
	        '%s.getChildContext(): childContextTypes must be defined in order to ' +
	        'use getChildContext().',
	        this.getName() || 'ReactCompositeComponent'
	      ) : invariant(typeof inst.constructor.childContextTypes === 'object'));
	      if ("production" !== process.env.NODE_ENV) {
	        this._checkPropTypes(
	          inst.constructor.childContextTypes,
	          childContext,
	          ReactPropTypeLocations.childContext
	        );
	      }
	      for (var name in childContext) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          name in inst.constructor.childContextTypes,
	          '%s.getChildContext(): key "%s" is not defined in childContextTypes.',
	          this.getName() || 'ReactCompositeComponent',
	          name
	        ) : invariant(name in inst.constructor.childContextTypes));
	      }
	      return childContext;
	    }
	    return null;
	  },

	  _mergeChildContext: function(currentContext, childContext) {
	    if (childContext) {
	      return assign({}, currentContext, childContext);
	    }
	    return currentContext;
	  },

	  /**
	   * Processes props by setting default values for unspecified props and
	   * asserting that the props are valid. Does not mutate its argument; returns
	   * a new props object with defaults merged in.
	   *
	   * @param {object} newProps
	   * @return {object}
	   * @private
	   */
	  _processProps: function(newProps) {
	    if ("production" !== process.env.NODE_ENV) {
	      var Component = ReactNativeComponent.getComponentClassForElement(
	        this._currentElement
	      );
	      if (Component.propTypes) {
	        this._checkPropTypes(
	          Component.propTypes,
	          newProps,
	          ReactPropTypeLocations.prop
	        );
	      }
	    }
	    return newProps;
	  },

	  /**
	   * Assert that the props are valid
	   *
	   * @param {object} propTypes Map of prop name to a ReactPropType
	   * @param {object} props
	   * @param {string} location e.g. "prop", "context", "child context"
	   * @private
	   */
	  _checkPropTypes: function(propTypes, props, location) {
	    // TODO: Stop validating prop types here and only use the element
	    // validation.
	    var componentName = this.getName();
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error;
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          ("production" !== process.env.NODE_ENV ? invariant(
	            typeof propTypes[propName] === 'function',
	            '%s: %s type `%s` is invalid; it must be a function, usually ' +
	            'from React.PropTypes.',
	            componentName || 'React class',
	            ReactPropTypeLocationNames[location],
	            propName
	          ) : invariant(typeof propTypes[propName] === 'function'));
	          error = propTypes[propName](props, propName, componentName, location);
	        } catch (ex) {
	          error = ex;
	        }
	        if (error instanceof Error) {
	          // We may want to extend this logic for similar errors in
	          // React.render calls, so I'm abstracting it away into
	          // a function to minimize refactoring in the future
	          var addendum = getDeclarationErrorAddendum(this);

	          if (location === ReactPropTypeLocations.prop) {
	            // Preface gives us something to blacklist in warning module
	            ("production" !== process.env.NODE_ENV ? warning(
	              false,
	              'Failed Composite propType: %s%s',
	              error.message,
	              addendum
	            ) : null);
	          } else {
	            ("production" !== process.env.NODE_ENV ? warning(
	              false,
	              'Failed Context Types: %s%s',
	              error.message,
	              addendum
	            ) : null);
	          }
	        }
	      }
	    }
	  },

	  receiveComponent: function(nextElement, transaction, nextContext) {
	    var prevElement = this._currentElement;
	    var prevContext = this._context;

	    this._pendingElement = null;

	    this.updateComponent(
	      transaction,
	      prevElement,
	      nextElement,
	      prevContext,
	      nextContext
	    );
	  },

	  /**
	   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
	   * is set, update the component.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function(transaction) {
	    if (this._pendingElement != null) {
	      ReactReconciler.receiveComponent(
	        this,
	        this._pendingElement || this._currentElement,
	        transaction,
	        this._context
	      );
	    }

	    if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
	      if ("production" !== process.env.NODE_ENV) {
	        ReactElementValidator.checkAndWarnForMutatedProps(
	          this._currentElement
	        );
	      }

	      this.updateComponent(
	        transaction,
	        this._currentElement,
	        this._currentElement,
	        this._context,
	        this._context
	      );
	    }
	  },

	  /**
	   * Compare two contexts, warning if they are different
	   * TODO: Remove this check when owner-context is removed
	   */
	   _warnIfContextsDiffer: function(ownerBasedContext, parentBasedContext) {
	    ownerBasedContext = this._maskContext(ownerBasedContext);
	    parentBasedContext = this._maskContext(parentBasedContext);
	    var parentKeys = Object.keys(parentBasedContext).sort();
	    var displayName = this.getName() || 'ReactCompositeComponent';
	    for (var i = 0; i < parentKeys.length; i++) {
	      var key = parentKeys[i];
	      ("production" !== process.env.NODE_ENV ? warning(
	        ownerBasedContext[key] === parentBasedContext[key],
	        'owner-based and parent-based contexts differ '  +
	        '(values: `%s` vs `%s`) for key (%s) while mounting %s ' +
	        '(see: http://fb.me/react-context-by-parent)',
	        ownerBasedContext[key],
	        parentBasedContext[key],
	        key,
	        displayName
	      ) : null);
	    }
	  },

	  /**
	   * Perform an update to a mounted component. The componentWillReceiveProps and
	   * shouldComponentUpdate methods are called, then (assuming the update isn't
	   * skipped) the remaining update lifecycle methods are called and the DOM
	   * representation is updated.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevParentElement
	   * @param {ReactElement} nextParentElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function(
	    transaction,
	    prevParentElement,
	    nextParentElement,
	    prevUnmaskedContext,
	    nextUnmaskedContext
	  ) {
	    var inst = this._instance;

	    var nextContext = inst.context;
	    var nextProps = inst.props;

	    // Distinguish between a props update versus a simple state update
	    if (prevParentElement !== nextParentElement) {
	      nextContext = this._processContext(nextParentElement._context);
	      nextProps = this._processProps(nextParentElement.props);

	      if ("production" !== process.env.NODE_ENV) {
	        if (nextUnmaskedContext != null) {
	          this._warnIfContextsDiffer(
	            nextParentElement._context,
	            nextUnmaskedContext
	          );
	        }
	      }

	      // An update here will schedule an update but immediately set
	      // _pendingStateQueue which will ensure that any state updates gets
	      // immediately reconciled instead of waiting for the next batch.

	      if (inst.componentWillReceiveProps) {
	        inst.componentWillReceiveProps(nextProps, nextContext);
	      }
	    }

	    var nextState = this._processPendingState(nextProps, nextContext);

	    var shouldUpdate =
	      this._pendingForceUpdate ||
	      !inst.shouldComponentUpdate ||
	      inst.shouldComponentUpdate(nextProps, nextState, nextContext);

	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        typeof shouldUpdate !== 'undefined',
	        '%s.shouldComponentUpdate(): Returned undefined instead of a ' +
	        'boolean value. Make sure to return true or false.',
	        this.getName() || 'ReactCompositeComponent'
	      ) : null);
	    }

	    if (shouldUpdate) {
	      this._pendingForceUpdate = false;
	      // Will set `this.props`, `this.state` and `this.context`.
	      this._performComponentUpdate(
	        nextParentElement,
	        nextProps,
	        nextState,
	        nextContext,
	        transaction,
	        nextUnmaskedContext
	      );
	    } else {
	      // If it's determined that a component should not update, we still want
	      // to set props and state but we shortcut the rest of the update.
	      this._currentElement = nextParentElement;
	      this._context = nextUnmaskedContext;
	      inst.props = nextProps;
	      inst.state = nextState;
	      inst.context = nextContext;
	    }
	  },

	  _processPendingState: function(props, context) {
	    var inst = this._instance;
	    var queue = this._pendingStateQueue;
	    var replace = this._pendingReplaceState;
	    this._pendingReplaceState = false;
	    this._pendingStateQueue = null;

	    if (!queue) {
	      return inst.state;
	    }

	    if (replace && queue.length === 1) {
	      return queue[0];
	    }

	    var nextState = assign({}, replace ? queue[0] : inst.state);
	    for (var i = replace ? 1 : 0; i < queue.length; i++) {
	      var partial = queue[i];
	      assign(
	        nextState,
	        typeof partial === 'function' ?
	          partial.call(inst, nextState, props, context) :
	          partial
	      );
	    }

	    return nextState;
	  },

	  /**
	   * Merges new props and state, notifies delegate methods of update and
	   * performs update.
	   *
	   * @param {ReactElement} nextElement Next element
	   * @param {object} nextProps Next public object to set as properties.
	   * @param {?object} nextState Next object to set as state.
	   * @param {?object} nextContext Next public object to set as context.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?object} unmaskedContext
	   * @private
	   */
	  _performComponentUpdate: function(
	    nextElement,
	    nextProps,
	    nextState,
	    nextContext,
	    transaction,
	    unmaskedContext
	  ) {
	    var inst = this._instance;

	    var prevProps = inst.props;
	    var prevState = inst.state;
	    var prevContext = inst.context;

	    if (inst.componentWillUpdate) {
	      inst.componentWillUpdate(nextProps, nextState, nextContext);
	    }

	    this._currentElement = nextElement;
	    this._context = unmaskedContext;
	    inst.props = nextProps;
	    inst.state = nextState;
	    inst.context = nextContext;

	    this._updateRenderedComponent(transaction, unmaskedContext);

	    if (inst.componentDidUpdate) {
	      transaction.getReactMountReady().enqueue(
	        inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext),
	        inst
	      );
	    }
	  },

	  /**
	   * Call the component's `render` method and update the DOM accordingly.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  _updateRenderedComponent: function(transaction, context) {
	    var prevComponentInstance = this._renderedComponent;
	    var prevRenderedElement = prevComponentInstance._currentElement;
	    var childContext = this._getValidatedChildContext();
	    var nextRenderedElement = this._renderValidatedComponent(childContext);
	    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
	      ReactReconciler.receiveComponent(
	        prevComponentInstance,
	        nextRenderedElement,
	        transaction,
	        this._mergeChildContext(context, childContext)
	      );
	    } else {
	      // These two IDs are actually the same! But nothing should rely on that.
	      var thisID = this._rootNodeID;
	      var prevComponentID = prevComponentInstance._rootNodeID;
	      ReactReconciler.unmountComponent(prevComponentInstance);

	      this._renderedComponent = this._instantiateReactComponent(
	        nextRenderedElement,
	        this._currentElement.type
	      );
	      var nextMarkup = ReactReconciler.mountComponent(
	        this._renderedComponent,
	        thisID,
	        transaction,
	        this._mergeChildContext(context, childContext)
	      );
	      this._replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
	    }
	  },

	  /**
	   * @protected
	   */
	  _replaceNodeWithMarkupByID: function(prevComponentID, nextMarkup) {
	    ReactComponentEnvironment.replaceNodeWithMarkupByID(
	      prevComponentID,
	      nextMarkup
	    );
	  },

	  /**
	   * @protected
	   */
	  _renderValidatedComponentWithoutOwnerOrContext: function() {
	    var inst = this._instance;
	    var renderedComponent = inst.render();
	    if ("production" !== process.env.NODE_ENV) {
	      // We allow auto-mocks to proceed as if they're returning null.
	      if (typeof renderedComponent === 'undefined' &&
	          inst.render._isMockFunction) {
	        // This is probably bad practice. Consider warning here and
	        // deprecating this convenience.
	        renderedComponent = null;
	      }
	    }

	    return renderedComponent;
	  },

	  /**
	   * @private
	   */
	  _renderValidatedComponent: function(childContext) {
	    var renderedComponent;
	    var previousContext = ReactContext.current;
	    ReactContext.current = this._mergeChildContext(
	      this._currentElement._context,
	      childContext
	    );
	    ReactCurrentOwner.current = this;
	    try {
	      renderedComponent =
	        this._renderValidatedComponentWithoutOwnerOrContext();
	    } finally {
	      ReactContext.current = previousContext;
	      ReactCurrentOwner.current = null;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      // TODO: An `isValidNode` function would probably be more appropriate
	      renderedComponent === null || renderedComponent === false ||
	      ReactElement.isValidElement(renderedComponent),
	      '%s.render(): A valid ReactComponent must be returned. You may have ' +
	        'returned undefined, an array or some other invalid object.',
	      this.getName() || 'ReactCompositeComponent'
	    ) : invariant(// TODO: An `isValidNode` function would probably be more appropriate
	    renderedComponent === null || renderedComponent === false ||
	    ReactElement.isValidElement(renderedComponent)));
	    return renderedComponent;
	  },

	  /**
	   * Lazily allocates the refs object and stores `component` as `ref`.
	   *
	   * @param {string} ref Reference name.
	   * @param {component} component Component to store as `ref`.
	   * @final
	   * @private
	   */
	  attachRef: function(ref, component) {
	    var inst = this.getPublicInstance();
	    var refs = inst.refs === emptyObject ? (inst.refs = {}) : inst.refs;
	    refs[ref] = component.getPublicInstance();
	  },

	  /**
	   * Detaches a reference name.
	   *
	   * @param {string} ref Name to dereference.
	   * @final
	   * @private
	   */
	  detachRef: function(ref) {
	    var refs = this.getPublicInstance().refs;
	    delete refs[ref];
	  },

	  /**
	   * Get a text description of the component that can be used to identify it
	   * in error messages.
	   * @return {string} The name or null.
	   * @internal
	   */
	  getName: function() {
	    var type = this._currentElement.type;
	    var constructor = this._instance && this._instance.constructor;
	    return (
	      type.displayName || (constructor && constructor.displayName) ||
	      type.name || (constructor && constructor.name) ||
	      null
	    );
	  },

	  /**
	   * Get the publicly accessible representation of this component - i.e. what
	   * is exposed by refs and returned by React.render. Can be null for stateless
	   * components.
	   *
	   * @return {ReactComponent} the public component instance.
	   * @internal
	   */
	  getPublicInstance: function() {
	    return this._instance;
	  },

	  // Stub
	  _instantiateReactComponent: null

	};

	ReactPerf.measureMethods(
	  ReactCompositeComponentMixin,
	  'ReactCompositeComponent',
	  {
	    mountComponent: 'mountComponent',
	    updateComponent: 'updateComponent',
	    _renderValidatedComponent: '_renderValidatedComponent'
	  }
	);

	var ReactCompositeComponent = {

	  Mixin: ReactCompositeComponentMixin

	};

	module.exports = ReactCompositeComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentEnvironment
	 */

	'use strict';

	var invariant = __webpack_require__(7);

	var injected = false;

	var ReactComponentEnvironment = {

	  /**
	   * Optionally injectable environment dependent cleanup hook. (server vs.
	   * browser etc). Example: A browser system caches DOM nodes based on component
	   * ID and must remove that cache entry when this instance is unmounted.
	   */
	  unmountIDFromEnvironment: null,

	  /**
	   * Optionally injectable hook for swapping out mount images in the middle of
	   * the tree.
	   */
	  replaceNodeWithMarkupByID: null,

	  /**
	   * Optionally injectable hook for processing a queue of child updates. Will
	   * later move into MultiChildComponents.
	   */
	  processChildrenUpdates: null,

	  injection: {
	    injectEnvironment: function(environment) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        !injected,
	        'ReactCompositeComponent: injectEnvironment() can only be called once.'
	      ) : invariant(!injected));
	      ReactComponentEnvironment.unmountIDFromEnvironment =
	        environment.unmountIDFromEnvironment;
	      ReactComponentEnvironment.replaceNodeWithMarkupByID =
	        environment.replaceNodeWithMarkupByID;
	      ReactComponentEnvironment.processChildrenUpdates =
	        environment.processChildrenUpdates;
	      injected = true;
	    }
	  }

	};

	module.exports = ReactComponentEnvironment;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shouldUpdateReactComponent
	 * @typechecks static-only
	 */

	'use strict';

	var warning = __webpack_require__(15);

	/**
	 * Given a `prevElement` and `nextElement`, determines if the existing
	 * instance should be updated as opposed to being destroyed or replaced by a new
	 * instance. Both arguments are elements. This ensures that this logic can
	 * operate on stateless trees without any backing instance.
	 *
	 * @param {?object} prevElement
	 * @param {?object} nextElement
	 * @return {boolean} True if the existing instance should be updated.
	 * @protected
	 */
	function shouldUpdateReactComponent(prevElement, nextElement) {
	  if (prevElement != null && nextElement != null) {
	    var prevType = typeof prevElement;
	    var nextType = typeof nextElement;
	    if (prevType === 'string' || prevType === 'number') {
	      return (nextType === 'string' || nextType === 'number');
	    } else {
	      if (nextType === 'object' &&
	          prevElement.type === nextElement.type &&
	          prevElement.key === nextElement.key) {
	        var ownersMatch = prevElement._owner === nextElement._owner;
	        var prevName = null;
	        var nextName = null;
	        var nextDisplayName = null;
	        if ("production" !== process.env.NODE_ENV) {
	          if (!ownersMatch) {
	            if (prevElement._owner != null &&
	                prevElement._owner.getPublicInstance() != null &&
	                prevElement._owner.getPublicInstance().constructor != null) {
	              prevName =
	                prevElement._owner.getPublicInstance().constructor.displayName;
	            }
	            if (nextElement._owner != null &&
	                nextElement._owner.getPublicInstance() != null &&
	                nextElement._owner.getPublicInstance().constructor != null) {
	              nextName =
	                nextElement._owner.getPublicInstance().constructor.displayName;
	            }
	            if (nextElement.type != null &&
	                nextElement.type.displayName != null) {
	              nextDisplayName = nextElement.type.displayName;
	            }
	            if (nextElement.type != null && typeof nextElement.type === 'string') {
	              nextDisplayName = nextElement.type;
	            }
	            if (typeof nextElement.type !== 'string' ||
	                nextElement.type === 'input' ||
	                nextElement.type === 'textarea') {
	              if ((prevElement._owner != null &&
	                  prevElement._owner._isOwnerNecessary === false) ||
	                  (nextElement._owner != null &&
	                  nextElement._owner._isOwnerNecessary === false)) {
	                if (prevElement._owner != null) {
	                  prevElement._owner._isOwnerNecessary = true;
	                }
	                if (nextElement._owner != null) {
	                  nextElement._owner._isOwnerNecessary = true;
	                }
	                ("production" !== process.env.NODE_ENV ? warning(
	                  false,
	                  '<%s /> is being rendered by both %s and %s using the same ' +
	                  'key (%s) in the same place. Currently, this means that ' +
	                  'they don\'t preserve state. This behavior should be very ' +
	                  'rare so we\'re considering deprecating it. Please contact ' +
	                  'the React team and explain your use case so that we can ' +
	                  'take that into consideration.',
	                  nextDisplayName || 'Unknown Component',
	                  prevName || '[Unknown]',
	                  nextName || '[Unknown]',
	                  prevElement.key
	                ) : null);
	              }
	            }
	          }
	        }
	        return ownersMatch;
	      }
	    }
	  }
	  return false;
	}

	module.exports = shouldUpdateReactComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMComponent
	 * @typechecks static-only
	 */

	/* global hasOwnProperty:true */

	'use strict';

	var CSSPropertyOperations = __webpack_require__(49);
	var DOMProperty = __webpack_require__(44);
	var DOMPropertyOperations = __webpack_require__(43);
	var ReactBrowserEventEmitter = __webpack_require__(68);
	var ReactComponentBrowserEnvironment =
	  __webpack_require__(47);
	var ReactMount = __webpack_require__(67);
	var ReactMultiChild = __webpack_require__(88);
	var ReactPerf = __webpack_require__(26);

	var assign = __webpack_require__(13);
	var escapeTextContentForBrowser = __webpack_require__(46);
	var invariant = __webpack_require__(7);
	var isEventSupported = __webpack_require__(75);
	var keyOf = __webpack_require__(39);
	var warning = __webpack_require__(15);

	var deleteListener = ReactBrowserEventEmitter.deleteListener;
	var listenTo = ReactBrowserEventEmitter.listenTo;
	var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;

	// For quickly matching children type, to test if can be treated as content.
	var CONTENT_TYPES = {'string': true, 'number': true};

	var STYLE = keyOf({style: null});

	var ELEMENT_NODE_TYPE = 1;

	/**
	 * Optionally injectable operations for mutating the DOM
	 */
	var BackendIDOperations = null;

	/**
	 * @param {?object} props
	 */
	function assertValidProps(props) {
	  if (!props) {
	    return;
	  }
	  // Note the use of `==` which checks for null or undefined.
	  if (props.dangerouslySetInnerHTML != null) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      props.children == null,
	      'Can only set one of `children` or `props.dangerouslySetInnerHTML`.'
	    ) : invariant(props.children == null));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof props.dangerouslySetInnerHTML === 'object' &&
	      '__html' in props.dangerouslySetInnerHTML,
	      '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' +
	      'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' +
	      'for more information.'
	    ) : invariant(typeof props.dangerouslySetInnerHTML === 'object' &&
	    '__html' in props.dangerouslySetInnerHTML));
	  }
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      props.innerHTML == null,
	      'Directly setting property `innerHTML` is not permitted. ' +
	      'For more information, lookup documentation on `dangerouslySetInnerHTML`.'
	    ) : null);
	    ("production" !== process.env.NODE_ENV ? warning(
	      !props.contentEditable || props.children == null,
	      'A component is `contentEditable` and contains `children` managed by ' +
	      'React. It is now your responsibility to guarantee that none of ' +
	      'those nodes are unexpectedly modified or duplicated. This is ' +
	      'probably not intentional.'
	    ) : null);
	  }
	  ("production" !== process.env.NODE_ENV ? invariant(
	    props.style == null || typeof props.style === 'object',
	    'The `style` prop expects a mapping from style properties to values, ' +
	    'not a string. For example, style={{marginRight: spacing + \'em\'}} when ' +
	    'using JSX.'
	  ) : invariant(props.style == null || typeof props.style === 'object'));
	}

	function putListener(id, registrationName, listener, transaction) {
	  if ("production" !== process.env.NODE_ENV) {
	    // IE8 has no API for event capturing and the `onScroll` event doesn't
	    // bubble.
	    ("production" !== process.env.NODE_ENV ? warning(
	      registrationName !== 'onScroll' || isEventSupported('scroll', true),
	      'This browser doesn\'t support the `onScroll` event'
	    ) : null);
	  }
	  var container = ReactMount.findReactContainerForID(id);
	  if (container) {
	    var doc = container.nodeType === ELEMENT_NODE_TYPE ?
	      container.ownerDocument :
	      container;
	    listenTo(registrationName, doc);
	  }
	  transaction.getPutListenerQueue().enqueuePutListener(
	    id,
	    registrationName,
	    listener
	  );
	}

	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special cased tags.

	var omittedCloseTags = {
	  'area': true,
	  'base': true,
	  'br': true,
	  'col': true,
	  'embed': true,
	  'hr': true,
	  'img': true,
	  'input': true,
	  'keygen': true,
	  'link': true,
	  'meta': true,
	  'param': true,
	  'source': true,
	  'track': true,
	  'wbr': true
	  // NOTE: menuitem's close tag should be omitted, but that causes problems.
	};

	// We accept any tag to be rendered but since this gets injected into abitrary
	// HTML, we want to make sure that it's a safe tag.
	// http://www.w3.org/TR/REC-xml/#NT-Name

	var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
	var validatedTagCache = {};
	var hasOwnProperty = {}.hasOwnProperty;

	function validateDangerousTag(tag) {
	  if (!hasOwnProperty.call(validatedTagCache, tag)) {
	    ("production" !== process.env.NODE_ENV ? invariant(VALID_TAG_REGEX.test(tag), 'Invalid tag: %s', tag) : invariant(VALID_TAG_REGEX.test(tag)));
	    validatedTagCache[tag] = true;
	  }
	}

	/**
	 * Creates a new React class that is idempotent and capable of containing other
	 * React components. It accepts event listeners and DOM properties that are
	 * valid according to `DOMProperty`.
	 *
	 *  - Event listeners: `onClick`, `onMouseDown`, etc.
	 *  - DOM properties: `className`, `name`, `title`, etc.
	 *
	 * The `style` property functions differently from the DOM API. It accepts an
	 * object mapping of style properties to values.
	 *
	 * @constructor ReactDOMComponent
	 * @extends ReactMultiChild
	 */
	function ReactDOMComponent(tag) {
	  validateDangerousTag(tag);
	  this._tag = tag;
	  this._renderedChildren = null;
	  this._previousStyleCopy = null;
	  this._rootNodeID = null;
	}

	ReactDOMComponent.displayName = 'ReactDOMComponent';

	ReactDOMComponent.Mixin = {

	  construct: function(element) {
	    this._currentElement = element;
	  },

	  /**
	   * Generates root tag markup then recurses. This method has side effects and
	   * is not idempotent.
	   *
	   * @internal
	   * @param {string} rootID The root DOM ID for this node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} The computed markup.
	   */
	  mountComponent: function(rootID, transaction, context) {
	    this._rootNodeID = rootID;
	    assertValidProps(this._currentElement.props);
	    var closeTag = omittedCloseTags[this._tag] ? '' : '</' + this._tag + '>';
	    return (
	      this._createOpenTagMarkupAndPutListeners(transaction) +
	      this._createContentMarkup(transaction, context) +
	      closeTag
	    );
	  },

	  /**
	   * Creates markup for the open tag and all attributes.
	   *
	   * This method has side effects because events get registered.
	   *
	   * Iterating over object properties is faster than iterating over arrays.
	   * @see http://jsperf.com/obj-vs-arr-iteration
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup of opening tag.
	   */
	  _createOpenTagMarkupAndPutListeners: function(transaction) {
	    var props = this._currentElement.props;
	    var ret = '<' + this._tag;

	    for (var propKey in props) {
	      if (!props.hasOwnProperty(propKey)) {
	        continue;
	      }
	      var propValue = props[propKey];
	      if (propValue == null) {
	        continue;
	      }
	      if (registrationNameModules.hasOwnProperty(propKey)) {
	        putListener(this._rootNodeID, propKey, propValue, transaction);
	      } else {
	        if (propKey === STYLE) {
	          if (propValue) {
	            propValue = this._previousStyleCopy = assign({}, props.style);
	          }
	          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
	        }
	        var markup =
	          DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
	        if (markup) {
	          ret += ' ' + markup;
	        }
	      }
	    }

	    // For static pages, no need to put React ID and checksum. Saves lots of
	    // bytes.
	    if (transaction.renderToStaticMarkup) {
	      return ret + '>';
	    }

	    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
	    return ret + ' ' + markupForID + '>';
	  },

	  /**
	   * Creates markup for the content between the tags.
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   * @return {string} Content markup.
	   */
	  _createContentMarkup: function(transaction, context) {
	    var prefix = '';
	    if (this._tag === 'listing' ||
	        this._tag === 'pre' ||
	        this._tag === 'textarea') {
	      // Add an initial newline because browsers ignore the first newline in
	      // a <listing>, <pre>, or <textarea> as an "authoring convenience" -- see
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody.
	      prefix = '\n';
	    }

	    var props = this._currentElement.props;

	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        return prefix + innerHTML.__html;
	      }
	    } else {
	      var contentToUse =
	        CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        return prefix + escapeTextContentForBrowser(contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(
	          childrenToUse,
	          transaction,
	          context
	        );
	        return prefix + mountImages.join('');
	      }
	    }
	    return prefix;
	  },

	  receiveComponent: function(nextElement, transaction, context) {
	    var prevElement = this._currentElement;
	    this._currentElement = nextElement;
	    this.updateComponent(transaction, prevElement, nextElement, context);
	  },

	  /**
	   * Updates a native DOM component after it has already been allocated and
	   * attached to the DOM. Reconciles the root DOM node, then recurses.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevElement
	   * @param {ReactElement} nextElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function(transaction, prevElement, nextElement, context) {
	    assertValidProps(this._currentElement.props);
	    this._updateDOMProperties(prevElement.props, transaction);
	    this._updateDOMChildren(prevElement.props, transaction, context);
	  },

	  /**
	   * Reconciles the properties by detecting differences in property values and
	   * updating the DOM as necessary. This function is probably the single most
	   * critical path for performance optimization.
	   *
	   * TODO: Benchmark whether checking for changed values in memory actually
	   *       improves performance (especially statically positioned elements).
	   * TODO: Benchmark the effects of putting this at the top since 99% of props
	   *       do not change for a given reconciliation.
	   * TODO: Benchmark areas that can be improved with caching.
	   *
	   * @private
	   * @param {object} lastProps
	   * @param {ReactReconcileTransaction} transaction
	   */
	  _updateDOMProperties: function(lastProps, transaction) {
	    var nextProps = this._currentElement.props;
	    var propKey;
	    var styleName;
	    var styleUpdates;
	    for (propKey in lastProps) {
	      if (nextProps.hasOwnProperty(propKey) ||
	         !lastProps.hasOwnProperty(propKey)) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        var lastStyle = this._previousStyleCopy;
	        for (styleName in lastStyle) {
	          if (lastStyle.hasOwnProperty(styleName)) {
	            styleUpdates = styleUpdates || {};
	            styleUpdates[styleName] = '';
	          }
	        }
	        this._previousStyleCopy = null;
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        deleteListener(this._rootNodeID, propKey);
	      } else if (
	          DOMProperty.isStandardName[propKey] ||
	          DOMProperty.isCustomAttribute(propKey)) {
	        BackendIDOperations.deletePropertyByID(
	          this._rootNodeID,
	          propKey
	        );
	      }
	    }
	    for (propKey in nextProps) {
	      var nextProp = nextProps[propKey];
	      var lastProp = propKey === STYLE ?
	        this._previousStyleCopy :
	        lastProps[propKey];
	      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        if (nextProp) {
	          nextProp = this._previousStyleCopy = assign({}, nextProp);
	        } else {
	          this._previousStyleCopy = null;
	        }
	        if (lastProp) {
	          // Unset styles on `lastProp` but not on `nextProp`.
	          for (styleName in lastProp) {
	            if (lastProp.hasOwnProperty(styleName) &&
	                (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = '';
	            }
	          }
	          // Update styles that changed since `lastProp`.
	          for (styleName in nextProp) {
	            if (nextProp.hasOwnProperty(styleName) &&
	                lastProp[styleName] !== nextProp[styleName]) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = nextProp[styleName];
	            }
	          }
	        } else {
	          // Relies on `updateStylesByID` not mutating `styleUpdates`.
	          styleUpdates = nextProp;
	        }
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        putListener(this._rootNodeID, propKey, nextProp, transaction);
	      } else if (
	          DOMProperty.isStandardName[propKey] ||
	          DOMProperty.isCustomAttribute(propKey)) {
	        BackendIDOperations.updatePropertyByID(
	          this._rootNodeID,
	          propKey,
	          nextProp
	        );
	      }
	    }
	    if (styleUpdates) {
	      BackendIDOperations.updateStylesByID(
	        this._rootNodeID,
	        styleUpdates
	      );
	    }
	  },

	  /**
	   * Reconciles the children with the various properties that affect the
	   * children content.
	   *
	   * @param {object} lastProps
	   * @param {ReactReconcileTransaction} transaction
	   */
	  _updateDOMChildren: function(lastProps, transaction, context) {
	    var nextProps = this._currentElement.props;

	    var lastContent =
	      CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
	    var nextContent =
	      CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

	    var lastHtml =
	      lastProps.dangerouslySetInnerHTML &&
	      lastProps.dangerouslySetInnerHTML.__html;
	    var nextHtml =
	      nextProps.dangerouslySetInnerHTML &&
	      nextProps.dangerouslySetInnerHTML.__html;

	    // Note the use of `!=` which checks for null or undefined.
	    var lastChildren = lastContent != null ? null : lastProps.children;
	    var nextChildren = nextContent != null ? null : nextProps.children;

	    // If we're switching from children to content/html or vice versa, remove
	    // the old content
	    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
	    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
	    if (lastChildren != null && nextChildren == null) {
	      this.updateChildren(null, transaction, context);
	    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
	      this.updateTextContent('');
	    }

	    if (nextContent != null) {
	      if (lastContent !== nextContent) {
	        this.updateTextContent('' + nextContent);
	      }
	    } else if (nextHtml != null) {
	      if (lastHtml !== nextHtml) {
	        BackendIDOperations.updateInnerHTMLByID(
	          this._rootNodeID,
	          nextHtml
	        );
	      }
	    } else if (nextChildren != null) {
	      this.updateChildren(nextChildren, transaction, context);
	    }
	  },

	  /**
	   * Destroys all event registrations for this instance. Does not remove from
	   * the DOM. That must be done by the parent.
	   *
	   * @internal
	   */
	  unmountComponent: function() {
	    this.unmountChildren();
	    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	    this._rootNodeID = null;
	  }

	};

	ReactPerf.measureMethods(ReactDOMComponent, 'ReactDOMComponent', {
	  mountComponent: 'mountComponent',
	  updateComponent: 'updateComponent'
	});

	assign(
	  ReactDOMComponent.prototype,
	  ReactDOMComponent.Mixin,
	  ReactMultiChild.Mixin
	);

	ReactDOMComponent.injection = {
	  injectIDOperations: function(IDOperations) {
	    ReactDOMComponent.BackendIDOperations = BackendIDOperations = IDOperations;
	  }
	};

	module.exports = ReactDOMComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChild
	 * @typechecks static-only
	 */

	'use strict';

	var ReactComponentEnvironment = __webpack_require__(85);
	var ReactMultiChildUpdateTypes = __webpack_require__(64);

	var ReactReconciler = __webpack_require__(27);
	var ReactChildReconciler = __webpack_require__(89);

	/**
	 * Updating children of a component may trigger recursive updates. The depth is
	 * used to batch recursive updates to render markup more efficiently.
	 *
	 * @type {number}
	 * @private
	 */
	var updateDepth = 0;

	/**
	 * Queue of update configuration objects.
	 *
	 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
	 *
	 * @type {array<object>}
	 * @private
	 */
	var updateQueue = [];

	/**
	 * Queue of markup to be rendered.
	 *
	 * @type {array<string>}
	 * @private
	 */
	var markupQueue = [];

	/**
	 * Enqueues markup to be rendered and inserted at a supplied index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} markup Markup that renders into an element.
	 * @param {number} toIndex Destination index.
	 * @private
	 */
	function enqueueMarkup(parentID, markup, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
	    markupIndex: markupQueue.push(markup) - 1,
	    textContent: null,
	    fromIndex: null,
	    toIndex: toIndex
	  });
	}

	/**
	 * Enqueues moving an existing element to another index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Source index of the existing element.
	 * @param {number} toIndex Destination index of the element.
	 * @private
	 */
	function enqueueMove(parentID, fromIndex, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
	    markupIndex: null,
	    textContent: null,
	    fromIndex: fromIndex,
	    toIndex: toIndex
	  });
	}

	/**
	 * Enqueues removing an element at an index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Index of the element to remove.
	 * @private
	 */
	function enqueueRemove(parentID, fromIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
	    markupIndex: null,
	    textContent: null,
	    fromIndex: fromIndex,
	    toIndex: null
	  });
	}

	/**
	 * Enqueues setting the text content.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} textContent Text content to set.
	 * @private
	 */
	function enqueueTextContent(parentID, textContent) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
	    markupIndex: null,
	    textContent: textContent,
	    fromIndex: null,
	    toIndex: null
	  });
	}

	/**
	 * Processes any enqueued updates.
	 *
	 * @private
	 */
	function processQueue() {
	  if (updateQueue.length) {
	    ReactComponentEnvironment.processChildrenUpdates(
	      updateQueue,
	      markupQueue
	    );
	    clearQueue();
	  }
	}

	/**
	 * Clears any enqueued updates.
	 *
	 * @private
	 */
	function clearQueue() {
	  updateQueue.length = 0;
	  markupQueue.length = 0;
	}

	/**
	 * ReactMultiChild are capable of reconciling multiple children.
	 *
	 * @class ReactMultiChild
	 * @internal
	 */
	var ReactMultiChild = {

	  /**
	   * Provides common functionality for components that must reconcile multiple
	   * children. This is used by `ReactDOMComponent` to mount, update, and
	   * unmount child components.
	   *
	   * @lends {ReactMultiChild.prototype}
	   */
	  Mixin: {

	    /**
	     * Generates a "mount image" for each of the supplied children. In the case
	     * of `ReactDOMComponent`, a mount image is a string of markup.
	     *
	     * @param {?object} nestedChildren Nested child maps.
	     * @return {array} An array of mounted representations.
	     * @internal
	     */
	    mountChildren: function(nestedChildren, transaction, context) {
	      var children = ReactChildReconciler.instantiateChildren(
	        nestedChildren, transaction, context
	      );
	      this._renderedChildren = children;
	      var mountImages = [];
	      var index = 0;
	      for (var name in children) {
	        if (children.hasOwnProperty(name)) {
	          var child = children[name];
	          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	          var rootID = this._rootNodeID + name;
	          var mountImage = ReactReconciler.mountComponent(
	            child,
	            rootID,
	            transaction,
	            context
	          );
	          child._mountIndex = index;
	          mountImages.push(mountImage);
	          index++;
	        }
	      }
	      return mountImages;
	    },

	    /**
	     * Replaces any rendered children with a text content string.
	     *
	     * @param {string} nextContent String of content.
	     * @internal
	     */
	    updateTextContent: function(nextContent) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        var prevChildren = this._renderedChildren;
	        // Remove any rendered children.
	        ReactChildReconciler.unmountChildren(prevChildren);
	        // TODO: The setTextContent operation should be enough
	        for (var name in prevChildren) {
	          if (prevChildren.hasOwnProperty(name)) {
	            this._unmountChildByName(prevChildren[name], name);
	          }
	        }
	        // Set new text content.
	        this.setTextContent(nextContent);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },

	    /**
	     * Updates the rendered children with new children.
	     *
	     * @param {?object} nextNestedChildren Nested child maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     */
	    updateChildren: function(nextNestedChildren, transaction, context) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        this._updateChildren(nextNestedChildren, transaction, context);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }

	      }
	    },

	    /**
	     * Improve performance by isolating this hot code path from the try/catch
	     * block in `updateChildren`.
	     *
	     * @param {?object} nextNestedChildren Nested child maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @final
	     * @protected
	     */
	    _updateChildren: function(nextNestedChildren, transaction, context) {
	      var prevChildren = this._renderedChildren;
	      var nextChildren = ReactChildReconciler.updateChildren(
	        prevChildren, nextNestedChildren, transaction, context
	      );
	      this._renderedChildren = nextChildren;
	      if (!nextChildren && !prevChildren) {
	        return;
	      }
	      var name;
	      // `nextIndex` will increment for each child in `nextChildren`, but
	      // `lastIndex` will be the last index visited in `prevChildren`.
	      var lastIndex = 0;
	      var nextIndex = 0;
	      for (name in nextChildren) {
	        if (!nextChildren.hasOwnProperty(name)) {
	          continue;
	        }
	        var prevChild = prevChildren && prevChildren[name];
	        var nextChild = nextChildren[name];
	        if (prevChild === nextChild) {
	          this.moveChild(prevChild, nextIndex, lastIndex);
	          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	          prevChild._mountIndex = nextIndex;
	        } else {
	          if (prevChild) {
	            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
	            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	            this._unmountChildByName(prevChild, name);
	          }
	          // The child must be instantiated before it's mounted.
	          this._mountChildByNameAtIndex(
	            nextChild, name, nextIndex, transaction, context
	          );
	        }
	        nextIndex++;
	      }
	      // Remove children that are no longer present.
	      for (name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name) &&
	            !(nextChildren && nextChildren.hasOwnProperty(name))) {
	          this._unmountChildByName(prevChildren[name], name);
	        }
	      }
	    },

	    /**
	     * Unmounts all rendered children. This should be used to clean up children
	     * when this component is unmounted.
	     *
	     * @internal
	     */
	    unmountChildren: function() {
	      var renderedChildren = this._renderedChildren;
	      ReactChildReconciler.unmountChildren(renderedChildren);
	      this._renderedChildren = null;
	    },

	    /**
	     * Moves a child component to the supplied index.
	     *
	     * @param {ReactComponent} child Component to move.
	     * @param {number} toIndex Destination index of the element.
	     * @param {number} lastIndex Last index visited of the siblings of `child`.
	     * @protected
	     */
	    moveChild: function(child, toIndex, lastIndex) {
	      // If the index of `child` is less than `lastIndex`, then it needs to
	      // be moved. Otherwise, we do not need to move it because a child will be
	      // inserted or moved before `child`.
	      if (child._mountIndex < lastIndex) {
	        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
	      }
	    },

	    /**
	     * Creates a child component.
	     *
	     * @param {ReactComponent} child Component to create.
	     * @param {string} mountImage Markup to insert.
	     * @protected
	     */
	    createChild: function(child, mountImage) {
	      enqueueMarkup(this._rootNodeID, mountImage, child._mountIndex);
	    },

	    /**
	     * Removes a child component.
	     *
	     * @param {ReactComponent} child Child to remove.
	     * @protected
	     */
	    removeChild: function(child) {
	      enqueueRemove(this._rootNodeID, child._mountIndex);
	    },

	    /**
	     * Sets this text content string.
	     *
	     * @param {string} textContent Text content to set.
	     * @protected
	     */
	    setTextContent: function(textContent) {
	      enqueueTextContent(this._rootNodeID, textContent);
	    },

	    /**
	     * Mounts a child with the supplied name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to mount.
	     * @param {string} name Name of the child.
	     * @param {number} index Index at which to insert the child.
	     * @param {ReactReconcileTransaction} transaction
	     * @private
	     */
	    _mountChildByNameAtIndex: function(
	      child,
	      name,
	      index,
	      transaction,
	      context) {
	      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	      var rootID = this._rootNodeID + name;
	      var mountImage = ReactReconciler.mountComponent(
	        child,
	        rootID,
	        transaction,
	        context
	      );
	      child._mountIndex = index;
	      this.createChild(child, mountImage);
	    },

	    /**
	     * Unmounts a rendered child by name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to unmount.
	     * @param {string} name Name of the child in `this._renderedChildren`.
	     * @private
	     */
	    _unmountChildByName: function(child, name) {
	      this.removeChild(child);
	      child._mountIndex = null;
	    }

	  }

	};

	module.exports = ReactMultiChild;


/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildReconciler
	 * @typechecks static-only
	 */

	'use strict';

	var ReactReconciler = __webpack_require__(27);

	var flattenChildren = __webpack_require__(90);
	var instantiateReactComponent = __webpack_require__(83);
	var shouldUpdateReactComponent = __webpack_require__(86);

	/**
	 * ReactChildReconciler provides helpers for initializing or updating a set of
	 * children. Its output is suitable for passing it onto ReactMultiChild which
	 * does diffed reordering and insertion.
	 */
	var ReactChildReconciler = {

	  /**
	   * Generates a "mount image" for each of the supplied children. In the case
	   * of `ReactDOMComponent`, a mount image is a string of markup.
	   *
	   * @param {?object} nestedChildNodes Nested child maps.
	   * @return {?object} A set of child instances.
	   * @internal
	   */
	  instantiateChildren: function(nestedChildNodes, transaction, context) {
	    var children = flattenChildren(nestedChildNodes);
	    for (var name in children) {
	      if (children.hasOwnProperty(name)) {
	        var child = children[name];
	        // The rendered children must be turned into instances as they're
	        // mounted.
	        var childInstance = instantiateReactComponent(child, null);
	        children[name] = childInstance;
	      }
	    }
	    return children;
	  },

	  /**
	   * Updates the rendered children and returns a new set of children.
	   *
	   * @param {?object} prevChildren Previously initialized set of children.
	   * @param {?object} nextNestedChildNodes Nested child maps.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @return {?object} A new set of child instances.
	   * @internal
	   */
	  updateChildren: function(
	    prevChildren,
	    nextNestedChildNodes,
	    transaction,
	    context) {
	    // We currently don't have a way to track moves here but if we use iterators
	    // instead of for..in we can zip the iterators and check if an item has
	    // moved.
	    // TODO: If nothing has changed, return the prevChildren object so that we
	    // can quickly bailout if nothing has changed.
	    var nextChildren = flattenChildren(nextNestedChildNodes);
	    if (!nextChildren && !prevChildren) {
	      return null;
	    }
	    var name;
	    for (name in nextChildren) {
	      if (!nextChildren.hasOwnProperty(name)) {
	        continue;
	      }
	      var prevChild = prevChildren && prevChildren[name];
	      var prevElement = prevChild && prevChild._currentElement;
	      var nextElement = nextChildren[name];
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        ReactReconciler.receiveComponent(
	          prevChild, nextElement, transaction, context
	        );
	        nextChildren[name] = prevChild;
	      } else {
	        if (prevChild) {
	          ReactReconciler.unmountComponent(prevChild, name);
	        }
	        // The child must be instantiated before it's mounted.
	        var nextChildInstance = instantiateReactComponent(
	          nextElement,
	          null
	        );
	        nextChildren[name] = nextChildInstance;
	      }
	    }
	    // Unmount children that are no longer present.
	    for (name in prevChildren) {
	      if (prevChildren.hasOwnProperty(name) &&
	          !(nextChildren && nextChildren.hasOwnProperty(name))) {
	        ReactReconciler.unmountComponent(prevChildren[name]);
	      }
	    }
	    return nextChildren;
	  },

	  /**
	   * Unmounts all rendered children. This should be used to clean up children
	   * when this component is unmounted.
	   *
	   * @param {?object} renderedChildren Previously initialized set of children.
	   * @internal
	   */
	  unmountChildren: function(renderedChildren) {
	    for (var name in renderedChildren) {
	      var renderedChild = renderedChildren[name];
	      ReactReconciler.unmountComponent(renderedChild);
	    }
	  }

	};

	module.exports = ReactChildReconciler;


/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule flattenChildren
	 */

	'use strict';

	var traverseAllChildren = __webpack_require__(18);
	var warning = __webpack_require__(15);

	/**
	 * @param {function} traverseContext Context passed through traversal.
	 * @param {?ReactComponent} child React child component.
	 * @param {!string} name String name of key path to child.
	 */
	function flattenSingleChildIntoContext(traverseContext, child, name) {
	  // We found a component instance.
	  var result = traverseContext;
	  var keyUnique = !result.hasOwnProperty(name);
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      keyUnique,
	      'flattenChildren(...): Encountered two children with the same key, ' +
	      '`%s`. Child keys must be unique; when two children share a key, only ' +
	      'the first child will be used.',
	      name
	    ) : null);
	  }
	  if (keyUnique && child != null) {
	    result[name] = child;
	  }
	}

	/**
	 * Flattens children that are typically specified as `props.children`. Any null
	 * children will not be included in the resulting object.
	 * @return {!object} flattened children keyed by name.
	 */
	function flattenChildren(children) {
	  if (children == null) {
	    return children;
	  }
	  var result = {};
	  traverseAllChildren(children, flattenSingleChildIntoContext, result);
	  return result;
	}

	module.exports = flattenChildren;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultInjection
	 */

	'use strict';

	var BeforeInputEventPlugin = __webpack_require__(92);
	var ChangeEventPlugin = __webpack_require__(100);
	var ClientReactRootIndex = __webpack_require__(102);
	var DefaultEventPluginOrder = __webpack_require__(103);
	var EnterLeaveEventPlugin = __webpack_require__(104);
	var ExecutionEnvironment = __webpack_require__(51);
	var HTMLDOMPropertyConfig = __webpack_require__(108);
	var MobileSafariClickEventPlugin = __webpack_require__(109);
	var ReactBrowserComponentMixin = __webpack_require__(110);
	var ReactClass = __webpack_require__(37);
	var ReactComponentBrowserEnvironment =
	  __webpack_require__(47);
	var ReactDefaultBatchingStrategy = __webpack_require__(112);
	var ReactDOMComponent = __webpack_require__(87);
	var ReactDOMButton = __webpack_require__(113);
	var ReactDOMForm = __webpack_require__(116);
	var ReactDOMImg = __webpack_require__(118);
	var ReactDOMIDOperations = __webpack_require__(48);
	var ReactDOMIframe = __webpack_require__(119);
	var ReactDOMInput = __webpack_require__(120);
	var ReactDOMOption = __webpack_require__(123);
	var ReactDOMSelect = __webpack_require__(124);
	var ReactDOMTextarea = __webpack_require__(125);
	var ReactDOMTextComponent = __webpack_require__(42);
	var ReactElement = __webpack_require__(11);
	var ReactEventListener = __webpack_require__(126);
	var ReactInjection = __webpack_require__(129);
	var ReactInstanceHandles = __webpack_require__(20);
	var ReactMount = __webpack_require__(67);
	var ReactReconcileTransaction = __webpack_require__(130);
	var SelectEventPlugin = __webpack_require__(136);
	var ServerReactRootIndex = __webpack_require__(138);
	var SimpleEventPlugin = __webpack_require__(139);
	var SVGDOMPropertyConfig = __webpack_require__(148);

	var createFullPageComponent = __webpack_require__(149);

	function autoGenerateWrapperClass(type) {
	  return ReactClass.createClass({
	    tagName: type.toUpperCase(),
	    render: function() {
	      return new ReactElement(
	        type,
	        null,
	        null,
	        null,
	        null,
	        this.props
	      );
	    }
	  });
	}

	function inject() {
	  ReactInjection.EventEmitter.injectReactEventListener(
	    ReactEventListener
	  );

	  /**
	   * Inject modules for resolving DOM hierarchy and plugin ordering.
	   */
	  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
	  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
	  ReactInjection.EventPluginHub.injectMount(ReactMount);

	  /**
	   * Some important event plugins included by default (without having to require
	   * them).
	   */
	  ReactInjection.EventPluginHub.injectEventPluginsByName({
	    SimpleEventPlugin: SimpleEventPlugin,
	    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	    ChangeEventPlugin: ChangeEventPlugin,
	    MobileSafariClickEventPlugin: MobileSafariClickEventPlugin,
	    SelectEventPlugin: SelectEventPlugin,
	    BeforeInputEventPlugin: BeforeInputEventPlugin
	  });

	  ReactInjection.NativeComponent.injectGenericComponentClass(
	    ReactDOMComponent
	  );

	  ReactInjection.NativeComponent.injectTextComponentClass(
	    ReactDOMTextComponent
	  );

	  ReactInjection.NativeComponent.injectAutoWrapper(
	    autoGenerateWrapperClass
	  );

	  // This needs to happen before createFullPageComponent() otherwise the mixin
	  // won't be included.
	  ReactInjection.Class.injectMixin(ReactBrowserComponentMixin);

	  ReactInjection.NativeComponent.injectComponentClasses({
	    'button': ReactDOMButton,
	    'form': ReactDOMForm,
	    'iframe': ReactDOMIframe,
	    'img': ReactDOMImg,
	    'input': ReactDOMInput,
	    'option': ReactDOMOption,
	    'select': ReactDOMSelect,
	    'textarea': ReactDOMTextarea,

	    'html': createFullPageComponent('html'),
	    'head': createFullPageComponent('head'),
	    'body': createFullPageComponent('body')
	  });

	  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

	  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');

	  ReactInjection.Updates.injectReconcileTransaction(
	    ReactReconcileTransaction
	  );
	  ReactInjection.Updates.injectBatchingStrategy(
	    ReactDefaultBatchingStrategy
	  );

	  ReactInjection.RootIndex.injectCreateReactRootIndex(
	    ExecutionEnvironment.canUseDOM ?
	      ClientReactRootIndex.createReactRootIndex :
	      ServerReactRootIndex.createReactRootIndex
	  );

	  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
	  ReactInjection.DOMComponent.injectIDOperations(ReactDOMIDOperations);

	  if ("production" !== process.env.NODE_ENV) {
	    var url = (ExecutionEnvironment.canUseDOM && window.location.href) || '';
	    if ((/[?&]react_perf\b/).test(url)) {
	      var ReactDefaultPerf = __webpack_require__(150);
	      ReactDefaultPerf.start();
	    }
	  }
	}

	module.exports = {
	  inject: inject
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015 Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule BeforeInputEventPlugin
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(5);
	var EventPropagators = __webpack_require__(93);
	var ExecutionEnvironment = __webpack_require__(51);
	var FallbackCompositionState = __webpack_require__(94);
	var SyntheticCompositionEvent = __webpack_require__(96);
	var SyntheticInputEvent = __webpack_require__(99);

	var keyOf = __webpack_require__(39);

	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
	var START_KEYCODE = 229;

	var canUseCompositionEvent = (
	  ExecutionEnvironment.canUseDOM &&
	  'CompositionEvent' in window
	);

	var documentMode = null;
	if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	}

	// Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.
	var canUseTextInputEvent = (
	  ExecutionEnvironment.canUseDOM &&
	  'TextEvent' in window &&
	  !documentMode &&
	  !isPresto()
	);

	// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.
	var useFallbackCompositionData = (
	  ExecutionEnvironment.canUseDOM &&
	  (
	    (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11)
	  )
	);

	/**
	 * Opera <= 12 includes TextEvent in window, but does not fire
	 * text input events. Rely on keypress instead.
	 */
	function isPresto() {
	  var opera = window.opera;
	  return (
	    typeof opera === 'object' &&
	    typeof opera.version === 'function' &&
	    parseInt(opera.version(), 10) <= 12
	  );
	}

	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

	var topLevelTypes = EventConstants.topLevelTypes;

	// Events and their corresponding property names.
	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onBeforeInput: null}),
	      captured: keyOf({onBeforeInputCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topCompositionEnd,
	      topLevelTypes.topKeyPress,
	      topLevelTypes.topTextInput,
	      topLevelTypes.topPaste
	    ]
	  },
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCompositionEnd: null}),
	      captured: keyOf({onCompositionEndCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topCompositionEnd,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topKeyPress,
	      topLevelTypes.topKeyUp,
	      topLevelTypes.topMouseDown
	    ]
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCompositionStart: null}),
	      captured: keyOf({onCompositionStartCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topCompositionStart,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topKeyPress,
	      topLevelTypes.topKeyUp,
	      topLevelTypes.topMouseDown
	    ]
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCompositionUpdate: null}),
	      captured: keyOf({onCompositionUpdateCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topCompositionUpdate,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topKeyPress,
	      topLevelTypes.topKeyUp,
	      topLevelTypes.topMouseDown
	    ]
	  }
	};

	// Track whether we've ever handled a keypress on the space key.
	var hasSpaceKeypress = false;

	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */
	function isKeypressCommand(nativeEvent) {
	  return (
	    (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
	    // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	    !(nativeEvent.ctrlKey && nativeEvent.altKey)
	  );
	}


	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */
	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionStart:
	      return eventTypes.compositionStart;
	    case topLevelTypes.topCompositionEnd:
	      return eventTypes.compositionEnd;
	    case topLevelTypes.topCompositionUpdate:
	      return eventTypes.compositionUpdate;
	  }
	}

	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionStart(topLevelType, nativeEvent) {
	  return (
	    topLevelType === topLevelTypes.topKeyDown &&
	    nativeEvent.keyCode === START_KEYCODE
	  );
	}

	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topKeyUp:
	      // Command keys insert or clear IME input.
	      return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);
	    case topLevelTypes.topKeyDown:
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return (nativeEvent.keyCode !== START_KEYCODE);
	    case topLevelTypes.topKeyPress:
	    case topLevelTypes.topMouseDown:
	    case topLevelTypes.topBlur:
	      // Events are not possible without cancelling IME.
	      return true;
	    default:
	      return false;
	  }
	}

	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */
	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;
	  if (typeof detail === 'object' && 'data' in detail) {
	    return detail.data;
	  }
	  return null;
	}

	// Track the current IME composition fallback object, if any.
	var currentComposition = null;

	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticCompositionEvent.
	 */
	function extractCompositionEvent(
	  topLevelType,
	  topLevelTarget,
	  topLevelTargetID,
	  nativeEvent
	) {
	  var eventType;
	  var fallbackData;

	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(topLevelType);
	  } else if (!currentComposition) {
	    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionStart;
	    }
	  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	    eventType = eventTypes.compositionEnd;
	  }

	  if (!eventType) {
	    return null;
	  }

	  if (useFallbackCompositionData) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!currentComposition && eventType === eventTypes.compositionStart) {
	      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);
	    } else if (eventType === eventTypes.compositionEnd) {
	      if (currentComposition) {
	        fallbackData = currentComposition.getData();
	      }
	    }
	  }

	  var event = SyntheticCompositionEvent.getPooled(
	    eventType,
	    topLevelTargetID,
	    nativeEvent
	  );

	  if (fallbackData) {
	    // Inject data generated from fallback path into the synthetic event.
	    // This matches the property of native CompositionEventInterface.
	    event.data = fallbackData;
	  } else {
	    var customData = getDataFromCustomEvent(nativeEvent);
	    if (customData !== null) {
	      event.data = customData;
	    }
	  }

	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The string corresponding to this `beforeInput` event.
	 */
	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionEnd:
	      return getDataFromCustomEvent(nativeEvent);
	    case topLevelTypes.topKeyPress:
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;
	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }

	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;

	    case topLevelTypes.topTextInput:
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data;

	      // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to blacklist it.
	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }

	      return chars;

	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}

	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The fallback string for this `beforeInput` event.
	 */
	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  if (currentComposition) {
	    if (
	      topLevelType === topLevelTypes.topCompositionEnd ||
	      isFallbackCompositionEnd(topLevelType, nativeEvent)
	    ) {
	      var chars = currentComposition.getData();
	      FallbackCompositionState.release(currentComposition);
	      currentComposition = null;
	      return chars;
	    }
	    return null;
	  }

	  switch (topLevelType) {
	    case topLevelTypes.topPaste:
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;
	    case topLevelTypes.topKeyPress:
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
	        return String.fromCharCode(nativeEvent.which);
	      }
	      return null;
	    case topLevelTypes.topCompositionEnd:
	      return useFallbackCompositionData ? null : nativeEvent.data;
	    default:
	      return null;
	  }
	}

	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticInputEvent.
	 */
	function extractBeforeInputEvent(
	  topLevelType,
	  topLevelTarget,
	  topLevelTargetID,
	  nativeEvent
	) {
	  var chars;

	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
	  }

	  // If no characters are being inserted, no BeforeInput event should
	  // be fired.
	  if (!chars) {
	    return null;
	  }

	  var event = SyntheticInputEvent.getPooled(
	    eventTypes.beforeInput,
	    topLevelTargetID,
	    nativeEvent
	  );

	  event.data = chars;
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */
	var BeforeInputEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID,
	    nativeEvent
	  ) {
	    return [
	      extractCompositionEvent(
	        topLevelType,
	        topLevelTarget,
	        topLevelTargetID,
	        nativeEvent
	      ),
	      extractBeforeInputEvent(
	        topLevelType,
	        topLevelTarget,
	        topLevelTargetID,
	        nativeEvent
	      )
	    ];
	  }
	};

	module.exports = BeforeInputEventPlugin;


/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPropagators
	 */

	'use strict';

	var EventConstants = __webpack_require__(5);
	var EventPluginHub = __webpack_require__(69);

	var accumulateInto = __webpack_require__(71);
	var forEachAccumulated = __webpack_require__(72);

	var PropagationPhases = EventConstants.PropagationPhases;
	var getListener = EventPluginHub.getListener;

	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(id, event, propagationPhase) {
	  var registrationName =
	    event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(id, registrationName);
	}

	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */
	function accumulateDirectionalDispatches(domID, upwards, event) {
	  if ("production" !== process.env.NODE_ENV) {
	    if (!domID) {
	      throw new Error('Dispatching id must not be null');
	    }
	  }
	  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
	  var listener = listenerAtPhase(domID, event, phase);
	  if (listener) {
	    event._dispatchListeners =
	      accumulateInto(event._dispatchListeners, listener);
	    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
	  }
	}

	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We can not perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */
	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(
	      event.dispatchMarker,
	      accumulateDirectionalDispatches,
	      event
	    );
	  }
	}


	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */
	function accumulateDispatches(id, ignoredDirection, event) {
	  if (event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(id, registrationName);
	    if (listener) {
	      event._dispatchListeners =
	        accumulateInto(event._dispatchListeners, listener);
	      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
	    }
	  }
	}

	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */
	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event.dispatchMarker, null, event);
	  }
	}

	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}

	function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
	  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(
	    fromID,
	    toID,
	    accumulateDispatches,
	    leave,
	    enter
	  );
	}


	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}



	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing event a
	 * single one.
	 *
	 * @constructor EventPropagators
	 */
	var EventPropagators = {
	  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
	  accumulateDirectDispatches: accumulateDirectDispatches,
	  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
	};

	module.exports = EventPropagators;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule FallbackCompositionState
	 * @typechecks static-only
	 */

	'use strict';

	var PooledClass = __webpack_require__(9);

	var assign = __webpack_require__(13);
	var getTextContentAccessor = __webpack_require__(95);

	/**
	 * This helper class stores information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 * @param {DOMEventTarget} root
	 */
	function FallbackCompositionState(root) {
	  this._root = root;
	  this._startText = this.getText();
	  this._fallbackText = null;
	}

	assign(FallbackCompositionState.prototype, {
	  /**
	   * Get current text of input.
	   *
	   * @return {string}
	   */
	  getText: function() {
	    if ('value' in this._root) {
	      return this._root.value;
	    }
	    return this._root[getTextContentAccessor()];
	  },

	  /**
	   * Determine the differing substring between the initially stored
	   * text content and the current content.
	   *
	   * @return {string}
	   */
	  getData: function() {
	    if (this._fallbackText) {
	      return this._fallbackText;
	    }

	    var start;
	    var startValue = this._startText;
	    var startLength = startValue.length;
	    var end;
	    var endValue = this.getText();
	    var endLength = endValue.length;

	    for (start = 0; start < startLength; start++) {
	      if (startValue[start] !== endValue[start]) {
	        break;
	      }
	    }

	    var minEnd = startLength - start;
	    for (end = 1; end <= minEnd; end++) {
	      if (startValue[startLength - end] !== endValue[endLength - end]) {
	        break;
	      }
	    }

	    var sliceTail = end > 1 ? 1 - end : undefined;
	    this._fallbackText = endValue.slice(start, sliceTail);
	    return this._fallbackText;
	  }
	});

	PooledClass.addPoolingTo(FallbackCompositionState);

	module.exports = FallbackCompositionState;


/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getTextContentAccessor
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(51);

	var contentKey = null;

	/**
	 * Gets the key used to access text content on a DOM node.
	 *
	 * @return {?string} Key used to access text content.
	 * @internal
	 */
	function getTextContentAccessor() {
	  if (!contentKey && ExecutionEnvironment.canUseDOM) {
	    // Prefer textContent to innerText because many browsers support both but
	    // SVG <text> elements don't support innerText even when <div> does.
	    contentKey = 'textContent' in document.documentElement ?
	      'textContent' :
	      'innerText';
	  }
	  return contentKey;
	}

	module.exports = getTextContentAccessor;


/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticCompositionEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(97);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */
	var CompositionEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticCompositionEvent(
	  dispatchConfig,
	  dispatchMarker,
	  nativeEvent) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticEvent.augmentClass(
	  SyntheticCompositionEvent,
	  CompositionEventInterface
	);

	module.exports = SyntheticCompositionEvent;


/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticEvent
	 * @typechecks static-only
	 */

	'use strict';

	var PooledClass = __webpack_require__(9);

	var assign = __webpack_require__(13);
	var emptyFunction = __webpack_require__(16);
	var getEventTarget = __webpack_require__(98);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var EventInterface = {
	  type: null,
	  target: getEventTarget,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: emptyFunction.thatReturnsNull,
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function(event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};

	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 */
	function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  this.dispatchConfig = dispatchConfig;
	  this.dispatchMarker = dispatchMarker;
	  this.nativeEvent = nativeEvent;

	  var Interface = this.constructor.Interface;
	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }
	    var normalize = Interface[propName];
	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      this[propName] = nativeEvent[propName];
	    }
	  }

	  var defaultPrevented = nativeEvent.defaultPrevented != null ?
	    nativeEvent.defaultPrevented :
	    nativeEvent.returnValue === false;
	  if (defaultPrevented) {
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
	  }
	  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
	}

	assign(SyntheticEvent.prototype, {

	  preventDefault: function() {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;
	    if (event.preventDefault) {
	      event.preventDefault();
	    } else {
	      event.returnValue = false;
	    }
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  },

	  stopPropagation: function() {
	    var event = this.nativeEvent;
	    if (event.stopPropagation) {
	      event.stopPropagation();
	    } else {
	      event.cancelBubble = true;
	    }
	    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function() {
	    this.isPersistent = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: emptyFunction.thatReturnsFalse,

	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function() {
	    var Interface = this.constructor.Interface;
	    for (var propName in Interface) {
	      this[propName] = null;
	    }
	    this.dispatchConfig = null;
	    this.dispatchMarker = null;
	    this.nativeEvent = null;
	  }

	});

	SyntheticEvent.Interface = EventInterface;

	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 *
	 * @param {function} Class
	 * @param {?object} Interface
	 */
	SyntheticEvent.augmentClass = function(Class, Interface) {
	  var Super = this;

	  var prototype = Object.create(Super.prototype);
	  assign(prototype, Class.prototype);
	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;

	  Class.Interface = assign({}, Super.Interface, Interface);
	  Class.augmentClass = Super.augmentClass;

	  PooledClass.addPoolingTo(Class, PooledClass.threeArgumentPooler);
	};

	PooledClass.addPoolingTo(SyntheticEvent, PooledClass.threeArgumentPooler);

	module.exports = SyntheticEvent;


/***/ },
/* 98 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventTarget
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */
	function getEventTarget(nativeEvent) {
	  var target = nativeEvent.target || nativeEvent.srcElement || window;
	  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html
	  return target.nodeType === 3 ? target.parentNode : target;
	}

	module.exports = getEventTarget;


/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticInputEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(97);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	var InputEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticInputEvent(
	  dispatchConfig,
	  dispatchMarker,
	  nativeEvent) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticEvent.augmentClass(
	  SyntheticInputEvent,
	  InputEventInterface
	);

	module.exports = SyntheticInputEvent;


/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ChangeEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(5);
	var EventPluginHub = __webpack_require__(69);
	var EventPropagators = __webpack_require__(93);
	var ExecutionEnvironment = __webpack_require__(51);
	var ReactUpdates = __webpack_require__(24);
	var SyntheticEvent = __webpack_require__(97);

	var isEventSupported = __webpack_require__(75);
	var isTextInputElement = __webpack_require__(101);
	var keyOf = __webpack_require__(39);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onChange: null}),
	      captured: keyOf({onChangeCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topChange,
	      topLevelTypes.topClick,
	      topLevelTypes.topFocus,
	      topLevelTypes.topInput,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topKeyUp,
	      topLevelTypes.topSelectionChange
	    ]
	  }
	};

	/**
	 * For IE shims
	 */
	var activeElement = null;
	var activeElementID = null;
	var activeElementValue = null;
	var activeElementValueProp = null;

	/**
	 * SECTION: handle `change` event
	 */
	function shouldUseChangeEvent(elem) {
	  return (
	    elem.nodeName === 'SELECT' ||
	    (elem.nodeName === 'INPUT' && elem.type === 'file')
	  );
	}

	var doesChangeEventBubble = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // See `handleChange` comment below
	  doesChangeEventBubble = isEventSupported('change') && (
	    (!('documentMode' in document) || document.documentMode > 8)
	  );
	}

	function manualDispatchChangeEvent(nativeEvent) {
	  var event = SyntheticEvent.getPooled(
	    eventTypes.change,
	    activeElementID,
	    nativeEvent
	  );
	  EventPropagators.accumulateTwoPhaseDispatches(event);

	  // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.
	  ReactUpdates.batchedUpdates(runEventInBatch, event);
	}

	function runEventInBatch(event) {
	  EventPluginHub.enqueueEvents(event);
	  EventPluginHub.processEventQueue();
	}

	function startWatchingForChangeEventIE8(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
	}

	function stopWatchingForChangeEventIE8() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
	  activeElement = null;
	  activeElementID = null;
	}

	function getTargetIDForChangeEvent(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topChange) {
	    return topLevelTargetID;
	  }
	}
	function handleEventsForChangeEventIE8(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForChangeEventIE8();
	    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForChangeEventIE8();
	  }
	}


	/**
	 * SECTION: handle `input` event
	 */
	var isInputEventSupported = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events
	  isInputEventSupported = isEventSupported('input') && (
	    (!('documentMode' in document) || document.documentMode > 9)
	  );
	}

	/**
	 * (For old IE.) Replacement getter/setter for the `value` property that gets
	 * set on the active element.
	 */
	var newValueProp =  {
	  get: function() {
	    return activeElementValueProp.get.call(this);
	  },
	  set: function(val) {
	    // Cast to a string so we can do equality checks.
	    activeElementValue = '' + val;
	    activeElementValueProp.set.call(this, val);
	  }
	};

	/**
	 * (For old IE.) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */
	function startWatchingForValueChange(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElementValue = target.value;
	  activeElementValueProp = Object.getOwnPropertyDescriptor(
	    target.constructor.prototype,
	    'value'
	  );

	  Object.defineProperty(activeElement, 'value', newValueProp);
	  activeElement.attachEvent('onpropertychange', handlePropertyChange);
	}

	/**
	 * (For old IE.) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */
	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }

	  // delete restores the original property definition
	  delete activeElement.value;
	  activeElement.detachEvent('onpropertychange', handlePropertyChange);

	  activeElement = null;
	  activeElementID = null;
	  activeElementValue = null;
	  activeElementValueProp = null;
	}

	/**
	 * (For old IE.) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */
	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }
	  var value = nativeEvent.srcElement.value;
	  if (value === activeElementValue) {
	    return;
	  }
	  activeElementValue = value;

	  manualDispatchChangeEvent(nativeEvent);
	}

	/**
	 * If a `change` event should be fired, returns the target's ID.
	 */
	function getTargetIDForInputEvent(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topInput) {
	    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
	    // what we want so fall through here and trigger an abstract event
	    return topLevelTargetID;
	  }
	}

	// For IE8 and IE9.
	function handleEventsForInputEventIE(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // In IE8, we can capture almost all .value changes by adding a
	    // propertychange handler and looking for events with propertyName
	    // equal to 'value'
	    // In IE9, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForValueChange();
	  }
	}

	// For IE8 and IE9.
	function getTargetIDForInputEventIE(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topSelectionChange ||
	      topLevelType === topLevelTypes.topKeyUp ||
	      topLevelType === topLevelTypes.topKeyDown) {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    if (activeElement && activeElement.value !== activeElementValue) {
	      activeElementValue = activeElement.value;
	      return activeElementID;
	    }
	  }
	}


	/**
	 * SECTION: handle `click` event
	 */
	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  return (
	    elem.nodeName === 'INPUT' &&
	    (elem.type === 'checkbox' || elem.type === 'radio')
	  );
	}

	function getTargetIDForClickEvent(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topClick) {
	    return topLevelTargetID;
	  }
	}

	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */
	var ChangeEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {

	    var getTargetIDFunc, handleEventFunc;
	    if (shouldUseChangeEvent(topLevelTarget)) {
	      if (doesChangeEventBubble) {
	        getTargetIDFunc = getTargetIDForChangeEvent;
	      } else {
	        handleEventFunc = handleEventsForChangeEventIE8;
	      }
	    } else if (isTextInputElement(topLevelTarget)) {
	      if (isInputEventSupported) {
	        getTargetIDFunc = getTargetIDForInputEvent;
	      } else {
	        getTargetIDFunc = getTargetIDForInputEventIE;
	        handleEventFunc = handleEventsForInputEventIE;
	      }
	    } else if (shouldUseClickEvent(topLevelTarget)) {
	      getTargetIDFunc = getTargetIDForClickEvent;
	    }

	    if (getTargetIDFunc) {
	      var targetID = getTargetIDFunc(
	        topLevelType,
	        topLevelTarget,
	        topLevelTargetID
	      );
	      if (targetID) {
	        var event = SyntheticEvent.getPooled(
	          eventTypes.change,
	          targetID,
	          nativeEvent
	        );
	        EventPropagators.accumulateTwoPhaseDispatches(event);
	        return event;
	      }
	    }

	    if (handleEventFunc) {
	      handleEventFunc(
	        topLevelType,
	        topLevelTarget,
	        topLevelTargetID
	      );
	    }
	  }

	};

	module.exports = ChangeEventPlugin;


/***/ },
/* 101 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextInputElement
	 */

	'use strict';

	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */
	var supportedInputTypes = {
	  'color': true,
	  'date': true,
	  'datetime': true,
	  'datetime-local': true,
	  'email': true,
	  'month': true,
	  'number': true,
	  'password': true,
	  'range': true,
	  'search': true,
	  'tel': true,
	  'text': true,
	  'time': true,
	  'url': true,
	  'week': true
	};

	function isTextInputElement(elem) {
	  return elem && (
	    (elem.nodeName === 'INPUT' && supportedInputTypes[elem.type] || elem.nodeName === 'TEXTAREA')
	  );
	}

	module.exports = isTextInputElement;


/***/ },
/* 102 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ClientReactRootIndex
	 * @typechecks
	 */

	'use strict';

	var nextReactRootIndex = 0;

	var ClientReactRootIndex = {
	  createReactRootIndex: function() {
	    return nextReactRootIndex++;
	  }
	};

	module.exports = ClientReactRootIndex;


/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DefaultEventPluginOrder
	 */

	'use strict';

	var keyOf = __webpack_require__(39);

	/**
	 * Module that is injectable into `EventPluginHub`, that specifies a
	 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	 * plugins, without having to package every one of them. This is better than
	 * having plugins be ordered in the same order that they are injected because
	 * that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */
	var DefaultEventPluginOrder = [
	  keyOf({ResponderEventPlugin: null}),
	  keyOf({SimpleEventPlugin: null}),
	  keyOf({TapEventPlugin: null}),
	  keyOf({EnterLeaveEventPlugin: null}),
	  keyOf({ChangeEventPlugin: null}),
	  keyOf({SelectEventPlugin: null}),
	  keyOf({BeforeInputEventPlugin: null}),
	  keyOf({AnalyticsEventPlugin: null}),
	  keyOf({MobileSafariClickEventPlugin: null})
	];

	module.exports = DefaultEventPluginOrder;


/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EnterLeaveEventPlugin
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(5);
	var EventPropagators = __webpack_require__(93);
	var SyntheticMouseEvent = __webpack_require__(105);

	var ReactMount = __webpack_require__(67);
	var keyOf = __webpack_require__(39);

	var topLevelTypes = EventConstants.topLevelTypes;
	var getFirstReactDOM = ReactMount.getFirstReactDOM;

	var eventTypes = {
	  mouseEnter: {
	    registrationName: keyOf({onMouseEnter: null}),
	    dependencies: [
	      topLevelTypes.topMouseOut,
	      topLevelTypes.topMouseOver
	    ]
	  },
	  mouseLeave: {
	    registrationName: keyOf({onMouseLeave: null}),
	    dependencies: [
	      topLevelTypes.topMouseOut,
	      topLevelTypes.topMouseOver
	    ]
	  }
	};

	var extractedEvents = [null, null];

	var EnterLeaveEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    if (topLevelType === topLevelTypes.topMouseOver &&
	        (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      return null;
	    }
	    if (topLevelType !== topLevelTypes.topMouseOut &&
	        topLevelType !== topLevelTypes.topMouseOver) {
	      // Must not be a mouse in or mouse out - ignoring.
	      return null;
	    }

	    var win;
	    if (topLevelTarget.window === topLevelTarget) {
	      // `topLevelTarget` is probably a window object.
	      win = topLevelTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = topLevelTarget.ownerDocument;
	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }

	    var from, to;
	    if (topLevelType === topLevelTypes.topMouseOut) {
	      from = topLevelTarget;
	      to =
	        getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement) ||
	        win;
	    } else {
	      from = win;
	      to = topLevelTarget;
	    }

	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }

	    var fromID = from ? ReactMount.getID(from) : '';
	    var toID = to ? ReactMount.getID(to) : '';

	    var leave = SyntheticMouseEvent.getPooled(
	      eventTypes.mouseLeave,
	      fromID,
	      nativeEvent
	    );
	    leave.type = 'mouseleave';
	    leave.target = from;
	    leave.relatedTarget = to;

	    var enter = SyntheticMouseEvent.getPooled(
	      eventTypes.mouseEnter,
	      toID,
	      nativeEvent
	    );
	    enter.type = 'mouseenter';
	    enter.target = to;
	    enter.relatedTarget = from;

	    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);

	    extractedEvents[0] = leave;
	    extractedEvents[1] = enter;

	    return extractedEvents;
	  }

	};

	module.exports = EnterLeaveEventPlugin;


/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticMouseEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(106);
	var ViewportMetrics = __webpack_require__(74);

	var getEventModifierState = __webpack_require__(107);

	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var MouseEventInterface = {
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: function(event) {
	    // Webkit, Firefox, IE9+
	    // which:  1 2 3
	    // button: 0 1 2 (standard)
	    var button = event.button;
	    if ('which' in event) {
	      return button;
	    }
	    // IE<9
	    // which:  undefined
	    // button: 0 0 0
	    // button: 1 4 2 (onmouseup)
	    return button === 2 ? 2 : button === 4 ? 1 : 0;
	  },
	  buttons: null,
	  relatedTarget: function(event) {
	    return event.relatedTarget || (
	      ((event.fromElement === event.srcElement ? event.toElement : event.fromElement))
	    );
	  },
	  // "Proprietary" Interface.
	  pageX: function(event) {
	    return 'pageX' in event ?
	      event.pageX :
	      event.clientX + ViewportMetrics.currentScrollLeft;
	  },
	  pageY: function(event) {
	    return 'pageY' in event ?
	      event.pageY :
	      event.clientY + ViewportMetrics.currentScrollTop;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

	module.exports = SyntheticMouseEvent;


/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticUIEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(97);

	var getEventTarget = __webpack_require__(98);

	/**
	 * @interface UIEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var UIEventInterface = {
	  view: function(event) {
	    if (event.view) {
	      return event.view;
	    }

	    var target = getEventTarget(event);
	    if (target != null && target.window === target) {
	      // target is a window object
	      return target;
	    }

	    var doc = target.ownerDocument;
	    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	    if (doc) {
	      return doc.defaultView || doc.parentWindow;
	    } else {
	      return window;
	    }
	  },
	  detail: function(event) {
	    return event.detail || 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

	module.exports = SyntheticUIEvent;


/***/ },
/* 107 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventModifierState
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */

	var modifierKeyToProp = {
	  'Alt': 'altKey',
	  'Control': 'ctrlKey',
	  'Meta': 'metaKey',
	  'Shift': 'shiftKey'
	};

	// IE8 does not implement getModifierState so we simply map it to the only
	// modifier keys exposed by the event itself, does not support Lock-keys.
	// Currently, all major browsers except Chrome seems to support Lock-keys.
	function modifierStateGetter(keyArg) {
	  /*jshint validthis:true */
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;
	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }
	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}

	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}

	module.exports = getEventModifierState;


/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule HTMLDOMPropertyConfig
	 */

	/*jslint bitwise: true*/

	'use strict';

	var DOMProperty = __webpack_require__(44);
	var ExecutionEnvironment = __webpack_require__(51);

	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
	var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
	var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
	var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
	var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
	var HAS_POSITIVE_NUMERIC_VALUE =
	  DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
	var HAS_OVERLOADED_BOOLEAN_VALUE =
	  DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

	var hasSVG;
	if (ExecutionEnvironment.canUseDOM) {
	  var implementation = document.implementation;
	  hasSVG = (
	    implementation &&
	    implementation.hasFeature &&
	    implementation.hasFeature(
	      'http://www.w3.org/TR/SVG11/feature#BasicStructure',
	      '1.1'
	    )
	  );
	}


	var HTMLDOMPropertyConfig = {
	  isCustomAttribute: RegExp.prototype.test.bind(
	    /^(data|aria)-[a-z_][a-z\d_.\-]*$/
	  ),
	  Properties: {
	    /**
	     * Standard Properties
	     */
	    accept: null,
	    acceptCharset: null,
	    accessKey: null,
	    action: null,
	    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    allowTransparency: MUST_USE_ATTRIBUTE,
	    alt: null,
	    async: HAS_BOOLEAN_VALUE,
	    autoComplete: null,
	    // autoFocus is polyfilled/normalized by AutoFocusMixin
	    // autoFocus: HAS_BOOLEAN_VALUE,
	    autoPlay: HAS_BOOLEAN_VALUE,
	    cellPadding: null,
	    cellSpacing: null,
	    charSet: MUST_USE_ATTRIBUTE,
	    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    classID: MUST_USE_ATTRIBUTE,
	    // To set className on SVG elements, it's necessary to use .setAttribute;
	    // this works on HTML elements too in all browsers except IE8. Conveniently,
	    // IE8 doesn't support SVG and so we can simply use the attribute in
	    // browsers that support SVG and the property in browsers that don't,
	    // regardless of whether the element is HTML or SVG.
	    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
	    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    colSpan: null,
	    content: null,
	    contentEditable: null,
	    contextMenu: MUST_USE_ATTRIBUTE,
	    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    coords: null,
	    crossOrigin: null,
	    data: null, // For `<object />` acts as `src`.
	    dateTime: MUST_USE_ATTRIBUTE,
	    defer: HAS_BOOLEAN_VALUE,
	    dir: null,
	    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    download: HAS_OVERLOADED_BOOLEAN_VALUE,
	    draggable: null,
	    encType: null,
	    form: MUST_USE_ATTRIBUTE,
	    formAction: MUST_USE_ATTRIBUTE,
	    formEncType: MUST_USE_ATTRIBUTE,
	    formMethod: MUST_USE_ATTRIBUTE,
	    formNoValidate: HAS_BOOLEAN_VALUE,
	    formTarget: MUST_USE_ATTRIBUTE,
	    frameBorder: MUST_USE_ATTRIBUTE,
	    headers: null,
	    height: MUST_USE_ATTRIBUTE,
	    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    high: null,
	    href: null,
	    hrefLang: null,
	    htmlFor: null,
	    httpEquiv: null,
	    icon: null,
	    id: MUST_USE_PROPERTY,
	    label: null,
	    lang: null,
	    list: MUST_USE_ATTRIBUTE,
	    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    low: null,
	    manifest: MUST_USE_ATTRIBUTE,
	    marginHeight: null,
	    marginWidth: null,
	    max: null,
	    maxLength: MUST_USE_ATTRIBUTE,
	    media: MUST_USE_ATTRIBUTE,
	    mediaGroup: null,
	    method: null,
	    min: null,
	    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    name: null,
	    noValidate: HAS_BOOLEAN_VALUE,
	    open: HAS_BOOLEAN_VALUE,
	    optimum: null,
	    pattern: null,
	    placeholder: null,
	    poster: null,
	    preload: null,
	    radioGroup: null,
	    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    rel: null,
	    required: HAS_BOOLEAN_VALUE,
	    role: MUST_USE_ATTRIBUTE,
	    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    rowSpan: null,
	    sandbox: null,
	    scope: null,
	    scoped: HAS_BOOLEAN_VALUE,
	    scrolling: null,
	    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    shape: null,
	    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    sizes: MUST_USE_ATTRIBUTE,
	    span: HAS_POSITIVE_NUMERIC_VALUE,
	    spellCheck: null,
	    src: null,
	    srcDoc: MUST_USE_PROPERTY,
	    srcSet: MUST_USE_ATTRIBUTE,
	    start: HAS_NUMERIC_VALUE,
	    step: null,
	    style: null,
	    tabIndex: null,
	    target: null,
	    title: null,
	    type: null,
	    useMap: null,
	    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
	    width: MUST_USE_ATTRIBUTE,
	    wmode: MUST_USE_ATTRIBUTE,

	    /**
	     * Non-standard Properties
	     */
	    // autoCapitalize and autoCorrect are supported in Mobile Safari for
	    // keyboard hints.
	    autoCapitalize: null,
	    autoCorrect: null,
	    // itemProp, itemScope, itemType are for
	    // Microdata support. See http://schema.org/docs/gs.html
	    itemProp: MUST_USE_ATTRIBUTE,
	    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    itemType: MUST_USE_ATTRIBUTE,
	    // itemID and itemRef are for Microdata support as well but
	    // only specified in the the WHATWG spec document. See
	    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
	    itemID: MUST_USE_ATTRIBUTE,
	    itemRef: MUST_USE_ATTRIBUTE,
	    // property is supported for OpenGraph in meta tags.
	    property: null,
	    // IE-only attribute that controls focus behavior
	    unselectable: MUST_USE_ATTRIBUTE
	  },
	  DOMAttributeNames: {
	    acceptCharset: 'accept-charset',
	    className: 'class',
	    htmlFor: 'for',
	    httpEquiv: 'http-equiv'
	  },
	  DOMPropertyNames: {
	    autoCapitalize: 'autocapitalize',
	    autoComplete: 'autocomplete',
	    autoCorrect: 'autocorrect',
	    autoFocus: 'autofocus',
	    autoPlay: 'autoplay',
	    // `encoding` is equivalent to `enctype`, IE8 lacks an `enctype` setter.
	    // http://www.w3.org/TR/html5/forms.html#dom-fs-encoding
	    encType: 'encoding',
	    hrefLang: 'hreflang',
	    radioGroup: 'radiogroup',
	    spellCheck: 'spellcheck',
	    srcDoc: 'srcdoc',
	    srcSet: 'srcset'
	  }
	};

	module.exports = HTMLDOMPropertyConfig;


/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule MobileSafariClickEventPlugin
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(5);

	var emptyFunction = __webpack_require__(16);

	var topLevelTypes = EventConstants.topLevelTypes;

	/**
	 * Mobile Safari does not fire properly bubble click events on non-interactive
	 * elements, which means delegated click listeners do not fire. The workaround
	 * for this bug involves attaching an empty click listener on the target node.
	 *
	 * This particular plugin works around the bug by attaching an empty click
	 * listener on `touchstart` (which does fire on every element).
	 */
	var MobileSafariClickEventPlugin = {

	  eventTypes: null,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    if (topLevelType === topLevelTypes.topTouchStart) {
	      var target = nativeEvent.target;
	      if (target && !target.onclick) {
	        target.onclick = emptyFunction;
	      }
	    }
	  }

	};

	module.exports = MobileSafariClickEventPlugin;


/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserComponentMixin
	 */

	'use strict';

	var findDOMNode = __webpack_require__(111);

	var ReactBrowserComponentMixin = {
	  /**
	   * Returns the DOM node rendered by this component.
	   *
	   * @return {DOMElement} The root node of this component.
	   * @final
	   * @protected
	   */
	  getDOMNode: function() {
	    return findDOMNode(this);
	  }
	};

	module.exports = ReactBrowserComponentMixin;


/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule findDOMNode
	 * @typechecks static-only
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(17);
	var ReactInstanceMap = __webpack_require__(36);
	var ReactMount = __webpack_require__(67);

	var invariant = __webpack_require__(7);
	var isNode = __webpack_require__(81);
	var warning = __webpack_require__(15);

	/**
	 * Returns the DOM node rendered by this element.
	 *
	 * @param {ReactComponent|DOMElement} componentOrElement
	 * @return {DOMElement} The root node of this element.
	 */
	function findDOMNode(componentOrElement) {
	  if ("production" !== process.env.NODE_ENV) {
	    var owner = ReactCurrentOwner.current;
	    if (owner !== null) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        owner._warnedAboutRefsInRender,
	        '%s is accessing getDOMNode or findDOMNode inside its render(). ' +
	        'render() should be a pure function of props and state. It should ' +
	        'never access something that requires stale data from the previous ' +
	        'render, such as refs. Move this logic to componentDidMount and ' +
	        'componentDidUpdate instead.',
	        owner.getName() || 'A component'
	      ) : null);
	      owner._warnedAboutRefsInRender = true;
	    }
	  }
	  if (componentOrElement == null) {
	    return null;
	  }
	  if (isNode(componentOrElement)) {
	    return componentOrElement;
	  }
	  if (ReactInstanceMap.has(componentOrElement)) {
	    return ReactMount.getNodeFromInstance(componentOrElement);
	  }
	  ("production" !== process.env.NODE_ENV ? invariant(
	    componentOrElement.render == null ||
	    typeof componentOrElement.render !== 'function',
	    'Component (with keys: %s) contains `render` method ' +
	    'but is not mounted in the DOM',
	    Object.keys(componentOrElement)
	  ) : invariant(componentOrElement.render == null ||
	  typeof componentOrElement.render !== 'function'));
	  ("production" !== process.env.NODE_ENV ? invariant(
	    false,
	    'Element appears to be neither ReactComponent nor DOMNode (keys: %s)',
	    Object.keys(componentOrElement)
	  ) : invariant(false));
	}

	module.exports = findDOMNode;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultBatchingStrategy
	 */

	'use strict';

	var ReactUpdates = __webpack_require__(24);
	var Transaction = __webpack_require__(34);

	var assign = __webpack_require__(13);
	var emptyFunction = __webpack_require__(16);

	var RESET_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: function() {
	    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
	  }
	};

	var FLUSH_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
	};

	var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

	function ReactDefaultBatchingStrategyTransaction() {
	  this.reinitializeTransaction();
	}

	assign(
	  ReactDefaultBatchingStrategyTransaction.prototype,
	  Transaction.Mixin,
	  {
	    getTransactionWrappers: function() {
	      return TRANSACTION_WRAPPERS;
	    }
	  }
	);

	var transaction = new ReactDefaultBatchingStrategyTransaction();

	var ReactDefaultBatchingStrategy = {
	  isBatchingUpdates: false,

	  /**
	   * Call the provided function in a context within which calls to `setState`
	   * and friends are batched such that components aren't updated unnecessarily.
	   */
	  batchedUpdates: function(callback, a, b, c, d) {
	    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

	    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

	    // The code is written this way to avoid extra allocations
	    if (alreadyBatchingUpdates) {
	      callback(a, b, c, d);
	    } else {
	      transaction.perform(callback, null, a, b, c, d);
	    }
	  }
	};

	module.exports = ReactDefaultBatchingStrategy;


/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMButton
	 */

	'use strict';

	var AutoFocusMixin = __webpack_require__(114);
	var ReactBrowserComponentMixin = __webpack_require__(110);
	var ReactClass = __webpack_require__(37);
	var ReactElement = __webpack_require__(11);

	var keyMirror = __webpack_require__(6);

	var button = ReactElement.createFactory('button');

	var mouseListenerNames = keyMirror({
	  onClick: true,
	  onDoubleClick: true,
	  onMouseDown: true,
	  onMouseMove: true,
	  onMouseUp: true,
	  onClickCapture: true,
	  onDoubleClickCapture: true,
	  onMouseDownCapture: true,
	  onMouseMoveCapture: true,
	  onMouseUpCapture: true
	});

	/**
	 * Implements a <button> native component that does not receive mouse events
	 * when `disabled` is set.
	 */
	var ReactDOMButton = ReactClass.createClass({
	  displayName: 'ReactDOMButton',
	  tagName: 'BUTTON',

	  mixins: [AutoFocusMixin, ReactBrowserComponentMixin],

	  render: function() {
	    var props = {};

	    // Copy the props; except the mouse listeners if we're disabled
	    for (var key in this.props) {
	      if (this.props.hasOwnProperty(key) &&
	          (!this.props.disabled || !mouseListenerNames[key])) {
	        props[key] = this.props[key];
	      }
	    }

	    return button(props, this.props.children);
	  }

	});

	module.exports = ReactDOMButton;


/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule AutoFocusMixin
	 * @typechecks static-only
	 */

	'use strict';

	var focusNode = __webpack_require__(115);

	var AutoFocusMixin = {
	  componentDidMount: function() {
	    if (this.props.autoFocus) {
	      focusNode(this.getDOMNode());
	    }
	  }
	};

	module.exports = AutoFocusMixin;


/***/ },
/* 115 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule focusNode
	 */

	"use strict";

	/**
	 * @param {DOMElement} node input/textarea to focus
	 */
	function focusNode(node) {
	  // IE8 can throw "Can't move focus to the control because it is invisible,
	  // not enabled, or of a type that does not accept the focus." for all kinds of
	  // reasons that are too expensive and fragile to test.
	  try {
	    node.focus();
	  } catch(e) {
	  }
	}

	module.exports = focusNode;


/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMForm
	 */

	'use strict';

	var EventConstants = __webpack_require__(5);
	var LocalEventTrapMixin = __webpack_require__(117);
	var ReactBrowserComponentMixin = __webpack_require__(110);
	var ReactClass = __webpack_require__(37);
	var ReactElement = __webpack_require__(11);

	var form = ReactElement.createFactory('form');

	/**
	 * Since onSubmit doesn't bubble OR capture on the top level in IE8, we need
	 * to capture it on the <form> element itself. There are lots of hacks we could
	 * do to accomplish this, but the most reliable is to make <form> a
	 * composite component and use `componentDidMount` to attach the event handlers.
	 */
	var ReactDOMForm = ReactClass.createClass({
	  displayName: 'ReactDOMForm',
	  tagName: 'FORM',

	  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

	  render: function() {
	    // TODO: Instead of using `ReactDOM` directly, we should use JSX. However,
	    // `jshint` fails to parse JSX so in order for linting to work in the open
	    // source repo, we need to just use `ReactDOM.form`.
	    return form(this.props);
	  },

	  componentDidMount: function() {
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset');
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit');
	  }
	});

	module.exports = ReactDOMForm;


/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LocalEventTrapMixin
	 */

	'use strict';

	var ReactBrowserEventEmitter = __webpack_require__(68);

	var accumulateInto = __webpack_require__(71);
	var forEachAccumulated = __webpack_require__(72);
	var invariant = __webpack_require__(7);

	function remove(event) {
	  event.remove();
	}

	var LocalEventTrapMixin = {
	  trapBubbledEvent:function(topLevelType, handlerBaseName) {
	    ("production" !== process.env.NODE_ENV ? invariant(this.isMounted(), 'Must be mounted to trap events') : invariant(this.isMounted()));
	    // If a component renders to null or if another component fatals and causes
	    // the state of the tree to be corrupted, `node` here can be null.
	    var node = this.getDOMNode();
	    ("production" !== process.env.NODE_ENV ? invariant(
	      node,
	      'LocalEventTrapMixin.trapBubbledEvent(...): Requires node to be rendered.'
	    ) : invariant(node));
	    var listener = ReactBrowserEventEmitter.trapBubbledEvent(
	      topLevelType,
	      handlerBaseName,
	      node
	    );
	    this._localEventListeners =
	      accumulateInto(this._localEventListeners, listener);
	  },

	  // trapCapturedEvent would look nearly identical. We don't implement that
	  // method because it isn't currently needed.

	  componentWillUnmount:function() {
	    if (this._localEventListeners) {
	      forEachAccumulated(this._localEventListeners, remove);
	    }
	  }
	};

	module.exports = LocalEventTrapMixin;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMImg
	 */

	'use strict';

	var EventConstants = __webpack_require__(5);
	var LocalEventTrapMixin = __webpack_require__(117);
	var ReactBrowserComponentMixin = __webpack_require__(110);
	var ReactClass = __webpack_require__(37);
	var ReactElement = __webpack_require__(11);

	var img = ReactElement.createFactory('img');

	/**
	 * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to
	 * capture it on the <img> element itself. There are lots of hacks we could do
	 * to accomplish this, but the most reliable is to make <img> a composite
	 * component and use `componentDidMount` to attach the event handlers.
	 */
	var ReactDOMImg = ReactClass.createClass({
	  displayName: 'ReactDOMImg',
	  tagName: 'IMG',

	  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

	  render: function() {
	    return img(this.props);
	  },

	  componentDidMount: function() {
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error');
	  }
	});

	module.exports = ReactDOMImg;


/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMIframe
	 */

	'use strict';

	var EventConstants = __webpack_require__(5);
	var LocalEventTrapMixin = __webpack_require__(117);
	var ReactBrowserComponentMixin = __webpack_require__(110);
	var ReactClass = __webpack_require__(37);
	var ReactElement = __webpack_require__(11);

	var iframe = ReactElement.createFactory('iframe');

	/**
	 * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to
	 * capture it on the <iframe> element itself. There are lots of hacks we could
	 * do to accomplish this, but the most reliable is to make <iframe> a composite
	 * component and use `componentDidMount` to attach the event handlers.
	 */
	var ReactDOMIframe = ReactClass.createClass({
	  displayName: 'ReactDOMIframe',
	  tagName: 'IFRAME',

	  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

	  render: function() {
	    return iframe(this.props);
	  },

	  componentDidMount: function() {
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');
	  }
	});

	module.exports = ReactDOMIframe;


/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMInput
	 */

	'use strict';

	var AutoFocusMixin = __webpack_require__(114);
	var DOMPropertyOperations = __webpack_require__(43);
	var LinkedValueUtils = __webpack_require__(121);
	var ReactBrowserComponentMixin = __webpack_require__(110);
	var ReactClass = __webpack_require__(37);
	var ReactElement = __webpack_require__(11);
	var ReactMount = __webpack_require__(67);
	var ReactUpdates = __webpack_require__(24);

	var assign = __webpack_require__(13);
	var invariant = __webpack_require__(7);

	var input = ReactElement.createFactory('input');

	var instancesByReactID = {};

	function forceUpdateIfMounted() {
	  /*jshint validthis:true */
	  if (this.isMounted()) {
	    this.forceUpdate();
	  }
	}

	/**
	 * Implements an <input> native component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */
	var ReactDOMInput = ReactClass.createClass({
	  displayName: 'ReactDOMInput',
	  tagName: 'INPUT',

	  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

	  getInitialState: function() {
	    var defaultValue = this.props.defaultValue;
	    return {
	      initialChecked: this.props.defaultChecked || false,
	      initialValue: defaultValue != null ? defaultValue : null
	    };
	  },

	  render: function() {
	    // Clone `this.props` so we don't mutate the input.
	    var props = assign({}, this.props);

	    props.defaultChecked = null;
	    props.defaultValue = null;

	    var value = LinkedValueUtils.getValue(this);
	    props.value = value != null ? value : this.state.initialValue;

	    var checked = LinkedValueUtils.getChecked(this);
	    props.checked = checked != null ? checked : this.state.initialChecked;

	    props.onChange = this._handleChange;

	    return input(props, this.props.children);
	  },

	  componentDidMount: function() {
	    var id = ReactMount.getID(this.getDOMNode());
	    instancesByReactID[id] = this;
	  },

	  componentWillUnmount: function() {
	    var rootNode = this.getDOMNode();
	    var id = ReactMount.getID(rootNode);
	    delete instancesByReactID[id];
	  },

	  componentDidUpdate: function(prevProps, prevState, prevContext) {
	    var rootNode = this.getDOMNode();
	    if (this.props.checked != null) {
	      DOMPropertyOperations.setValueForProperty(
	        rootNode,
	        'checked',
	        this.props.checked || false
	      );
	    }

	    var value = LinkedValueUtils.getValue(this);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
	    }
	  },

	  _handleChange: function(event) {
	    var returnValue;
	    var onChange = LinkedValueUtils.getOnChange(this);
	    if (onChange) {
	      returnValue = onChange.call(this, event);
	    }
	    // Here we use asap to wait until all updates have propagated, which
	    // is important when using controlled components within layers:
	    // https://github.com/facebook/react/issues/1698
	    ReactUpdates.asap(forceUpdateIfMounted, this);

	    var name = this.props.name;
	    if (this.props.type === 'radio' && name != null) {
	      var rootNode = this.getDOMNode();
	      var queryRoot = rootNode;

	      while (queryRoot.parentNode) {
	        queryRoot = queryRoot.parentNode;
	      }

	      // If `rootNode.form` was non-null, then we could try `form.elements`,
	      // but that sometimes behaves strangely in IE8. We could also try using
	      // `form.getElementsByName`, but that will only return direct children
	      // and won't include inputs that use the HTML5 `form=` attribute. Since
	      // the input might not even be in a form, let's just use the global
	      // `querySelectorAll` to ensure we don't miss anything.
	      var group = queryRoot.querySelectorAll(
	        'input[name=' + JSON.stringify('' + name) + '][type="radio"]');

	      for (var i = 0, groupLen = group.length; i < groupLen; i++) {
	        var otherNode = group[i];
	        if (otherNode === rootNode ||
	            otherNode.form !== rootNode.form) {
	          continue;
	        }
	        var otherID = ReactMount.getID(otherNode);
	        ("production" !== process.env.NODE_ENV ? invariant(
	          otherID,
	          'ReactDOMInput: Mixing React and non-React radio inputs with the ' +
	          'same `name` is not supported.'
	        ) : invariant(otherID));
	        var otherInstance = instancesByReactID[otherID];
	        ("production" !== process.env.NODE_ENV ? invariant(
	          otherInstance,
	          'ReactDOMInput: Unknown radio button ID %s.',
	          otherID
	        ) : invariant(otherInstance));
	        // If this is a controlled radio button group, forcing the input that
	        // was previously checked to update will cause it to be come re-checked
	        // as appropriate.
	        ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
	      }
	    }

	    return returnValue;
	  }

	});

	module.exports = ReactDOMInput;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LinkedValueUtils
	 * @typechecks static-only
	 */

	'use strict';

	var ReactPropTypes = __webpack_require__(122);

	var invariant = __webpack_require__(7);

	var hasReadOnlyValue = {
	  'button': true,
	  'checkbox': true,
	  'image': true,
	  'hidden': true,
	  'radio': true,
	  'reset': true,
	  'submit': true
	};

	function _assertSingleLink(input) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    input.props.checkedLink == null || input.props.valueLink == null,
	    'Cannot provide a checkedLink and a valueLink. If you want to use ' +
	    'checkedLink, you probably don\'t want to use valueLink and vice versa.'
	  ) : invariant(input.props.checkedLink == null || input.props.valueLink == null));
	}
	function _assertValueLink(input) {
	  _assertSingleLink(input);
	  ("production" !== process.env.NODE_ENV ? invariant(
	    input.props.value == null && input.props.onChange == null,
	    'Cannot provide a valueLink and a value or onChange event. If you want ' +
	    'to use value or onChange, you probably don\'t want to use valueLink.'
	  ) : invariant(input.props.value == null && input.props.onChange == null));
	}

	function _assertCheckedLink(input) {
	  _assertSingleLink(input);
	  ("production" !== process.env.NODE_ENV ? invariant(
	    input.props.checked == null && input.props.onChange == null,
	    'Cannot provide a checkedLink and a checked property or onChange event. ' +
	    'If you want to use checked or onChange, you probably don\'t want to ' +
	    'use checkedLink'
	  ) : invariant(input.props.checked == null && input.props.onChange == null));
	}

	/**
	 * @param {SyntheticEvent} e change event to handle
	 */
	function _handleLinkedValueChange(e) {
	  /*jshint validthis:true */
	  this.props.valueLink.requestChange(e.target.value);
	}

	/**
	  * @param {SyntheticEvent} e change event to handle
	  */
	function _handleLinkedCheckChange(e) {
	  /*jshint validthis:true */
	  this.props.checkedLink.requestChange(e.target.checked);
	}

	/**
	 * Provide a linked `value` attribute for controlled forms. You should not use
	 * this outside of the ReactDOM controlled form components.
	 */
	var LinkedValueUtils = {
	  Mixin: {
	    propTypes: {
	      value: function(props, propName, componentName) {
	        if (!props[propName] ||
	            hasReadOnlyValue[props.type] ||
	            props.onChange ||
	            props.readOnly ||
	            props.disabled) {
	          return null;
	        }
	        return new Error(
	          'You provided a `value` prop to a form field without an ' +
	          '`onChange` handler. This will render a read-only field. If ' +
	          'the field should be mutable use `defaultValue`. Otherwise, ' +
	          'set either `onChange` or `readOnly`.'
	        );
	      },
	      checked: function(props, propName, componentName) {
	        if (!props[propName] ||
	            props.onChange ||
	            props.readOnly ||
	            props.disabled) {
	          return null;
	        }
	        return new Error(
	          'You provided a `checked` prop to a form field without an ' +
	          '`onChange` handler. This will render a read-only field. If ' +
	          'the field should be mutable use `defaultChecked`. Otherwise, ' +
	          'set either `onChange` or `readOnly`.'
	        );
	      },
	      onChange: ReactPropTypes.func
	    }
	  },

	  /**
	   * @param {ReactComponent} input Form component
	   * @return {*} current value of the input either from value prop or link.
	   */
	  getValue: function(input) {
	    if (input.props.valueLink) {
	      _assertValueLink(input);
	      return input.props.valueLink.value;
	    }
	    return input.props.value;
	  },

	  /**
	   * @param {ReactComponent} input Form component
	   * @return {*} current checked status of the input either from checked prop
	   *             or link.
	   */
	  getChecked: function(input) {
	    if (input.props.checkedLink) {
	      _assertCheckedLink(input);
	      return input.props.checkedLink.value;
	    }
	    return input.props.checked;
	  },

	  /**
	   * @param {ReactComponent} input Form component
	   * @return {function} change callback either from onChange prop or link.
	   */
	  getOnChange: function(input) {
	    if (input.props.valueLink) {
	      _assertValueLink(input);
	      return _handleLinkedValueChange;
	    } else if (input.props.checkedLink) {
	      _assertCheckedLink(input);
	      return _handleLinkedCheckChange;
	    }
	    return input.props.onChange;
	  }
	};

	module.exports = LinkedValueUtils;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypes
	 */

	'use strict';

	var ReactElement = __webpack_require__(11);
	var ReactFragment = __webpack_require__(10);
	var ReactPropTypeLocationNames = __webpack_require__(32);

	var emptyFunction = __webpack_require__(16);

	/**
	 * Collection of methods that allow declaration and validation of props that are
	 * supplied to React components. Example usage:
	 *
	 *   var Props = require('ReactPropTypes');
	 *   var MyArticle = React.createClass({
	 *     propTypes: {
	 *       // An optional string prop named "description".
	 *       description: Props.string,
	 *
	 *       // A required enum prop named "category".
	 *       category: Props.oneOf(['News','Photos']).isRequired,
	 *
	 *       // A prop named "dialog" that requires an instance of Dialog.
	 *       dialog: Props.instanceOf(Dialog).isRequired
	 *     },
	 *     render: function() { ... }
	 *   });
	 *
	 * A more formal specification of how these methods are used:
	 *
	 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	 *   decl := ReactPropTypes.{type}(.isRequired)?
	 *
	 * Each and every declaration produces a function with the same signature. This
	 * allows the creation of custom validation functions. For example:
	 *
	 *  var MyLink = React.createClass({
	 *    propTypes: {
	 *      // An optional string or URI prop named "href".
	 *      href: function(props, propName, componentName) {
	 *        var propValue = props[propName];
	 *        if (propValue != null && typeof propValue !== 'string' &&
	 *            !(propValue instanceof URI)) {
	 *          return new Error(
	 *            'Expected a string or an URI for ' + propName + ' in ' +
	 *            componentName
	 *          );
	 *        }
	 *      }
	 *    },
	 *    render: function() {...}
	 *  });
	 *
	 * @internal
	 */

	var ANONYMOUS = '<<anonymous>>';

	var elementTypeChecker = createElementTypeChecker();
	var nodeTypeChecker = createNodeChecker();

	var ReactPropTypes = {
	  array: createPrimitiveTypeChecker('array'),
	  bool: createPrimitiveTypeChecker('boolean'),
	  func: createPrimitiveTypeChecker('function'),
	  number: createPrimitiveTypeChecker('number'),
	  object: createPrimitiveTypeChecker('object'),
	  string: createPrimitiveTypeChecker('string'),

	  any: createAnyTypeChecker(),
	  arrayOf: createArrayOfTypeChecker,
	  element: elementTypeChecker,
	  instanceOf: createInstanceTypeChecker,
	  node: nodeTypeChecker,
	  objectOf: createObjectOfTypeChecker,
	  oneOf: createEnumTypeChecker,
	  oneOfType: createUnionTypeChecker,
	  shape: createShapeTypeChecker
	};

	function createChainableTypeChecker(validate) {
	  function checkType(isRequired, props, propName, componentName, location) {
	    componentName = componentName || ANONYMOUS;
	    if (props[propName] == null) {
	      var locationName = ReactPropTypeLocationNames[location];
	      if (isRequired) {
	        return new Error(
	          ("Required " + locationName + " `" + propName + "` was not specified in ") +
	          ("`" + componentName + "`.")
	        );
	      }
	      return null;
	    } else {
	      return validate(props, propName, componentName, location);
	    }
	  }

	  var chainedCheckType = checkType.bind(null, false);
	  chainedCheckType.isRequired = checkType.bind(null, true);

	  return chainedCheckType;
	}

	function createPrimitiveTypeChecker(expectedType) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== expectedType) {
	      var locationName = ReactPropTypeLocationNames[location];
	      // `propValue` being instance of, say, date/regexp, pass the 'object'
	      // check, but we can offer a more precise error message here rather than
	      // 'of type `object`'.
	      var preciseType = getPreciseType(propValue);

	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` of type `" + preciseType + "` ") +
	        ("supplied to `" + componentName + "`, expected `" + expectedType + "`.")
	      );
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createAnyTypeChecker() {
	  return createChainableTypeChecker(emptyFunction.thatReturns(null));
	}

	function createArrayOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    if (!Array.isArray(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` of type ") +
	        ("`" + propType + "` supplied to `" + componentName + "`, expected an array.")
	      );
	    }
	    for (var i = 0; i < propValue.length; i++) {
	      var error = typeChecker(propValue, i, componentName, location);
	      if (error instanceof Error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createElementTypeChecker() {
	  function validate(props, propName, componentName, location) {
	    if (!ReactElement.isValidElement(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
	        ("`" + componentName + "`, expected a ReactElement.")
	      );
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createInstanceTypeChecker(expectedClass) {
	  function validate(props, propName, componentName, location) {
	    if (!(props[propName] instanceof expectedClass)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var expectedClassName = expectedClass.name || ANONYMOUS;
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
	        ("`" + componentName + "`, expected instance of `" + expectedClassName + "`.")
	      );
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createEnumTypeChecker(expectedValues) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    for (var i = 0; i < expectedValues.length; i++) {
	      if (propValue === expectedValues[i]) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    var valuesString = JSON.stringify(expectedValues);
	    return new Error(
	      ("Invalid " + locationName + " `" + propName + "` of value `" + propValue + "` ") +
	      ("supplied to `" + componentName + "`, expected one of " + valuesString + ".")
	    );
	  }
	  return createChainableTypeChecker(validate);
	}

	function createObjectOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` of type ") +
	        ("`" + propType + "` supplied to `" + componentName + "`, expected an object.")
	      );
	    }
	    for (var key in propValue) {
	      if (propValue.hasOwnProperty(key)) {
	        var error = typeChecker(propValue, key, componentName, location);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createUnionTypeChecker(arrayOfTypeCheckers) {
	  function validate(props, propName, componentName, location) {
	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (checker(props, propName, componentName, location) == null) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    return new Error(
	      ("Invalid " + locationName + " `" + propName + "` supplied to ") +
	      ("`" + componentName + "`.")
	    );
	  }
	  return createChainableTypeChecker(validate);
	}

	function createNodeChecker() {
	  function validate(props, propName, componentName, location) {
	    if (!isNode(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
	        ("`" + componentName + "`, expected a ReactNode.")
	      );
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createShapeTypeChecker(shapeTypes) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` of type `" + propType + "` ") +
	        ("supplied to `" + componentName + "`, expected `object`.")
	      );
	    }
	    for (var key in shapeTypes) {
	      var checker = shapeTypes[key];
	      if (!checker) {
	        continue;
	      }
	      var error = checker(propValue, key, componentName, location);
	      if (error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function isNode(propValue) {
	  switch (typeof propValue) {
	    case 'number':
	    case 'string':
	    case 'undefined':
	      return true;
	    case 'boolean':
	      return !propValue;
	    case 'object':
	      if (Array.isArray(propValue)) {
	        return propValue.every(isNode);
	      }
	      if (propValue === null || ReactElement.isValidElement(propValue)) {
	        return true;
	      }
	      propValue = ReactFragment.extractIfFragment(propValue);
	      for (var k in propValue) {
	        if (!isNode(propValue[k])) {
	          return false;
	        }
	      }
	      return true;
	    default:
	      return false;
	  }
	}

	// Equivalent of `typeof` but with special handling for array and regexp.
	function getPropType(propValue) {
	  var propType = typeof propValue;
	  if (Array.isArray(propValue)) {
	    return 'array';
	  }
	  if (propValue instanceof RegExp) {
	    // Old webkits (at least until Android 4.0) return 'function' rather than
	    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	    // passes PropTypes.object.
	    return 'object';
	  }
	  return propType;
	}

	// This handles more types than `getPropType`. Only used for error messages.
	// See `createPrimitiveTypeChecker`.
	function getPreciseType(propValue) {
	  var propType = getPropType(propValue);
	  if (propType === 'object') {
	    if (propValue instanceof Date) {
	      return 'date';
	    } else if (propValue instanceof RegExp) {
	      return 'regexp';
	    }
	  }
	  return propType;
	}

	module.exports = ReactPropTypes;


/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMOption
	 */

	'use strict';

	var ReactBrowserComponentMixin = __webpack_require__(110);
	var ReactClass = __webpack_require__(37);
	var ReactElement = __webpack_require__(11);

	var warning = __webpack_require__(15);

	var option = ReactElement.createFactory('option');

	/**
	 * Implements an <option> native component that warns when `selected` is set.
	 */
	var ReactDOMOption = ReactClass.createClass({
	  displayName: 'ReactDOMOption',
	  tagName: 'OPTION',

	  mixins: [ReactBrowserComponentMixin],

	  componentWillMount: function() {
	    // TODO (yungsters): Remove support for `selected` in <option>.
	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        this.props.selected == null,
	        'Use the `defaultValue` or `value` props on <select> instead of ' +
	        'setting `selected` on <option>.'
	      ) : null);
	    }
	  },

	  render: function() {
	    return option(this.props, this.props.children);
	  }

	});

	module.exports = ReactDOMOption;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelect
	 */

	'use strict';

	var AutoFocusMixin = __webpack_require__(114);
	var LinkedValueUtils = __webpack_require__(121);
	var ReactBrowserComponentMixin = __webpack_require__(110);
	var ReactClass = __webpack_require__(37);
	var ReactElement = __webpack_require__(11);
	var ReactUpdates = __webpack_require__(24);

	var assign = __webpack_require__(13);

	var select = ReactElement.createFactory('select');

	function updateOptionsIfPendingUpdateAndMounted() {
	  /*jshint validthis:true */
	  if (this._pendingUpdate) {
	    this._pendingUpdate = false;
	    var value = LinkedValueUtils.getValue(this);
	    if (value != null && this.isMounted()) {
	      updateOptions(this, value);
	    }
	  }
	}

	/**
	 * Validation function for `value` and `defaultValue`.
	 * @private
	 */
	function selectValueType(props, propName, componentName) {
	  if (props[propName] == null) {
	    return null;
	  }
	  if (props.multiple) {
	    if (!Array.isArray(props[propName])) {
	      return new Error(
	        ("The `" + propName + "` prop supplied to <select> must be an array if ") +
	        ("`multiple` is true.")
	      );
	    }
	  } else {
	    if (Array.isArray(props[propName])) {
	      return new Error(
	        ("The `" + propName + "` prop supplied to <select> must be a scalar ") +
	        ("value if `multiple` is false.")
	      );
	    }
	  }
	}

	/**
	 * @param {ReactComponent} component Instance of ReactDOMSelect
	 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
	 * @private
	 */
	function updateOptions(component, propValue) {
	  var selectedValue, i, l;
	  var options = component.getDOMNode().options;

	  if (component.props.multiple) {
	    selectedValue = {};
	    for (i = 0, l = propValue.length; i < l; i++) {
	      selectedValue['' + propValue[i]] = true;
	    }
	    for (i = 0, l = options.length; i < l; i++) {
	      var selected = selectedValue.hasOwnProperty(options[i].value);
	      if (options[i].selected !== selected) {
	        options[i].selected = selected;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    selectedValue = '' + propValue;
	    for (i = 0, l = options.length; i < l; i++) {
	      if (options[i].value === selectedValue) {
	        options[i].selected = true;
	        return;
	      }
	    }
	    if (options.length) {
	      options[0].selected = true;
	    }
	  }
	}

	/**
	 * Implements a <select> native component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */
	var ReactDOMSelect = ReactClass.createClass({
	  displayName: 'ReactDOMSelect',
	  tagName: 'SELECT',

	  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

	  propTypes: {
	    defaultValue: selectValueType,
	    value: selectValueType
	  },

	  render: function() {
	    // Clone `this.props` so we don't mutate the input.
	    var props = assign({}, this.props);

	    props.onChange = this._handleChange;
	    props.value = null;

	    return select(props, this.props.children);
	  },

	  componentWillMount: function() {
	    this._pendingUpdate = false;
	  },

	  componentDidMount: function() {
	    var value = LinkedValueUtils.getValue(this);
	    if (value != null) {
	      updateOptions(this, value);
	    } else if (this.props.defaultValue != null) {
	      updateOptions(this, this.props.defaultValue);
	    }
	  },

	  componentDidUpdate: function(prevProps) {
	    var value = LinkedValueUtils.getValue(this);
	    if (value != null) {
	      this._pendingUpdate = false;
	      updateOptions(this, value);
	    } else if (!prevProps.multiple !== !this.props.multiple) {
	      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	      if (this.props.defaultValue != null) {
	        updateOptions(this, this.props.defaultValue);
	      } else {
	        // Revert the select back to its default unselected state.
	        updateOptions(this, this.props.multiple ? [] : '');
	      }
	    }
	  },

	  _handleChange: function(event) {
	    var returnValue;
	    var onChange = LinkedValueUtils.getOnChange(this);
	    if (onChange) {
	      returnValue = onChange.call(this, event);
	    }

	    this._pendingUpdate = true;
	    ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
	    return returnValue;
	  }

	});

	module.exports = ReactDOMSelect;


/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextarea
	 */

	'use strict';

	var AutoFocusMixin = __webpack_require__(114);
	var DOMPropertyOperations = __webpack_require__(43);
	var LinkedValueUtils = __webpack_require__(121);
	var ReactBrowserComponentMixin = __webpack_require__(110);
	var ReactClass = __webpack_require__(37);
	var ReactElement = __webpack_require__(11);
	var ReactUpdates = __webpack_require__(24);

	var assign = __webpack_require__(13);
	var invariant = __webpack_require__(7);

	var warning = __webpack_require__(15);

	var textarea = ReactElement.createFactory('textarea');

	function forceUpdateIfMounted() {
	  /*jshint validthis:true */
	  if (this.isMounted()) {
	    this.forceUpdate();
	  }
	}

	/**
	 * Implements a <textarea> native component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	var ReactDOMTextarea = ReactClass.createClass({
	  displayName: 'ReactDOMTextarea',
	  tagName: 'TEXTAREA',

	  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

	  getInitialState: function() {
	    var defaultValue = this.props.defaultValue;
	    // TODO (yungsters): Remove support for children content in <textarea>.
	    var children = this.props.children;
	    if (children != null) {
	      if ("production" !== process.env.NODE_ENV) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          false,
	          'Use the `defaultValue` or `value` props instead of setting ' +
	          'children on <textarea>.'
	        ) : null);
	      }
	      ("production" !== process.env.NODE_ENV ? invariant(
	        defaultValue == null,
	        'If you supply `defaultValue` on a <textarea>, do not pass children.'
	      ) : invariant(defaultValue == null));
	      if (Array.isArray(children)) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          children.length <= 1,
	          '<textarea> can only have at most one child.'
	        ) : invariant(children.length <= 1));
	        children = children[0];
	      }

	      defaultValue = '' + children;
	    }
	    if (defaultValue == null) {
	      defaultValue = '';
	    }
	    var value = LinkedValueUtils.getValue(this);
	    return {
	      // We save the initial value so that `ReactDOMComponent` doesn't update
	      // `textContent` (unnecessary since we update value).
	      // The initial value can be a boolean or object so that's why it's
	      // forced to be a string.
	      initialValue: '' + (value != null ? value : defaultValue)
	    };
	  },

	  render: function() {
	    // Clone `this.props` so we don't mutate the input.
	    var props = assign({}, this.props);

	    ("production" !== process.env.NODE_ENV ? invariant(
	      props.dangerouslySetInnerHTML == null,
	      '`dangerouslySetInnerHTML` does not make sense on <textarea>.'
	    ) : invariant(props.dangerouslySetInnerHTML == null));

	    props.defaultValue = null;
	    props.value = null;
	    props.onChange = this._handleChange;

	    // Always set children to the same thing. In IE9, the selection range will
	    // get reset if `textContent` is mutated.
	    return textarea(props, this.state.initialValue);
	  },

	  componentDidUpdate: function(prevProps, prevState, prevContext) {
	    var value = LinkedValueUtils.getValue(this);
	    if (value != null) {
	      var rootNode = this.getDOMNode();
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
	    }
	  },

	  _handleChange: function(event) {
	    var returnValue;
	    var onChange = LinkedValueUtils.getOnChange(this);
	    if (onChange) {
	      returnValue = onChange.call(this, event);
	    }
	    ReactUpdates.asap(forceUpdateIfMounted, this);
	    return returnValue;
	  }

	});

	module.exports = ReactDOMTextarea;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventListener
	 * @typechecks static-only
	 */

	'use strict';

	var EventListener = __webpack_require__(127);
	var ExecutionEnvironment = __webpack_require__(51);
	var PooledClass = __webpack_require__(9);
	var ReactInstanceHandles = __webpack_require__(20);
	var ReactMount = __webpack_require__(67);
	var ReactUpdates = __webpack_require__(24);

	var assign = __webpack_require__(13);
	var getEventTarget = __webpack_require__(98);
	var getUnboundedScrollPosition = __webpack_require__(128);

	/**
	 * Finds the parent React component of `node`.
	 *
	 * @param {*} node
	 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
	 *                           is not nested.
	 */
	function findParent(node) {
	  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.
	  var nodeID = ReactMount.getID(node);
	  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
	  var container = ReactMount.findReactContainerForID(rootID);
	  var parent = ReactMount.getFirstReactDOM(container);
	  return parent;
	}

	// Used to store ancestor hierarchy in top level callback
	function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
	  this.topLevelType = topLevelType;
	  this.nativeEvent = nativeEvent;
	  this.ancestors = [];
	}
	assign(TopLevelCallbackBookKeeping.prototype, {
	  destructor: function() {
	    this.topLevelType = null;
	    this.nativeEvent = null;
	    this.ancestors.length = 0;
	  }
	});
	PooledClass.addPoolingTo(
	  TopLevelCallbackBookKeeping,
	  PooledClass.twoArgumentPooler
	);

	function handleTopLevelImpl(bookKeeping) {
	  var topLevelTarget = ReactMount.getFirstReactDOM(
	    getEventTarget(bookKeeping.nativeEvent)
	  ) || window;

	  // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.
	  var ancestor = topLevelTarget;
	  while (ancestor) {
	    bookKeeping.ancestors.push(ancestor);
	    ancestor = findParent(ancestor);
	  }

	  for (var i = 0, l = bookKeeping.ancestors.length; i < l; i++) {
	    topLevelTarget = bookKeeping.ancestors[i];
	    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
	    ReactEventListener._handleTopLevel(
	      bookKeeping.topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      bookKeeping.nativeEvent
	    );
	  }
	}

	function scrollValueMonitor(cb) {
	  var scrollPosition = getUnboundedScrollPosition(window);
	  cb(scrollPosition);
	}

	var ReactEventListener = {
	  _enabled: true,
	  _handleTopLevel: null,

	  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

	  setHandleTopLevel: function(handleTopLevel) {
	    ReactEventListener._handleTopLevel = handleTopLevel;
	  },

	  setEnabled: function(enabled) {
	    ReactEventListener._enabled = !!enabled;
	  },

	  isEnabled: function() {
	    return ReactEventListener._enabled;
	  },


	  /**
	   * Traps top-level events by using event bubbling.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.listen(
	      element,
	      handlerBaseName,
	      ReactEventListener.dispatchEvent.bind(null, topLevelType)
	    );
	  },

	  /**
	   * Traps a top-level event by using event capturing.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.capture(
	      element,
	      handlerBaseName,
	      ReactEventListener.dispatchEvent.bind(null, topLevelType)
	    );
	  },

	  monitorScrollValue: function(refresh) {
	    var callback = scrollValueMonitor.bind(null, refresh);
	    EventListener.listen(window, 'scroll', callback);
	  },

	  dispatchEvent: function(topLevelType, nativeEvent) {
	    if (!ReactEventListener._enabled) {
	      return;
	    }

	    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(
	      topLevelType,
	      nativeEvent
	    );
	    try {
	      // Event queue being processed in the same cycle allows
	      // `preventDefault`.
	      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
	    } finally {
	      TopLevelCallbackBookKeeping.release(bookKeeping);
	    }
	  }
	};

	module.exports = ReactEventListener;


/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule EventListener
	 * @typechecks
	 */

	var emptyFunction = __webpack_require__(16);

	/**
	 * Upstream version of event listener. Does not take into account specific
	 * nature of platform.
	 */
	var EventListener = {
	  /**
	   * Listen to DOM events during the bubble phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  listen: function(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function() {
	          target.removeEventListener(eventType, callback, false);
	        }
	      };
	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function() {
	          target.detachEvent('on' + eventType, callback);
	        }
	      };
	    }
	  },

	  /**
	   * Listen to DOM events during the capture phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  capture: function(target, eventType, callback) {
	    if (!target.addEventListener) {
	      if ("production" !== process.env.NODE_ENV) {
	        console.error(
	          'Attempted to listen to events during the capture phase on a ' +
	          'browser that does not support the capture phase. Your application ' +
	          'will not receive some events.'
	        );
	      }
	      return {
	        remove: emptyFunction
	      };
	    } else {
	      target.addEventListener(eventType, callback, true);
	      return {
	        remove: function() {
	          target.removeEventListener(eventType, callback, true);
	        }
	      };
	    }
	  },

	  registerDefault: function() {}
	};

	module.exports = EventListener;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 128 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getUnboundedScrollPosition
	 * @typechecks
	 */

	"use strict";

	/**
	 * Gets the scroll position of the supplied element or window.
	 *
	 * The return values are unbounded, unlike `getScrollPosition`. This means they
	 * may be negative or exceed the element boundaries (which is possible using
	 * inertial scrolling).
	 *
	 * @param {DOMWindow|DOMElement} scrollable
	 * @return {object} Map with `x` and `y` keys.
	 */
	function getUnboundedScrollPosition(scrollable) {
	  if (scrollable === window) {
	    return {
	      x: window.pageXOffset || document.documentElement.scrollLeft,
	      y: window.pageYOffset || document.documentElement.scrollTop
	    };
	  }
	  return {
	    x: scrollable.scrollLeft,
	    y: scrollable.scrollTop
	  };
	}

	module.exports = getUnboundedScrollPosition;


/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInjection
	 */

	'use strict';

	var DOMProperty = __webpack_require__(44);
	var EventPluginHub = __webpack_require__(69);
	var ReactComponentEnvironment = __webpack_require__(85);
	var ReactClass = __webpack_require__(37);
	var ReactEmptyComponent = __webpack_require__(76);
	var ReactBrowserEventEmitter = __webpack_require__(68);
	var ReactNativeComponent = __webpack_require__(33);
	var ReactDOMComponent = __webpack_require__(87);
	var ReactPerf = __webpack_require__(26);
	var ReactRootIndex = __webpack_require__(21);
	var ReactUpdates = __webpack_require__(24);

	var ReactInjection = {
	  Component: ReactComponentEnvironment.injection,
	  Class: ReactClass.injection,
	  DOMComponent: ReactDOMComponent.injection,
	  DOMProperty: DOMProperty.injection,
	  EmptyComponent: ReactEmptyComponent.injection,
	  EventPluginHub: EventPluginHub.injection,
	  EventEmitter: ReactBrowserEventEmitter.injection,
	  NativeComponent: ReactNativeComponent.injection,
	  Perf: ReactPerf.injection,
	  RootIndex: ReactRootIndex.injection,
	  Updates: ReactUpdates.injection
	};

	module.exports = ReactInjection;


/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconcileTransaction
	 * @typechecks static-only
	 */

	'use strict';

	var CallbackQueue = __webpack_require__(25);
	var PooledClass = __webpack_require__(9);
	var ReactBrowserEventEmitter = __webpack_require__(68);
	var ReactInputSelection = __webpack_require__(131);
	var ReactPutListenerQueue = __webpack_require__(135);
	var Transaction = __webpack_require__(34);

	var assign = __webpack_require__(13);

	/**
	 * Ensures that, when possible, the selection range (currently selected text
	 * input) is not disturbed by performing the transaction.
	 */
	var SELECTION_RESTORATION = {
	  /**
	   * @return {Selection} Selection information.
	   */
	  initialize: ReactInputSelection.getSelectionInformation,
	  /**
	   * @param {Selection} sel Selection information returned from `initialize`.
	   */
	  close: ReactInputSelection.restoreSelection
	};

	/**
	 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
	 * high level DOM manipulations (like temporarily removing a text input from the
	 * DOM).
	 */
	var EVENT_SUPPRESSION = {
	  /**
	   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
	   * the reconciliation.
	   */
	  initialize: function() {
	    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
	    ReactBrowserEventEmitter.setEnabled(false);
	    return currentlyEnabled;
	  },

	  /**
	   * @param {boolean} previouslyEnabled Enabled status of
	   *   `ReactBrowserEventEmitter` before the reconciliation occured. `close`
	   *   restores the previous value.
	   */
	  close: function(previouslyEnabled) {
	    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
	  }
	};

	/**
	 * Provides a queue for collecting `componentDidMount` and
	 * `componentDidUpdate` callbacks during the the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function() {
	    this.reactMountReady.reset();
	  },

	  /**
	   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
	   */
	  close: function() {
	    this.reactMountReady.notifyAll();
	  }
	};

	var PUT_LISTENER_QUEUEING = {
	  initialize: function() {
	    this.putListenerQueue.reset();
	  },

	  close: function() {
	    this.putListenerQueue.putListeners();
	  }
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [
	  PUT_LISTENER_QUEUEING,
	  SELECTION_RESTORATION,
	  EVENT_SUPPRESSION,
	  ON_DOM_READY_QUEUEING
	];

	/**
	 * Currently:
	 * - The order that these are listed in the transaction is critical:
	 * - Suppresses events.
	 * - Restores selection range.
	 *
	 * Future:
	 * - Restore document/overflow scroll positions that were unintentionally
	 *   modified via DOM insertions above the top viewport boundary.
	 * - Implement/integrate with customized constraint based layout system and keep
	 *   track of which dimensions must be remeasured.
	 *
	 * @class ReactReconcileTransaction
	 */
	function ReactReconcileTransaction() {
	  this.reinitializeTransaction();
	  // Only server-side rendering really needs this option (see
	  // `ReactServerRendering`), but server-side uses
	  // `ReactServerRenderingTransaction` instead. This option is here so that it's
	  // accessible and defaults to false when `ReactDOMComponent` and
	  // `ReactTextComponent` checks it in `mountComponent`.`
	  this.renderToStaticMarkup = false;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.putListenerQueue = ReactPutListenerQueue.getPooled();
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array<object>} List of operation wrap proceedures.
	   *   TODO: convert to array<TransactionWrapper>
	   */
	  getTransactionWrappers: function() {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function() {
	    return this.reactMountReady;
	  },

	  getPutListenerQueue: function() {
	    return this.putListenerQueue;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be resused.
	   */
	  destructor: function() {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;

	    ReactPutListenerQueue.release(this.putListenerQueue);
	    this.putListenerQueue = null;
	  }
	};


	assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

	PooledClass.addPoolingTo(ReactReconcileTransaction);

	module.exports = ReactReconcileTransaction;


/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInputSelection
	 */

	'use strict';

	var ReactDOMSelection = __webpack_require__(132);

	var containsNode = __webpack_require__(79);
	var focusNode = __webpack_require__(115);
	var getActiveElement = __webpack_require__(134);

	function isInDocument(node) {
	  return containsNode(document.documentElement, node);
	}

	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */
	var ReactInputSelection = {

	  hasSelectionCapabilities: function(elem) {
	    return elem && (
	      ((elem.nodeName === 'INPUT' && elem.type === 'text') ||
	      elem.nodeName === 'TEXTAREA' || elem.contentEditable === 'true')
	    );
	  },

	  getSelectionInformation: function() {
	    var focusedElem = getActiveElement();
	    return {
	      focusedElem: focusedElem,
	      selectionRange:
	          ReactInputSelection.hasSelectionCapabilities(focusedElem) ?
	          ReactInputSelection.getSelection(focusedElem) :
	          null
	    };
	  },

	  /**
	   * @restoreSelection: If any selection information was potentially lost,
	   * restore it. This is useful when performing operations that could remove dom
	   * nodes and place them back in, resulting in focus being lost.
	   */
	  restoreSelection: function(priorSelectionInformation) {
	    var curFocusedElem = getActiveElement();
	    var priorFocusedElem = priorSelectionInformation.focusedElem;
	    var priorSelectionRange = priorSelectionInformation.selectionRange;
	    if (curFocusedElem !== priorFocusedElem &&
	        isInDocument(priorFocusedElem)) {
	      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
	        ReactInputSelection.setSelection(
	          priorFocusedElem,
	          priorSelectionRange
	        );
	      }
	      focusNode(priorFocusedElem);
	    }
	  },

	  /**
	   * @getSelection: Gets the selection bounds of a focused textarea, input or
	   * contentEditable node.
	   * -@input: Look up selection bounds of this input
	   * -@return {start: selectionStart, end: selectionEnd}
	   */
	  getSelection: function(input) {
	    var selection;

	    if ('selectionStart' in input) {
	      // Modern browser with input or textarea.
	      selection = {
	        start: input.selectionStart,
	        end: input.selectionEnd
	      };
	    } else if (document.selection && input.nodeName === 'INPUT') {
	      // IE8 input.
	      var range = document.selection.createRange();
	      // There can only be one selection per document in IE, so it must
	      // be in our element.
	      if (range.parentElement() === input) {
	        selection = {
	          start: -range.moveStart('character', -input.value.length),
	          end: -range.moveEnd('character', -input.value.length)
	        };
	      }
	    } else {
	      // Content editable or old IE textarea.
	      selection = ReactDOMSelection.getOffsets(input);
	    }

	    return selection || {start: 0, end: 0};
	  },

	  /**
	   * @setSelection: Sets the selection bounds of a textarea or input and focuses
	   * the input.
	   * -@input     Set selection bounds of this input or textarea
	   * -@offsets   Object of same form that is returned from get*
	   */
	  setSelection: function(input, offsets) {
	    var start = offsets.start;
	    var end = offsets.end;
	    if (typeof end === 'undefined') {
	      end = start;
	    }

	    if ('selectionStart' in input) {
	      input.selectionStart = start;
	      input.selectionEnd = Math.min(end, input.value.length);
	    } else if (document.selection && input.nodeName === 'INPUT') {
	      var range = input.createTextRange();
	      range.collapse(true);
	      range.moveStart('character', start);
	      range.moveEnd('character', end - start);
	      range.select();
	    } else {
	      ReactDOMSelection.setOffsets(input, offsets);
	    }
	  }
	};

	module.exports = ReactInputSelection;


/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelection
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(51);

	var getNodeForCharacterOffset = __webpack_require__(133);
	var getTextContentAccessor = __webpack_require__(95);

	/**
	 * While `isCollapsed` is available on the Selection object and `collapsed`
	 * is available on the Range object, IE11 sometimes gets them wrong.
	 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
	 */
	function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
	  return anchorNode === focusNode && anchorOffset === focusOffset;
	}

	/**
	 * Get the appropriate anchor and focus node/offset pairs for IE.
	 *
	 * The catch here is that IE's selection API doesn't provide information
	 * about whether the selection is forward or backward, so we have to
	 * behave as though it's always forward.
	 *
	 * IE text differs from modern selection in that it behaves as though
	 * block elements end with a new line. This means character offsets will
	 * differ between the two APIs.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getIEOffsets(node) {
	  var selection = document.selection;
	  var selectedRange = selection.createRange();
	  var selectedLength = selectedRange.text.length;

	  // Duplicate selection so we can move range without breaking user selection.
	  var fromStart = selectedRange.duplicate();
	  fromStart.moveToElementText(node);
	  fromStart.setEndPoint('EndToStart', selectedRange);

	  var startOffset = fromStart.text.length;
	  var endOffset = startOffset + selectedLength;

	  return {
	    start: startOffset,
	    end: endOffset
	  };
	}

	/**
	 * @param {DOMElement} node
	 * @return {?object}
	 */
	function getModernOffsets(node) {
	  var selection = window.getSelection && window.getSelection();

	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }

	  var anchorNode = selection.anchorNode;
	  var anchorOffset = selection.anchorOffset;
	  var focusNode = selection.focusNode;
	  var focusOffset = selection.focusOffset;

	  var currentRange = selection.getRangeAt(0);

	  // If the node and offset values are the same, the selection is collapsed.
	  // `Selection.isCollapsed` is available natively, but IE sometimes gets
	  // this value wrong.
	  var isSelectionCollapsed = isCollapsed(
	    selection.anchorNode,
	    selection.anchorOffset,
	    selection.focusNode,
	    selection.focusOffset
	  );

	  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

	  var tempRange = currentRange.cloneRange();
	  tempRange.selectNodeContents(node);
	  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

	  var isTempRangeCollapsed = isCollapsed(
	    tempRange.startContainer,
	    tempRange.startOffset,
	    tempRange.endContainer,
	    tempRange.endOffset
	  );

	  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
	  var end = start + rangeLength;

	  // Detect whether the selection is backward.
	  var detectionRange = document.createRange();
	  detectionRange.setStart(anchorNode, anchorOffset);
	  detectionRange.setEnd(focusNode, focusOffset);
	  var isBackward = detectionRange.collapsed;

	  return {
	    start: isBackward ? end : start,
	    end: isBackward ? start : end
	  };
	}

	/**
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setIEOffsets(node, offsets) {
	  var range = document.selection.createRange().duplicate();
	  var start, end;

	  if (typeof offsets.end === 'undefined') {
	    start = offsets.start;
	    end = start;
	  } else if (offsets.start > offsets.end) {
	    start = offsets.end;
	    end = offsets.start;
	  } else {
	    start = offsets.start;
	    end = offsets.end;
	  }

	  range.moveToElementText(node);
	  range.moveStart('character', start);
	  range.setEndPoint('EndToStart', range);
	  range.moveEnd('character', end - start);
	  range.select();
	}

	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setModernOffsets(node, offsets) {
	  if (!window.getSelection) {
	    return;
	  }

	  var selection = window.getSelection();
	  var length = node[getTextContentAccessor()].length;
	  var start = Math.min(offsets.start, length);
	  var end = typeof offsets.end === 'undefined' ?
	            start : Math.min(offsets.end, length);

	  // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.
	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }

	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);

	  if (startMarker && endMarker) {
	    var range = document.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();

	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}

	var useIEOffsets = (
	  ExecutionEnvironment.canUseDOM &&
	  'selection' in document &&
	  !('getSelection' in window)
	);

	var ReactDOMSelection = {
	  /**
	   * @param {DOMElement} node
	   */
	  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

	  /**
	   * @param {DOMElement|DOMTextNode} node
	   * @param {object} offsets
	   */
	  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
	};

	module.exports = ReactDOMSelection;


/***/ },
/* 133 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getNodeForCharacterOffset
	 */

	'use strict';

	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */
	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }
	  return node;
	}

	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */
	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }
	    node = node.parentNode;
	  }
	}

	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */
	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;

	  while (node) {
	    if (node.nodeType === 3) {
	      nodeEnd = nodeStart + node.textContent.length;

	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }

	      nodeStart = nodeEnd;
	    }

	    node = getLeafNode(getSiblingNode(node));
	  }
	}

	module.exports = getNodeForCharacterOffset;


/***/ },
/* 134 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getActiveElement
	 * @typechecks
	 */

	/**
	 * Same as document.activeElement but wraps in a try-catch block. In IE it is
	 * not safe to call document.activeElement if there is nothing focused.
	 *
	 * The activeElement will be null only if the document body is not yet defined.
	 */
	function getActiveElement() /*?DOMElement*/ {
	  try {
	    return document.activeElement || document.body;
	  } catch (e) {
	    return document.body;
	  }
	}

	module.exports = getActiveElement;


/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPutListenerQueue
	 */

	'use strict';

	var PooledClass = __webpack_require__(9);
	var ReactBrowserEventEmitter = __webpack_require__(68);

	var assign = __webpack_require__(13);

	function ReactPutListenerQueue() {
	  this.listenersToPut = [];
	}

	assign(ReactPutListenerQueue.prototype, {
	  enqueuePutListener: function(rootNodeID, propKey, propValue) {
	    this.listenersToPut.push({
	      rootNodeID: rootNodeID,
	      propKey: propKey,
	      propValue: propValue
	    });
	  },

	  putListeners: function() {
	    for (var i = 0; i < this.listenersToPut.length; i++) {
	      var listenerToPut = this.listenersToPut[i];
	      ReactBrowserEventEmitter.putListener(
	        listenerToPut.rootNodeID,
	        listenerToPut.propKey,
	        listenerToPut.propValue
	      );
	    }
	  },

	  reset: function() {
	    this.listenersToPut.length = 0;
	  },

	  destructor: function() {
	    this.reset();
	  }
	});

	PooledClass.addPoolingTo(ReactPutListenerQueue);

	module.exports = ReactPutListenerQueue;


/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SelectEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(5);
	var EventPropagators = __webpack_require__(93);
	var ReactInputSelection = __webpack_require__(131);
	var SyntheticEvent = __webpack_require__(97);

	var getActiveElement = __webpack_require__(134);
	var isTextInputElement = __webpack_require__(101);
	var keyOf = __webpack_require__(39);
	var shallowEqual = __webpack_require__(137);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onSelect: null}),
	      captured: keyOf({onSelectCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topContextMenu,
	      topLevelTypes.topFocus,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topMouseDown,
	      topLevelTypes.topMouseUp,
	      topLevelTypes.topSelectionChange
	    ]
	  }
	};

	var activeElement = null;
	var activeElementID = null;
	var lastSelection = null;
	var mouseDown = false;

	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @param {object}
	 */
	function getSelection(node) {
	  if ('selectionStart' in node &&
	      ReactInputSelection.hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else if (window.getSelection) {
	    var selection = window.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  } else if (document.selection) {
	    var range = document.selection.createRange();
	    return {
	      parentElement: range.parentElement(),
	      text: range.text,
	      top: range.boundingTop,
	      left: range.boundingLeft
	    };
	  }
	}

	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @return {?SyntheticEvent}
	 */
	function constructSelectEvent(nativeEvent) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  if (mouseDown ||
	      activeElement == null ||
	      activeElement !== getActiveElement()) {
	    return null;
	  }

	  // Only fire when selection has actually changed.
	  var currentSelection = getSelection(activeElement);
	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;

	    var syntheticEvent = SyntheticEvent.getPooled(
	      eventTypes.select,
	      activeElementID,
	      nativeEvent
	    );

	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement;

	    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

	    return syntheticEvent;
	  }
	}

	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */
	var SelectEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {

	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case topLevelTypes.topFocus:
	        if (isTextInputElement(topLevelTarget) ||
	            topLevelTarget.contentEditable === 'true') {
	          activeElement = topLevelTarget;
	          activeElementID = topLevelTargetID;
	          lastSelection = null;
	        }
	        break;
	      case topLevelTypes.topBlur:
	        activeElement = null;
	        activeElementID = null;
	        lastSelection = null;
	        break;

	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.
	      case topLevelTypes.topMouseDown:
	        mouseDown = true;
	        break;
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topMouseUp:
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent);

	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't).
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      case topLevelTypes.topSelectionChange:
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        return constructSelectEvent(nativeEvent);
	    }
	  }
	};

	module.exports = SelectEventPlugin;


/***/ },
/* 137 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shallowEqual
	 */

	'use strict';

	/**
	 * Performs equality by iterating through keys on an object and returning
	 * false when any key has values which are not strictly equal between
	 * objA and objB. Returns true when the values of all keys are strictly equal.
	 *
	 * @return {boolean}
	 */
	function shallowEqual(objA, objB) {
	  if (objA === objB) {
	    return true;
	  }
	  var key;
	  // Test for A's keys different from B.
	  for (key in objA) {
	    if (objA.hasOwnProperty(key) &&
	        (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {
	      return false;
	    }
	  }
	  // Test for B's keys missing from A.
	  for (key in objB) {
	    if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {
	      return false;
	    }
	  }
	  return true;
	}

	module.exports = shallowEqual;


/***/ },
/* 138 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ServerReactRootIndex
	 * @typechecks
	 */

	'use strict';

	/**
	 * Size of the reactRoot ID space. We generate random numbers for React root
	 * IDs and if there's a collision the events and DOM update system will
	 * get confused. In the future we need a way to generate GUIDs but for
	 * now this will work on a smaller scale.
	 */
	var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);

	var ServerReactRootIndex = {
	  createReactRootIndex: function() {
	    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
	  }
	};

	module.exports = ServerReactRootIndex;


/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SimpleEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(5);
	var EventPluginUtils = __webpack_require__(4);
	var EventPropagators = __webpack_require__(93);
	var SyntheticClipboardEvent = __webpack_require__(141);
	var SyntheticEvent = __webpack_require__(97);
	var SyntheticFocusEvent = __webpack_require__(142);
	var SyntheticKeyboardEvent = __webpack_require__(143);
	var SyntheticMouseEvent = __webpack_require__(105);
	var SyntheticDragEvent = __webpack_require__(140);
	var SyntheticTouchEvent = __webpack_require__(146);
	var SyntheticUIEvent = __webpack_require__(106);
	var SyntheticWheelEvent = __webpack_require__(147);

	var getEventCharCode = __webpack_require__(144);

	var invariant = __webpack_require__(7);
	var keyOf = __webpack_require__(39);
	var warning = __webpack_require__(15);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  blur: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onBlur: true}),
	      captured: keyOf({onBlurCapture: true})
	    }
	  },
	  click: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onClick: true}),
	      captured: keyOf({onClickCapture: true})
	    }
	  },
	  contextMenu: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onContextMenu: true}),
	      captured: keyOf({onContextMenuCapture: true})
	    }
	  },
	  copy: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCopy: true}),
	      captured: keyOf({onCopyCapture: true})
	    }
	  },
	  cut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCut: true}),
	      captured: keyOf({onCutCapture: true})
	    }
	  },
	  doubleClick: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDoubleClick: true}),
	      captured: keyOf({onDoubleClickCapture: true})
	    }
	  },
	  drag: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDrag: true}),
	      captured: keyOf({onDragCapture: true})
	    }
	  },
	  dragEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragEnd: true}),
	      captured: keyOf({onDragEndCapture: true})
	    }
	  },
	  dragEnter: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragEnter: true}),
	      captured: keyOf({onDragEnterCapture: true})
	    }
	  },
	  dragExit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragExit: true}),
	      captured: keyOf({onDragExitCapture: true})
	    }
	  },
	  dragLeave: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragLeave: true}),
	      captured: keyOf({onDragLeaveCapture: true})
	    }
	  },
	  dragOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragOver: true}),
	      captured: keyOf({onDragOverCapture: true})
	    }
	  },
	  dragStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragStart: true}),
	      captured: keyOf({onDragStartCapture: true})
	    }
	  },
	  drop: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDrop: true}),
	      captured: keyOf({onDropCapture: true})
	    }
	  },
	  focus: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onFocus: true}),
	      captured: keyOf({onFocusCapture: true})
	    }
	  },
	  input: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onInput: true}),
	      captured: keyOf({onInputCapture: true})
	    }
	  },
	  keyDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onKeyDown: true}),
	      captured: keyOf({onKeyDownCapture: true})
	    }
	  },
	  keyPress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onKeyPress: true}),
	      captured: keyOf({onKeyPressCapture: true})
	    }
	  },
	  keyUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onKeyUp: true}),
	      captured: keyOf({onKeyUpCapture: true})
	    }
	  },
	  load: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onLoad: true}),
	      captured: keyOf({onLoadCapture: true})
	    }
	  },
	  error: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onError: true}),
	      captured: keyOf({onErrorCapture: true})
	    }
	  },
	  // Note: We do not allow listening to mouseOver events. Instead, use the
	  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
	  mouseDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseDown: true}),
	      captured: keyOf({onMouseDownCapture: true})
	    }
	  },
	  mouseMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseMove: true}),
	      captured: keyOf({onMouseMoveCapture: true})
	    }
	  },
	  mouseOut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseOut: true}),
	      captured: keyOf({onMouseOutCapture: true})
	    }
	  },
	  mouseOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseOver: true}),
	      captured: keyOf({onMouseOverCapture: true})
	    }
	  },
	  mouseUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseUp: true}),
	      captured: keyOf({onMouseUpCapture: true})
	    }
	  },
	  paste: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onPaste: true}),
	      captured: keyOf({onPasteCapture: true})
	    }
	  },
	  reset: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onReset: true}),
	      captured: keyOf({onResetCapture: true})
	    }
	  },
	  scroll: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onScroll: true}),
	      captured: keyOf({onScrollCapture: true})
	    }
	  },
	  submit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onSubmit: true}),
	      captured: keyOf({onSubmitCapture: true})
	    }
	  },
	  touchCancel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onTouchCancel: true}),
	      captured: keyOf({onTouchCancelCapture: true})
	    }
	  },
	  touchEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onTouchEnd: true}),
	      captured: keyOf({onTouchEndCapture: true})
	    }
	  },
	  touchMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onTouchMove: true}),
	      captured: keyOf({onTouchMoveCapture: true})
	    }
	  },
	  touchStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onTouchStart: true}),
	      captured: keyOf({onTouchStartCapture: true})
	    }
	  },
	  wheel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onWheel: true}),
	      captured: keyOf({onWheelCapture: true})
	    }
	  }
	};

	var topLevelEventsToDispatchConfig = {
	  topBlur:        eventTypes.blur,
	  topClick:       eventTypes.click,
	  topContextMenu: eventTypes.contextMenu,
	  topCopy:        eventTypes.copy,
	  topCut:         eventTypes.cut,
	  topDoubleClick: eventTypes.doubleClick,
	  topDrag:        eventTypes.drag,
	  topDragEnd:     eventTypes.dragEnd,
	  topDragEnter:   eventTypes.dragEnter,
	  topDragExit:    eventTypes.dragExit,
	  topDragLeave:   eventTypes.dragLeave,
	  topDragOver:    eventTypes.dragOver,
	  topDragStart:   eventTypes.dragStart,
	  topDrop:        eventTypes.drop,
	  topError:       eventTypes.error,
	  topFocus:       eventTypes.focus,
	  topInput:       eventTypes.input,
	  topKeyDown:     eventTypes.keyDown,
	  topKeyPress:    eventTypes.keyPress,
	  topKeyUp:       eventTypes.keyUp,
	  topLoad:        eventTypes.load,
	  topMouseDown:   eventTypes.mouseDown,
	  topMouseMove:   eventTypes.mouseMove,
	  topMouseOut:    eventTypes.mouseOut,
	  topMouseOver:   eventTypes.mouseOver,
	  topMouseUp:     eventTypes.mouseUp,
	  topPaste:       eventTypes.paste,
	  topReset:       eventTypes.reset,
	  topScroll:      eventTypes.scroll,
	  topSubmit:      eventTypes.submit,
	  topTouchCancel: eventTypes.touchCancel,
	  topTouchEnd:    eventTypes.touchEnd,
	  topTouchMove:   eventTypes.touchMove,
	  topTouchStart:  eventTypes.touchStart,
	  topWheel:       eventTypes.wheel
	};

	for (var type in topLevelEventsToDispatchConfig) {
	  topLevelEventsToDispatchConfig[type].dependencies = [type];
	}

	var SimpleEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * Same as the default implementation, except cancels the event when return
	   * value is false. This behavior will be disabled in a future release.
	   *
	   * @param {object} Event to be dispatched.
	   * @param {function} Application-level callback.
	   * @param {string} domID DOM ID to pass to the callback.
	   */
	  executeDispatch: function(event, listener, domID) {
	    var returnValue = EventPluginUtils.executeDispatch(event, listener, domID);

	    ("production" !== process.env.NODE_ENV ? warning(
	      typeof returnValue !== 'boolean',
	      'Returning `false` from an event handler is deprecated and will be ' +
	      'ignored in a future release. Instead, manually call ' +
	      'e.stopPropagation() or e.preventDefault(), as appropriate.'
	    ) : null);

	    if (returnValue === false) {
	      event.stopPropagation();
	      event.preventDefault();
	    }
	  },

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
	    if (!dispatchConfig) {
	      return null;
	    }
	    var EventConstructor;
	    switch (topLevelType) {
	      case topLevelTypes.topInput:
	      case topLevelTypes.topLoad:
	      case topLevelTypes.topError:
	      case topLevelTypes.topReset:
	      case topLevelTypes.topSubmit:
	        // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0
	        EventConstructor = SyntheticEvent;
	        break;
	      case topLevelTypes.topKeyPress:
	        // FireFox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }
	        /* falls through */
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        EventConstructor = SyntheticKeyboardEvent;
	        break;
	      case topLevelTypes.topBlur:
	      case topLevelTypes.topFocus:
	        EventConstructor = SyntheticFocusEvent;
	        break;
	      case topLevelTypes.topClick:
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }
	        /* falls through */
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topDoubleClick:
	      case topLevelTypes.topMouseDown:
	      case topLevelTypes.topMouseMove:
	      case topLevelTypes.topMouseOut:
	      case topLevelTypes.topMouseOver:
	      case topLevelTypes.topMouseUp:
	        EventConstructor = SyntheticMouseEvent;
	        break;
	      case topLevelTypes.topDrag:
	      case topLevelTypes.topDragEnd:
	      case topLevelTypes.topDragEnter:
	      case topLevelTypes.topDragExit:
	      case topLevelTypes.topDragLeave:
	      case topLevelTypes.topDragOver:
	      case topLevelTypes.topDragStart:
	      case topLevelTypes.topDrop:
	        EventConstructor = SyntheticDragEvent;
	        break;
	      case topLevelTypes.topTouchCancel:
	      case topLevelTypes.topTouchEnd:
	      case topLevelTypes.topTouchMove:
	      case topLevelTypes.topTouchStart:
	        EventConstructor = SyntheticTouchEvent;
	        break;
	      case topLevelTypes.topScroll:
	        EventConstructor = SyntheticUIEvent;
	        break;
	      case topLevelTypes.topWheel:
	        EventConstructor = SyntheticWheelEvent;
	        break;
	      case topLevelTypes.topCopy:
	      case topLevelTypes.topCut:
	      case topLevelTypes.topPaste:
	        EventConstructor = SyntheticClipboardEvent;
	        break;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      EventConstructor,
	      'SimpleEventPlugin: Unhandled event type, `%s`.',
	      topLevelType
	    ) : invariant(EventConstructor));
	    var event = EventConstructor.getPooled(
	      dispatchConfig,
	      topLevelTargetID,
	      nativeEvent
	    );
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  }

	};

	module.exports = SimpleEventPlugin;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticDragEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(105);

	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var DragEventInterface = {
	  dataTransfer: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

	module.exports = SyntheticDragEvent;


/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticClipboardEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(97);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */
	var ClipboardEventInterface = {
	  clipboardData: function(event) {
	    return (
	      'clipboardData' in event ?
	        event.clipboardData :
	        window.clipboardData
	    );
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

	module.exports = SyntheticClipboardEvent;


/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticFocusEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(106);

	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var FocusEventInterface = {
	  relatedTarget: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

	module.exports = SyntheticFocusEvent;


/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticKeyboardEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(106);

	var getEventCharCode = __webpack_require__(144);
	var getEventKey = __webpack_require__(145);
	var getEventModifierState = __webpack_require__(107);

	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var KeyboardEventInterface = {
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function(event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.

	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    return 0;
	  },
	  keyCode: function(event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.

	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  },
	  which: function(event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

	module.exports = SyntheticKeyboardEvent;


/***/ },
/* 144 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventCharCode
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `charCode` property.
	 */
	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;

	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode;

	    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  }

	  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.
	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }

	  return 0;
	}

	module.exports = getEventCharCode;


/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventKey
	 * @typechecks static-only
	 */

	'use strict';

	var getEventCharCode = __webpack_require__(144);

	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var normalizeKey = {
	  'Esc': 'Escape',
	  'Spacebar': ' ',
	  'Left': 'ArrowLeft',
	  'Up': 'ArrowUp',
	  'Right': 'ArrowRight',
	  'Down': 'ArrowDown',
	  'Del': 'Delete',
	  'Win': 'OS',
	  'Menu': 'ContextMenu',
	  'Apps': 'ContextMenu',
	  'Scroll': 'ScrollLock',
	  'MozPrintableKey': 'Unidentified'
	};

	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var translateToKey = {
	  8: 'Backspace',
	  9: 'Tab',
	  12: 'Clear',
	  13: 'Enter',
	  16: 'Shift',
	  17: 'Control',
	  18: 'Alt',
	  19: 'Pause',
	  20: 'CapsLock',
	  27: 'Escape',
	  32: ' ',
	  33: 'PageUp',
	  34: 'PageDown',
	  35: 'End',
	  36: 'Home',
	  37: 'ArrowLeft',
	  38: 'ArrowUp',
	  39: 'ArrowRight',
	  40: 'ArrowDown',
	  45: 'Insert',
	  46: 'Delete',
	  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
	  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
	  144: 'NumLock',
	  145: 'ScrollLock',
	  224: 'Meta'
	};

	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */
	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.

	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	    if (key !== 'Unidentified') {
	      return key;
	    }
	  }

	  // Browser does not implement `key`, polyfill as much of it as we can.
	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent);

	    // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.
	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }
	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }
	  return '';
	}

	module.exports = getEventKey;


/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticTouchEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(106);

	var getEventModifierState = __webpack_require__(107);

	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */
	var TouchEventInterface = {
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

	module.exports = SyntheticTouchEvent;


/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticWheelEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(105);

	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var WheelEventInterface = {
	  deltaX: function(event) {
	    return (
	      'deltaX' in event ? event.deltaX :
	      // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	      'wheelDeltaX' in event ? -event.wheelDeltaX : 0
	    );
	  },
	  deltaY: function(event) {
	    return (
	      'deltaY' in event ? event.deltaY :
	      // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	      'wheelDeltaY' in event ? -event.wheelDeltaY :
	      // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	      'wheelDelta' in event ? -event.wheelDelta : 0
	    );
	  },
	  deltaZ: null,

	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticMouseEvent}
	 */
	function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

	module.exports = SyntheticWheelEvent;


/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SVGDOMPropertyConfig
	 */

	/*jslint bitwise: true*/

	'use strict';

	var DOMProperty = __webpack_require__(44);

	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;

	var SVGDOMPropertyConfig = {
	  Properties: {
	    clipPath: MUST_USE_ATTRIBUTE,
	    cx: MUST_USE_ATTRIBUTE,
	    cy: MUST_USE_ATTRIBUTE,
	    d: MUST_USE_ATTRIBUTE,
	    dx: MUST_USE_ATTRIBUTE,
	    dy: MUST_USE_ATTRIBUTE,
	    fill: MUST_USE_ATTRIBUTE,
	    fillOpacity: MUST_USE_ATTRIBUTE,
	    fontFamily: MUST_USE_ATTRIBUTE,
	    fontSize: MUST_USE_ATTRIBUTE,
	    fx: MUST_USE_ATTRIBUTE,
	    fy: MUST_USE_ATTRIBUTE,
	    gradientTransform: MUST_USE_ATTRIBUTE,
	    gradientUnits: MUST_USE_ATTRIBUTE,
	    markerEnd: MUST_USE_ATTRIBUTE,
	    markerMid: MUST_USE_ATTRIBUTE,
	    markerStart: MUST_USE_ATTRIBUTE,
	    offset: MUST_USE_ATTRIBUTE,
	    opacity: MUST_USE_ATTRIBUTE,
	    patternContentUnits: MUST_USE_ATTRIBUTE,
	    patternUnits: MUST_USE_ATTRIBUTE,
	    points: MUST_USE_ATTRIBUTE,
	    preserveAspectRatio: MUST_USE_ATTRIBUTE,
	    r: MUST_USE_ATTRIBUTE,
	    rx: MUST_USE_ATTRIBUTE,
	    ry: MUST_USE_ATTRIBUTE,
	    spreadMethod: MUST_USE_ATTRIBUTE,
	    stopColor: MUST_USE_ATTRIBUTE,
	    stopOpacity: MUST_USE_ATTRIBUTE,
	    stroke: MUST_USE_ATTRIBUTE,
	    strokeDasharray: MUST_USE_ATTRIBUTE,
	    strokeLinecap: MUST_USE_ATTRIBUTE,
	    strokeOpacity: MUST_USE_ATTRIBUTE,
	    strokeWidth: MUST_USE_ATTRIBUTE,
	    textAnchor: MUST_USE_ATTRIBUTE,
	    transform: MUST_USE_ATTRIBUTE,
	    version: MUST_USE_ATTRIBUTE,
	    viewBox: MUST_USE_ATTRIBUTE,
	    x1: MUST_USE_ATTRIBUTE,
	    x2: MUST_USE_ATTRIBUTE,
	    x: MUST_USE_ATTRIBUTE,
	    y1: MUST_USE_ATTRIBUTE,
	    y2: MUST_USE_ATTRIBUTE,
	    y: MUST_USE_ATTRIBUTE
	  },
	  DOMAttributeNames: {
	    clipPath: 'clip-path',
	    fillOpacity: 'fill-opacity',
	    fontFamily: 'font-family',
	    fontSize: 'font-size',
	    gradientTransform: 'gradientTransform',
	    gradientUnits: 'gradientUnits',
	    markerEnd: 'marker-end',
	    markerMid: 'marker-mid',
	    markerStart: 'marker-start',
	    patternContentUnits: 'patternContentUnits',
	    patternUnits: 'patternUnits',
	    preserveAspectRatio: 'preserveAspectRatio',
	    spreadMethod: 'spreadMethod',
	    stopColor: 'stop-color',
	    stopOpacity: 'stop-opacity',
	    strokeDasharray: 'stroke-dasharray',
	    strokeLinecap: 'stroke-linecap',
	    strokeOpacity: 'stroke-opacity',
	    strokeWidth: 'stroke-width',
	    textAnchor: 'text-anchor',
	    viewBox: 'viewBox'
	  }
	};

	module.exports = SVGDOMPropertyConfig;


/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createFullPageComponent
	 * @typechecks
	 */

	'use strict';

	// Defeat circular references by requiring this directly.
	var ReactClass = __webpack_require__(37);
	var ReactElement = __webpack_require__(11);

	var invariant = __webpack_require__(7);

	/**
	 * Create a component that will throw an exception when unmounted.
	 *
	 * Components like <html> <head> and <body> can't be removed or added
	 * easily in a cross-browser way, however it's valuable to be able to
	 * take advantage of React's reconciliation for styling and <title>
	 * management. So we just document it and throw in dangerous cases.
	 *
	 * @param {string} tag The tag to wrap
	 * @return {function} convenience constructor of new component
	 */
	function createFullPageComponent(tag) {
	  var elementFactory = ReactElement.createFactory(tag);

	  var FullPageComponent = ReactClass.createClass({
	    tagName: tag.toUpperCase(),
	    displayName: 'ReactFullPageComponent' + tag,

	    componentWillUnmount: function() {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        false,
	        '%s tried to unmount. Because of cross-browser quirks it is ' +
	        'impossible to unmount some top-level components (eg <html>, <head>, ' +
	        'and <body>) reliably and efficiently. To fix this, have a single ' +
	        'top-level component that never unmounts render these elements.',
	        this.constructor.displayName
	      ) : invariant(false));
	    },

	    render: function() {
	      return elementFactory(this.props);
	    }
	  });

	  return FullPageComponent;
	}

	module.exports = createFullPageComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerf
	 * @typechecks static-only
	 */

	'use strict';

	var DOMProperty = __webpack_require__(44);
	var ReactDefaultPerfAnalysis = __webpack_require__(151);
	var ReactMount = __webpack_require__(67);
	var ReactPerf = __webpack_require__(26);

	var performanceNow = __webpack_require__(152);

	function roundFloat(val) {
	  return Math.floor(val * 100) / 100;
	}

	function addValue(obj, key, val) {
	  obj[key] = (obj[key] || 0) + val;
	}

	var ReactDefaultPerf = {
	  _allMeasurements: [], // last item in the list is the current one
	  _mountStack: [0],
	  _injected: false,

	  start: function() {
	    if (!ReactDefaultPerf._injected) {
	      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
	    }

	    ReactDefaultPerf._allMeasurements.length = 0;
	    ReactPerf.enableMeasure = true;
	  },

	  stop: function() {
	    ReactPerf.enableMeasure = false;
	  },

	  getLastMeasurements: function() {
	    return ReactDefaultPerf._allMeasurements;
	  },

	  printExclusive: function(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
	    console.table(summary.map(function(item) {
	      return {
	        'Component class name': item.componentName,
	        'Total inclusive time (ms)': roundFloat(item.inclusive),
	        'Exclusive mount time (ms)': roundFloat(item.exclusive),
	        'Exclusive render time (ms)': roundFloat(item.render),
	        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
	        'Render time per instance (ms)': roundFloat(item.render / item.count),
	        'Instances': item.count
	      };
	    }));
	    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
	    // number.
	  },

	  printInclusive: function(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
	    console.table(summary.map(function(item) {
	      return {
	        'Owner > component': item.componentName,
	        'Inclusive time (ms)': roundFloat(item.time),
	        'Instances': item.count
	      };
	    }));
	    console.log(
	      'Total time:',
	      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
	    );
	  },

	  getMeasurementsSummaryMap: function(measurements) {
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(
	      measurements,
	      true
	    );
	    return summary.map(function(item) {
	      return {
	        'Owner > component': item.componentName,
	        'Wasted time (ms)': item.time,
	        'Instances': item.count
	      };
	    });
	  },

	  printWasted: function(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
	    console.log(
	      'Total time:',
	      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
	    );
	  },

	  printDOM: function(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
	    console.table(summary.map(function(item) {
	      var result = {};
	      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
	      result['type'] = item.type;
	      result['args'] = JSON.stringify(item.args);
	      return result;
	    }));
	    console.log(
	      'Total time:',
	      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
	    );
	  },

	  _recordWrite: function(id, fnName, totalTime, args) {
	    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
	    var writes =
	      ReactDefaultPerf
	        ._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1]
	        .writes;
	    writes[id] = writes[id] || [];
	    writes[id].push({
	      type: fnName,
	      time: totalTime,
	      args: args
	    });
	  },

	  measure: function(moduleName, fnName, func) {
	    return function() {for (var args=[],$__0=0,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
	      var totalTime;
	      var rv;
	      var start;

	      if (fnName === '_renderNewRootComponent' ||
	          fnName === 'flushBatchedUpdates') {
	        // A "measurement" is a set of metrics recorded for each flush. We want
	        // to group the metrics for a given flush together so we can look at the
	        // components that rendered and the DOM operations that actually
	        // happened to determine the amount of "wasted work" performed.
	        ReactDefaultPerf._allMeasurements.push({
	          exclusive: {},
	          inclusive: {},
	          render: {},
	          counts: {},
	          writes: {},
	          displayNames: {},
	          totalTime: 0
	        });
	        start = performanceNow();
	        rv = func.apply(this, args);
	        ReactDefaultPerf._allMeasurements[
	          ReactDefaultPerf._allMeasurements.length - 1
	        ].totalTime = performanceNow() - start;
	        return rv;
	      } else if (fnName === '_mountImageIntoNode' ||
	          moduleName === 'ReactDOMIDOperations') {
	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;

	        if (fnName === '_mountImageIntoNode') {
	          var mountID = ReactMount.getID(args[1]);
	          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
	        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
	          // special format
	          args[0].forEach(function(update) {
	            var writeArgs = {};
	            if (update.fromIndex !== null) {
	              writeArgs.fromIndex = update.fromIndex;
	            }
	            if (update.toIndex !== null) {
	              writeArgs.toIndex = update.toIndex;
	            }
	            if (update.textContent !== null) {
	              writeArgs.textContent = update.textContent;
	            }
	            if (update.markupIndex !== null) {
	              writeArgs.markup = args[1][update.markupIndex];
	            }
	            ReactDefaultPerf._recordWrite(
	              update.parentID,
	              update.type,
	              totalTime,
	              writeArgs
	            );
	          });
	        } else {
	          // basic format
	          ReactDefaultPerf._recordWrite(
	            args[0],
	            fnName,
	            totalTime,
	            Array.prototype.slice.call(args, 1)
	          );
	        }
	        return rv;
	      } else if (moduleName === 'ReactCompositeComponent' && (
	        (// TODO: receiveComponent()?
	        (fnName === 'mountComponent' ||
	        fnName === 'updateComponent' || fnName === '_renderValidatedComponent')))) {

	        if (typeof this._currentElement.type === 'string') {
	          return func.apply(this, args);
	        }

	        var rootNodeID = fnName === 'mountComponent' ?
	          args[0] :
	          this._rootNodeID;
	        var isRender = fnName === '_renderValidatedComponent';
	        var isMount = fnName === 'mountComponent';

	        var mountStack = ReactDefaultPerf._mountStack;
	        var entry = ReactDefaultPerf._allMeasurements[
	          ReactDefaultPerf._allMeasurements.length - 1
	        ];

	        if (isRender) {
	          addValue(entry.counts, rootNodeID, 1);
	        } else if (isMount) {
	          mountStack.push(0);
	        }

	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;

	        if (isRender) {
	          addValue(entry.render, rootNodeID, totalTime);
	        } else if (isMount) {
	          var subMountTime = mountStack.pop();
	          mountStack[mountStack.length - 1] += totalTime;
	          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        } else {
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        }

	        entry.displayNames[rootNodeID] = {
	          current: this.getName(),
	          owner: this._currentElement._owner ?
	            this._currentElement._owner.getName() :
	            '<root>'
	        };

	        return rv;
	      } else {
	        return func.apply(this, args);
	      }
	    };
	  }
	};

	module.exports = ReactDefaultPerf;


/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerfAnalysis
	 */

	var assign = __webpack_require__(13);

	// Don't try to save users less than 1.2ms (a number I made up)
	var DONT_CARE_THRESHOLD = 1.2;
	var DOM_OPERATION_TYPES = {
	  '_mountImageIntoNode': 'set innerHTML',
	  INSERT_MARKUP: 'set innerHTML',
	  MOVE_EXISTING: 'move',
	  REMOVE_NODE: 'remove',
	  TEXT_CONTENT: 'set textContent',
	  'updatePropertyByID': 'update attribute',
	  'deletePropertyByID': 'delete attribute',
	  'updateStylesByID': 'update styles',
	  'updateInnerHTMLByID': 'set innerHTML',
	  'dangerouslyReplaceNodeWithMarkupByID': 'replace'
	};

	function getTotalTime(measurements) {
	  // TODO: return number of DOM ops? could be misleading.
	  // TODO: measure dropped frames after reconcile?
	  // TODO: log total time of each reconcile and the top-level component
	  // class that triggered it.
	  var totalTime = 0;
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    totalTime += measurement.totalTime;
	  }
	  return totalTime;
	}

	function getDOMSummary(measurements) {
	  var items = [];
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var id;

	    for (id in measurement.writes) {
	      measurement.writes[id].forEach(function(write) {
	        items.push({
	          id: id,
	          type: DOM_OPERATION_TYPES[write.type] || write.type,
	          args: write.args
	        });
	      });
	    }
	  }
	  return items;
	}

	function getExclusiveSummary(measurements) {
	  var candidates = {};
	  var displayName;

	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign(
	      {},
	      measurement.exclusive,
	      measurement.inclusive
	    );

	    for (var id in allIDs) {
	      displayName = measurement.displayNames[id].current;

	      candidates[displayName] = candidates[displayName] || {
	        componentName: displayName,
	        inclusive: 0,
	        exclusive: 0,
	        render: 0,
	        count: 0
	      };
	      if (measurement.render[id]) {
	        candidates[displayName].render += measurement.render[id];
	      }
	      if (measurement.exclusive[id]) {
	        candidates[displayName].exclusive += measurement.exclusive[id];
	      }
	      if (measurement.inclusive[id]) {
	        candidates[displayName].inclusive += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[displayName].count += measurement.counts[id];
	      }
	    }
	  }

	  // Now make a sorted array with the results.
	  var arr = [];
	  for (displayName in candidates) {
	    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[displayName]);
	    }
	  }

	  arr.sort(function(a, b) {
	    return b.exclusive - a.exclusive;
	  });

	  return arr;
	}

	function getInclusiveSummary(measurements, onlyClean) {
	  var candidates = {};
	  var inclusiveKey;

	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign(
	      {},
	      measurement.exclusive,
	      measurement.inclusive
	    );
	    var cleanComponents;

	    if (onlyClean) {
	      cleanComponents = getUnchangedComponents(measurement);
	    }

	    for (var id in allIDs) {
	      if (onlyClean && !cleanComponents[id]) {
	        continue;
	      }

	      var displayName = measurement.displayNames[id];

	      // Inclusive time is not useful for many components without knowing where
	      // they are instantiated. So we aggregate inclusive time with both the
	      // owner and current displayName as the key.
	      inclusiveKey = displayName.owner + ' > ' + displayName.current;

	      candidates[inclusiveKey] = candidates[inclusiveKey] || {
	        componentName: inclusiveKey,
	        time: 0,
	        count: 0
	      };

	      if (measurement.inclusive[id]) {
	        candidates[inclusiveKey].time += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[inclusiveKey].count += measurement.counts[id];
	      }
	    }
	  }

	  // Now make a sorted array with the results.
	  var arr = [];
	  for (inclusiveKey in candidates) {
	    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[inclusiveKey]);
	    }
	  }

	  arr.sort(function(a, b) {
	    return b.time - a.time;
	  });

	  return arr;
	}

	function getUnchangedComponents(measurement) {
	  // For a given reconcile, look at which components did not actually
	  // render anything to the DOM and return a mapping of their ID to
	  // the amount of time it took to render the entire subtree.
	  var cleanComponents = {};
	  var dirtyLeafIDs = Object.keys(measurement.writes);
	  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

	  for (var id in allIDs) {
	    var isDirty = false;
	    // For each component that rendered, see if a component that triggered
	    // a DOM op is in its subtree.
	    for (var i = 0; i < dirtyLeafIDs.length; i++) {
	      if (dirtyLeafIDs[i].indexOf(id) === 0) {
	        isDirty = true;
	        break;
	      }
	    }
	    if (!isDirty && measurement.counts[id] > 0) {
	      cleanComponents[id] = true;
	    }
	  }
	  return cleanComponents;
	}

	var ReactDefaultPerfAnalysis = {
	  getExclusiveSummary: getExclusiveSummary,
	  getInclusiveSummary: getInclusiveSummary,
	  getDOMSummary: getDOMSummary,
	  getTotalTime: getTotalTime
	};

	module.exports = ReactDefaultPerfAnalysis;


/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performanceNow
	 * @typechecks
	 */

	var performance = __webpack_require__(153);

	/**
	 * Detect if we can use `window.performance.now()` and gracefully fallback to
	 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
	 * because of Facebook's testing infrastructure.
	 */
	if (!performance || !performance.now) {
	  performance = Date;
	}

	var performanceNow = performance.now.bind(performance);

	module.exports = performanceNow;


/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performance
	 * @typechecks
	 */

	"use strict";

	var ExecutionEnvironment = __webpack_require__(51);

	var performance;

	if (ExecutionEnvironment.canUseDOM) {
	  performance =
	    window.performance ||
	    window.msPerformance ||
	    window.webkitPerformance;
	}

	module.exports = performance || {};


/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 * @providesModule ReactServerRendering
	 */
	'use strict';

	var ReactElement = __webpack_require__(11);
	var ReactInstanceHandles = __webpack_require__(20);
	var ReactMarkupChecksum = __webpack_require__(77);
	var ReactServerRenderingTransaction =
	  __webpack_require__(155);

	var emptyObject = __webpack_require__(14);
	var instantiateReactComponent = __webpack_require__(83);
	var invariant = __webpack_require__(7);

	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup
	 */
	function renderToString(element) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactElement.isValidElement(element),
	    'renderToString(): You must pass a valid ReactElement.'
	  ) : invariant(ReactElement.isValidElement(element)));

	  var transaction;
	  try {
	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(false);

	    return transaction.perform(function() {
	      var componentInstance = instantiateReactComponent(element, null);
	      var markup =
	        componentInstance.mountComponent(id, transaction, emptyObject);
	      return ReactMarkupChecksum.addChecksumToMarkup(markup);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	  }
	}

	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup, without the extra React ID and checksum
	 * (for generating static pages)
	 */
	function renderToStaticMarkup(element) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactElement.isValidElement(element),
	    'renderToStaticMarkup(): You must pass a valid ReactElement.'
	  ) : invariant(ReactElement.isValidElement(element)));

	  var transaction;
	  try {
	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(true);

	    return transaction.perform(function() {
	      var componentInstance = instantiateReactComponent(element, null);
	      return componentInstance.mountComponent(id, transaction, emptyObject);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	  }
	}

	module.exports = {
	  renderToString: renderToString,
	  renderToStaticMarkup: renderToStaticMarkup
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactServerRenderingTransaction
	 * @typechecks
	 */

	'use strict';

	var PooledClass = __webpack_require__(9);
	var CallbackQueue = __webpack_require__(25);
	var ReactPutListenerQueue = __webpack_require__(135);
	var Transaction = __webpack_require__(34);

	var assign = __webpack_require__(13);
	var emptyFunction = __webpack_require__(16);

	/**
	 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
	 * during the performing of the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function() {
	    this.reactMountReady.reset();
	  },

	  close: emptyFunction
	};

	var PUT_LISTENER_QUEUEING = {
	  initialize: function() {
	    this.putListenerQueue.reset();
	  },

	  close: emptyFunction
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [
	  PUT_LISTENER_QUEUEING,
	  ON_DOM_READY_QUEUEING
	];

	/**
	 * @class ReactServerRenderingTransaction
	 * @param {boolean} renderToStaticMarkup
	 */
	function ReactServerRenderingTransaction(renderToStaticMarkup) {
	  this.reinitializeTransaction();
	  this.renderToStaticMarkup = renderToStaticMarkup;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.putListenerQueue = ReactPutListenerQueue.getPooled();
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array} Empty list of operation wrap proceedures.
	   */
	  getTransactionWrappers: function() {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function() {
	    return this.reactMountReady;
	  },

	  getPutListenerQueue: function() {
	    return this.putListenerQueue;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be resused.
	   */
	  destructor: function() {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;

	    ReactPutListenerQueue.release(this.putListenerQueue);
	    this.putListenerQueue = null;
	  }
	};


	assign(
	  ReactServerRenderingTransaction.prototype,
	  Transaction.Mixin,
	  Mixin
	);

	PooledClass.addPoolingTo(ReactServerRenderingTransaction);

	module.exports = ReactServerRenderingTransaction;


/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule onlyChild
	 */
	'use strict';

	var ReactElement = __webpack_require__(11);

	var invariant = __webpack_require__(7);

	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection. The current implementation of this
	 * function assumes that a single child gets passed without a wrapper, but the
	 * purpose of this helper function is to abstract away the particular structure
	 * of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactComponent} The first and only `ReactComponent` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactElement.isValidElement(children),
	    'onlyChild must be passed a children with exactly one child.'
	  ) : invariant(ReactElement.isValidElement(children)));
	  return children;
	}

	module.exports = onlyChild;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.DefaultRoute = __webpack_require__(158);
	exports.Link = __webpack_require__(171);
	exports.NotFoundRoute = __webpack_require__(172);
	exports.Redirect = __webpack_require__(173);
	exports.Route = __webpack_require__(170);
	exports.ActiveHandler = __webpack_require__(168);
	exports.RouteHandler = exports.ActiveHandler;

	exports.HashLocation = __webpack_require__(174);
	exports.HistoryLocation = __webpack_require__(177);
	exports.RefreshLocation = __webpack_require__(178);
	exports.StaticLocation = __webpack_require__(179);
	exports.TestLocation = __webpack_require__(180);

	exports.ImitateBrowserBehavior = __webpack_require__(181);
	exports.ScrollToTopBehavior = __webpack_require__(182);

	exports.History = __webpack_require__(176);
	exports.Navigation = __webpack_require__(183);
	exports.State = __webpack_require__(184);

	exports.createRoute = __webpack_require__(160).createRoute;
	exports.createDefaultRoute = __webpack_require__(160).createDefaultRoute;
	exports.createNotFoundRoute = __webpack_require__(160).createNotFoundRoute;
	exports.createRedirect = __webpack_require__(160).createRedirect;
	exports.createRoutesFromReactChildren = __webpack_require__(185);

	exports.create = __webpack_require__(186);
	exports.run = __webpack_require__(195);

/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

	var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

	var PropTypes = __webpack_require__(159);
	var RouteHandler = __webpack_require__(168);
	var Route = __webpack_require__(170);

	/**
	 * A <DefaultRoute> component is a special kind of <Route> that
	 * renders when its parent matches but none of its siblings do.
	 * Only one such route may be used at any given level in the
	 * route hierarchy.
	 */

	var DefaultRoute = (function (_Route) {
	  function DefaultRoute() {
	    _classCallCheck(this, DefaultRoute);

	    if (_Route != null) {
	      _Route.apply(this, arguments);
	    }
	  }

	  _inherits(DefaultRoute, _Route);

	  return DefaultRoute;
	})(Route);

	// TODO: Include these in the above class definition
	// once we can use ES7 property initializers.
	// https://github.com/babel/babel/issues/619

	DefaultRoute.propTypes = {
	  name: PropTypes.string,
	  path: PropTypes.falsy,
	  children: PropTypes.falsy,
	  handler: PropTypes.func.isRequired
	};

	DefaultRoute.defaultProps = {
	  handler: RouteHandler
	};

	module.exports = DefaultRoute;

/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var assign = __webpack_require__(13);
	var ReactPropTypes = __webpack_require__(1).PropTypes;
	var Route = __webpack_require__(160);

	var PropTypes = assign({}, ReactPropTypes, {

	  /**
	   * Indicates that a prop should be falsy.
	   */
	  falsy: function falsy(props, propName, componentName) {
	    if (props[propName]) {
	      return new Error('<' + componentName + '> should not have a "' + propName + '" prop');
	    }
	  },

	  /**
	   * Indicates that a prop should be a Route object.
	   */
	  route: ReactPropTypes.instanceOf(Route),

	  /**
	   * Indicates that a prop should be a Router object.
	   */
	  //router: ReactPropTypes.instanceOf(Router) // TODO
	  router: ReactPropTypes.func

	});

	module.exports = PropTypes;

/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var assign = __webpack_require__(13);
	var invariant = __webpack_require__(7);
	var warning = __webpack_require__(15);
	var PathUtils = __webpack_require__(161);

	var _currentRoute;

	var Route = (function () {
	  function Route(name, path, ignoreScrollBehavior, isDefault, isNotFound, onEnter, onLeave, handler) {
	    _classCallCheck(this, Route);

	    this.name = name;
	    this.path = path;
	    this.paramNames = PathUtils.extractParamNames(this.path);
	    this.ignoreScrollBehavior = !!ignoreScrollBehavior;
	    this.isDefault = !!isDefault;
	    this.isNotFound = !!isNotFound;
	    this.onEnter = onEnter;
	    this.onLeave = onLeave;
	    this.handler = handler;
	  }

	  _createClass(Route, [{
	    key: 'appendChild',

	    /**
	     * Appends the given route to this route's child routes.
	     */
	    value: function appendChild(route) {
	      invariant(route instanceof Route, 'route.appendChild must use a valid Route');

	      if (!this.childRoutes) this.childRoutes = [];

	      this.childRoutes.push(route);
	    }
	  }, {
	    key: 'toString',
	    value: function toString() {
	      var string = '<Route';

	      if (this.name) string += ' name="' + this.name + '"';

	      string += ' path="' + this.path + '">';

	      return string;
	    }
	  }], [{
	    key: 'createRoute',

	    /**
	     * Creates and returns a new route. Options may be a URL pathname string
	     * with placeholders for named params or an object with any of the following
	     * properties:
	     *
	     * - name                     The name of the route. This is used to lookup a
	     *                            route relative to its parent route and should be
	     *                            unique among all child routes of the same parent
	     * - path                     A URL pathname string with optional placeholders
	     *                            that specify the names of params to extract from
	     *                            the URL when the path matches. Defaults to `/${name}`
	     *                            when there is a name given, or the path of the parent
	     *                            route, or /
	     * - ignoreScrollBehavior     True to make this route (and all descendants) ignore
	     *                            the scroll behavior of the router
	     * - isDefault                True to make this route the default route among all
	     *                            its siblings
	     * - isNotFound               True to make this route the "not found" route among
	     *                            all its siblings
	     * - onEnter                  A transition hook that will be called when the
	     *                            router is going to enter this route
	     * - onLeave                  A transition hook that will be called when the
	     *                            router is going to leave this route
	     * - handler                  A React component that will be rendered when
	     *                            this route is active
	     * - parentRoute              The parent route to use for this route. This option
	     *                            is automatically supplied when creating routes inside
	     *                            the callback to another invocation of createRoute. You
	     *                            only ever need to use this when declaring routes
	     *                            independently of one another to manually piece together
	     *                            the route hierarchy
	     *
	     * The callback may be used to structure your route hierarchy. Any call to
	     * createRoute, createDefaultRoute, createNotFoundRoute, or createRedirect
	     * inside the callback automatically uses this route as its parent.
	     */
	    value: function createRoute(options, callback) {
	      options = options || {};

	      if (typeof options === 'string') options = { path: options };

	      var parentRoute = _currentRoute;

	      if (parentRoute) {
	        warning(options.parentRoute == null || options.parentRoute === parentRoute, 'You should not use parentRoute with createRoute inside another route\'s child callback; it is ignored');
	      } else {
	        parentRoute = options.parentRoute;
	      }

	      var name = options.name;
	      var path = options.path || name;

	      if (path && !(options.isDefault || options.isNotFound)) {
	        if (PathUtils.isAbsolute(path)) {
	          if (parentRoute) {
	            invariant(path === parentRoute.path || parentRoute.paramNames.length === 0, 'You cannot nest path "%s" inside "%s"; the parent requires URL parameters', path, parentRoute.path);
	          }
	        } else if (parentRoute) {
	          // Relative paths extend their parent.
	          path = PathUtils.join(parentRoute.path, path);
	        } else {
	          path = '/' + path;
	        }
	      } else {
	        path = parentRoute ? parentRoute.path : '/';
	      }

	      if (options.isNotFound && !/\*$/.test(path)) path += '*'; // Auto-append * to the path of not found routes.

	      var route = new Route(name, path, options.ignoreScrollBehavior, options.isDefault, options.isNotFound, options.onEnter, options.onLeave, options.handler);

	      if (parentRoute) {
	        if (route.isDefault) {
	          invariant(parentRoute.defaultRoute == null, '%s may not have more than one default route', parentRoute);

	          parentRoute.defaultRoute = route;
	        } else if (route.isNotFound) {
	          invariant(parentRoute.notFoundRoute == null, '%s may not have more than one not found route', parentRoute);

	          parentRoute.notFoundRoute = route;
	        }

	        parentRoute.appendChild(route);
	      }

	      // Any routes created in the callback
	      // use this route as their parent.
	      if (typeof callback === 'function') {
	        var currentRoute = _currentRoute;
	        _currentRoute = route;
	        callback.call(route, route);
	        _currentRoute = currentRoute;
	      }

	      return route;
	    }
	  }, {
	    key: 'createDefaultRoute',

	    /**
	     * Creates and returns a route that is rendered when its parent matches
	     * the current URL.
	     */
	    value: function createDefaultRoute(options) {
	      return Route.createRoute(assign({}, options, { isDefault: true }));
	    }
	  }, {
	    key: 'createNotFoundRoute',

	    /**
	     * Creates and returns a route that is rendered when its parent matches
	     * the current URL but none of its siblings do.
	     */
	    value: function createNotFoundRoute(options) {
	      return Route.createRoute(assign({}, options, { isNotFound: true }));
	    }
	  }, {
	    key: 'createRedirect',

	    /**
	     * Creates and returns a route that automatically redirects the transition
	     * to another route. In addition to the normal options to createRoute, this
	     * function accepts the following options:
	     *
	     * - from         An alias for the `path` option. Defaults to *
	     * - to           The path/route/route name to redirect to
	     * - params       The params to use in the redirect URL. Defaults
	     *                to using the current params
	     * - query        The query to use in the redirect URL. Defaults
	     *                to using the current query
	     */
	    value: function createRedirect(options) {
	      return Route.createRoute(assign({}, options, {
	        path: options.path || options.from || '*',
	        onEnter: function onEnter(transition, params, query) {
	          transition.redirect(options.to, options.params || params, options.query || query);
	        }
	      }));
	    }
	  }]);

	  return Route;
	})();

	module.exports = Route;

/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var invariant = __webpack_require__(7);
	var assign = __webpack_require__(162);
	var qs = __webpack_require__(163);

	var paramCompileMatcher = /:([a-zA-Z_$][a-zA-Z0-9_$]*)|[*.()\[\]\\+|{}^$]/g;
	var paramInjectMatcher = /:([a-zA-Z_$][a-zA-Z0-9_$?]*[?]?)|[*]/g;
	var paramInjectTrailingSlashMatcher = /\/\/\?|\/\?\/|\/\?/g;
	var queryMatcher = /\?(.*)$/;

	var _compiledPatterns = {};

	function compilePattern(pattern) {
	  if (!(pattern in _compiledPatterns)) {
	    var paramNames = [];
	    var source = pattern.replace(paramCompileMatcher, function (match, paramName) {
	      if (paramName) {
	        paramNames.push(paramName);
	        return '([^/?#]+)';
	      } else if (match === '*') {
	        paramNames.push('splat');
	        return '(.*?)';
	      } else {
	        return '\\' + match;
	      }
	    });

	    _compiledPatterns[pattern] = {
	      matcher: new RegExp('^' + source + '$', 'i'),
	      paramNames: paramNames
	    };
	  }

	  return _compiledPatterns[pattern];
	}

	var PathUtils = {

	  /**
	   * Returns true if the given path is absolute.
	   */
	  isAbsolute: function isAbsolute(path) {
	    return path.charAt(0) === '/';
	  },

	  /**
	   * Joins two URL paths together.
	   */
	  join: function join(a, b) {
	    return a.replace(/\/*$/, '/') + b;
	  },

	  /**
	   * Returns an array of the names of all parameters in the given pattern.
	   */
	  extractParamNames: function extractParamNames(pattern) {
	    return compilePattern(pattern).paramNames;
	  },

	  /**
	   * Extracts the portions of the given URL path that match the given pattern
	   * and returns an object of param name => value pairs. Returns null if the
	   * pattern does not match the given path.
	   */
	  extractParams: function extractParams(pattern, path) {
	    var _compilePattern = compilePattern(pattern);

	    var matcher = _compilePattern.matcher;
	    var paramNames = _compilePattern.paramNames;

	    var match = path.match(matcher);

	    if (!match) {
	      return null;
	    }var params = {};

	    paramNames.forEach(function (paramName, index) {
	      params[paramName] = match[index + 1];
	    });

	    return params;
	  },

	  /**
	   * Returns a version of the given route path with params interpolated. Throws
	   * if there is a dynamic segment of the route path for which there is no param.
	   */
	  injectParams: function injectParams(pattern, params) {
	    params = params || {};

	    var splatIndex = 0;

	    return pattern.replace(paramInjectMatcher, function (match, paramName) {
	      paramName = paramName || 'splat';

	      // If param is optional don't check for existence
	      if (paramName.slice(-1) === '?') {
	        paramName = paramName.slice(0, -1);

	        if (params[paramName] == null) return '';
	      } else {
	        invariant(params[paramName] != null, 'Missing "%s" parameter for path "%s"', paramName, pattern);
	      }

	      var segment;
	      if (paramName === 'splat' && Array.isArray(params[paramName])) {
	        segment = params[paramName][splatIndex++];

	        invariant(segment != null, 'Missing splat # %s for path "%s"', splatIndex, pattern);
	      } else {
	        segment = params[paramName];
	      }

	      return segment;
	    }).replace(paramInjectTrailingSlashMatcher, '/');
	  },

	  /**
	   * Returns an object that is the result of parsing any query string contained
	   * in the given path, null if the path contains no query string.
	   */
	  extractQuery: function extractQuery(path) {
	    var match = path.match(queryMatcher);
	    return match && qs.parse(match[1]);
	  },

	  /**
	   * Returns a version of the given path without the query string.
	   */
	  withoutQuery: function withoutQuery(path) {
	    return path.replace(queryMatcher, '');
	  },

	  /**
	   * Returns a version of the given path with the parameters in the given
	   * query merged into the query string.
	   */
	  withQuery: function withQuery(path, query) {
	    var existingQuery = PathUtils.extractQuery(path);

	    if (existingQuery) query = query ? assign(existingQuery, query) : existingQuery;

	    var queryString = qs.stringify(query, { arrayFormat: 'brackets' });

	    if (queryString) {
	      return PathUtils.withoutQuery(path) + '?' + queryString;
	    }return PathUtils.withoutQuery(path);
	  }

	};

	module.exports = PathUtils;

/***/ },
/* 162 */
/***/ function(module, exports) {

	'use strict';

	function ToObject(val) {
		if (val == null) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	module.exports = Object.assign || function (target, source) {
		var from;
		var keys;
		var to = ToObject(target);

		for (var s = 1; s < arguments.length; s++) {
			from = arguments[s];
			keys = Object.keys(Object(from));

			for (var i = 0; i < keys.length; i++) {
				to[keys[i]] = from[keys[i]];
			}
		}

		return to;
	};


/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(164);


/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	// Load modules

	var Stringify = __webpack_require__(165);
	var Parse = __webpack_require__(167);


	// Declare internals

	var internals = {};


	module.exports = {
	    stringify: Stringify,
	    parse: Parse
	};


/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	// Load modules

	var Utils = __webpack_require__(166);


	// Declare internals

	var internals = {
	    delimiter: '&',
	    arrayPrefixGenerators: {
	        brackets: function (prefix, key) {
	            return prefix + '[]';
	        },
	        indices: function (prefix, key) {
	            return prefix + '[' + key + ']';
	        },
	        repeat: function (prefix, key) {
	            return prefix;
	        }
	    }
	};


	internals.stringify = function (obj, prefix, generateArrayPrefix) {

	    if (Utils.isBuffer(obj)) {
	        obj = obj.toString();
	    }
	    else if (obj instanceof Date) {
	        obj = obj.toISOString();
	    }
	    else if (obj === null) {
	        obj = '';
	    }

	    if (typeof obj === 'string' ||
	        typeof obj === 'number' ||
	        typeof obj === 'boolean') {

	        return [encodeURIComponent(prefix) + '=' + encodeURIComponent(obj)];
	    }

	    var values = [];

	    if (typeof obj === 'undefined') {
	        return values;
	    }

	    var objKeys = Object.keys(obj);
	    for (var i = 0, il = objKeys.length; i < il; ++i) {
	        var key = objKeys[i];
	        if (Array.isArray(obj)) {
	            values = values.concat(internals.stringify(obj[key], generateArrayPrefix(prefix, key), generateArrayPrefix));
	        }
	        else {
	            values = values.concat(internals.stringify(obj[key], prefix + '[' + key + ']', generateArrayPrefix));
	        }
	    }

	    return values;
	};


	module.exports = function (obj, options) {

	    options = options || {};
	    var delimiter = typeof options.delimiter === 'undefined' ? internals.delimiter : options.delimiter;

	    var keys = [];

	    if (typeof obj !== 'object' ||
	        obj === null) {

	        return '';
	    }

	    var arrayFormat;
	    if (options.arrayFormat in internals.arrayPrefixGenerators) {
	        arrayFormat = options.arrayFormat;
	    }
	    else if ('indices' in options) {
	        arrayFormat = options.indices ? 'indices' : 'repeat';
	    }
	    else {
	        arrayFormat = 'indices';
	    }

	    var generateArrayPrefix = internals.arrayPrefixGenerators[arrayFormat];

	    var objKeys = Object.keys(obj);
	    for (var i = 0, il = objKeys.length; i < il; ++i) {
	        var key = objKeys[i];
	        keys = keys.concat(internals.stringify(obj[key], key, generateArrayPrefix));
	    }

	    return keys.join(delimiter);
	};


/***/ },
/* 166 */
/***/ function(module, exports) {

	// Load modules


	// Declare internals

	var internals = {};


	exports.arrayToObject = function (source) {

	    var obj = {};
	    for (var i = 0, il = source.length; i < il; ++i) {
	        if (typeof source[i] !== 'undefined') {

	            obj[i] = source[i];
	        }
	    }

	    return obj;
	};


	exports.merge = function (target, source) {

	    if (!source) {
	        return target;
	    }

	    if (typeof source !== 'object') {
	        if (Array.isArray(target)) {
	            target.push(source);
	        }
	        else {
	            target[source] = true;
	        }

	        return target;
	    }

	    if (typeof target !== 'object') {
	        target = [target].concat(source);
	        return target;
	    }

	    if (Array.isArray(target) &&
	        !Array.isArray(source)) {

	        target = exports.arrayToObject(target);
	    }

	    var keys = Object.keys(source);
	    for (var k = 0, kl = keys.length; k < kl; ++k) {
	        var key = keys[k];
	        var value = source[key];

	        if (!target[key]) {
	            target[key] = value;
	        }
	        else {
	            target[key] = exports.merge(target[key], value);
	        }
	    }

	    return target;
	};


	exports.decode = function (str) {

	    try {
	        return decodeURIComponent(str.replace(/\+/g, ' '));
	    } catch (e) {
	        return str;
	    }
	};


	exports.compact = function (obj, refs) {

	    if (typeof obj !== 'object' ||
	        obj === null) {

	        return obj;
	    }

	    refs = refs || [];
	    var lookup = refs.indexOf(obj);
	    if (lookup !== -1) {
	        return refs[lookup];
	    }

	    refs.push(obj);

	    if (Array.isArray(obj)) {
	        var compacted = [];

	        for (var i = 0, il = obj.length; i < il; ++i) {
	            if (typeof obj[i] !== 'undefined') {
	                compacted.push(obj[i]);
	            }
	        }

	        return compacted;
	    }

	    var keys = Object.keys(obj);
	    for (i = 0, il = keys.length; i < il; ++i) {
	        var key = keys[i];
	        obj[key] = exports.compact(obj[key], refs);
	    }

	    return obj;
	};


	exports.isRegExp = function (obj) {
	    return Object.prototype.toString.call(obj) === '[object RegExp]';
	};


	exports.isBuffer = function (obj) {

	    if (obj === null ||
	        typeof obj === 'undefined') {

	        return false;
	    }

	    return !!(obj.constructor &&
	        obj.constructor.isBuffer &&
	        obj.constructor.isBuffer(obj));
	};


/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	// Load modules

	var Utils = __webpack_require__(166);


	// Declare internals

	var internals = {
	    delimiter: '&',
	    depth: 5,
	    arrayLimit: 20,
	    parameterLimit: 1000
	};


	internals.parseValues = function (str, options) {

	    var obj = {};
	    var parts = str.split(options.delimiter, options.parameterLimit === Infinity ? undefined : options.parameterLimit);

	    for (var i = 0, il = parts.length; i < il; ++i) {
	        var part = parts[i];
	        var pos = part.indexOf(']=') === -1 ? part.indexOf('=') : part.indexOf(']=') + 1;

	        if (pos === -1) {
	            obj[Utils.decode(part)] = '';
	        }
	        else {
	            var key = Utils.decode(part.slice(0, pos));
	            var val = Utils.decode(part.slice(pos + 1));

	            if (Object.prototype.hasOwnProperty(key)) {
	                continue;
	            }

	            if (!obj.hasOwnProperty(key)) {
	                obj[key] = val;
	            }
	            else {
	                obj[key] = [].concat(obj[key]).concat(val);
	            }
	        }
	    }

	    return obj;
	};


	internals.parseObject = function (chain, val, options) {

	    if (!chain.length) {
	        return val;
	    }

	    var root = chain.shift();

	    var obj = {};
	    if (root === '[]') {
	        obj = [];
	        obj = obj.concat(internals.parseObject(chain, val, options));
	    }
	    else {
	        var cleanRoot = root[0] === '[' && root[root.length - 1] === ']' ? root.slice(1, root.length - 1) : root;
	        var index = parseInt(cleanRoot, 10);
	        var indexString = '' + index;
	        if (!isNaN(index) &&
	            root !== cleanRoot &&
	            indexString === cleanRoot &&
	            index >= 0 &&
	            index <= options.arrayLimit) {

	            obj = [];
	            obj[index] = internals.parseObject(chain, val, options);
	        }
	        else {
	            obj[cleanRoot] = internals.parseObject(chain, val, options);
	        }
	    }

	    return obj;
	};


	internals.parseKeys = function (key, val, options) {

	    if (!key) {
	        return;
	    }

	    // The regex chunks

	    var parent = /^([^\[\]]*)/;
	    var child = /(\[[^\[\]]*\])/g;

	    // Get the parent

	    var segment = parent.exec(key);

	    // Don't allow them to overwrite object prototype properties

	    if (Object.prototype.hasOwnProperty(segment[1])) {
	        return;
	    }

	    // Stash the parent if it exists

	    var keys = [];
	    if (segment[1]) {
	        keys.push(segment[1]);
	    }

	    // Loop through children appending to the array until we hit depth

	    var i = 0;
	    while ((segment = child.exec(key)) !== null && i < options.depth) {

	        ++i;
	        if (!Object.prototype.hasOwnProperty(segment[1].replace(/\[|\]/g, ''))) {
	            keys.push(segment[1]);
	        }
	    }

	    // If there's a remainder, just add whatever is left

	    if (segment) {
	        keys.push('[' + key.slice(segment.index) + ']');
	    }

	    return internals.parseObject(keys, val, options);
	};


	module.exports = function (str, options) {

	    if (str === '' ||
	        str === null ||
	        typeof str === 'undefined') {

	        return {};
	    }

	    options = options || {};
	    options.delimiter = typeof options.delimiter === 'string' || Utils.isRegExp(options.delimiter) ? options.delimiter : internals.delimiter;
	    options.depth = typeof options.depth === 'number' ? options.depth : internals.depth;
	    options.arrayLimit = typeof options.arrayLimit === 'number' ? options.arrayLimit : internals.arrayLimit;
	    options.parameterLimit = typeof options.parameterLimit === 'number' ? options.parameterLimit : internals.parameterLimit;

	    var tempObj = typeof str === 'string' ? internals.parseValues(str, options) : str;
	    var obj = {};

	    // Iterate over the keys and setup the new object

	    var keys = Object.keys(tempObj);
	    for (var i = 0, il = keys.length; i < il; ++i) {
	        var key = keys[i];
	        var newObj = internals.parseKeys(key, tempObj[key], options);
	        obj = Utils.merge(obj, newObj);
	    }

	    return Utils.compact(obj);
	};


/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

	var React = __webpack_require__(1);
	var ContextWrapper = __webpack_require__(169);
	var assign = __webpack_require__(13);
	var PropTypes = __webpack_require__(159);

	var REF_NAME = '__routeHandler__';

	/**
	 * A <RouteHandler> component renders the active child route handler
	 * when routes are nested.
	 */

	var RouteHandler = (function (_React$Component) {
	  function RouteHandler() {
	    _classCallCheck(this, RouteHandler);

	    if (_React$Component != null) {
	      _React$Component.apply(this, arguments);
	    }
	  }

	  _inherits(RouteHandler, _React$Component);

	  _createClass(RouteHandler, [{
	    key: 'getChildContext',
	    value: function getChildContext() {
	      return {
	        routeDepth: this.context.routeDepth + 1
	      };
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this._updateRouteComponent(this.refs[REF_NAME]);
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate() {
	      this._updateRouteComponent(this.refs[REF_NAME]);
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this._updateRouteComponent(null);
	    }
	  }, {
	    key: '_updateRouteComponent',
	    value: function _updateRouteComponent(component) {
	      this.context.router.setRouteComponentAtDepth(this.getRouteDepth(), component);
	    }
	  }, {
	    key: 'getRouteDepth',
	    value: function getRouteDepth() {
	      return this.context.routeDepth;
	    }
	  }, {
	    key: 'createChildRouteHandler',
	    value: function createChildRouteHandler(props) {
	      var route = this.context.router.getRouteAtDepth(this.getRouteDepth());

	      if (route == null) {
	        return null;
	      }var childProps = assign({}, props || this.props, {
	        ref: REF_NAME,
	        params: this.context.router.getCurrentParams(),
	        query: this.context.router.getCurrentQuery()
	      });

	      return React.createElement(route.handler, childProps);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var handler = this.createChildRouteHandler();
	      // <script/> for things like <CSSTransitionGroup/> that don't like null
	      return handler ? React.createElement(
	        ContextWrapper,
	        null,
	        handler
	      ) : React.createElement('script', null);
	    }
	  }]);

	  return RouteHandler;
	})(React.Component);

	// TODO: Include these in the above class definition
	// once we can use ES7 property initializers.
	// https://github.com/babel/babel/issues/619

	RouteHandler.contextTypes = {
	  routeDepth: PropTypes.number.isRequired,
	  router: PropTypes.router.isRequired
	};

	RouteHandler.childContextTypes = {
	  routeDepth: PropTypes.number.isRequired
	};

	module.exports = RouteHandler;

/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

	/**
	 * This component is necessary to get around a context warning
	 * present in React 0.13.0. It sovles this by providing a separation
	 * between the "owner" and "parent" contexts.
	 */

	var React = __webpack_require__(1);

	var ContextWrapper = (function (_React$Component) {
	  function ContextWrapper() {
	    _classCallCheck(this, ContextWrapper);

	    if (_React$Component != null) {
	      _React$Component.apply(this, arguments);
	    }
	  }

	  _inherits(ContextWrapper, _React$Component);

	  _createClass(ContextWrapper, [{
	    key: 'render',
	    value: function render() {
	      return this.props.children;
	    }
	  }]);

	  return ContextWrapper;
	})(React.Component);

	module.exports = ContextWrapper;

/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

	var React = __webpack_require__(1);
	var invariant = __webpack_require__(7);
	var PropTypes = __webpack_require__(159);
	var RouteHandler = __webpack_require__(168);

	/**
	 * <Route> components specify components that are rendered to the page when the
	 * URL matches a given pattern.
	 *
	 * Routes are arranged in a nested tree structure. When a new URL is requested,
	 * the tree is searched depth-first to find a route whose path matches the URL.
	 * When one is found, all routes in the tree that lead to it are considered
	 * "active" and their components are rendered into the DOM, nested in the same
	 * order as they are in the tree.
	 *
	 * The preferred way to configure a router is using JSX. The XML-like syntax is
	 * a great way to visualize how routes are laid out in an application.
	 *
	 *   var routes = [
	 *     <Route handler={App}>
	 *       <Route name="login" handler={Login}/>
	 *       <Route name="logout" handler={Logout}/>
	 *       <Route name="about" handler={About}/>
	 *     </Route>
	 *   ];
	 *   
	 *   Router.run(routes, function (Handler) {
	 *     React.render(<Handler/>, document.body);
	 *   });
	 *
	 * Handlers for Route components that contain children can render their active
	 * child route using a <RouteHandler> element.
	 *
	 *   var App = React.createClass({
	 *     render: function () {
	 *       return (
	 *         <div class="application">
	 *           <RouteHandler/>
	 *         </div>
	 *       );
	 *     }
	 *   });
	 *
	 * If no handler is provided for the route, it will render a matched child route.
	 */

	var Route = (function (_React$Component) {
	  function Route() {
	    _classCallCheck(this, Route);

	    if (_React$Component != null) {
	      _React$Component.apply(this, arguments);
	    }
	  }

	  _inherits(Route, _React$Component);

	  _createClass(Route, [{
	    key: 'render',
	    value: function render() {
	      invariant(false, '%s elements are for router configuration only and should not be rendered', this.constructor.name);
	    }
	  }]);

	  return Route;
	})(React.Component);

	// TODO: Include these in the above class definition
	// once we can use ES7 property initializers.
	// https://github.com/babel/babel/issues/619

	Route.propTypes = {
	  name: PropTypes.string,
	  path: PropTypes.string,
	  handler: PropTypes.func,
	  ignoreScrollBehavior: PropTypes.bool
	};

	Route.defaultProps = {
	  handler: RouteHandler
	};

	module.exports = Route;

/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

	var React = __webpack_require__(1);
	var assign = __webpack_require__(13);
	var PropTypes = __webpack_require__(159);

	function isLeftClickEvent(event) {
	  return event.button === 0;
	}

	function isModifiedEvent(event) {
	  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
	}

	/**
	 * <Link> components are used to create an <a> element that links to a route.
	 * When that route is active, the link gets an "active" class name (or the
	 * value of its `activeClassName` prop).
	 *
	 * For example, assuming you have the following route:
	 *
	 *   <Route name="showPost" path="/posts/:postID" handler={Post}/>
	 *
	 * You could use the following component to link to that route:
	 *
	 *   <Link to="showPost" params={{ postID: "123" }} />
	 *
	 * In addition to params, links may pass along query string parameters
	 * using the `query` prop.
	 *
	 *   <Link to="showPost" params={{ postID: "123" }} query={{ show:true }}/>
	 */

	var Link = (function (_React$Component) {
	  function Link() {
	    _classCallCheck(this, Link);

	    if (_React$Component != null) {
	      _React$Component.apply(this, arguments);
	    }
	  }

	  _inherits(Link, _React$Component);

	  _createClass(Link, [{
	    key: 'handleClick',
	    value: function handleClick(event) {
	      var allowTransition = true;
	      var clickResult;

	      if (this.props.onClick) clickResult = this.props.onClick(event);

	      if (isModifiedEvent(event) || !isLeftClickEvent(event)) {
	        return;
	      }if (clickResult === false || event.defaultPrevented === true) allowTransition = false;

	      event.preventDefault();

	      if (allowTransition) this.context.router.transitionTo(this.props.to, this.props.params, this.props.query);
	    }
	  }, {
	    key: 'getHref',

	    /**
	     * Returns the value of the "href" attribute to use on the DOM element.
	     */
	    value: function getHref() {
	      return this.context.router.makeHref(this.props.to, this.props.params, this.props.query);
	    }
	  }, {
	    key: 'getClassName',

	    /**
	     * Returns the value of the "class" attribute to use on the DOM element, which contains
	     * the value of the activeClassName property when this <Link> is active.
	     */
	    value: function getClassName() {
	      var className = this.props.className;

	      if (this.getActiveState()) className += ' ' + this.props.activeClassName;

	      return className;
	    }
	  }, {
	    key: 'getActiveState',
	    value: function getActiveState() {
	      return this.context.router.isActive(this.props.to, this.props.params, this.props.query);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var props = assign({}, this.props, {
	        href: this.getHref(),
	        className: this.getClassName(),
	        onClick: this.handleClick.bind(this)
	      });

	      if (props.activeStyle && this.getActiveState()) props.style = props.activeStyle;

	      return React.DOM.a(props, this.props.children);
	    }
	  }]);

	  return Link;
	})(React.Component);

	// TODO: Include these in the above class definition
	// once we can use ES7 property initializers.
	// https://github.com/babel/babel/issues/619

	Link.contextTypes = {
	  router: PropTypes.router.isRequired
	};

	Link.propTypes = {
	  activeClassName: PropTypes.string.isRequired,
	  to: PropTypes.oneOfType([PropTypes.string, PropTypes.route]).isRequired,
	  params: PropTypes.object,
	  query: PropTypes.object,
	  activeStyle: PropTypes.object,
	  onClick: PropTypes.func
	};

	Link.defaultProps = {
	  activeClassName: 'active',
	  className: ''
	};

	module.exports = Link;

/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

	var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

	var PropTypes = __webpack_require__(159);
	var RouteHandler = __webpack_require__(168);
	var Route = __webpack_require__(170);

	/**
	 * A <NotFoundRoute> is a special kind of <Route> that
	 * renders when the beginning of its parent's path matches
	 * but none of its siblings do, including any <DefaultRoute>.
	 * Only one such route may be used at any given level in the
	 * route hierarchy.
	 */

	var NotFoundRoute = (function (_Route) {
	  function NotFoundRoute() {
	    _classCallCheck(this, NotFoundRoute);

	    if (_Route != null) {
	      _Route.apply(this, arguments);
	    }
	  }

	  _inherits(NotFoundRoute, _Route);

	  return NotFoundRoute;
	})(Route);

	// TODO: Include these in the above class definition
	// once we can use ES7 property initializers.
	// https://github.com/babel/babel/issues/619

	NotFoundRoute.propTypes = {
	  name: PropTypes.string,
	  path: PropTypes.falsy,
	  children: PropTypes.falsy,
	  handler: PropTypes.func.isRequired
	};

	NotFoundRoute.defaultProps = {
	  handler: RouteHandler
	};

	module.exports = NotFoundRoute;

/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

	var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

	var PropTypes = __webpack_require__(159);
	var Route = __webpack_require__(170);

	/**
	 * A <Redirect> component is a special kind of <Route> that always
	 * redirects to another route when it matches.
	 */

	var Redirect = (function (_Route) {
	  function Redirect() {
	    _classCallCheck(this, Redirect);

	    if (_Route != null) {
	      _Route.apply(this, arguments);
	    }
	  }

	  _inherits(Redirect, _Route);

	  return Redirect;
	})(Route);

	// TODO: Include these in the above class definition
	// once we can use ES7 property initializers.
	// https://github.com/babel/babel/issues/619

	Redirect.propTypes = {
	  path: PropTypes.string,
	  from: PropTypes.string, // Alias for path.
	  to: PropTypes.string,
	  handler: PropTypes.falsy
	};

	// Redirects should not have a default handler
	Redirect.defaultProps = {};

	module.exports = Redirect;

/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var LocationActions = __webpack_require__(175);
	var History = __webpack_require__(176);

	var _listeners = [];
	var _isListening = false;
	var _actionType;

	function notifyChange(type) {
	  if (type === LocationActions.PUSH) History.length += 1;

	  var change = {
	    path: HashLocation.getCurrentPath(),
	    type: type
	  };

	  _listeners.forEach(function (listener) {
	    listener.call(HashLocation, change);
	  });
	}

	function ensureSlash() {
	  var path = HashLocation.getCurrentPath();

	  if (path.charAt(0) === '/') {
	    return true;
	  }HashLocation.replace('/' + path);

	  return false;
	}

	function onHashChange() {
	  if (ensureSlash()) {
	    // If we don't have an _actionType then all we know is the hash
	    // changed. It was probably caused by the user clicking the Back
	    // button, but may have also been the Forward button or manual
	    // manipulation. So just guess 'pop'.
	    var curActionType = _actionType;
	    _actionType = null;
	    notifyChange(curActionType || LocationActions.POP);
	  }
	}

	/**
	 * A Location that uses `window.location.hash`.
	 */
	var HashLocation = {

	  addChangeListener: function addChangeListener(listener) {
	    _listeners.push(listener);

	    // Do this BEFORE listening for hashchange.
	    ensureSlash();

	    if (!_isListening) {
	      if (window.addEventListener) {
	        window.addEventListener('hashchange', onHashChange, false);
	      } else {
	        window.attachEvent('onhashchange', onHashChange);
	      }

	      _isListening = true;
	    }
	  },

	  removeChangeListener: function removeChangeListener(listener) {
	    _listeners = _listeners.filter(function (l) {
	      return l !== listener;
	    });

	    if (_listeners.length === 0) {
	      if (window.removeEventListener) {
	        window.removeEventListener('hashchange', onHashChange, false);
	      } else {
	        window.removeEvent('onhashchange', onHashChange);
	      }

	      _isListening = false;
	    }
	  },

	  push: function push(path) {
	    _actionType = LocationActions.PUSH;
	    window.location.hash = path;
	  },

	  replace: function replace(path) {
	    _actionType = LocationActions.REPLACE;
	    window.location.replace(window.location.pathname + window.location.search + '#' + path);
	  },

	  pop: function pop() {
	    _actionType = LocationActions.POP;
	    History.back();
	  },

	  getCurrentPath: function getCurrentPath() {
	    return decodeURI(
	    // We can't use window.location.hash here because it's not
	    // consistent across browsers - Firefox will pre-decode it!
	    window.location.href.split('#')[1] || '');
	  },

	  toString: function toString() {
	    return '<HashLocation>';
	  }

	};

	module.exports = HashLocation;

/***/ },
/* 175 */
/***/ function(module, exports) {

	/**
	 * Actions that modify the URL.
	 */
	'use strict';

	var LocationActions = {

	  /**
	   * Indicates a new location is being pushed to the history stack.
	   */
	  PUSH: 'push',

	  /**
	   * Indicates the current location should be replaced.
	   */
	  REPLACE: 'replace',

	  /**
	   * Indicates the most recent entry should be removed from the history stack.
	   */
	  POP: 'pop'

	};

	module.exports = LocationActions;

/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var invariant = __webpack_require__(7);
	var canUseDOM = __webpack_require__(51).canUseDOM;

	var History = {

	  /**
	   * The current number of entries in the history.
	   *
	   * Note: This property is read-only.
	   */
	  length: 1,

	  /**
	   * Sends the browser back one entry in the history.
	   */
	  back: function back() {
	    invariant(canUseDOM, 'Cannot use History.back without a DOM');

	    // Do this first so that History.length will
	    // be accurate in location change listeners.
	    History.length -= 1;

	    window.history.back();
	  }

	};

	module.exports = History;

/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var LocationActions = __webpack_require__(175);
	var History = __webpack_require__(176);

	var _listeners = [];
	var _isListening = false;

	function notifyChange(type) {
	  var change = {
	    path: HistoryLocation.getCurrentPath(),
	    type: type
	  };

	  _listeners.forEach(function (listener) {
	    listener.call(HistoryLocation, change);
	  });
	}

	function onPopState(event) {
	  if (event.state === undefined) {
	    return;
	  } // Ignore extraneous popstate events in WebKit.

	  notifyChange(LocationActions.POP);
	}

	/**
	 * A Location that uses HTML5 history.
	 */
	var HistoryLocation = {

	  addChangeListener: function addChangeListener(listener) {
	    _listeners.push(listener);

	    if (!_isListening) {
	      if (window.addEventListener) {
	        window.addEventListener('popstate', onPopState, false);
	      } else {
	        window.attachEvent('onpopstate', onPopState);
	      }

	      _isListening = true;
	    }
	  },

	  removeChangeListener: function removeChangeListener(listener) {
	    _listeners = _listeners.filter(function (l) {
	      return l !== listener;
	    });

	    if (_listeners.length === 0) {
	      if (window.addEventListener) {
	        window.removeEventListener('popstate', onPopState, false);
	      } else {
	        window.removeEvent('onpopstate', onPopState);
	      }

	      _isListening = false;
	    }
	  },

	  push: function push(path) {
	    window.history.pushState({ path: path }, '', path);
	    History.length += 1;
	    notifyChange(LocationActions.PUSH);
	  },

	  replace: function replace(path) {
	    window.history.replaceState({ path: path }, '', path);
	    notifyChange(LocationActions.REPLACE);
	  },

	  pop: History.back,

	  getCurrentPath: function getCurrentPath() {
	    return decodeURI(window.location.pathname + window.location.search);
	  },

	  toString: function toString() {
	    return '<HistoryLocation>';
	  }

	};

	module.exports = HistoryLocation;

/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var HistoryLocation = __webpack_require__(177);
	var History = __webpack_require__(176);

	/**
	 * A Location that uses full page refreshes. This is used as
	 * the fallback for HistoryLocation in browsers that do not
	 * support the HTML5 history API.
	 */
	var RefreshLocation = {

	  push: function push(path) {
	    window.location = path;
	  },

	  replace: function replace(path) {
	    window.location.replace(path);
	  },

	  pop: History.back,

	  getCurrentPath: HistoryLocation.getCurrentPath,

	  toString: function toString() {
	    return '<RefreshLocation>';
	  }

	};

	module.exports = RefreshLocation;

/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var invariant = __webpack_require__(7);

	function throwCannotModify() {
	  invariant(false, 'You cannot modify a static location');
	}

	/**
	 * A location that only ever contains a single path. Useful in
	 * stateless environments like servers where there is no path history,
	 * only the path that was used in the request.
	 */

	var StaticLocation = (function () {
	  function StaticLocation(path) {
	    _classCallCheck(this, StaticLocation);

	    this.path = path;
	  }

	  _createClass(StaticLocation, [{
	    key: 'getCurrentPath',
	    value: function getCurrentPath() {
	      return this.path;
	    }
	  }, {
	    key: 'toString',
	    value: function toString() {
	      return '<StaticLocation path="' + this.path + '">';
	    }
	  }]);

	  return StaticLocation;
	})();

	// TODO: Include these in the above class definition
	// once we can use ES7 property initializers.
	// https://github.com/babel/babel/issues/619

	StaticLocation.prototype.push = throwCannotModify;
	StaticLocation.prototype.replace = throwCannotModify;
	StaticLocation.prototype.pop = throwCannotModify;

	module.exports = StaticLocation;

/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var invariant = __webpack_require__(7);
	var LocationActions = __webpack_require__(175);
	var History = __webpack_require__(176);

	/**
	 * A location that is convenient for testing and does not require a DOM.
	 */

	var TestLocation = (function () {
	  function TestLocation(history) {
	    _classCallCheck(this, TestLocation);

	    this.history = history || [];
	    this.listeners = [];
	    this._updateHistoryLength();
	  }

	  _createClass(TestLocation, [{
	    key: 'needsDOM',
	    get: function () {
	      return false;
	    }
	  }, {
	    key: '_updateHistoryLength',
	    value: function _updateHistoryLength() {
	      History.length = this.history.length;
	    }
	  }, {
	    key: '_notifyChange',
	    value: function _notifyChange(type) {
	      var change = {
	        path: this.getCurrentPath(),
	        type: type
	      };

	      for (var i = 0, len = this.listeners.length; i < len; ++i) this.listeners[i].call(this, change);
	    }
	  }, {
	    key: 'addChangeListener',
	    value: function addChangeListener(listener) {
	      this.listeners.push(listener);
	    }
	  }, {
	    key: 'removeChangeListener',
	    value: function removeChangeListener(listener) {
	      this.listeners = this.listeners.filter(function (l) {
	        return l !== listener;
	      });
	    }
	  }, {
	    key: 'push',
	    value: function push(path) {
	      this.history.push(path);
	      this._updateHistoryLength();
	      this._notifyChange(LocationActions.PUSH);
	    }
	  }, {
	    key: 'replace',
	    value: function replace(path) {
	      invariant(this.history.length, 'You cannot replace the current path with no history');

	      this.history[this.history.length - 1] = path;

	      this._notifyChange(LocationActions.REPLACE);
	    }
	  }, {
	    key: 'pop',
	    value: function pop() {
	      this.history.pop();
	      this._updateHistoryLength();
	      this._notifyChange(LocationActions.POP);
	    }
	  }, {
	    key: 'getCurrentPath',
	    value: function getCurrentPath() {
	      return this.history[this.history.length - 1];
	    }
	  }, {
	    key: 'toString',
	    value: function toString() {
	      return '<TestLocation>';
	    }
	  }]);

	  return TestLocation;
	})();

	module.exports = TestLocation;

/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var LocationActions = __webpack_require__(175);

	/**
	 * A scroll behavior that attempts to imitate the default behavior
	 * of modern browsers.
	 */
	var ImitateBrowserBehavior = {

	  updateScrollPosition: function updateScrollPosition(position, actionType) {
	    switch (actionType) {
	      case LocationActions.PUSH:
	      case LocationActions.REPLACE:
	        window.scrollTo(0, 0);
	        break;
	      case LocationActions.POP:
	        if (position) {
	          window.scrollTo(position.x, position.y);
	        } else {
	          window.scrollTo(0, 0);
	        }
	        break;
	    }
	  }

	};

	module.exports = ImitateBrowserBehavior;

/***/ },
/* 182 */
/***/ function(module, exports) {

	/**
	 * A scroll behavior that always scrolls to the top of the page
	 * after a transition.
	 */
	"use strict";

	var ScrollToTopBehavior = {

	  updateScrollPosition: function updateScrollPosition() {
	    window.scrollTo(0, 0);
	  }

	};

	module.exports = ScrollToTopBehavior;

/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var PropTypes = __webpack_require__(159);

	/**
	 * A mixin for components that modify the URL.
	 *
	 * Example:
	 *
	 *   var MyLink = React.createClass({
	 *     mixins: [ Router.Navigation ],
	 *     handleClick(event) {
	 *       event.preventDefault();
	 *       this.transitionTo('aRoute', { the: 'params' }, { the: 'query' });
	 *     },
	 *     render() {
	 *       return (
	 *         <a onClick={this.handleClick}>Click me!</a>
	 *       );
	 *     }
	 *   });
	 */
	var Navigation = {

	  contextTypes: {
	    router: PropTypes.router.isRequired
	  },

	  /**
	   * Returns an absolute URL path created from the given route
	   * name, URL parameters, and query values.
	   */
	  makePath: function makePath(to, params, query) {
	    return this.context.router.makePath(to, params, query);
	  },

	  /**
	   * Returns a string that may safely be used as the href of a
	   * link to the route with the given name.
	   */
	  makeHref: function makeHref(to, params, query) {
	    return this.context.router.makeHref(to, params, query);
	  },

	  /**
	   * Transitions to the URL specified in the arguments by pushing
	   * a new URL onto the history stack.
	   */
	  transitionTo: function transitionTo(to, params, query) {
	    this.context.router.transitionTo(to, params, query);
	  },

	  /**
	   * Transitions to the URL specified in the arguments by replacing
	   * the current URL in the history stack.
	   */
	  replaceWith: function replaceWith(to, params, query) {
	    this.context.router.replaceWith(to, params, query);
	  },

	  /**
	   * Transitions to the previous URL.
	   */
	  goBack: function goBack() {
	    return this.context.router.goBack();
	  }

	};

	module.exports = Navigation;

/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var PropTypes = __webpack_require__(159);

	/**
	 * A mixin for components that need to know the path, routes, URL
	 * params and query that are currently active.
	 *
	 * Example:
	 *
	 *   var AboutLink = React.createClass({
	 *     mixins: [ Router.State ],
	 *     render() {
	 *       var className = this.props.className;
	 *
	 *       if (this.isActive('about'))
	 *         className += ' is-active';
	 *
	 *       return React.DOM.a({ className: className }, this.props.children);
	 *     }
	 *   });
	 */
	var State = {

	  contextTypes: {
	    router: PropTypes.router.isRequired
	  },

	  /**
	   * Returns the current URL path.
	   */
	  getPath: function getPath() {
	    return this.context.router.getCurrentPath();
	  },

	  /**
	   * Returns the current URL path without the query string.
	   */
	  getPathname: function getPathname() {
	    return this.context.router.getCurrentPathname();
	  },

	  /**
	   * Returns an object of the URL params that are currently active.
	   */
	  getParams: function getParams() {
	    return this.context.router.getCurrentParams();
	  },

	  /**
	   * Returns an object of the query params that are currently active.
	   */
	  getQuery: function getQuery() {
	    return this.context.router.getCurrentQuery();
	  },

	  /**
	   * Returns an array of the routes that are currently active.
	   */
	  getRoutes: function getRoutes() {
	    return this.context.router.getCurrentRoutes();
	  },

	  /**
	   * A helper method to determine if a given route, params, and query
	   * are active.
	   */
	  isActive: function isActive(to, params, query) {
	    return this.context.router.isActive(to, params, query);
	  }

	};

	module.exports = State;

/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	/* jshint -W084 */
	'use strict';

	var React = __webpack_require__(1);
	var assign = __webpack_require__(13);
	var warning = __webpack_require__(15);
	var DefaultRoute = __webpack_require__(158);
	var NotFoundRoute = __webpack_require__(172);
	var Redirect = __webpack_require__(173);
	var Route = __webpack_require__(160);

	function checkPropTypes(componentName, propTypes, props) {
	  componentName = componentName || 'UnknownComponent';

	  for (var propName in propTypes) {
	    if (propTypes.hasOwnProperty(propName)) {
	      var error = propTypes[propName](props, propName, componentName);

	      if (error instanceof Error) warning(false, error.message);
	    }
	  }
	}

	function createRouteOptions(props) {
	  var options = assign({}, props);
	  var handler = options.handler;

	  if (handler) {
	    options.onEnter = handler.willTransitionTo;
	    options.onLeave = handler.willTransitionFrom;
	  }

	  return options;
	}

	function createRouteFromReactElement(element) {
	  if (!React.isValidElement(element)) {
	    return;
	  }var type = element.type;
	  var props = assign({}, type.defaultProps, element.props);

	  if (type.propTypes) checkPropTypes(type.displayName, type.propTypes, props);

	  if (type === DefaultRoute) {
	    return Route.createDefaultRoute(createRouteOptions(props));
	  }if (type === NotFoundRoute) {
	    return Route.createNotFoundRoute(createRouteOptions(props));
	  }if (type === Redirect) {
	    return Route.createRedirect(createRouteOptions(props));
	  }return Route.createRoute(createRouteOptions(props), function () {
	    if (props.children) createRoutesFromReactChildren(props.children);
	  });
	}

	/**
	 * Creates and returns an array of routes created from the given
	 * ReactChildren, all of which should be one of <Route>, <DefaultRoute>,
	 * <NotFoundRoute>, or <Redirect>, e.g.:
	 *
	 *   var { createRoutesFromReactChildren, Route, Redirect } = require('react-router');
	 *
	 *   var routes = createRoutesFromReactChildren(
	 *     <Route path="/" handler={App}>
	 *       <Route name="user" path="/user/:userId" handler={User}>
	 *         <Route name="task" path="tasks/:taskId" handler={Task}/>
	 *         <Redirect from="todos/:taskId" to="task"/>
	 *       </Route>
	 *     </Route>
	 *   );
	 */
	function createRoutesFromReactChildren(children) {
	  var routes = [];

	  React.Children.forEach(children, function (child) {
	    if (child = createRouteFromReactElement(child)) routes.push(child);
	  });

	  return routes;
	}

	module.exports = createRoutesFromReactChildren;

/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/* jshint -W058 */
	'use strict';

	var React = __webpack_require__(1);
	var warning = __webpack_require__(15);
	var invariant = __webpack_require__(7);
	var canUseDOM = __webpack_require__(51).canUseDOM;
	var LocationActions = __webpack_require__(175);
	var ImitateBrowserBehavior = __webpack_require__(181);
	var HashLocation = __webpack_require__(174);
	var HistoryLocation = __webpack_require__(177);
	var RefreshLocation = __webpack_require__(178);
	var StaticLocation = __webpack_require__(179);
	var ScrollHistory = __webpack_require__(187);
	var createRoutesFromReactChildren = __webpack_require__(185);
	var isReactChildren = __webpack_require__(189);
	var Transition = __webpack_require__(190);
	var PropTypes = __webpack_require__(159);
	var Redirect = __webpack_require__(192);
	var History = __webpack_require__(176);
	var Cancellation = __webpack_require__(191);
	var Match = __webpack_require__(193);
	var Route = __webpack_require__(160);
	var supportsHistory = __webpack_require__(194);
	var PathUtils = __webpack_require__(161);

	/**
	 * The default location for new routers.
	 */
	var DEFAULT_LOCATION = canUseDOM ? HashLocation : '/';

	/**
	 * The default scroll behavior for new routers.
	 */
	var DEFAULT_SCROLL_BEHAVIOR = canUseDOM ? ImitateBrowserBehavior : null;

	function hasProperties(object, properties) {
	  for (var propertyName in properties) if (properties.hasOwnProperty(propertyName) && object[propertyName] !== properties[propertyName]) {
	    return false;
	  }return true;
	}

	function hasMatch(routes, route, prevParams, nextParams, prevQuery, nextQuery) {
	  return routes.some(function (r) {
	    if (r !== route) return false;

	    var paramNames = route.paramNames;
	    var paramName;

	    // Ensure that all params the route cares about did not change.
	    for (var i = 0, len = paramNames.length; i < len; ++i) {
	      paramName = paramNames[i];

	      if (nextParams[paramName] !== prevParams[paramName]) return false;
	    }

	    // Ensure the query hasn't changed.
	    return hasProperties(prevQuery, nextQuery) && hasProperties(nextQuery, prevQuery);
	  });
	}

	function addRoutesToNamedRoutes(routes, namedRoutes) {
	  var route;
	  for (var i = 0, len = routes.length; i < len; ++i) {
	    route = routes[i];

	    if (route.name) {
	      invariant(namedRoutes[route.name] == null, 'You may not have more than one route named "%s"', route.name);

	      namedRoutes[route.name] = route;
	    }

	    if (route.childRoutes) addRoutesToNamedRoutes(route.childRoutes, namedRoutes);
	  }
	}

	function routeIsActive(activeRoutes, routeName) {
	  return activeRoutes.some(function (route) {
	    return route.name === routeName;
	  });
	}

	function paramsAreActive(activeParams, params) {
	  for (var property in params) if (String(activeParams[property]) !== String(params[property])) {
	    return false;
	  }return true;
	}

	function queryIsActive(activeQuery, query) {
	  for (var property in query) if (String(activeQuery[property]) !== String(query[property])) {
	    return false;
	  }return true;
	}

	/**
	 * Creates and returns a new router using the given options. A router
	 * is a ReactComponent class that knows how to react to changes in the
	 * URL and keep the contents of the page in sync.
	 *
	 * Options may be any of the following:
	 *
	 * - routes           (required) The route config
	 * - location         The location to use. Defaults to HashLocation when
	 *                    the DOM is available, "/" otherwise
	 * - scrollBehavior   The scroll behavior to use. Defaults to ImitateBrowserBehavior
	 *                    when the DOM is available, null otherwise
	 * - onError          A function that is used to handle errors
	 * - onAbort          A function that is used to handle aborted transitions
	 *
	 * When rendering in a server-side environment, the location should simply
	 * be the URL path that was used in the request, including the query string.
	 */
	function createRouter(options) {
	  options = options || {};

	  if (isReactChildren(options)) options = { routes: options };

	  var mountedComponents = [];
	  var location = options.location || DEFAULT_LOCATION;
	  var scrollBehavior = options.scrollBehavior || DEFAULT_SCROLL_BEHAVIOR;
	  var state = {};
	  var nextState = {};
	  var pendingTransition = null;
	  var dispatchHandler = null;

	  if (typeof location === 'string') location = new StaticLocation(location);

	  if (location instanceof StaticLocation) {
	    warning(!canUseDOM || process.env.NODE_ENV === 'test', 'You should not use a static location in a DOM environment because ' + 'the router will not be kept in sync with the current URL');
	  } else {
	    invariant(canUseDOM || location.needsDOM === false, 'You cannot use %s without a DOM', location);
	  }

	  // Automatically fall back to full page refreshes in
	  // browsers that don't support the HTML history API.
	  if (location === HistoryLocation && !supportsHistory()) location = RefreshLocation;

	  var Router = React.createClass({

	    displayName: 'Router',

	    statics: {

	      isRunning: false,

	      cancelPendingTransition: function cancelPendingTransition() {
	        if (pendingTransition) {
	          pendingTransition.cancel();
	          pendingTransition = null;
	        }
	      },

	      clearAllRoutes: function clearAllRoutes() {
	        Router.cancelPendingTransition();
	        Router.namedRoutes = {};
	        Router.routes = [];
	      },

	      /**
	       * Adds routes to this router from the given children object (see ReactChildren).
	       */
	      addRoutes: function addRoutes(routes) {
	        if (isReactChildren(routes)) routes = createRoutesFromReactChildren(routes);

	        addRoutesToNamedRoutes(routes, Router.namedRoutes);

	        Router.routes.push.apply(Router.routes, routes);
	      },

	      /**
	       * Replaces routes of this router from the given children object (see ReactChildren).
	       */
	      replaceRoutes: function replaceRoutes(routes) {
	        Router.clearAllRoutes();
	        Router.addRoutes(routes);
	        Router.refresh();
	      },

	      /**
	       * Performs a match of the given path against this router and returns an object
	       * with the { routes, params, pathname, query } that match. Returns null if no
	       * match can be made.
	       */
	      match: function match(path) {
	        return Match.findMatch(Router.routes, path);
	      },

	      /**
	       * Returns an absolute URL path created from the given route
	       * name, URL parameters, and query.
	       */
	      makePath: function makePath(to, params, query) {
	        var path;
	        if (PathUtils.isAbsolute(to)) {
	          path = to;
	        } else {
	          var route = to instanceof Route ? to : Router.namedRoutes[to];

	          invariant(route instanceof Route, 'Cannot find a route named "%s"', to);

	          path = route.path;
	        }

	        return PathUtils.withQuery(PathUtils.injectParams(path, params), query);
	      },

	      /**
	       * Returns a string that may safely be used as the href of a link
	       * to the route with the given name, URL parameters, and query.
	       */
	      makeHref: function makeHref(to, params, query) {
	        var path = Router.makePath(to, params, query);
	        return location === HashLocation ? '#' + path : path;
	      },

	      /**
	       * Transitions to the URL specified in the arguments by pushing
	       * a new URL onto the history stack.
	       */
	      transitionTo: function transitionTo(to, params, query) {
	        var path = Router.makePath(to, params, query);

	        if (pendingTransition) {
	          // Replace so pending location does not stay in history.
	          location.replace(path);
	        } else {
	          location.push(path);
	        }
	      },

	      /**
	       * Transitions to the URL specified in the arguments by replacing
	       * the current URL in the history stack.
	       */
	      replaceWith: function replaceWith(to, params, query) {
	        location.replace(Router.makePath(to, params, query));
	      },

	      /**
	       * Transitions to the previous URL if one is available. Returns true if the
	       * router was able to go back, false otherwise.
	       *
	       * Note: The router only tracks history entries in your application, not the
	       * current browser session, so you can safely call this function without guarding
	       * against sending the user back to some other site. However, when using
	       * RefreshLocation (which is the fallback for HistoryLocation in browsers that
	       * don't support HTML5 history) this method will *always* send the client back
	       * because we cannot reliably track history length.
	       */
	      goBack: function goBack() {
	        if (History.length > 1 || location === RefreshLocation) {
	          location.pop();
	          return true;
	        }

	        warning(false, 'goBack() was ignored because there is no router history');

	        return false;
	      },

	      handleAbort: options.onAbort || function (abortReason) {
	        if (location instanceof StaticLocation) throw new Error('Unhandled aborted transition! Reason: ' + abortReason);

	        if (abortReason instanceof Cancellation) {
	          return;
	        } else if (abortReason instanceof Redirect) {
	          location.replace(Router.makePath(abortReason.to, abortReason.params, abortReason.query));
	        } else {
	          location.pop();
	        }
	      },

	      handleError: options.onError || function (error) {
	        // Throw so we don't silently swallow async errors.
	        throw error; // This error probably originated in a transition hook.
	      },

	      handleLocationChange: function handleLocationChange(change) {
	        Router.dispatch(change.path, change.type);
	      },

	      /**
	       * Performs a transition to the given path and calls callback(error, abortReason)
	       * when the transition is finished. If both arguments are null the router's state
	       * was updated. Otherwise the transition did not complete.
	       *
	       * In a transition, a router first determines which routes are involved by beginning
	       * with the current route, up the route tree to the first parent route that is shared
	       * with the destination route, and back down the tree to the destination route. The
	       * willTransitionFrom hook is invoked on all route handlers we're transitioning away
	       * from, in reverse nesting order. Likewise, the willTransitionTo hook is invoked on
	       * all route handlers we're transitioning to.
	       *
	       * Both willTransitionFrom and willTransitionTo hooks may either abort or redirect the
	       * transition. To resolve asynchronously, they may use the callback argument. If no
	       * hooks wait, the transition is fully synchronous.
	       */
	      dispatch: function dispatch(path, action) {
	        Router.cancelPendingTransition();

	        var prevPath = state.path;
	        var isRefreshing = action == null;

	        if (prevPath === path && !isRefreshing) {
	          return;
	        } // Nothing to do!

	        // Record the scroll position as early as possible to
	        // get it before browsers try update it automatically.
	        if (prevPath && action === LocationActions.PUSH) Router.recordScrollPosition(prevPath);

	        var match = Router.match(path);

	        warning(match != null, 'No route matches path "%s". Make sure you have <Route path="%s"> somewhere in your routes', path, path);

	        if (match == null) match = {};

	        var prevRoutes = state.routes || [];
	        var prevParams = state.params || {};
	        var prevQuery = state.query || {};

	        var nextRoutes = match.routes || [];
	        var nextParams = match.params || {};
	        var nextQuery = match.query || {};

	        var fromRoutes, toRoutes;
	        if (prevRoutes.length) {
	          fromRoutes = prevRoutes.filter(function (route) {
	            return !hasMatch(nextRoutes, route, prevParams, nextParams, prevQuery, nextQuery);
	          });

	          toRoutes = nextRoutes.filter(function (route) {
	            return !hasMatch(prevRoutes, route, prevParams, nextParams, prevQuery, nextQuery);
	          });
	        } else {
	          fromRoutes = [];
	          toRoutes = nextRoutes;
	        }

	        var transition = new Transition(path, Router.replaceWith.bind(Router, path));
	        pendingTransition = transition;

	        var fromComponents = mountedComponents.slice(prevRoutes.length - fromRoutes.length);

	        Transition.from(transition, fromRoutes, fromComponents, function (error) {
	          if (error || transition.abortReason) return dispatchHandler.call(Router, error, transition); // No need to continue.

	          Transition.to(transition, toRoutes, nextParams, nextQuery, function (error) {
	            dispatchHandler.call(Router, error, transition, {
	              path: path,
	              action: action,
	              pathname: match.pathname,
	              routes: nextRoutes,
	              params: nextParams,
	              query: nextQuery
	            });
	          });
	        });
	      },

	      /**
	       * Starts this router and calls callback(router, state) when the route changes.
	       *
	       * If the router's location is static (i.e. a URL path in a server environment)
	       * the callback is called only once. Otherwise, the location should be one of the
	       * Router.*Location objects (e.g. Router.HashLocation or Router.HistoryLocation).
	       */
	      run: function run(callback) {
	        invariant(!Router.isRunning, 'Router is already running');

	        dispatchHandler = function (error, transition, newState) {
	          if (error) Router.handleError(error);

	          if (pendingTransition !== transition) return;

	          pendingTransition = null;

	          if (transition.abortReason) {
	            Router.handleAbort(transition.abortReason);
	          } else {
	            callback.call(Router, Router, nextState = newState);
	          }
	        };

	        if (!(location instanceof StaticLocation)) {
	          if (location.addChangeListener) location.addChangeListener(Router.handleLocationChange);

	          Router.isRunning = true;
	        }

	        // Bootstrap using the current path.
	        Router.refresh();
	      },

	      refresh: function refresh() {
	        Router.dispatch(location.getCurrentPath(), null);
	      },

	      stop: function stop() {
	        Router.cancelPendingTransition();

	        if (location.removeChangeListener) location.removeChangeListener(Router.handleLocationChange);

	        Router.isRunning = false;
	      },

	      getLocation: function getLocation() {
	        return location;
	      },

	      getScrollBehavior: function getScrollBehavior() {
	        return scrollBehavior;
	      },

	      getRouteAtDepth: function getRouteAtDepth(routeDepth) {
	        var routes = state.routes;
	        return routes && routes[routeDepth];
	      },

	      setRouteComponentAtDepth: function setRouteComponentAtDepth(routeDepth, component) {
	        mountedComponents[routeDepth] = component;
	      },

	      /**
	       * Returns the current URL path + query string.
	       */
	      getCurrentPath: function getCurrentPath() {
	        return state.path;
	      },

	      /**
	       * Returns the current URL path without the query string.
	       */
	      getCurrentPathname: function getCurrentPathname() {
	        return state.pathname;
	      },

	      /**
	       * Returns an object of the currently active URL parameters.
	       */
	      getCurrentParams: function getCurrentParams() {
	        return state.params;
	      },

	      /**
	       * Returns an object of the currently active query parameters.
	       */
	      getCurrentQuery: function getCurrentQuery() {
	        return state.query;
	      },

	      /**
	       * Returns an array of the currently active routes.
	       */
	      getCurrentRoutes: function getCurrentRoutes() {
	        return state.routes;
	      },

	      /**
	       * Returns true if the given route, params, and query are active.
	       */
	      isActive: function isActive(to, params, query) {
	        if (PathUtils.isAbsolute(to)) {
	          return to === state.path;
	        }return routeIsActive(state.routes, to) && paramsAreActive(state.params, params) && (query == null || queryIsActive(state.query, query));
	      }

	    },

	    mixins: [ScrollHistory],

	    propTypes: {
	      children: PropTypes.falsy
	    },

	    childContextTypes: {
	      routeDepth: PropTypes.number.isRequired,
	      router: PropTypes.router.isRequired
	    },

	    getChildContext: function getChildContext() {
	      return {
	        routeDepth: 1,
	        router: Router
	      };
	    },

	    getInitialState: function getInitialState() {
	      return state = nextState;
	    },

	    componentWillReceiveProps: function componentWillReceiveProps() {
	      this.setState(state = nextState);
	    },

	    componentWillUnmount: function componentWillUnmount() {
	      Router.stop();
	    },

	    render: function render() {
	      var route = Router.getRouteAtDepth(0);
	      return route ? React.createElement(route.handler, this.props) : null;
	    }

	  });

	  Router.clearAllRoutes();

	  if (options.routes) Router.addRoutes(options.routes);

	  return Router;
	}

	module.exports = createRouter;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var invariant = __webpack_require__(7);
	var canUseDOM = __webpack_require__(51).canUseDOM;
	var getWindowScrollPosition = __webpack_require__(188);

	function shouldUpdateScroll(state, prevState) {
	  if (!prevState) {
	    return true;
	  } // Don't update scroll position when only the query has changed.
	  if (state.pathname === prevState.pathname) {
	    return false;
	  }var routes = state.routes;
	  var prevRoutes = prevState.routes;

	  var sharedAncestorRoutes = routes.filter(function (route) {
	    return prevRoutes.indexOf(route) !== -1;
	  });

	  return !sharedAncestorRoutes.some(function (route) {
	    return route.ignoreScrollBehavior;
	  });
	}

	/**
	 * Provides the router with the ability to manage window scroll position
	 * according to its scroll behavior.
	 */
	var ScrollHistory = {

	  statics: {

	    /**
	     * Records curent scroll position as the last known position for the given URL path.
	     */
	    recordScrollPosition: function recordScrollPosition(path) {
	      if (!this.scrollHistory) this.scrollHistory = {};

	      this.scrollHistory[path] = getWindowScrollPosition();
	    },

	    /**
	     * Returns the last known scroll position for the given URL path.
	     */
	    getScrollPosition: function getScrollPosition(path) {
	      if (!this.scrollHistory) this.scrollHistory = {};

	      return this.scrollHistory[path] || null;
	    }

	  },

	  componentWillMount: function componentWillMount() {
	    invariant(this.constructor.getScrollBehavior() == null || canUseDOM, 'Cannot use scroll behavior without a DOM');
	  },

	  componentDidMount: function componentDidMount() {
	    this._updateScroll();
	  },

	  componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
	    this._updateScroll(prevState);
	  },

	  _updateScroll: function _updateScroll(prevState) {
	    if (!shouldUpdateScroll(this.state, prevState)) {
	      return;
	    }var scrollBehavior = this.constructor.getScrollBehavior();

	    if (scrollBehavior) scrollBehavior.updateScrollPosition(this.constructor.getScrollPosition(this.state.path), this.state.action);
	  }

	};

	module.exports = ScrollHistory;

/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var invariant = __webpack_require__(7);
	var canUseDOM = __webpack_require__(51).canUseDOM;

	/**
	 * Returns the current scroll position of the window as { x, y }.
	 */
	function getWindowScrollPosition() {
	  invariant(canUseDOM, 'Cannot get current scroll position without a DOM');

	  return {
	    x: window.pageXOffset || document.documentElement.scrollLeft,
	    y: window.pageYOffset || document.documentElement.scrollTop
	  };
	}

	module.exports = getWindowScrollPosition;

/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(1);

	function isValidChild(object) {
	  return object == null || React.isValidElement(object);
	}

	function isReactChildren(object) {
	  return isValidChild(object) || Array.isArray(object) && object.every(isValidChild);
	}

	module.exports = isReactChildren;

/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	/* jshint -W058 */

	'use strict';

	var Cancellation = __webpack_require__(191);
	var Redirect = __webpack_require__(192);

	/**
	 * Encapsulates a transition to a given path.
	 *
	 * The willTransitionTo and willTransitionFrom handlers receive
	 * an instance of this class as their first argument.
	 */
	function Transition(path, retry) {
	  this.path = path;
	  this.abortReason = null;
	  // TODO: Change this to router.retryTransition(transition)
	  this.retry = retry.bind(this);
	}

	Transition.prototype.abort = function (reason) {
	  if (this.abortReason == null) this.abortReason = reason || 'ABORT';
	};

	Transition.prototype.redirect = function (to, params, query) {
	  this.abort(new Redirect(to, params, query));
	};

	Transition.prototype.cancel = function () {
	  this.abort(new Cancellation());
	};

	Transition.from = function (transition, routes, components, callback) {
	  routes.reduce(function (callback, route, index) {
	    return function (error) {
	      if (error || transition.abortReason) {
	        callback(error);
	      } else if (route.onLeave) {
	        try {
	          route.onLeave(transition, components[index], callback);

	          // If there is no callback in the argument list, call it automatically.
	          if (route.onLeave.length < 3) callback();
	        } catch (e) {
	          callback(e);
	        }
	      } else {
	        callback();
	      }
	    };
	  }, callback)();
	};

	Transition.to = function (transition, routes, params, query, callback) {
	  routes.reduceRight(function (callback, route) {
	    return function (error) {
	      if (error || transition.abortReason) {
	        callback(error);
	      } else if (route.onEnter) {
	        try {
	          route.onEnter(transition, params, query, callback);

	          // If there is no callback in the argument list, call it automatically.
	          if (route.onEnter.length < 4) callback();
	        } catch (e) {
	          callback(e);
	        }
	      } else {
	        callback();
	      }
	    };
	  }, callback)();
	};

	module.exports = Transition;

/***/ },
/* 191 */
/***/ function(module, exports) {

	/**
	 * Represents a cancellation caused by navigating away
	 * before the previous transition has fully resolved.
	 */
	"use strict";

	function Cancellation() {}

	module.exports = Cancellation;

/***/ },
/* 192 */
/***/ function(module, exports) {

	/**
	 * Encapsulates a redirect to the given route.
	 */
	"use strict";

	function Redirect(to, params, query) {
	  this.to = to;
	  this.params = params;
	  this.query = query;
	}

	module.exports = Redirect;

/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	/* jshint -W084 */
	var PathUtils = __webpack_require__(161);

	function deepSearch(route, pathname, query) {
	  // Check the subtree first to find the most deeply-nested match.
	  var childRoutes = route.childRoutes;
	  if (childRoutes) {
	    var match, childRoute;
	    for (var i = 0, len = childRoutes.length; i < len; ++i) {
	      childRoute = childRoutes[i];

	      if (childRoute.isDefault || childRoute.isNotFound) continue; // Check these in order later.

	      if (match = deepSearch(childRoute, pathname, query)) {
	        // A route in the subtree matched! Add this route and we're done.
	        match.routes.unshift(route);
	        return match;
	      }
	    }
	  }

	  // No child routes matched; try the default route.
	  var defaultRoute = route.defaultRoute;
	  if (defaultRoute && (params = PathUtils.extractParams(defaultRoute.path, pathname))) {
	    return new Match(pathname, params, query, [route, defaultRoute]);
	  } // Does the "not found" route match?
	  var notFoundRoute = route.notFoundRoute;
	  if (notFoundRoute && (params = PathUtils.extractParams(notFoundRoute.path, pathname))) {
	    return new Match(pathname, params, query, [route, notFoundRoute]);
	  } // Last attempt: check this route.
	  var params = PathUtils.extractParams(route.path, pathname);
	  if (params) {
	    return new Match(pathname, params, query, [route]);
	  }return null;
	}

	var Match = (function () {
	  function Match(pathname, params, query, routes) {
	    _classCallCheck(this, Match);

	    this.pathname = pathname;
	    this.params = params;
	    this.query = query;
	    this.routes = routes;
	  }

	  _createClass(Match, null, [{
	    key: 'findMatch',

	    /**
	     * Attempts to match depth-first a route in the given route's
	     * subtree against the given path and returns the match if it
	     * succeeds, null if no match can be made.
	     */
	    value: function findMatch(routes, path) {
	      var pathname = PathUtils.withoutQuery(path);
	      var query = PathUtils.extractQuery(path);
	      var match = null;

	      for (var i = 0, len = routes.length; match == null && i < len; ++i) match = deepSearch(routes[i], pathname, query);

	      return match;
	    }
	  }]);

	  return Match;
	})();

	module.exports = Match;

/***/ },
/* 194 */
/***/ function(module, exports) {

	'use strict';

	function supportsHistory() {
	  /*! taken from modernizr
	   * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
	   * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
	   * changed to avoid false negatives for Windows Phones: https://github.com/rackt/react-router/issues/586
	   */
	  var ua = navigator.userAgent;
	  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) {
	    return false;
	  }
	  return window.history && 'pushState' in window.history;
	}

	module.exports = supportsHistory;

/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var createRouter = __webpack_require__(186);

	/**
	 * A high-level convenience method that creates, configures, and
	 * runs a router in one shot. The method signature is:
	 *
	 *   Router.run(routes[, location ], callback);
	 *
	 * Using `window.location.hash` to manage the URL, you could do:
	 *
	 *   Router.run(routes, function (Handler) {
	 *     React.render(<Handler/>, document.body);
	 *   });
	 * 
	 * Using HTML5 history and a custom "cursor" prop:
	 * 
	 *   Router.run(routes, Router.HistoryLocation, function (Handler) {
	 *     React.render(<Handler cursor={cursor}/>, document.body);
	 *   });
	 *
	 * Returns the newly created router.
	 *
	 * Note: If you need to specify further options for your router such
	 * as error/abort handling or custom scroll behavior, use Router.create
	 * instead.
	 *
	 *   var router = Router.create(options);
	 *   router.run(function (Handler) {
	 *     // ...
	 *   });
	 */
	function runRouter(routes, location, callback) {
	  if (typeof location === 'function') {
	    callback = location;
	    location = null;
	  }

	  var router = createRouter({
	    routes: routes,
	    location: location
	  });

	  router.run(callback);

	  return router;
	}

	module.exports = runRouter;

/***/ },
/* 196 */,
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(198);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(200)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../css-loader/index.js!./normalize.css", function() {
				var newContent = require("!!./../css-loader/index.js!./normalize.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(199)();
	// imports


	// module
	exports.push([module.id, "/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */\n\n/**\n * 1. Set default font family to sans-serif.\n * 2. Prevent iOS and IE text size adjust after device orientation change,\n *    without disabling user zoom.\n */\n\nhtml {\n  font-family: sans-serif; /* 1 */\n  -ms-text-size-adjust: 100%; /* 2 */\n  -webkit-text-size-adjust: 100%; /* 2 */\n}\n\n/**\n * Remove default margin.\n */\n\nbody {\n  margin: 0;\n}\n\n/* HTML5 display definitions\n   ========================================================================== */\n\n/**\n * Correct `block` display not defined for any HTML5 element in IE 8/9.\n * Correct `block` display not defined for `details` or `summary` in IE 10/11\n * and Firefox.\n * Correct `block` display not defined for `main` in IE 11.\n */\n\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nhgroup,\nmain,\nmenu,\nnav,\nsection,\nsummary {\n  display: block;\n}\n\n/**\n * 1. Correct `inline-block` display not defined in IE 8/9.\n * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.\n */\n\naudio,\ncanvas,\nprogress,\nvideo {\n  display: inline-block; /* 1 */\n  vertical-align: baseline; /* 2 */\n}\n\n/**\n * Prevent modern browsers from displaying `audio` without controls.\n * Remove excess height in iOS 5 devices.\n */\n\naudio:not([controls]) {\n  display: none;\n  height: 0;\n}\n\n/**\n * Address `[hidden]` styling not present in IE 8/9/10.\n * Hide the `template` element in IE 8/9/10/11, Safari, and Firefox < 22.\n */\n\n[hidden],\ntemplate {\n  display: none;\n}\n\n/* Links\n   ========================================================================== */\n\n/**\n * Remove the gray background color from active links in IE 10.\n */\n\na {\n  background-color: transparent;\n}\n\n/**\n * Improve readability of focused elements when they are also in an\n * active/hover state.\n */\n\na:active,\na:hover {\n  outline: 0;\n}\n\n/* Text-level semantics\n   ========================================================================== */\n\n/**\n * Address styling not present in IE 8/9/10/11, Safari, and Chrome.\n */\n\nabbr[title] {\n  border-bottom: 1px dotted;\n}\n\n/**\n * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.\n */\n\nb,\nstrong {\n  font-weight: bold;\n}\n\n/**\n * Address styling not present in Safari and Chrome.\n */\n\ndfn {\n  font-style: italic;\n}\n\n/**\n * Address variable `h1` font-size and margin within `section` and `article`\n * contexts in Firefox 4+, Safari, and Chrome.\n */\n\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\n/**\n * Address styling not present in IE 8/9.\n */\n\nmark {\n  background: #ff0;\n  color: #000;\n}\n\n/**\n * Address inconsistent and variable font size in all browsers.\n */\n\nsmall {\n  font-size: 80%;\n}\n\n/**\n * Prevent `sub` and `sup` affecting `line-height` in all browsers.\n */\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsup {\n  top: -0.5em;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\n/* Embedded content\n   ========================================================================== */\n\n/**\n * Remove border when inside `a` element in IE 8/9/10.\n */\n\nimg {\n  border: 0;\n}\n\n/**\n * Correct overflow not hidden in IE 9/10/11.\n */\n\nsvg:not(:root) {\n  overflow: hidden;\n}\n\n/* Grouping content\n   ========================================================================== */\n\n/**\n * Address margin not present in IE 8/9 and Safari.\n */\n\nfigure {\n  margin: 1em 40px;\n}\n\n/**\n * Address differences between Firefox and other browsers.\n */\n\nhr {\n  box-sizing: content-box;\n  height: 0;\n}\n\n/**\n * Contain overflow in all browsers.\n */\n\npre {\n  overflow: auto;\n}\n\n/**\n * Address odd `em`-unit font size rendering in all browsers.\n */\n\ncode,\nkbd,\npre,\nsamp {\n  font-family: monospace, monospace;\n  font-size: 1em;\n}\n\n/* Forms\n   ========================================================================== */\n\n/**\n * Known limitation: by default, Chrome and Safari on OS X allow very limited\n * styling of `select`, unless a `border` property is set.\n */\n\n/**\n * 1. Correct color not being inherited.\n *    Known issue: affects color of disabled elements.\n * 2. Correct font properties not being inherited.\n * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.\n */\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  color: inherit; /* 1 */\n  font: inherit; /* 2 */\n  margin: 0; /* 3 */\n}\n\n/**\n * Address `overflow` set to `hidden` in IE 8/9/10/11.\n */\n\nbutton {\n  overflow: visible;\n}\n\n/**\n * Address inconsistent `text-transform` inheritance for `button` and `select`.\n * All other form control elements do not inherit `text-transform` values.\n * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.\n * Correct `select` style inheritance in Firefox.\n */\n\nbutton,\nselect {\n  text-transform: none;\n}\n\n/**\n * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`\n *    and `video` controls.\n * 2. Correct inability to style clickable `input` types in iOS.\n * 3. Improve usability and consistency of cursor style between image-type\n *    `input` and others.\n */\n\nbutton,\nhtml input[type=\"button\"], /* 1 */\ninput[type=\"reset\"],\ninput[type=\"submit\"] {\n  -webkit-appearance: button; /* 2 */\n  cursor: pointer; /* 3 */\n}\n\n/**\n * Re-set default cursor for disabled elements.\n */\n\nbutton[disabled],\nhtml input[disabled] {\n  cursor: default;\n}\n\n/**\n * Remove inner padding and border in Firefox 4+.\n */\n\nbutton::-moz-focus-inner,\ninput::-moz-focus-inner {\n  border: 0;\n  padding: 0;\n}\n\n/**\n * Address Firefox 4+ setting `line-height` on `input` using `!important` in\n * the UA stylesheet.\n */\n\ninput {\n  line-height: normal;\n}\n\n/**\n * It's recommended that you don't attempt to style these elements.\n * Firefox's implementation doesn't respect box-sizing, padding, or width.\n *\n * 1. Address box sizing set to `content-box` in IE 8/9/10.\n * 2. Remove excess padding in IE 8/9/10.\n */\n\ninput[type=\"checkbox\"],\ninput[type=\"radio\"] {\n  box-sizing: border-box; /* 1 */\n  padding: 0; /* 2 */\n}\n\n/**\n * Fix the cursor style for Chrome's increment/decrement buttons. For certain\n * `font-size` values of the `input`, it causes the cursor style of the\n * decrement button to change from `default` to `text`.\n */\n\ninput[type=\"number\"]::-webkit-inner-spin-button,\ninput[type=\"number\"]::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/**\n * 1. Address `appearance` set to `searchfield` in Safari and Chrome.\n * 2. Address `box-sizing` set to `border-box` in Safari and Chrome.\n */\n\ninput[type=\"search\"] {\n  -webkit-appearance: textfield; /* 1 */\n  box-sizing: content-box; /* 2 */\n}\n\n/**\n * Remove inner padding and search cancel button in Safari and Chrome on OS X.\n * Safari (but not Chrome) clips the cancel button when the search input has\n * padding (and `textfield` appearance).\n */\n\ninput[type=\"search\"]::-webkit-search-cancel-button,\ninput[type=\"search\"]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/**\n * Define consistent border, margin, and padding.\n */\n\nfieldset {\n  border: 1px solid #c0c0c0;\n  margin: 0 2px;\n  padding: 0.35em 0.625em 0.75em;\n}\n\n/**\n * 1. Correct `color` not being inherited in IE 8/9/10/11.\n * 2. Remove padding so people aren't caught out if they zero out fieldsets.\n */\n\nlegend {\n  border: 0; /* 1 */\n  padding: 0; /* 2 */\n}\n\n/**\n * Remove default vertical scrollbar in IE 8/9/10/11.\n */\n\ntextarea {\n  overflow: auto;\n}\n\n/**\n * Don't inherit the `font-weight` (applied by a rule above).\n * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.\n */\n\noptgroup {\n  font-weight: bold;\n}\n\n/* Tables\n   ========================================================================== */\n\n/**\n * Remove most spacing between table cells.\n */\n\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n\ntd,\nth {\n  padding: 0;\n}\n", ""]);

	// exports


/***/ },
/* 199 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];

		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};

		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0;

	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}

		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();

		var styles = listToStyles(list);
		addStylesToDom(styles, options);

		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}

	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}

	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}

	function createStyleElement() {
		var styleElement = document.createElement("style");
		var head = getHeadElement();
		styleElement.type = "text/css";
		head.appendChild(styleElement);
		return styleElement;
	}

	function createLinkElement() {
		var linkElement = document.createElement("link");
		var head = getHeadElement();
		linkElement.rel = "stylesheet";
		head.appendChild(linkElement);
		return linkElement;
	}

	function addStyle(obj, options) {
		var styleElement, update, remove;

		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement());
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else if(obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function") {
			styleElement = createLinkElement();
			update = updateLink.bind(null, styleElement);
			remove = function() {
				styleElement.parentNode.removeChild(styleElement);
				if(styleElement.href)
					URL.revokeObjectURL(styleElement.href);
			};
		} else {
			styleElement = createStyleElement();
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				styleElement.parentNode.removeChild(styleElement);
			};
		}

		update(obj);

		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}

	var replaceText = (function () {
		var textStore = [];

		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();

	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;

		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}

	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;
		var sourceMap = obj.sourceMap;

		if(media) {
			styleElement.setAttribute("media", media)
		}

		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}

	function updateLink(linkElement, obj) {
		var css = obj.css;
		var media = obj.media;
		var sourceMap = obj.sourceMap;

		if(sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}

		var blob = new Blob([css], { type: "text/css" });

		var oldSrc = linkElement.href;

		linkElement.href = URL.createObjectURL(blob);

		if(oldSrc)
			URL.revokeObjectURL(oldSrc);
	}


/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = {
	  AppBar: __webpack_require__(202),
	  AppCanvas: __webpack_require__(244),
	  Avatar: __webpack_require__(245),
	  BeforeAfterWrapper: __webpack_require__(246),
	  Card: __webpack_require__(247),
	  CardActions: __webpack_require__(251),
	  CardExpandable: __webpack_require__(248),
	  CardHeader: __webpack_require__(252),
	  CardMedia: __webpack_require__(259),
	  CardText: __webpack_require__(260),
	  CardTitle: __webpack_require__(261),
	  Checkbox: __webpack_require__(262),
	  CircularProgress: __webpack_require__(270),
	  ClearFix: __webpack_require__(267),
	  DatePicker: __webpack_require__(271),
	  DatePickerDialog: __webpack_require__(273),
	  Dialog: __webpack_require__(290),
	  DropDownIcon: __webpack_require__(295),
	  DropDownMenu: __webpack_require__(303),
	  EnhancedButton: __webpack_require__(204),
	  FlatButton: __webpack_require__(291),
	  FloatingActionButton: __webpack_require__(305),
	  FontIcon: __webpack_require__(237),
	  IconButton: __webpack_require__(203),
	  IconMenu: __webpack_require__(306),
	  LeftNav: __webpack_require__(310),
	  LinearProgress: __webpack_require__(311),
	  List: __webpack_require__(309),
	  ListDivider: __webpack_require__(312),
	  ListItem: __webpack_require__(313),
	  Menu: __webpack_require__(297),
	  MenuItem: __webpack_require__(299),
	  Mixins: __webpack_require__(316),
	  Overlay: __webpack_require__(292),
	  Paper: __webpack_require__(243),
	  RadioButton: __webpack_require__(320),
	  RadioButtonGroup: __webpack_require__(323),
	  RaisedButton: __webpack_require__(324),
	  Ripples: __webpack_require__(325),
	  SelectField: __webpack_require__(326),
	  Slider: __webpack_require__(327),
	  SvgIcon: __webpack_require__(242),
	  Icons: {
	    NavigationMenu: __webpack_require__(241),
	    NavigationChevronLeft: __webpack_require__(281),
	    NavigationChevronRight: __webpack_require__(285)
	  },
	  Styles: __webpack_require__(253),
	  Snackbar: __webpack_require__(329),
	  Tab: __webpack_require__(330),
	  Tabs: __webpack_require__(331),
	  Table: __webpack_require__(334),
	  TableFooter: __webpack_require__(339),
	  TableHeader: __webpack_require__(335),
	  TableHeaderColumn: __webpack_require__(336),
	  Theme: __webpack_require__(340),
	  Toggle: __webpack_require__(300),
	  TimePicker: __webpack_require__(341),
	  TextField: __webpack_require__(293),
	  Toolbar: __webpack_require__(282),
	  ToolbarGroup: __webpack_require__(283),
	  ToolbarSeparator: __webpack_require__(351),
	  ToolbarTitle: __webpack_require__(352),
	  Tooltip: __webpack_require__(238),
	  Utils: __webpack_require__(353)
	};

/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(206);
	var Typography = __webpack_require__(240);
	var IconButton = __webpack_require__(203);
	var NavigationMenu = __webpack_require__(241);
	var Paper = __webpack_require__(243);

	var AppBar = React.createClass({
	  displayName: 'AppBar',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    onLeftIconButtonTouchTap: React.PropTypes.func,
	    onRightIconButtonTouchTap: React.PropTypes.func,
	    showMenuIconButton: React.PropTypes.bool,
	    style: React.PropTypes.object,
	    iconClassNameLeft: React.PropTypes.string,
	    iconClassNameRight: React.PropTypes.string,
	    iconElementLeft: React.PropTypes.element,
	    iconElementRight: React.PropTypes.element,
	    iconStyleRight: React.PropTypes.object,
	    title: React.PropTypes.node,
	    zDepth: React.PropTypes.number
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      showMenuIconButton: true,
	      title: '',
	      zDepth: 1
	    };
	  },

	  componentDidMount: function componentDidMount() {
	    if (process.env.NODE_ENV !== 'production') {
	      if (this.props.iconElementLeft && this.props.iconClassNameLeft) {
	        console.warn('Properties iconClassNameLeft and iconElementLeft cannot be simultaneously ' + 'defined. Please use one or the other.');
	      }

	      if (this.props.iconElementRight && this.props.iconClassNameRight) {
	        console.warn('Properties iconClassNameRight and iconElementRight cannot be simultaneously ' + 'defined. Please use one or the other.');
	      }
	    }
	  },

	  getStyles: function getStyles() {
	    var spacing = this.context.muiTheme.spacing;
	    var themeVariables = this.context.muiTheme.component.appBar;
	    var iconButtonSize = this.context.muiTheme.component.button.iconButtonSize;
	    var flatButtonSize = 36;
	    var styles = {
	      root: {
	        zIndex: 5,
	        width: '100%',
	        display: '-webkit-box; display: -webkit-flex; display: flex',
	        minHeight: themeVariables.height,
	        backgroundColor: themeVariables.color,
	        paddingLeft: spacing.desktopGutter,
	        paddingRight: spacing.desktopGutter
	      },
	      title: {
	        whiteSpace: 'nowrap',
	        overflow: 'hidden',
	        textOverflow: 'ellipsis',
	        margin: 0,
	        paddingTop: 0,
	        letterSpacing: 0,
	        fontSize: 24,
	        fontWeight: Typography.fontWeightNormal,
	        color: themeVariables.textColor,
	        lineHeight: themeVariables.height + 'px'
	      },
	      mainElement: {
	        boxFlex: 1,
	        flex: '1'
	      },
	      iconButton: {
	        style: {
	          marginTop: (themeVariables.height - iconButtonSize) / 2,
	          marginRight: 8,
	          marginLeft: -16
	        },
	        iconStyle: {
	          fill: themeVariables.textColor,
	          color: themeVariables.textColor
	        }
	      },
	      flatButton: {
	        color: themeVariables.textColor,
	        backgroundColor: 'transparent',
	        marginTop: (iconButtonSize - flatButtonSize) / 2 + 2
	      }
	    };

	    return styles;
	  },

	  render: function render() {
	    var props = this.props;
	    var menuElementLeft = undefined;
	    var menuElementRight = undefined;
	    var styles = this.getStyles();
	    var title = props.title;
	    var iconRightStyle = this.mergeAndPrefix(styles.iconButton.style, {
	      marginRight: -16,
	      marginLeft: 'auto'
	    }, props.iconStyleRight);
	    var titleElement = undefined;

	    if (title) {
	      // If the title is a string, wrap in an h1 tag.
	      // If not, just use it as a node.
	      titleElement = typeof title === 'string' || title instanceof String ? React.createElement(
	        'h1',
	        { style: this.mergeAndPrefix(styles.title, styles.mainElement) },
	        title
	      ) : React.createElement(
	        'div',
	        { style: this.mergeAndPrefix(styles.mainElement) },
	        title
	      );
	    }

	    if (props.showMenuIconButton) {
	      var iconElementLeft = props.iconElementLeft;

	      if (iconElementLeft) {
	        switch (iconElementLeft.type.displayName) {
	          case 'IconButton':
	            iconElementLeft = React.cloneElement(iconElementLeft, {
	              iconStyle: this.mergeAndPrefix(styles.iconButton.iconStyle)
	            });
	            break;
	        }

	        menuElementLeft = React.createElement(
	          'div',
	          { style: styles.iconButton.style },
	          iconElementLeft
	        );
	      } else {
	        var child = props.iconClassNameLeft ? '' : React.createElement(NavigationMenu, { style: this.mergeAndPrefix(styles.iconButton.iconStyle) });
	        menuElementLeft = React.createElement(
	          IconButton,
	          {
	            style: this.mergeAndPrefix(styles.iconButton.style),
	            iconStyle: this.mergeAndPrefix(styles.iconButton.iconStyle),
	            iconClassName: props.iconClassNameLeft,
	            onTouchTap: this._onLeftIconButtonTouchTap },
	          child
	        );
	      }

	      if (props.iconElementRight) {
	        var iconElementRight = props.iconElementRight;

	        switch (iconElementRight.type.displayName) {
	          case 'IconButton':
	            iconElementRight = React.cloneElement(iconElementRight, {
	              iconStyle: this.mergeAndPrefix(styles.iconButton.iconStyle)
	            });
	            break;

	          case 'FlatButton':
	            iconElementRight = React.cloneElement(iconElementRight, {
	              style: this.mergeStyles(styles.flatButton, iconElementRight.props.style)
	            });
	            break;
	        }

	        menuElementRight = React.createElement(
	          'div',
	          { style: iconRightStyle },
	          iconElementRight
	        );
	      } else if (props.iconClassNameRight) {
	        menuElementRight = React.createElement(IconButton, {
	          style: iconRightStyle,
	          iconStyle: this.mergeAndPrefix(styles.iconButton.iconStyle),
	          iconClassName: props.iconClassNameRight,
	          onTouchTap: this._onRightIconButtonTouchTap });
	      }
	    }

	    return React.createElement(
	      Paper,
	      {
	        rounded: false,
	        className: props.className,
	        style: this.mergeAndPrefix(styles.root, props.style),
	        zDepth: props.zDepth },
	      menuElementLeft,
	      titleElement,
	      menuElementRight,
	      props.children
	    );
	  },

	  _onLeftIconButtonTouchTap: function _onLeftIconButtonTouchTap(event) {
	    if (this.props.onLeftIconButtonTouchTap) {
	      this.props.onLeftIconButtonTouchTap(event);
	    }
	  },

	  _onRightIconButtonTouchTap: function _onRightIconButtonTouchTap(event) {
	    if (this.props.onRightIconButtonTouchTap) {
	      this.props.onRightIconButtonTouchTap(event);
	    }
	  }

	});

	module.exports = AppBar;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(206);
	var Transitions = __webpack_require__(230);
	var PropTypes = __webpack_require__(236);
	var EnhancedButton = __webpack_require__(204);
	var FontIcon = __webpack_require__(237);
	var Tooltip = __webpack_require__(238);
	var Children = __webpack_require__(239);

	var IconButton = React.createClass({
	  displayName: 'IconButton',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    className: React.PropTypes.string,
	    disabled: React.PropTypes.bool,
	    iconClassName: React.PropTypes.string,
	    iconStyle: React.PropTypes.object,
	    onBlur: React.PropTypes.func,
	    onFocus: React.PropTypes.func,
	    onKeyboardFocus: React.PropTypes.func,
	    tooltip: React.PropTypes.string,
	    tooltipStyles: React.PropTypes.object,
	    tooltipPosition: PropTypes.cornersAndCenter,
	    touch: React.PropTypes.bool
	  },

	  getInitialState: function getInitialState() {
	    return {
	      tooltipShown: false
	    };
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      iconStyle: {},
	      tooltipPosition: 'bottom-center'
	    };
	  },

	  getStyles: function getStyles() {
	    var spacing = this.context.muiTheme.spacing;
	    var palette = this.context.muiTheme.palette;

	    var styles = {
	      root: {
	        position: 'relative',
	        boxSizing: 'border-box',
	        transition: Transitions.easeOut(),
	        padding: spacing.iconSize / 2,
	        width: spacing.iconSize * 2,
	        height: spacing.iconSize * 2,
	        fontSize: 0
	      },
	      tooltip: {
	        boxSizing: 'border-box'
	      },
	      icon: {
	        color: palette.textColor,
	        fill: palette.textColor
	      },
	      overlay: {
	        position: 'relative',
	        top: 0,
	        width: '100%',
	        height: '100%',
	        background: palette.disabledColor
	      },
	      disabled: {
	        color: palette.disabledColor,
	        fill: palette.disabledColor
	      }
	    };

	    return styles;
	  },

	  render: function render() {
	    var _props = this.props;
	    var disabled = _props.disabled;
	    var iconClassName = _props.iconClassName;
	    var tooltip = _props.tooltip;
	    var touch = _props.touch;
	    var iconStyle = _props.iconStyle;

	    var other = _objectWithoutProperties(_props, ['disabled', 'iconClassName', 'tooltip', 'touch', 'iconStyle']);

	    var fonticon = undefined;

	    var styles = this.getStyles();
	    var tooltipPosition = this.props.tooltipPosition.split('-');

	    var tooltipElement = tooltip ? React.createElement(Tooltip, {
	      ref: 'tooltip',
	      label: tooltip,
	      show: this.state.tooltipShown,
	      touch: touch,
	      style: this.mergeStyles(styles.tooltip, this.props.tooltipStyles),
	      verticalPosition: tooltipPosition[0],
	      horizontalPosition: tooltipPosition[1] }) : null;

	    if (iconClassName) {
	      var iconHoverColor = iconStyle.iconHoverColor;

	      var iconStyleFontIcon = _objectWithoutProperties(iconStyle, ['iconHoverColor']);

	      fonticon = React.createElement(
	        FontIcon,
	        {
	          className: iconClassName,
	          hoverColor: disabled ? null : iconHoverColor,
	          style: this.mergeStyles(styles.icon, disabled ? styles.disabled : {}, iconStyleFontIcon) },
	        this.props.children
	      );
	    }

	    var childrenStyle = disabled ? this.mergeStyles(iconStyle, styles.disabled) : iconStyle;

	    return React.createElement(
	      EnhancedButton,
	      _extends({}, other, {
	        ref: 'button',
	        centerRipple: true,
	        disabled: disabled,
	        style: this.mergeStyles(styles.root, this.props.style),
	        onBlur: this._handleBlur,
	        onFocus: this._handleFocus,
	        onMouseLeave: this._handleMouseLeave,
	        onMouseEnter: this._handleMouseEnter,
	        onKeyboardFocus: this._handleKeyboardFocus }),
	      tooltipElement,
	      fonticon,
	      Children.extend(this.props.children, {
	        style: childrenStyle
	      })
	    );
	  },

	  setKeyboardFocus: function setKeyboardFocus() {
	    this.refs.button.setKeyboardFocus();
	  },

	  _showTooltip: function _showTooltip() {
	    if (!this.props.disabled && this.props.tooltip) {
	      this.setState({ tooltipShown: true });
	    }
	  },

	  _hideTooltip: function _hideTooltip() {
	    if (this.props.tooltip) this.setState({ tooltipShown: false });
	  },

	  _handleBlur: function _handleBlur(e) {
	    this._hideTooltip();
	    if (this.props.onBlur) this.props.onBlur(e);
	  },

	  _handleFocus: function _handleFocus(e) {
	    this._showTooltip();
	    if (this.props.onFocus) this.props.onFocus(e);
	  },

	  _handleMouseLeave: function _handleMouseLeave(e) {
	    if (!this.refs.button.isKeyboardFocused()) this._hideTooltip();
	    if (this.props.onMouseLeave) this.props.onMouseLeave(e);
	  },

	  _handleMouseEnter: function _handleMouseEnter(e) {
	    this._showTooltip();
	    if (this.props.onMouseEnter) this.props.onMouseEnter(e);
	  },

	  _handleKeyboardFocus: function _handleKeyboardFocus(e, keyboardFocused) {
	    if (keyboardFocused && !this.props.disabled) {
	      this._showTooltip();
	      if (this.props.onFocus) this.props.onFocus(e);
	    } else if (!this.state.hovered) {
	      this._hideTooltip();
	      if (this.props.onBlur) this.props.onBlur(e);
	    }

	    if (this.props.onKeyboardFocus) this.props.onKeyboardFocus(e, keyboardFocused);
	  }

	});

	module.exports = IconButton;

/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(206);
	var Colors = __webpack_require__(228);
	var KeyCode = __webpack_require__(205);
	var FocusRipple = __webpack_require__(229);
	var TouchRipple = __webpack_require__(233);

	var _tabPressed = false;

	var EnhancedButton = React.createClass({
	  displayName: 'EnhancedButton',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    centerRipple: React.PropTypes.bool,
	    containerElement: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.element]),
	    disabled: React.PropTypes.bool,
	    disableFocusRipple: React.PropTypes.bool,
	    disableKeyboardFocus: React.PropTypes.bool,
	    disableTouchRipple: React.PropTypes.bool,
	    keyboardFocused: React.PropTypes.bool,
	    linkButton: React.PropTypes.bool,
	    focusRippleColor: React.PropTypes.string,
	    touchRippleColor: React.PropTypes.string,
	    focusRippleOpacity: React.PropTypes.number,
	    touchRippleOpacity: React.PropTypes.number,
	    onBlur: React.PropTypes.func,
	    onFocus: React.PropTypes.func,
	    onKeyboardFocus: React.PropTypes.func,
	    onKeyDown: React.PropTypes.func,
	    onKeyUp: React.PropTypes.func,
	    onTouchTap: React.PropTypes.func,
	    tabIndex: React.PropTypes.number
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      containerElement: 'button',
	      onBlur: function onBlur() {},
	      onFocus: function onFocus() {},
	      onKeyboardFocus: function onKeyboardFocus() {},
	      onKeyDown: function onKeyDown() {},
	      onKeyUp: function onKeyUp() {},
	      onTouchTap: function onTouchTap() {},
	      tabIndex: 0,
	      type: 'button'
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      isKeyboardFocused: !this.props.disabled && this.props.keyboardFocused && !this.props.disableKeyboardFocus
	    };
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    if ((nextProps.disabled || nextProps.disableKeyboardFocus) && this.state.isKeyboardFocused) {
	      this.setState({ isKeyboardFocused: false });
	      if (nextProps.onKeyboardFocus) {
	        nextProps.onKeyboardFocus(null, false);
	      }
	    }
	  },

	  // Remove inner padding and border in Firefox 4+.
	  componentDidMount: function componentDidMount() {
	    if (!EnhancedButton.hasStyleBeenInjected) {
	      var style = document.createElement('style');
	      style.innerHTML = '\n        button::-moz-focus-inner,\n        input::-moz-focus-inner {\n          border: 0;\n          padding: 0;\n        }\n      ';

	      document.body.appendChild(style);
	      EnhancedButton.hasStyleBeenInjected = true;
	    }
	  },

	  render: function render() {
	    var _props = this.props;
	    var centerRipple = _props.centerRipple;
	    var containerElement = _props.containerElement;
	    var disabled = _props.disabled;
	    var disableFocusRipple = _props.disableFocusRipple;
	    var disableKeyboardFocus = _props.disableKeyboardFocus;
	    var disableTouchRipple = _props.disableTouchRipple;
	    var focusRippleColor = _props.focusRippleColor;
	    var focusRippleOpacity = _props.focusRippleOpacity;
	    var linkButton = _props.linkButton;
	    var touchRippleColor = _props.touchRippleColor;
	    var touchRippleOpacity = _props.touchRippleOpacity;
	    var onBlur = _props.onBlur;
	    var onFocus = _props.onFocus;
	    var onKeyUp = _props.onKeyUp;
	    var onKeyDown = _props.onKeyDown;
	    var onTouchTap = _props.onTouchTap;
	    var style = _props.style;
	    var tabIndex = _props.tabIndex;
	    var type = _props.type;

	    var other = _objectWithoutProperties(_props, ['centerRipple', 'containerElement', 'disabled', 'disableFocusRipple', 'disableKeyboardFocus', 'disableTouchRipple', 'focusRippleColor', 'focusRippleOpacity', 'linkButton', 'touchRippleColor', 'touchRippleOpacity', 'onBlur', 'onFocus', 'onKeyUp', 'onKeyDown', 'onTouchTap', 'style', 'tabIndex', 'type']);

	    var mergedStyles = this.mergeAndPrefix({
	      border: 10,
	      background: 'none',
	      boxSizing: 'border-box',
	      display: 'inline-block',
	      font: 'inherit',
	      fontFamily: this.context.muiTheme.contentFontFamily,
	      tapHighlightColor: Colors.transparent,
	      appearance: this.props.linkButton ? null : 'button',
	      cursor: disabled ? 'default' : 'pointer',
	      textDecoration: 'none',
	      outline: 'none'
	    }, style);

	    var buttonProps = _extends({}, other, {
	      style: mergedStyles,
	      disabled: disabled,
	      onBlur: this._handleBlur,
	      onFocus: this._handleFocus,
	      onTouchTap: this._handleTouchTap,
	      onKeyUp: this._handleKeyUp,
	      onKeyDown: this._handleKeyDown,
	      tabIndex: tabIndex,
	      type: type
	    });

	    var buttonChildren = [];

	    if (!disabled && !disableFocusRipple && !disableKeyboardFocus) {
	      buttonChildren.push(React.createElement(FocusRipple, {
	        key: 'focusRipple',
	        color: focusRippleColor,
	        opacity: focusRippleOpacity,
	        show: this.state.isKeyboardFocused
	      }));
	    }

	    // Create ripples if we need to
	    if (!disabled && !disableTouchRipple) {
	      buttonChildren.push(React.createElement(
	        TouchRipple,
	        {
	          key: 'touchRipple',
	          centerRipple: centerRipple,
	          color: touchRippleColor,
	          opacity: touchRippleOpacity },
	        this.props.children
	      ));
	    } else {
	      buttonChildren.push(this.props.children);
	    }

	    if (disabled && linkButton) {
	      return React.createElement(
	        'span',
	        _extends({}, other, {
	          style: mergedStyles }),
	        this.props.children
	      );
	    }

	    return React.isValidElement(containerElement) ? React.cloneElement(containerElement, buttonProps, buttonChildren) : React.createElement(linkButton ? 'a' : containerElement, buttonProps, buttonChildren);
	  },

	  isKeyboardFocused: function isKeyboardFocused() {
	    return this.state.isKeyboardFocused;
	  },

	  removeKeyboardFocus: function removeKeyboardFocus(e) {
	    if (this.state.isKeyboardFocused) {
	      this.setState({ isKeyboardFocused: false });
	      this.props.onKeyboardFocus(e, false);
	    }
	  },

	  setKeyboardFocus: function setKeyboardFocus(e) {
	    if (!this.state.isKeyboardFocused) {
	      this.setState({ isKeyboardFocused: true });
	      this.props.onKeyboardFocus(e, true);
	    }
	  },

	  _handleKeyDown: function _handleKeyDown(e) {
	    if (!this.props.disabled && !this.props.disableKeyboardFocus) {
	      if (e.keyCode === KeyCode.TAB) {
	        _tabPressed = true;
	      }
	      if (e.keyCode === KeyCode.ENTER && this.state.isKeyboardFocused) {
	        this._handleTouchTap(e);
	      }
	    }
	    this.props.onKeyDown(e);
	  },

	  _handleKeyUp: function _handleKeyUp(e) {
	    if (!this.props.disabled && e.keyCode === KeyCode.SPACE && this.state.isKeyboardFocused) {
	      this._handleTouchTap(e);
	    }
	    this.props.onKeyUp(e);
	  },

	  _handleBlur: function _handleBlur(e) {
	    this._cancelFocusTimeout();
	    this.removeKeyboardFocus(e);
	    this.props.onBlur(e);
	  },

	  _handleFocus: function _handleFocus(e) {
	    var _this = this;

	    if (!this.props.disabled && !this.props.disableKeyboardFocus) {
	      //setTimeout is needed because the focus event fires first
	      //Wait so that we can capture if this was a keyboard focus
	      //or touch focus
	      this._focusTimeout = setTimeout(function () {
	        if (_tabPressed) {
	          _this.setKeyboardFocus(e);
	        }
	      }, 150);

	      this.props.onFocus(e);
	    }
	  },

	  _handleTouchTap: function _handleTouchTap(e) {
	    this._cancelFocusTimeout();
	    if (!this.props.disabled) {
	      _tabPressed = false;
	      this.removeKeyboardFocus(e);
	      this.props.onTouchTap(e);
	    }
	  },

	  _cancelFocusTimeout: function _cancelFocusTimeout() {
	    if (this._focusTimeout) {
	      clearTimeout(this._focusTimeout);
	      this._focusTimeout = null;
	    }
	  }

	});

	EnhancedButton.hasStyleBeenInjected = false;

	module.exports = EnhancedButton;

/***/ },
/* 205 */
/***/ function(module, exports) {

	"use strict";

	module.exports = {
	  DOWN: 40,
	  ESC: 27,
	  ENTER: 13,
	  LEFT: 37,
	  RIGHT: 39,
	  SPACE: 32,
	  TAB: 9,
	  UP: 38
	};

/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(207);
	var AutoPrefix = __webpack_require__(225);
	var Extend = __webpack_require__(227);

	/**
	 *	@params:
	 *	styles = Current styles.
	 *  props = New style properties that will override the current style.
	 */
	module.exports = {

	  propTypes: {
	    style: React.PropTypes.object
	  },

	  mergeStyles: function mergeStyles() {
	    var args = Array.prototype.slice.call(arguments, 0);
	    var base = args[0];
	    for (var i = 1; i < args.length; i++) {
	      if (args[i]) {
	        base = Extend(base, args[i]);
	      }
	    }

	    return base;
	  },

	  /**
	   * loops through all properties defined in the first argument, so overrides
	   * of undefined properties will not take place.
	   */
	  mergeAndPrefix: function mergeAndPrefix() {
	    var mergedStyles = this.mergeStyles.apply(this, arguments);
	    return AutoPrefix.all(mergedStyles);
	  }
	};

/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(208);


/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactWithAddons
	 */

	/**
	 * This module exists purely in the open source project, and is meant as a way
	 * to create a separate standalone build of React. This build has "addons", or
	 * functionality we've built and think might be useful but doesn't have a good
	 * place to live inside React core.
	 */

	'use strict';

	var LinkedStateMixin = __webpack_require__(209);
	var React = __webpack_require__(2);
	var ReactComponentWithPureRenderMixin =
	  __webpack_require__(212);
	var ReactCSSTransitionGroup = __webpack_require__(213);
	var ReactFragment = __webpack_require__(10);
	var ReactTransitionGroup = __webpack_require__(214);
	var ReactUpdates = __webpack_require__(24);

	var cx = __webpack_require__(222);
	var cloneWithProps = __webpack_require__(216);
	var update = __webpack_require__(223);

	React.addons = {
	  CSSTransitionGroup: ReactCSSTransitionGroup,
	  LinkedStateMixin: LinkedStateMixin,
	  PureRenderMixin: ReactComponentWithPureRenderMixin,
	  TransitionGroup: ReactTransitionGroup,

	  batchedUpdates: ReactUpdates.batchedUpdates,
	  classSet: cx,
	  cloneWithProps: cloneWithProps,
	  createFragment: ReactFragment.create,
	  update: update
	};

	if ("production" !== process.env.NODE_ENV) {
	  React.addons.Perf = __webpack_require__(150);
	  React.addons.TestUtils = __webpack_require__(224);
	}

	module.exports = React;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LinkedStateMixin
	 * @typechecks static-only
	 */

	'use strict';

	var ReactLink = __webpack_require__(210);
	var ReactStateSetters = __webpack_require__(211);

	/**
	 * A simple mixin around ReactLink.forState().
	 */
	var LinkedStateMixin = {
	  /**
	   * Create a ReactLink that's linked to part of this component's state. The
	   * ReactLink will have the current value of this.state[key] and will call
	   * setState() when a change is requested.
	   *
	   * @param {string} key state key to update. Note: you may want to use keyOf()
	   * if you're using Google Closure Compiler advanced mode.
	   * @return {ReactLink} ReactLink instance linking to the state.
	   */
	  linkState: function(key) {
	    return new ReactLink(
	      this.state[key],
	      ReactStateSetters.createStateKeySetter(this, key)
	    );
	  }
	};

	module.exports = LinkedStateMixin;


/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactLink
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * ReactLink encapsulates a common pattern in which a component wants to modify
	 * a prop received from its parent. ReactLink allows the parent to pass down a
	 * value coupled with a callback that, when invoked, expresses an intent to
	 * modify that value. For example:
	 *
	 * React.createClass({
	 *   getInitialState: function() {
	 *     return {value: ''};
	 *   },
	 *   render: function() {
	 *     var valueLink = new ReactLink(this.state.value, this._handleValueChange);
	 *     return <input valueLink={valueLink} />;
	 *   },
	 *   this._handleValueChange: function(newValue) {
	 *     this.setState({value: newValue});
	 *   }
	 * });
	 *
	 * We have provided some sugary mixins to make the creation and
	 * consumption of ReactLink easier; see LinkedValueUtils and LinkedStateMixin.
	 */

	var React = __webpack_require__(2);

	/**
	 * @param {*} value current value of the link
	 * @param {function} requestChange callback to request a change
	 */
	function ReactLink(value, requestChange) {
	  this.value = value;
	  this.requestChange = requestChange;
	}

	/**
	 * Creates a PropType that enforces the ReactLink API and optionally checks the
	 * type of the value being passed inside the link. Example:
	 *
	 * MyComponent.propTypes = {
	 *   tabIndexLink: ReactLink.PropTypes.link(React.PropTypes.number)
	 * }
	 */
	function createLinkTypeChecker(linkType) {
	  var shapes = {
	    value: typeof linkType === 'undefined' ?
	      React.PropTypes.any.isRequired :
	      linkType.isRequired,
	    requestChange: React.PropTypes.func.isRequired
	  };
	  return React.PropTypes.shape(shapes);
	}

	ReactLink.PropTypes = {
	  link: createLinkTypeChecker
	};

	module.exports = ReactLink;


/***/ },
/* 211 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactStateSetters
	 */

	'use strict';

	var ReactStateSetters = {
	  /**
	   * Returns a function that calls the provided function, and uses the result
	   * of that to set the component's state.
	   *
	   * @param {ReactCompositeComponent} component
	   * @param {function} funcReturningState Returned callback uses this to
	   *                                      determine how to update state.
	   * @return {function} callback that when invoked uses funcReturningState to
	   *                    determined the object literal to setState.
	   */
	  createStateSetter: function(component, funcReturningState) {
	    return function(a, b, c, d, e, f) {
	      var partialState = funcReturningState.call(component, a, b, c, d, e, f);
	      if (partialState) {
	        component.setState(partialState);
	      }
	    };
	  },

	  /**
	   * Returns a single-argument callback that can be used to update a single
	   * key in the component's state.
	   *
	   * Note: this is memoized function, which makes it inexpensive to call.
	   *
	   * @param {ReactCompositeComponent} component
	   * @param {string} key The key in the state that you should update.
	   * @return {function} callback of 1 argument which calls setState() with
	   *                    the provided keyName and callback argument.
	   */
	  createStateKeySetter: function(component, key) {
	    // Memoize the setters.
	    var cache = component.__keySetters || (component.__keySetters = {});
	    return cache[key] || (cache[key] = createStateKeySetter(component, key));
	  }
	};

	function createStateKeySetter(component, key) {
	  // Partial state is allocated outside of the function closure so it can be
	  // reused with every call, avoiding memory allocation when this function
	  // is called.
	  var partialState = {};
	  return function stateKeySetter(value) {
	    partialState[key] = value;
	    component.setState(partialState);
	  };
	}

	ReactStateSetters.Mixin = {
	  /**
	   * Returns a function that calls the provided function, and uses the result
	   * of that to set the component's state.
	   *
	   * For example, these statements are equivalent:
	   *
	   *   this.setState({x: 1});
	   *   this.createStateSetter(function(xValue) {
	   *     return {x: xValue};
	   *   })(1);
	   *
	   * @param {function} funcReturningState Returned callback uses this to
	   *                                      determine how to update state.
	   * @return {function} callback that when invoked uses funcReturningState to
	   *                    determined the object literal to setState.
	   */
	  createStateSetter: function(funcReturningState) {
	    return ReactStateSetters.createStateSetter(this, funcReturningState);
	  },

	  /**
	   * Returns a single-argument callback that can be used to update a single
	   * key in the component's state.
	   *
	   * For example, these statements are equivalent:
	   *
	   *   this.setState({x: 1});
	   *   this.createStateKeySetter('x')(1);
	   *
	   * Note: this is memoized function, which makes it inexpensive to call.
	   *
	   * @param {string} key The key in the state that you should update.
	   * @return {function} callback of 1 argument which calls setState() with
	   *                    the provided keyName and callback argument.
	   */
	  createStateKeySetter: function(key) {
	    return ReactStateSetters.createStateKeySetter(this, key);
	  }
	};

	module.exports = ReactStateSetters;


/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	* @providesModule ReactComponentWithPureRenderMixin
	*/

	'use strict';

	var shallowEqual = __webpack_require__(137);

	/**
	 * If your React component's render function is "pure", e.g. it will render the
	 * same result given the same props and state, provide this Mixin for a
	 * considerable performance boost.
	 *
	 * Most React components have pure render functions.
	 *
	 * Example:
	 *
	 *   var ReactComponentWithPureRenderMixin =
	 *     require('ReactComponentWithPureRenderMixin');
	 *   React.createClass({
	 *     mixins: [ReactComponentWithPureRenderMixin],
	 *
	 *     render: function() {
	 *       return <div className={this.props.className}>foo</div>;
	 *     }
	 *   });
	 *
	 * Note: This only checks shallow equality for props and state. If these contain
	 * complex data structures this mixin may have false-negatives for deeper
	 * differences. Only mixin to components which have simple props and state, or
	 * use `forceUpdate()` when you know deep data structures have changed.
	 */
	var ReactComponentWithPureRenderMixin = {
	  shouldComponentUpdate: function(nextProps, nextState) {
	    return !shallowEqual(this.props, nextProps) ||
	           !shallowEqual(this.state, nextState);
	  }
	};

	module.exports = ReactComponentWithPureRenderMixin;


/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 * @providesModule ReactCSSTransitionGroup
	 */

	'use strict';

	var React = __webpack_require__(2);

	var assign = __webpack_require__(13);

	var ReactTransitionGroup = React.createFactory(
	  __webpack_require__(214)
	);
	var ReactCSSTransitionGroupChild = React.createFactory(
	  __webpack_require__(219)
	);

	var ReactCSSTransitionGroup = React.createClass({
	  displayName: 'ReactCSSTransitionGroup',

	  propTypes: {
	    transitionName: React.PropTypes.string.isRequired,
	    transitionAppear: React.PropTypes.bool,
	    transitionEnter: React.PropTypes.bool,
	    transitionLeave: React.PropTypes.bool
	  },

	  getDefaultProps: function() {
	    return {
	      transitionAppear: false,
	      transitionEnter: true,
	      transitionLeave: true
	    };
	  },

	  _wrapChild: function(child) {
	    // We need to provide this childFactory so that
	    // ReactCSSTransitionGroupChild can receive updates to name, enter, and
	    // leave while it is leaving.
	    return ReactCSSTransitionGroupChild(
	      {
	        name: this.props.transitionName,
	        appear: this.props.transitionAppear,
	        enter: this.props.transitionEnter,
	        leave: this.props.transitionLeave
	      },
	      child
	    );
	  },

	  render: function() {
	    return (
	      ReactTransitionGroup(
	        assign({}, this.props, {childFactory: this._wrapChild})
	      )
	    );
	  }
	});

	module.exports = ReactCSSTransitionGroup;


/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactTransitionGroup
	 */

	'use strict';

	var React = __webpack_require__(2);
	var ReactTransitionChildMapping = __webpack_require__(215);

	var assign = __webpack_require__(13);
	var cloneWithProps = __webpack_require__(216);
	var emptyFunction = __webpack_require__(16);

	var ReactTransitionGroup = React.createClass({
	  displayName: 'ReactTransitionGroup',

	  propTypes: {
	    component: React.PropTypes.any,
	    childFactory: React.PropTypes.func
	  },

	  getDefaultProps: function() {
	    return {
	      component: 'span',
	      childFactory: emptyFunction.thatReturnsArgument
	    };
	  },

	  getInitialState: function() {
	    return {
	      children: ReactTransitionChildMapping.getChildMapping(this.props.children)
	    };
	  },

	  componentWillMount: function() {
	    this.currentlyTransitioningKeys = {};
	    this.keysToEnter = [];
	    this.keysToLeave = [];
	  },

	  componentDidMount: function() {
	    var initialChildMapping = this.state.children;
	    for (var key in initialChildMapping) {
	      if (initialChildMapping[key]) {
	        this.performAppear(key);
	      }
	    }
	  },

	  componentWillReceiveProps: function(nextProps) {
	    var nextChildMapping = ReactTransitionChildMapping.getChildMapping(
	      nextProps.children
	    );
	    var prevChildMapping = this.state.children;

	    this.setState({
	      children: ReactTransitionChildMapping.mergeChildMappings(
	        prevChildMapping,
	        nextChildMapping
	      )
	    });

	    var key;

	    for (key in nextChildMapping) {
	      var hasPrev = prevChildMapping && prevChildMapping.hasOwnProperty(key);
	      if (nextChildMapping[key] && !hasPrev &&
	          !this.currentlyTransitioningKeys[key]) {
	        this.keysToEnter.push(key);
	      }
	    }

	    for (key in prevChildMapping) {
	      var hasNext = nextChildMapping && nextChildMapping.hasOwnProperty(key);
	      if (prevChildMapping[key] && !hasNext &&
	          !this.currentlyTransitioningKeys[key]) {
	        this.keysToLeave.push(key);
	      }
	    }

	    // If we want to someday check for reordering, we could do it here.
	  },

	  componentDidUpdate: function() {
	    var keysToEnter = this.keysToEnter;
	    this.keysToEnter = [];
	    keysToEnter.forEach(this.performEnter);

	    var keysToLeave = this.keysToLeave;
	    this.keysToLeave = [];
	    keysToLeave.forEach(this.performLeave);
	  },

	  performAppear: function(key) {
	    this.currentlyTransitioningKeys[key] = true;

	    var component = this.refs[key];

	    if (component.componentWillAppear) {
	      component.componentWillAppear(
	        this._handleDoneAppearing.bind(this, key)
	      );
	    } else {
	      this._handleDoneAppearing(key);
	    }
	  },

	  _handleDoneAppearing: function(key) {
	    var component = this.refs[key];
	    if (component.componentDidAppear) {
	      component.componentDidAppear();
	    }

	    delete this.currentlyTransitioningKeys[key];

	    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(
	      this.props.children
	    );

	    if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {
	      // This was removed before it had fully appeared. Remove it.
	      this.performLeave(key);
	    }
	  },

	  performEnter: function(key) {
	    this.currentlyTransitioningKeys[key] = true;

	    var component = this.refs[key];

	    if (component.componentWillEnter) {
	      component.componentWillEnter(
	        this._handleDoneEntering.bind(this, key)
	      );
	    } else {
	      this._handleDoneEntering(key);
	    }
	  },

	  _handleDoneEntering: function(key) {
	    var component = this.refs[key];
	    if (component.componentDidEnter) {
	      component.componentDidEnter();
	    }

	    delete this.currentlyTransitioningKeys[key];

	    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(
	      this.props.children
	    );

	    if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {
	      // This was removed before it had fully entered. Remove it.
	      this.performLeave(key);
	    }
	  },

	  performLeave: function(key) {
	    this.currentlyTransitioningKeys[key] = true;

	    var component = this.refs[key];
	    if (component.componentWillLeave) {
	      component.componentWillLeave(this._handleDoneLeaving.bind(this, key));
	    } else {
	      // Note that this is somewhat dangerous b/c it calls setState()
	      // again, effectively mutating the component before all the work
	      // is done.
	      this._handleDoneLeaving(key);
	    }
	  },

	  _handleDoneLeaving: function(key) {
	    var component = this.refs[key];

	    if (component.componentDidLeave) {
	      component.componentDidLeave();
	    }

	    delete this.currentlyTransitioningKeys[key];

	    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(
	      this.props.children
	    );

	    if (currentChildMapping && currentChildMapping.hasOwnProperty(key)) {
	      // This entered again before it fully left. Add it again.
	      this.performEnter(key);
	    } else {
	      var newChildren = assign({}, this.state.children);
	      delete newChildren[key];
	      this.setState({children: newChildren});
	    }
	  },

	  render: function() {
	    // TODO: we could get rid of the need for the wrapper node
	    // by cloning a single child
	    var childrenToRender = [];
	    for (var key in this.state.children) {
	      var child = this.state.children[key];
	      if (child) {
	        // You may need to apply reactive updates to a child as it is leaving.
	        // The normal React way to do it won't work since the child will have
	        // already been removed. In case you need this behavior you can provide
	        // a childFactory function to wrap every child, even the ones that are
	        // leaving.
	        childrenToRender.push(cloneWithProps(
	          this.props.childFactory(child),
	          {ref: key, key: key}
	        ));
	      }
	    }
	    return React.createElement(
	      this.props.component,
	      this.props,
	      childrenToRender
	    );
	  }
	});

	module.exports = ReactTransitionGroup;


/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 * @providesModule ReactTransitionChildMapping
	 */

	'use strict';

	var ReactChildren = __webpack_require__(8);
	var ReactFragment = __webpack_require__(10);

	var ReactTransitionChildMapping = {
	  /**
	   * Given `this.props.children`, return an object mapping key to child. Just
	   * simple syntactic sugar around ReactChildren.map().
	   *
	   * @param {*} children `this.props.children`
	   * @return {object} Mapping of key to child
	   */
	  getChildMapping: function(children) {
	    if (!children) {
	      return children;
	    }
	    return ReactFragment.extract(ReactChildren.map(children, function(child) {
	      return child;
	    }));
	  },

	  /**
	   * When you're adding or removing children some may be added or removed in the
	   * same render pass. We want to show *both* since we want to simultaneously
	   * animate elements in and out. This function takes a previous set of keys
	   * and a new set of keys and merges them with its best guess of the correct
	   * ordering. In the future we may expose some of the utilities in
	   * ReactMultiChild to make this easy, but for now React itself does not
	   * directly have this concept of the union of prevChildren and nextChildren
	   * so we implement it here.
	   *
	   * @param {object} prev prev children as returned from
	   * `ReactTransitionChildMapping.getChildMapping()`.
	   * @param {object} next next children as returned from
	   * `ReactTransitionChildMapping.getChildMapping()`.
	   * @return {object} a key set that contains all keys in `prev` and all keys
	   * in `next` in a reasonable order.
	   */
	  mergeChildMappings: function(prev, next) {
	    prev = prev || {};
	    next = next || {};

	    function getValueForKey(key) {
	      if (next.hasOwnProperty(key)) {
	        return next[key];
	      } else {
	        return prev[key];
	      }
	    }

	    // For each key of `next`, the list of keys to insert before that key in
	    // the combined list
	    var nextKeysPending = {};

	    var pendingKeys = [];
	    for (var prevKey in prev) {
	      if (next.hasOwnProperty(prevKey)) {
	        if (pendingKeys.length) {
	          nextKeysPending[prevKey] = pendingKeys;
	          pendingKeys = [];
	        }
	      } else {
	        pendingKeys.push(prevKey);
	      }
	    }

	    var i;
	    var childMapping = {};
	    for (var nextKey in next) {
	      if (nextKeysPending.hasOwnProperty(nextKey)) {
	        for (i = 0; i < nextKeysPending[nextKey].length; i++) {
	          var pendingNextKey = nextKeysPending[nextKey][i];
	          childMapping[nextKeysPending[nextKey][i]] = getValueForKey(
	            pendingNextKey
	          );
	        }
	      }
	      childMapping[nextKey] = getValueForKey(nextKey);
	    }

	    // Finally, add the keys which didn't appear before any key in `next`
	    for (i = 0; i < pendingKeys.length; i++) {
	      childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
	    }

	    return childMapping;
	  }
	};

	module.exports = ReactTransitionChildMapping;


/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 * @providesModule cloneWithProps
	 */

	'use strict';

	var ReactElement = __webpack_require__(11);
	var ReactPropTransferer = __webpack_require__(217);

	var keyOf = __webpack_require__(39);
	var warning = __webpack_require__(15);

	var CHILDREN_PROP = keyOf({children: null});

	/**
	 * Sometimes you want to change the props of a child passed to you. Usually
	 * this is to add a CSS class.
	 *
	 * @param {ReactElement} child child element you'd like to clone
	 * @param {object} props props you'd like to modify. className and style will be
	 * merged automatically.
	 * @return {ReactElement} a clone of child with props merged in.
	 */
	function cloneWithProps(child, props) {
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      !child.ref,
	      'You are calling cloneWithProps() on a child with a ref. This is ' +
	      'dangerous because you\'re creating a new child which will not be ' +
	      'added as a ref to its parent.'
	    ) : null);
	  }

	  var newProps = ReactPropTransferer.mergeProps(props, child.props);

	  // Use `child.props.children` if it is provided.
	  if (!newProps.hasOwnProperty(CHILDREN_PROP) &&
	      child.props.hasOwnProperty(CHILDREN_PROP)) {
	    newProps.children = child.props.children;
	  }

	  // The current API doesn't retain _owner and _context, which is why this
	  // doesn't use ReactElement.cloneAndReplaceProps.
	  return ReactElement.createElement(child.type, newProps);
	}

	module.exports = cloneWithProps;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTransferer
	 */

	'use strict';

	var assign = __webpack_require__(13);
	var emptyFunction = __webpack_require__(16);
	var joinClasses = __webpack_require__(218);

	/**
	 * Creates a transfer strategy that will merge prop values using the supplied
	 * `mergeStrategy`. If a prop was previously unset, this just sets it.
	 *
	 * @param {function} mergeStrategy
	 * @return {function}
	 */
	function createTransferStrategy(mergeStrategy) {
	  return function(props, key, value) {
	    if (!props.hasOwnProperty(key)) {
	      props[key] = value;
	    } else {
	      props[key] = mergeStrategy(props[key], value);
	    }
	  };
	}

	var transferStrategyMerge = createTransferStrategy(function(a, b) {
	  // `merge` overrides the first object's (`props[key]` above) keys using the
	  // second object's (`value`) keys. An object's style's existing `propA` would
	  // get overridden. Flip the order here.
	  return assign({}, b, a);
	});

	/**
	 * Transfer strategies dictate how props are transferred by `transferPropsTo`.
	 * NOTE: if you add any more exceptions to this list you should be sure to
	 * update `cloneWithProps()` accordingly.
	 */
	var TransferStrategies = {
	  /**
	   * Never transfer `children`.
	   */
	  children: emptyFunction,
	  /**
	   * Transfer the `className` prop by merging them.
	   */
	  className: createTransferStrategy(joinClasses),
	  /**
	   * Transfer the `style` prop (which is an object) by merging them.
	   */
	  style: transferStrategyMerge
	};

	/**
	 * Mutates the first argument by transferring the properties from the second
	 * argument.
	 *
	 * @param {object} props
	 * @param {object} newProps
	 * @return {object}
	 */
	function transferInto(props, newProps) {
	  for (var thisKey in newProps) {
	    if (!newProps.hasOwnProperty(thisKey)) {
	      continue;
	    }

	    var transferStrategy = TransferStrategies[thisKey];

	    if (transferStrategy && TransferStrategies.hasOwnProperty(thisKey)) {
	      transferStrategy(props, thisKey, newProps[thisKey]);
	    } else if (!props.hasOwnProperty(thisKey)) {
	      props[thisKey] = newProps[thisKey];
	    }
	  }
	  return props;
	}

	/**
	 * ReactPropTransferer are capable of transferring props to another component
	 * using a `transferPropsTo` method.
	 *
	 * @class ReactPropTransferer
	 */
	var ReactPropTransferer = {

	  /**
	   * Merge two props objects using TransferStrategies.
	   *
	   * @param {object} oldProps original props (they take precedence)
	   * @param {object} newProps new props to merge in
	   * @return {object} a new object containing both sets of props merged.
	   */
	  mergeProps: function(oldProps, newProps) {
	    return transferInto(assign({}, oldProps), newProps);
	  }

	};

	module.exports = ReactPropTransferer;


/***/ },
/* 218 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule joinClasses
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Combines multiple className strings into one.
	 * http://jsperf.com/joinclasses-args-vs-array
	 *
	 * @param {...?string} classes
	 * @return {string}
	 */
	function joinClasses(className/*, ... */) {
	  if (!className) {
	    className = '';
	  }
	  var nextClass;
	  var argLength = arguments.length;
	  if (argLength > 1) {
	    for (var ii = 1; ii < argLength; ii++) {
	      nextClass = arguments[ii];
	      if (nextClass) {
	        className = (className ? className + ' ' : '') + nextClass;
	      }
	    }
	  }
	  return className;
	}

	module.exports = joinClasses;


/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 * @providesModule ReactCSSTransitionGroupChild
	 */

	'use strict';

	var React = __webpack_require__(2);

	var CSSCore = __webpack_require__(220);
	var ReactTransitionEvents = __webpack_require__(221);

	var onlyChild = __webpack_require__(156);
	var warning = __webpack_require__(15);

	// We don't remove the element from the DOM until we receive an animationend or
	// transitionend event. If the user screws up and forgets to add an animation
	// their node will be stuck in the DOM forever, so we detect if an animation
	// does not start and if it doesn't, we just call the end listener immediately.
	var TICK = 17;
	var NO_EVENT_TIMEOUT = 5000;

	var noEventListener = null;


	if ("production" !== process.env.NODE_ENV) {
	  noEventListener = function() {
	    ("production" !== process.env.NODE_ENV ? warning(
	      false,
	      'transition(): tried to perform an animation without ' +
	      'an animationend or transitionend event after timeout (' +
	      '%sms). You should either disable this ' +
	      'transition in JS or add a CSS animation/transition.',
	      NO_EVENT_TIMEOUT
	    ) : null);
	  };
	}

	var ReactCSSTransitionGroupChild = React.createClass({
	  displayName: 'ReactCSSTransitionGroupChild',

	  transition: function(animationType, finishCallback) {
	    var node = this.getDOMNode();
	    var className = this.props.name + '-' + animationType;
	    var activeClassName = className + '-active';
	    var noEventTimeout = null;

	    var endListener = function(e) {
	      if (e && e.target !== node) {
	        return;
	      }
	      if ("production" !== process.env.NODE_ENV) {
	        clearTimeout(noEventTimeout);
	      }

	      CSSCore.removeClass(node, className);
	      CSSCore.removeClass(node, activeClassName);

	      ReactTransitionEvents.removeEndEventListener(node, endListener);

	      // Usually this optional callback is used for informing an owner of
	      // a leave animation and telling it to remove the child.
	      if (finishCallback) {
	        finishCallback();
	      }
	    };

	    ReactTransitionEvents.addEndEventListener(node, endListener);

	    CSSCore.addClass(node, className);

	    // Need to do this to actually trigger a transition.
	    this.queueClass(activeClassName);

	    if ("production" !== process.env.NODE_ENV) {
	      noEventTimeout = setTimeout(noEventListener, NO_EVENT_TIMEOUT);
	    }
	  },

	  queueClass: function(className) {
	    this.classNameQueue.push(className);

	    if (!this.timeout) {
	      this.timeout = setTimeout(this.flushClassNameQueue, TICK);
	    }
	  },

	  flushClassNameQueue: function() {
	    if (this.isMounted()) {
	      this.classNameQueue.forEach(
	        CSSCore.addClass.bind(CSSCore, this.getDOMNode())
	      );
	    }
	    this.classNameQueue.length = 0;
	    this.timeout = null;
	  },

	  componentWillMount: function() {
	    this.classNameQueue = [];
	  },

	  componentWillUnmount: function() {
	    if (this.timeout) {
	      clearTimeout(this.timeout);
	    }
	  },

	  componentWillAppear: function(done) {
	    if (this.props.appear) {
	      this.transition('appear', done);
	    } else {
	      done();
	    }
	  },

	  componentWillEnter: function(done) {
	    if (this.props.enter) {
	      this.transition('enter', done);
	    } else {
	      done();
	    }
	  },

	  componentWillLeave: function(done) {
	    if (this.props.leave) {
	      this.transition('leave', done);
	    } else {
	      done();
	    }
	  },

	  render: function() {
	    return onlyChild(this.props.children);
	  }
	});

	module.exports = ReactCSSTransitionGroupChild;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSCore
	 * @typechecks
	 */

	var invariant = __webpack_require__(7);

	/**
	 * The CSSCore module specifies the API (and implements most of the methods)
	 * that should be used when dealing with the display of elements (via their
	 * CSS classes and visibility on screen. It is an API focused on mutating the
	 * display and not reading it as no logical state should be encoded in the
	 * display of elements.
	 */

	var CSSCore = {

	  /**
	   * Adds the class passed in to the element if it doesn't already have it.
	   *
	   * @param {DOMElement} element the element to set the class on
	   * @param {string} className the CSS className
	   * @return {DOMElement} the element passed in
	   */
	  addClass: function(element, className) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !/\s/.test(className),
	      'CSSCore.addClass takes only a single class name. "%s" contains ' +
	      'multiple classes.', className
	    ) : invariant(!/\s/.test(className)));

	    if (className) {
	      if (element.classList) {
	        element.classList.add(className);
	      } else if (!CSSCore.hasClass(element, className)) {
	        element.className = element.className + ' ' + className;
	      }
	    }
	    return element;
	  },

	  /**
	   * Removes the class passed in from the element
	   *
	   * @param {DOMElement} element the element to set the class on
	   * @param {string} className the CSS className
	   * @return {DOMElement} the element passed in
	   */
	  removeClass: function(element, className) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !/\s/.test(className),
	      'CSSCore.removeClass takes only a single class name. "%s" contains ' +
	      'multiple classes.', className
	    ) : invariant(!/\s/.test(className)));

	    if (className) {
	      if (element.classList) {
	        element.classList.remove(className);
	      } else if (CSSCore.hasClass(element, className)) {
	        element.className = element.className
	          .replace(new RegExp('(^|\\s)' + className + '(?:\\s|$)', 'g'), '$1')
	          .replace(/\s+/g, ' ') // multiple spaces to one
	          .replace(/^\s*|\s*$/g, ''); // trim the ends
	      }
	    }
	    return element;
	  },

	  /**
	   * Helper to add or remove a class from an element based on a condition.
	   *
	   * @param {DOMElement} element the element to set the class on
	   * @param {string} className the CSS className
	   * @param {*} bool condition to whether to add or remove the class
	   * @return {DOMElement} the element passed in
	   */
	  conditionClass: function(element, className, bool) {
	    return (bool ? CSSCore.addClass : CSSCore.removeClass)(element, className);
	  },

	  /**
	   * Tests whether the element has the class specified.
	   *
	   * @param {DOMNode|DOMWindow} element the element to set the class on
	   * @param {string} className the CSS className
	   * @return {boolean} true if the element has the class, false if not
	   */
	  hasClass: function(element, className) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !/\s/.test(className),
	      'CSS.hasClass takes only a single class name.'
	    ) : invariant(!/\s/.test(className)));
	    if (element.classList) {
	      return !!className && element.classList.contains(className);
	    }
	    return (' ' + element.className + ' ').indexOf(' ' + className + ' ') > -1;
	  }

	};

	module.exports = CSSCore;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactTransitionEvents
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(51);

	/**
	 * EVENT_NAME_MAP is used to determine which event fired when a
	 * transition/animation ends, based on the style property used to
	 * define that event.
	 */
	var EVENT_NAME_MAP = {
	  transitionend: {
	    'transition': 'transitionend',
	    'WebkitTransition': 'webkitTransitionEnd',
	    'MozTransition': 'mozTransitionEnd',
	    'OTransition': 'oTransitionEnd',
	    'msTransition': 'MSTransitionEnd'
	  },

	  animationend: {
	    'animation': 'animationend',
	    'WebkitAnimation': 'webkitAnimationEnd',
	    'MozAnimation': 'mozAnimationEnd',
	    'OAnimation': 'oAnimationEnd',
	    'msAnimation': 'MSAnimationEnd'
	  }
	};

	var endEvents = [];

	function detectEvents() {
	  var testEl = document.createElement('div');
	  var style = testEl.style;

	  // On some platforms, in particular some releases of Android 4.x,
	  // the un-prefixed "animation" and "transition" properties are defined on the
	  // style object but the events that fire will still be prefixed, so we need
	  // to check if the un-prefixed events are useable, and if not remove them
	  // from the map
	  if (!('AnimationEvent' in window)) {
	    delete EVENT_NAME_MAP.animationend.animation;
	  }

	  if (!('TransitionEvent' in window)) {
	    delete EVENT_NAME_MAP.transitionend.transition;
	  }

	  for (var baseEventName in EVENT_NAME_MAP) {
	    var baseEvents = EVENT_NAME_MAP[baseEventName];
	    for (var styleName in baseEvents) {
	      if (styleName in style) {
	        endEvents.push(baseEvents[styleName]);
	        break;
	      }
	    }
	  }
	}

	if (ExecutionEnvironment.canUseDOM) {
	  detectEvents();
	}

	// We use the raw {add|remove}EventListener() call because EventListener
	// does not know how to remove event listeners and we really should
	// clean up. Also, these events are not triggered in older browsers
	// so we should be A-OK here.

	function addEventListener(node, eventName, eventListener) {
	  node.addEventListener(eventName, eventListener, false);
	}

	function removeEventListener(node, eventName, eventListener) {
	  node.removeEventListener(eventName, eventListener, false);
	}

	var ReactTransitionEvents = {
	  addEndEventListener: function(node, eventListener) {
	    if (endEvents.length === 0) {
	      // If CSS transitions are not supported, trigger an "end animation"
	      // event immediately.
	      window.setTimeout(eventListener, 0);
	      return;
	    }
	    endEvents.forEach(function(endEvent) {
	      addEventListener(node, endEvent, eventListener);
	    });
	  },

	  removeEndEventListener: function(node, eventListener) {
	    if (endEvents.length === 0) {
	      return;
	    }
	    endEvents.forEach(function(endEvent) {
	      removeEventListener(node, endEvent, eventListener);
	    });
	  }
	};

	module.exports = ReactTransitionEvents;


/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule cx
	 */

	/**
	 * This function is used to mark string literals representing CSS class names
	 * so that they can be transformed statically. This allows for modularization
	 * and minification of CSS class names.
	 *
	 * In static_upstream, this function is actually implemented, but it should
	 * eventually be replaced with something more descriptive, and the transform
	 * that is used in the main stack should be ported for use elsewhere.
	 *
	 * @param string|object className to modularize, or an object of key/values.
	 *                      In the object case, the values are conditions that
	 *                      determine if the className keys should be included.
	 * @param [string ...]  Variable list of classNames in the string case.
	 * @return string       Renderable space-separated CSS className.
	 */

	'use strict';
	var warning = __webpack_require__(15);

	var warned = false;

	function cx(classNames) {
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      warned,
	      'React.addons.classSet will be deprecated in a future version. See ' +
	      'http://fb.me/react-addons-classset'
	    ) : null);
	    warned = true;
	  }

	  if (typeof classNames == 'object') {
	    return Object.keys(classNames).filter(function(className) {
	      return classNames[className];
	    }).join(' ');
	  } else {
	    return Array.prototype.join.call(arguments, ' ');
	  }
	}

	module.exports = cx;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule update
	 */

	 /* global hasOwnProperty:true */

	'use strict';

	var assign = __webpack_require__(13);
	var keyOf = __webpack_require__(39);
	var invariant = __webpack_require__(7);
	var hasOwnProperty = {}.hasOwnProperty;

	function shallowCopy(x) {
	  if (Array.isArray(x)) {
	    return x.concat();
	  } else if (x && typeof x === 'object') {
	    return assign(new x.constructor(), x);
	  } else {
	    return x;
	  }
	}

	var COMMAND_PUSH = keyOf({$push: null});
	var COMMAND_UNSHIFT = keyOf({$unshift: null});
	var COMMAND_SPLICE = keyOf({$splice: null});
	var COMMAND_SET = keyOf({$set: null});
	var COMMAND_MERGE = keyOf({$merge: null});
	var COMMAND_APPLY = keyOf({$apply: null});

	var ALL_COMMANDS_LIST = [
	  COMMAND_PUSH,
	  COMMAND_UNSHIFT,
	  COMMAND_SPLICE,
	  COMMAND_SET,
	  COMMAND_MERGE,
	  COMMAND_APPLY
	];

	var ALL_COMMANDS_SET = {};

	ALL_COMMANDS_LIST.forEach(function(command) {
	  ALL_COMMANDS_SET[command] = true;
	});

	function invariantArrayCase(value, spec, command) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    Array.isArray(value),
	    'update(): expected target of %s to be an array; got %s.',
	    command,
	    value
	  ) : invariant(Array.isArray(value)));
	  var specValue = spec[command];
	  ("production" !== process.env.NODE_ENV ? invariant(
	    Array.isArray(specValue),
	    'update(): expected spec of %s to be an array; got %s. ' +
	    'Did you forget to wrap your parameter in an array?',
	    command,
	    specValue
	  ) : invariant(Array.isArray(specValue)));
	}

	function update(value, spec) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    typeof spec === 'object',
	    'update(): You provided a key path to update() that did not contain one ' +
	    'of %s. Did you forget to include {%s: ...}?',
	    ALL_COMMANDS_LIST.join(', '),
	    COMMAND_SET
	  ) : invariant(typeof spec === 'object'));

	  if (hasOwnProperty.call(spec, COMMAND_SET)) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      Object.keys(spec).length === 1,
	      'Cannot have more than one key in an object with %s',
	      COMMAND_SET
	    ) : invariant(Object.keys(spec).length === 1));

	    return spec[COMMAND_SET];
	  }

	  var nextValue = shallowCopy(value);

	  if (hasOwnProperty.call(spec, COMMAND_MERGE)) {
	    var mergeObj = spec[COMMAND_MERGE];
	    ("production" !== process.env.NODE_ENV ? invariant(
	      mergeObj && typeof mergeObj === 'object',
	      'update(): %s expects a spec of type \'object\'; got %s',
	      COMMAND_MERGE,
	      mergeObj
	    ) : invariant(mergeObj && typeof mergeObj === 'object'));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      nextValue && typeof nextValue === 'object',
	      'update(): %s expects a target of type \'object\'; got %s',
	      COMMAND_MERGE,
	      nextValue
	    ) : invariant(nextValue && typeof nextValue === 'object'));
	    assign(nextValue, spec[COMMAND_MERGE]);
	  }

	  if (hasOwnProperty.call(spec, COMMAND_PUSH)) {
	    invariantArrayCase(value, spec, COMMAND_PUSH);
	    spec[COMMAND_PUSH].forEach(function(item) {
	      nextValue.push(item);
	    });
	  }

	  if (hasOwnProperty.call(spec, COMMAND_UNSHIFT)) {
	    invariantArrayCase(value, spec, COMMAND_UNSHIFT);
	    spec[COMMAND_UNSHIFT].forEach(function(item) {
	      nextValue.unshift(item);
	    });
	  }

	  if (hasOwnProperty.call(spec, COMMAND_SPLICE)) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      Array.isArray(value),
	      'Expected %s target to be an array; got %s',
	      COMMAND_SPLICE,
	      value
	    ) : invariant(Array.isArray(value)));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      Array.isArray(spec[COMMAND_SPLICE]),
	      'update(): expected spec of %s to be an array of arrays; got %s. ' +
	      'Did you forget to wrap your parameters in an array?',
	      COMMAND_SPLICE,
	      spec[COMMAND_SPLICE]
	    ) : invariant(Array.isArray(spec[COMMAND_SPLICE])));
	    spec[COMMAND_SPLICE].forEach(function(args) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        Array.isArray(args),
	        'update(): expected spec of %s to be an array of arrays; got %s. ' +
	        'Did you forget to wrap your parameters in an array?',
	        COMMAND_SPLICE,
	        spec[COMMAND_SPLICE]
	      ) : invariant(Array.isArray(args)));
	      nextValue.splice.apply(nextValue, args);
	    });
	  }

	  if (hasOwnProperty.call(spec, COMMAND_APPLY)) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof spec[COMMAND_APPLY] === 'function',
	      'update(): expected spec of %s to be a function; got %s.',
	      COMMAND_APPLY,
	      spec[COMMAND_APPLY]
	    ) : invariant(typeof spec[COMMAND_APPLY] === 'function'));
	    nextValue = spec[COMMAND_APPLY](nextValue);
	  }

	  for (var k in spec) {
	    if (!(ALL_COMMANDS_SET.hasOwnProperty(k) && ALL_COMMANDS_SET[k])) {
	      nextValue[k] = update(value[k], spec[k]);
	    }
	  }

	  return nextValue;
	}

	module.exports = update;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactTestUtils
	 */

	'use strict';

	var EventConstants = __webpack_require__(5);
	var EventPluginHub = __webpack_require__(69);
	var EventPropagators = __webpack_require__(93);
	var React = __webpack_require__(2);
	var ReactElement = __webpack_require__(11);
	var ReactEmptyComponent = __webpack_require__(76);
	var ReactBrowserEventEmitter = __webpack_require__(68);
	var ReactCompositeComponent = __webpack_require__(84);
	var ReactInstanceHandles = __webpack_require__(20);
	var ReactInstanceMap = __webpack_require__(36);
	var ReactMount = __webpack_require__(67);
	var ReactUpdates = __webpack_require__(24);
	var SyntheticEvent = __webpack_require__(97);

	var assign = __webpack_require__(13);
	var emptyObject = __webpack_require__(14);

	var topLevelTypes = EventConstants.topLevelTypes;

	function Event(suffix) {}

	/**
	 * @class ReactTestUtils
	 */

	/**
	 * Todo: Support the entire DOM.scry query syntax. For now, these simple
	 * utilities will suffice for testing purposes.
	 * @lends ReactTestUtils
	 */
	var ReactTestUtils = {
	  renderIntoDocument: function(instance) {
	    var div = document.createElement('div');
	    // None of our tests actually require attaching the container to the
	    // DOM, and doing so creates a mess that we rely on test isolation to
	    // clean up, so we're going to stop honoring the name of this method
	    // (and probably rename it eventually) if no problems arise.
	    // document.documentElement.appendChild(div);
	    return React.render(instance, div);
	  },

	  isElement: function(element) {
	    return ReactElement.isValidElement(element);
	  },

	  isElementOfType: function(inst, convenienceConstructor) {
	    return (
	      ReactElement.isValidElement(inst) &&
	      inst.type === convenienceConstructor
	    );
	  },

	  isDOMComponent: function(inst) {
	    // TODO: Fix this heuristic. It's just here because composites can currently
	    // pretend to be DOM components.
	    return !!(inst && inst.tagName && inst.getDOMNode);
	  },

	  isDOMComponentElement: function(inst) {
	    return !!(inst &&
	              ReactElement.isValidElement(inst) &&
	              !!inst.tagName);
	  },

	  isCompositeComponent: function(inst) {
	    return typeof inst.render === 'function' &&
	           typeof inst.setState === 'function';
	  },

	  isCompositeComponentWithType: function(inst, type) {
	    return !!(ReactTestUtils.isCompositeComponent(inst) &&
	             (inst.constructor === type));
	  },

	  isCompositeComponentElement: function(inst) {
	    if (!ReactElement.isValidElement(inst)) {
	      return false;
	    }
	    // We check the prototype of the type that will get mounted, not the
	    // instance itself. This is a future proof way of duck typing.
	    var prototype = inst.type.prototype;
	    return (
	      typeof prototype.render === 'function' &&
	      typeof prototype.setState === 'function'
	    );
	  },

	  isCompositeComponentElementWithType: function(inst, type) {
	    return !!(ReactTestUtils.isCompositeComponentElement(inst) &&
	             (inst.constructor === type));
	  },

	  getRenderedChildOfCompositeComponent: function(inst) {
	    if (!ReactTestUtils.isCompositeComponent(inst)) {
	      return null;
	    }
	    var internalInstance = ReactInstanceMap.get(inst);
	    return internalInstance._renderedComponent.getPublicInstance();
	  },

	  findAllInRenderedTree: function(inst, test) {
	    if (!inst) {
	      return [];
	    }
	    var ret = test(inst) ? [inst] : [];
	    if (ReactTestUtils.isDOMComponent(inst)) {
	      var internalInstance = ReactInstanceMap.get(inst);
	      var renderedChildren = internalInstance
	        ._renderedComponent
	        ._renderedChildren;
	      var key;
	      for (key in renderedChildren) {
	        if (!renderedChildren.hasOwnProperty(key)) {
	          continue;
	        }
	        if (!renderedChildren[key].getPublicInstance) {
	          continue;
	        }
	        ret = ret.concat(
	          ReactTestUtils.findAllInRenderedTree(
	            renderedChildren[key].getPublicInstance(),
	            test
	          )
	        );
	      }
	    } else if (ReactTestUtils.isCompositeComponent(inst)) {
	      ret = ret.concat(
	        ReactTestUtils.findAllInRenderedTree(
	          ReactTestUtils.getRenderedChildOfCompositeComponent(inst),
	          test
	        )
	      );
	    }
	    return ret;
	  },

	  /**
	   * Finds all instance of components in the rendered tree that are DOM
	   * components with the class name matching `className`.
	   * @return an array of all the matches.
	   */
	  scryRenderedDOMComponentsWithClass: function(root, className) {
	    return ReactTestUtils.findAllInRenderedTree(root, function(inst) {
	      var instClassName = inst.props.className;
	      return ReactTestUtils.isDOMComponent(inst) && (
	        (instClassName && (' ' + instClassName + ' ').indexOf(' ' + className + ' ') !== -1)
	      );
	    });
	  },

	  /**
	   * Like scryRenderedDOMComponentsWithClass but expects there to be one result,
	   * and returns that one result, or throws exception if there is any other
	   * number of matches besides one.
	   * @return {!ReactDOMComponent} The one match.
	   */
	  findRenderedDOMComponentWithClass: function(root, className) {
	    var all =
	      ReactTestUtils.scryRenderedDOMComponentsWithClass(root, className);
	    if (all.length !== 1) {
	      throw new Error('Did not find exactly one match ' +
	        '(found: ' + all.length + ') for class:' + className
	      );
	    }
	    return all[0];
	  },


	  /**
	   * Finds all instance of components in the rendered tree that are DOM
	   * components with the tag name matching `tagName`.
	   * @return an array of all the matches.
	   */
	  scryRenderedDOMComponentsWithTag: function(root, tagName) {
	    return ReactTestUtils.findAllInRenderedTree(root, function(inst) {
	      return ReactTestUtils.isDOMComponent(inst) &&
	            inst.tagName === tagName.toUpperCase();
	    });
	  },

	  /**
	   * Like scryRenderedDOMComponentsWithTag but expects there to be one result,
	   * and returns that one result, or throws exception if there is any other
	   * number of matches besides one.
	   * @return {!ReactDOMComponent} The one match.
	   */
	  findRenderedDOMComponentWithTag: function(root, tagName) {
	    var all = ReactTestUtils.scryRenderedDOMComponentsWithTag(root, tagName);
	    if (all.length !== 1) {
	      throw new Error('Did not find exactly one match for tag:' + tagName);
	    }
	    return all[0];
	  },


	  /**
	   * Finds all instances of components with type equal to `componentType`.
	   * @return an array of all the matches.
	   */
	  scryRenderedComponentsWithType: function(root, componentType) {
	    return ReactTestUtils.findAllInRenderedTree(root, function(inst) {
	      return ReactTestUtils.isCompositeComponentWithType(
	        inst,
	        componentType
	      );
	    });
	  },

	  /**
	   * Same as `scryRenderedComponentsWithType` but expects there to be one result
	   * and returns that one result, or throws exception if there is any other
	   * number of matches besides one.
	   * @return {!ReactComponent} The one match.
	   */
	  findRenderedComponentWithType: function(root, componentType) {
	    var all = ReactTestUtils.scryRenderedComponentsWithType(
	      root,
	      componentType
	    );
	    if (all.length !== 1) {
	      throw new Error(
	        'Did not find exactly one match for componentType:' + componentType
	      );
	    }
	    return all[0];
	  },

	  /**
	   * Pass a mocked component module to this method to augment it with
	   * useful methods that allow it to be used as a dummy React component.
	   * Instead of rendering as usual, the component will become a simple
	   * <div> containing any provided children.
	   *
	   * @param {object} module the mock function object exported from a
	   *                        module that defines the component to be mocked
	   * @param {?string} mockTagName optional dummy root tag name to return
	   *                              from render method (overrides
	   *                              module.mockTagName if provided)
	   * @return {object} the ReactTestUtils object (for chaining)
	   */
	  mockComponent: function(module, mockTagName) {
	    mockTagName = mockTagName || module.mockTagName || "div";

	    module.prototype.render.mockImplementation(function() {
	      return React.createElement(
	        mockTagName,
	        null,
	        this.props.children
	      );
	    });

	    return this;
	  },

	  /**
	   * Simulates a top level event being dispatched from a raw event that occured
	   * on an `Element` node.
	   * @param topLevelType {Object} A type from `EventConstants.topLevelTypes`
	   * @param {!Element} node The dom to simulate an event occurring on.
	   * @param {?Event} fakeNativeEvent Fake native event to use in SyntheticEvent.
	   */
	  simulateNativeEventOnNode: function(topLevelType, node, fakeNativeEvent) {
	    fakeNativeEvent.target = node;
	    ReactBrowserEventEmitter.ReactEventListener.dispatchEvent(
	      topLevelType,
	      fakeNativeEvent
	    );
	  },

	  /**
	   * Simulates a top level event being dispatched from a raw event that occured
	   * on the `ReactDOMComponent` `comp`.
	   * @param topLevelType {Object} A type from `EventConstants.topLevelTypes`.
	   * @param comp {!ReactDOMComponent}
	   * @param {?Event} fakeNativeEvent Fake native event to use in SyntheticEvent.
	   */
	  simulateNativeEventOnDOMComponent: function(
	      topLevelType,
	      comp,
	      fakeNativeEvent) {
	    ReactTestUtils.simulateNativeEventOnNode(
	      topLevelType,
	      comp.getDOMNode(),
	      fakeNativeEvent
	    );
	  },

	  nativeTouchData: function(x, y) {
	    return {
	      touches: [
	        {pageX: x, pageY: y}
	      ]
	    };
	  },

	  createRenderer: function() {
	    return new ReactShallowRenderer();
	  },

	  Simulate: null,
	  SimulateNative: {}
	};

	/**
	 * @class ReactShallowRenderer
	 */
	var ReactShallowRenderer = function() {
	  this._instance = null;
	};

	ReactShallowRenderer.prototype.getRenderOutput = function() {
	  return (
	    (this._instance && this._instance._renderedComponent &&
	     this._instance._renderedComponent._renderedOutput)
	    || null
	  );
	};

	var NoopInternalComponent = function(element) {
	  this._renderedOutput = element;
	  this._currentElement = element === null || element === false ?
	    ReactEmptyComponent.emptyElement :
	    element;
	};

	NoopInternalComponent.prototype = {

	  mountComponent: function() {
	  },

	  receiveComponent: function(element) {
	    this._renderedOutput = element;
	    this._currentElement = element === null || element === false ?
	      ReactEmptyComponent.emptyElement :
	      element;
	  },

	  unmountComponent: function() {
	  }

	};

	var ShallowComponentWrapper = function() { };
	assign(
	  ShallowComponentWrapper.prototype,
	  ReactCompositeComponent.Mixin, {
	    _instantiateReactComponent: function(element) {
	      return new NoopInternalComponent(element);
	    },
	    _replaceNodeWithMarkupByID: function() {},
	    _renderValidatedComponent:
	      ReactCompositeComponent.Mixin.
	        _renderValidatedComponentWithoutOwnerOrContext
	  }
	);

	ReactShallowRenderer.prototype.render = function(element, context) {
	  if (!context) {
	    context = emptyObject;
	  }
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();
	  this._render(element, transaction, context);
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	};

	ReactShallowRenderer.prototype.unmount = function() {
	  if (this._instance) {
	    this._instance.unmountComponent();
	  }
	};

	ReactShallowRenderer.prototype._render = function(element, transaction, context) {
	  if (!this._instance) {
	    var rootID = ReactInstanceHandles.createReactRootID();
	    var instance = new ShallowComponentWrapper(element.type);
	    instance.construct(element);

	    instance.mountComponent(rootID, transaction, context);

	    this._instance = instance;
	  } else {
	    this._instance.receiveComponent(element, transaction, context);
	  }
	};

	/**
	 * Exports:
	 *
	 * - `ReactTestUtils.Simulate.click(Element/ReactDOMComponent)`
	 * - `ReactTestUtils.Simulate.mouseMove(Element/ReactDOMComponent)`
	 * - `ReactTestUtils.Simulate.change(Element/ReactDOMComponent)`
	 * - ... (All keys from event plugin `eventTypes` objects)
	 */
	function makeSimulator(eventType) {
	  return function(domComponentOrNode, eventData) {
	    var node;
	    if (ReactTestUtils.isDOMComponent(domComponentOrNode)) {
	      node = domComponentOrNode.getDOMNode();
	    } else if (domComponentOrNode.tagName) {
	      node = domComponentOrNode;
	    }

	    var fakeNativeEvent = new Event();
	    fakeNativeEvent.target = node;
	    // We don't use SyntheticEvent.getPooled in order to not have to worry about
	    // properly destroying any properties assigned from `eventData` upon release
	    var event = new SyntheticEvent(
	      ReactBrowserEventEmitter.eventNameDispatchConfigs[eventType],
	      ReactMount.getID(node),
	      fakeNativeEvent
	    );
	    assign(event, eventData);
	    EventPropagators.accumulateTwoPhaseDispatches(event);

	    ReactUpdates.batchedUpdates(function() {
	      EventPluginHub.enqueueEvents(event);
	      EventPluginHub.processEventQueue();
	    });
	  };
	}

	function buildSimulators() {
	  ReactTestUtils.Simulate = {};

	  var eventType;
	  for (eventType in ReactBrowserEventEmitter.eventNameDispatchConfigs) {
	    /**
	     * @param {!Element || ReactDOMComponent} domComponentOrNode
	     * @param {?object} eventData Fake event data to use in SyntheticEvent.
	     */
	    ReactTestUtils.Simulate[eventType] = makeSimulator(eventType);
	  }
	}

	// Rebuild ReactTestUtils.Simulate whenever event plugins are injected
	var oldInjectEventPluginOrder = EventPluginHub.injection.injectEventPluginOrder;
	EventPluginHub.injection.injectEventPluginOrder = function() {
	  oldInjectEventPluginOrder.apply(this, arguments);
	  buildSimulators();
	};
	var oldInjectEventPlugins = EventPluginHub.injection.injectEventPluginsByName;
	EventPluginHub.injection.injectEventPluginsByName = function() {
	  oldInjectEventPlugins.apply(this, arguments);
	  buildSimulators();
	};

	buildSimulators();

	/**
	 * Exports:
	 *
	 * - `ReactTestUtils.SimulateNative.click(Element/ReactDOMComponent)`
	 * - `ReactTestUtils.SimulateNative.mouseMove(Element/ReactDOMComponent)`
	 * - `ReactTestUtils.SimulateNative.mouseIn/ReactDOMComponent)`
	 * - `ReactTestUtils.SimulateNative.mouseOut(Element/ReactDOMComponent)`
	 * - ... (All keys from `EventConstants.topLevelTypes`)
	 *
	 * Note: Top level event types are a subset of the entire set of handler types
	 * (which include a broader set of "synthetic" events). For example, onDragDone
	 * is a synthetic event. Except when testing an event plugin or React's event
	 * handling code specifically, you probably want to use ReactTestUtils.Simulate
	 * to dispatch synthetic events.
	 */

	function makeNativeSimulator(eventType) {
	  return function(domComponentOrNode, nativeEventData) {
	    var fakeNativeEvent = new Event(eventType);
	    assign(fakeNativeEvent, nativeEventData);
	    if (ReactTestUtils.isDOMComponent(domComponentOrNode)) {
	      ReactTestUtils.simulateNativeEventOnDOMComponent(
	        eventType,
	        domComponentOrNode,
	        fakeNativeEvent
	      );
	    } else if (!!domComponentOrNode.tagName) {
	      // Will allow on actual dom nodes.
	      ReactTestUtils.simulateNativeEventOnNode(
	        eventType,
	        domComponentOrNode,
	        fakeNativeEvent
	      );
	    }
	  };
	}

	var eventType;
	for (eventType in topLevelTypes) {
	  // Event type is stored as 'topClick' - we transform that to 'click'
	  var convenienceName = eventType.indexOf('top') === 0 ?
	    eventType.charAt(3).toLowerCase() + eventType.substr(4) : eventType;
	  /**
	   * @param {!Element || ReactDOMComponent} domComponentOrNode
	   * @param {?Event} nativeEventData Fake native event to use in SyntheticEvent.
	   */
	  ReactTestUtils.SimulateNative[convenienceName] =
	    makeNativeSimulator(eventType);
	}

	module.exports = ReactTestUtils;


/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isBrowser = typeof window !== 'undefined';
	var Modernizr = isBrowser ? __webpack_require__(226) : undefined;

	module.exports = {

	  all: function all(styles) {
	    var prefixedStyle = {};
	    for (var key in styles) {
	      prefixedStyle[this.single(key)] = styles[key];
	    }
	    return prefixedStyle;
	  },

	  set: function set(style, key, value) {
	    style[this.single(key)] = value;
	  },

	  single: function single(key) {
	    if (isBrowser) {
	      // Windows 7 Firefox has an issue with the implementation of Modernizr.prefixed
	      // and is capturing 'false' as the CSS property name instead of the non-prefixed version.
	      var prefKey = Modernizr.prefixed(key);
	      return prefKey === false ? key : prefKey;
	    } else {
	      return key;
	    }
	  },

	  singleHyphened: function singleHyphened(key) {
	    var str = this.single(key);

	    return !str ? key : str.replace(/([A-Z])/g, function (str, m1) {
	      return '-' + m1.toLowerCase();
	    }).replace(/^ms-/, '-ms-');
	  }

	};

/***/ },
/* 226 */
/***/ function(module, exports) {

	/* Modernizr 2.8.3 (Custom Build) | MIT & BSD
	 * Build: http://modernizr.com/download/#-borderradius-boxshadow-opacity-csstransforms-csstransforms3d-csstransitions-prefixed-teststyles-testprop-testallprops-prefixes-domprefixes
	 */

	'use strict';

	module.exports = (function (window, document, undefined) {

	    var version = '2.8.3',
	        Modernizr = {},
	        docElement = document.documentElement,
	        mod = 'modernizr',
	        modElem = document.createElement(mod),
	        mStyle = modElem.style,
	        prefixes = ' -webkit- -moz- -o- -ms- '.split(' '),
	        omPrefixes = 'Webkit Moz O ms',
	        cssomPrefixes = omPrefixes.split(' '),
	        domPrefixes = omPrefixes.toLowerCase().split(' '),
	        tests = {},
	        classes = [],
	        slice = classes.slice,
	        featureName = undefined,
	        injectElementWithStyles = function injectElementWithStyles(rule, callback, nodes, testnames) {

	        var style = undefined,
	            ret = undefined,
	            node = undefined,
	            docOverflow = undefined,
	            div = document.createElement('div'),
	            body = document.body,
	            fakeBody = body || document.createElement('body');

	        if (parseInt(nodes, 10)) {
	            while (nodes--) {
	                node = document.createElement('div');
	                node.id = testnames ? testnames[nodes] : mod + (nodes + 1);
	                div.appendChild(node);
	            }
	        }

	        style = ['&#173;', '<style id="s', mod, '">', rule, '</style>'].join('');
	        div.id = mod;
	        (body ? div : fakeBody).innerHTML += style;
	        fakeBody.appendChild(div);
	        if (!body) {
	            fakeBody.style.background = '';
	            fakeBody.style.overflow = 'hidden';
	            docOverflow = docElement.style.overflow;
	            docElement.style.overflow = 'hidden';
	            docElement.appendChild(fakeBody);
	        }

	        ret = callback(div, rule);
	        if (!body) {
	            fakeBody.parentNode.removeChild(fakeBody);
	            docElement.style.overflow = docOverflow;
	        } else {
	            div.parentNode.removeChild(div);
	        }

	        return !!ret;
	    },
	        _hasOwnProperty = ({}).hasOwnProperty,
	        hasOwnProp = undefined;

	    function is(obj, type) {
	        return typeof obj === type;
	    }

	    if (!is(_hasOwnProperty, 'undefined') && !is(_hasOwnProperty.call, 'undefined')) {
	        hasOwnProp = function (object, property) {
	            return _hasOwnProperty.call(object, property);
	        };
	    } else {
	        hasOwnProp = function (object, property) {
	            return property in object && is(object.constructor.prototype[property], 'undefined');
	        };
	    }

	    if (!Function.prototype.bind) {
	        Function.prototype.bind = function bind(that) {

	            var target = this;

	            if (typeof target != 'function') {
	                throw new TypeError();
	            }

	            var args = slice.call(arguments, 1),
	                bound = function bound() {

	                if (this instanceof bound) {

	                    var F = function F() {};
	                    F.prototype = target.prototype;
	                    var _self = new F();

	                    var result = target.apply(_self, args.concat(slice.call(arguments)));
	                    if (Object(result) === result) {
	                        return result;
	                    }
	                    return _self;
	                } else {

	                    return target.apply(that, args.concat(slice.call(arguments)));
	                }
	            };

	            return bound;
	        };
	    }

	    function setCss(str) {
	        mStyle.cssText = str;
	    }

	    function setCssAll(str1, str2) {
	        return setCss(prefixes.join(str1 + ';') + (str2 || ''));
	    }

	    function contains(str, substr) {
	        return !! ~('' + str).indexOf(substr);
	    }

	    function testProps(props, prefixed) {
	        for (var i in props) {
	            var prop = props[i];
	            if (!contains(prop, '-') && mStyle[prop] !== undefined) {
	                return prefixed == 'pfx' ? prop : true;
	            }
	        }
	        return false;
	    }

	    function testDOMProps(props, obj, elem) {
	        for (var i in props) {
	            var item = obj[props[i]];
	            if (item !== undefined) {

	                if (elem === false) return props[i];

	                if (is(item, 'function')) {
	                    return item.bind(elem || obj);
	                }

	                return item;
	            }
	        }
	        return false;
	    }

	    function testPropsAll(prop, prefixed, elem) {

	        var ucProp = prop.charAt(0).toUpperCase() + prop.slice(1),
	            props = (prop + ' ' + cssomPrefixes.join(ucProp + ' ') + ucProp).split(' ');

	        if (is(prefixed, 'string') || is(prefixed, 'undefined')) {
	            return testProps(props, prefixed);
	        } else {
	            props = (prop + ' ' + domPrefixes.join(ucProp + ' ') + ucProp).split(' ');
	            return testDOMProps(props, prefixed, elem);
	        }
	    }

	    tests.borderradius = function () {
	        return testPropsAll('borderRadius');
	    };

	    tests.boxshadow = function () {
	        return testPropsAll('boxShadow');
	    };

	    tests.opacity = function () {
	        setCssAll('opacity:.55');

	        return /^0.55$/.test(mStyle.opacity);
	    };
	    tests.csstransforms = function () {
	        return !!testPropsAll('transform');
	    };

	    tests.csstransforms3d = function () {

	        var ret = !!testPropsAll('perspective');

	        if (ret && 'webkitPerspective' in docElement.style) {

	            injectElementWithStyles('@media (transform-3d),(-webkit-transform-3d){#modernizr{left:9px;position:absolute;height:3px;}}', function (node) {
	                ret = node.offsetLeft === 9 && node.offsetHeight === 3;
	            });
	        }
	        return ret;
	    };

	    tests.csstransitions = function () {
	        return testPropsAll('transition');
	    };

	    for (var feature in tests) {
	        if (hasOwnProp(tests, feature)) {
	            featureName = feature.toLowerCase();
	            Modernizr[featureName] = tests[feature]();

	            classes.push((Modernizr[featureName] ? '' : 'no-') + featureName);
	        }
	    }

	    Modernizr.addTest = function (feature, test) {
	        if (typeof feature == 'object') {
	            for (var key in feature) {
	                if (hasOwnProp(feature, key)) {
	                    Modernizr.addTest(key, feature[key]);
	                }
	            }
	        } else {

	            feature = feature.toLowerCase();

	            if (Modernizr[feature] !== undefined) {
	                return Modernizr;
	            }

	            test = typeof test == 'function' ? test() : test;

	            if (typeof enableClasses !== 'undefined' && enableClasses) {
	                docElement.className += ' ' + (test ? '' : 'no-') + feature;
	            }
	            Modernizr[feature] = test;
	        }

	        return Modernizr;
	    };

	    setCss('');

	    Modernizr._version = version;

	    Modernizr._prefixes = prefixes;
	    Modernizr._domPrefixes = domPrefixes;
	    Modernizr._cssomPrefixes = cssomPrefixes;

	    Modernizr.testProp = function (prop) {
	        return testProps([prop]);
	    };

	    Modernizr.testAllProps = testPropsAll;

	    Modernizr.testStyles = injectElementWithStyles;
	    Modernizr.prefixed = function (prop, obj, elem) {
	        if (!obj) {
	            return testPropsAll(prop, 'pfx');
	        } else {
	            return testPropsAll(prop, obj, elem);
	        }
	    };

	    return Modernizr;
	})(window, window.document);

/***/ },
/* 227 */
/***/ function(module, exports) {

	'use strict';

	function isObject(obj) {
	  return typeof obj === 'object' && obj !== null;
	}

	/**
	*  A recursive merge between two objects.
	*
	*  @param base     - the object whose properties are to be overwritten. It
	*                    should be either the root level or some nested level.
	*  @param override - an object containing properties to be overwritten. It
	*                    should have the same structure as the object object.
	*/
	var extend = function extend(base, override) {

	  var mergedObject = {};

	  //Loop through each key in the base object
	  Object.keys(base).forEach(function (key) {

	    var baseProp = base[key];
	    var overrideProp = undefined;

	    if (isObject(override)) overrideProp = override[key];

	    //Recursive call extend if the prop is another object, else just copy it over
	    mergedObject[key] = isObject(baseProp) && !Array.isArray(baseProp) ? extend(baseProp, overrideProp) : baseProp;
	  });

	  //Loop through each override key and override the props in the
	  //base object
	  if (isObject(override)) {

	    Object.keys(override).forEach(function (overrideKey) {

	      var overrideProp = override[overrideKey];

	      //Only copy over props that are not objects
	      if (!isObject(overrideProp) || Array.isArray(overrideProp)) {
	        mergedObject[overrideKey] = overrideProp;
	      }
	    });
	  }

	  return mergedObject;
	};

	module.exports = extend;

/***/ },
/* 228 */
/***/ function(module, exports) {

	// To include this file in your project:
	// let mui = require('mui');
	// let Colors = mui.Styles.Colors;

	'use strict';

	module.exports = {

	  red50: '#ffebee',
	  red100: '#ffcdd2',
	  red200: '#ef9a9a',
	  red300: '#e57373',
	  red400: '#ef5350',
	  red500: '#f44336',
	  red600: '#e53935',
	  red700: '#d32f2f',
	  red800: '#c62828',
	  red900: '#b71c1c',
	  redA100: '#ff8a80',
	  redA200: '#ff5252',
	  redA400: '#ff1744',
	  redA700: '#d50000',

	  pink50: '#fce4ec',
	  pink100: '#f8bbd0',
	  pink200: '#f48fb1',
	  pink300: '#f06292',
	  pink400: '#ec407a',
	  pink500: '#e91e63',
	  pink600: '#d81b60',
	  pink700: '#c2185b',
	  pink800: '#ad1457',
	  pink900: '#880e4f',
	  pinkA100: '#ff80ab',
	  pinkA200: '#ff4081',
	  pinkA400: '#f50057',
	  pinkA700: '#c51162',

	  purple50: '#f3e5f5',
	  purple100: '#e1bee7',
	  purple200: '#ce93d8',
	  purple300: '#ba68c8',
	  purple400: '#ab47bc',
	  purple500: '#9c27b0',
	  purple600: '#8e24aa',
	  purple700: '#7b1fa2',
	  purple800: '#6a1b9a',
	  purple900: '#4a148c',
	  purpleA100: '#ea80fc',
	  purpleA200: '#e040fb',
	  purpleA400: '#d500f9',
	  purpleA700: '#aa00ff',

	  deepPurple50: '#ede7f6',
	  deepPurple100: '#d1c4e9',
	  deepPurple200: '#b39ddb',
	  deepPurple300: '#9575cd',
	  deepPurple400: '#7e57c2',
	  deepPurple500: '#673ab7',
	  deepPurple600: '#5e35b1',
	  deepPurple700: '#512da8',
	  deepPurple800: '#4527a0',
	  deepPurple900: '#311b92',
	  deepPurpleA100: '#b388ff',
	  deepPurpleA200: '#7c4dff',
	  deepPurpleA400: '#651fff',
	  deepPurpleA700: '#6200ea',

	  indigo50: '#e8eaf6',
	  indigo100: '#c5cae9',
	  indigo200: '#9fa8da',
	  indigo300: '#7986cb',
	  indigo400: '#5c6bc0',
	  indigo500: '#3f51b5',
	  indigo600: '#3949ab',
	  indigo700: '#303f9f',
	  indigo800: '#283593',
	  indigo900: '#1a237e',
	  indigoA100: '#8c9eff',
	  indigoA200: '#536dfe',
	  indigoA400: '#3d5afe',
	  indigoA700: '#304ffe',

	  blue50: '#e3f2fd',
	  blue100: '#bbdefb',
	  blue200: '#90caf9',
	  blue300: '#64b5f6',
	  blue400: '#42a5f5',
	  blue500: '#2196f3',
	  blue600: '#1e88e5',
	  blue700: '#1976d2',
	  blue800: '#1565c0',
	  blue900: '#0d47a1',
	  blueA100: '#82b1ff',
	  blueA200: '#448aff',
	  blueA400: '#2979ff',
	  blueA700: '#2962ff',

	  lightBlue50: '#e1f5fe',
	  lightBlue100: '#b3e5fc',
	  lightBlue200: '#81d4fa',
	  lightBlue300: '#4fc3f7',
	  lightBlue400: '#29b6f6',
	  lightBlue500: '#03a9f4',
	  lightBlue600: '#039be5',
	  lightBlue700: '#0288d1',
	  lightBlue800: '#0277bd',
	  lightBlue900: '#01579b',
	  lightBlueA100: '#80d8ff',
	  lightBlueA200: '#40c4ff',
	  lightBlueA400: '#00b0ff',
	  lightBlueA700: '#0091ea',

	  cyan50: '#e0f7fa',
	  cyan100: '#b2ebf2',
	  cyan200: '#80deea',
	  cyan300: '#4dd0e1',
	  cyan400: '#26c6da',
	  cyan500: '#00bcd4',
	  cyan600: '#00acc1',
	  cyan700: '#0097a7',
	  cyan800: '#00838f',
	  cyan900: '#006064',
	  cyanA100: '#84ffff',
	  cyanA200: '#18ffff',
	  cyanA400: '#00e5ff',
	  cyanA700: '#00b8d4',

	  teal50: '#e0f2f1',
	  teal100: '#b2dfdb',
	  teal200: '#80cbc4',
	  teal300: '#4db6ac',
	  teal400: '#26a69a',
	  teal500: '#009688',
	  teal600: '#00897b',
	  teal700: '#00796b',
	  teal800: '#00695c',
	  teal900: '#004d40',
	  tealA100: '#a7ffeb',
	  tealA200: '#64ffda',
	  tealA400: '#1de9b6',
	  tealA700: '#00bfa5',

	  green50: '#e8f5e9',
	  green100: '#c8e6c9',
	  green200: '#a5d6a7',
	  green300: '#81c784',
	  green400: '#66bb6a',
	  green500: '#4caf50',
	  green600: '#43a047',
	  green700: '#388e3c',
	  green800: '#2e7d32',
	  green900: '#1b5e20',
	  greenA100: '#b9f6ca',
	  greenA200: '#69f0ae',
	  greenA400: '#00e676',
	  greenA700: '#00c853',

	  lightGreen50: '#f1f8e9',
	  lightGreen100: '#dcedc8',
	  lightGreen200: '#c5e1a5',
	  lightGreen300: '#aed581',
	  lightGreen400: '#9ccc65',
	  lightGreen500: '#8bc34a',
	  lightGreen600: '#7cb342',
	  lightGreen700: '#689f38',
	  lightGreen800: '#558b2f',
	  lightGreen900: '#33691e',
	  lightGreenA100: '#ccff90',
	  lightGreenA200: '#b2ff59',
	  lightGreenA400: '#76ff03',
	  lightGreenA700: '#64dd17',

	  lime50: '#f9fbe7',
	  lime100: '#f0f4c3',
	  lime200: '#e6ee9c',
	  lime300: '#dce775',
	  lime400: '#d4e157',
	  lime500: '#cddc39',
	  lime600: '#c0ca33',
	  lime700: '#afb42b',
	  lime800: '#9e9d24',
	  lime900: '#827717',
	  limeA100: '#f4ff81',
	  limeA200: '#eeff41',
	  limeA400: '#c6ff00',
	  limeA700: '#aeea00',

	  yellow50: '#fffde7',
	  yellow100: '#fff9c4',
	  yellow200: '#fff59d',
	  yellow300: '#fff176',
	  yellow400: '#ffee58',
	  yellow500: '#ffeb3b',
	  yellow600: '#fdd835',
	  yellow700: '#fbc02d',
	  yellow800: '#f9a825',
	  yellow900: '#f57f17',
	  yellowA100: '#ffff8d',
	  yellowA200: '#ffff00',
	  yellowA400: '#ffea00',
	  yellowA700: '#ffd600',

	  amber50: '#fff8e1',
	  amber100: '#ffecb3',
	  amber200: '#ffe082',
	  amber300: '#ffd54f',
	  amber400: '#ffca28',
	  amber500: '#ffc107',
	  amber600: '#ffb300',
	  amber700: '#ffa000',
	  amber800: '#ff8f00',
	  amber900: '#ff6f00',
	  amberA100: '#ffe57f',
	  amberA200: '#ffd740',
	  amberA400: '#ffc400',
	  amberA700: '#ffab00',

	  orange50: '#fff3e0',
	  orange100: '#ffe0b2',
	  orange200: '#ffcc80',
	  orange300: '#ffb74d',
	  orange400: '#ffa726',
	  orange500: '#ff9800',
	  orange600: '#fb8c00',
	  orange700: '#f57c00',
	  orange800: '#ef6c00',
	  orange900: '#e65100',
	  orangeA100: '#ffd180',
	  orangeA200: '#ffab40',
	  orangeA400: '#ff9100',
	  orangeA700: '#ff6d00',

	  deepOrange50: '#fbe9e7',
	  deepOrange100: '#ffccbc',
	  deepOrange200: '#ffab91',
	  deepOrange300: '#ff8a65',
	  deepOrange400: '#ff7043',
	  deepOrange500: '#ff5722',
	  deepOrange600: '#f4511e',
	  deepOrange700: '#e64a19',
	  deepOrange800: '#d84315',
	  deepOrange900: '#bf360c',
	  deepOrangeA100: '#ff9e80',
	  deepOrangeA200: '#ff6e40',
	  deepOrangeA400: '#ff3d00',
	  deepOrangeA700: '#dd2c00',

	  brown50: '#efebe9',
	  brown100: '#d7ccc8',
	  brown200: '#bcaaa4',
	  brown300: '#a1887f',
	  brown400: '#8d6e63',
	  brown500: '#795548',
	  brown600: '#6d4c41',
	  brown700: '#5d4037',
	  brown800: '#4e342e',
	  brown900: '#3e2723',

	  blueGrey50: '#eceff1',
	  blueGrey100: '#cfd8dc',
	  blueGrey200: '#b0bec5',
	  blueGrey300: '#90a4ae',
	  blueGrey400: '#78909c',
	  blueGrey500: '#607d8b',
	  blueGrey600: '#546e7a',
	  blueGrey700: '#455a64',
	  blueGrey800: '#37474f',
	  blueGrey900: '#263238',

	  grey50: '#fafafa',
	  grey100: '#f5f5f5',
	  grey200: '#eeeeee',
	  grey300: '#e0e0e0',
	  grey400: '#bdbdbd',
	  grey500: '#9e9e9e',
	  grey600: '#757575',
	  grey700: '#616161',
	  grey800: '#424242',
	  grey900: '#212121',

	  black: '#000000',
	  white: '#ffffff',

	  transparent: 'rgba(0, 0, 0, 0)',
	  fullBlack: 'rgba(0, 0, 0, 1)',
	  darkBlack: 'rgba(0, 0, 0, 0.87)',
	  lightBlack: 'rgba(0, 0, 0, 0.54)',
	  minBlack: 'rgba(0, 0, 0, 0.26)',
	  faintBlack: 'rgba(0, 0, 0, 0.12)',
	  fullWhite: 'rgba(255, 255, 255, 1)',
	  darkWhite: 'rgba(255, 255, 255, 0.87)',
	  lightWhite: 'rgba(255, 255, 255, 0.54)'

	};

/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(207);
	var PureRenderMixin = React.addons.PureRenderMixin;
	var StylePropable = __webpack_require__(206);
	var AutoPrefix = __webpack_require__(225);
	var Colors = __webpack_require__(228);
	var Transitions = __webpack_require__(230);
	var ScaleInTransitionGroup = __webpack_require__(231);

	var pulsateDuration = 750;

	var FocusRipple = React.createClass({
	  displayName: 'FocusRipple',

	  mixins: [PureRenderMixin, StylePropable],

	  propTypes: {
	    color: React.PropTypes.string,
	    innerStyle: React.PropTypes.object,
	    opacity: React.PropTypes.number,
	    show: React.PropTypes.bool
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      color: Colors.darkBlack
	    };
	  },

	  componentDidMount: function componentDidMount() {
	    if (this.props.show) {
	      this._setRippleSize();
	      this._pulsate();
	    }
	  },

	  componentDidUpdate: function componentDidUpdate() {
	    if (this.props.show) {
	      this._setRippleSize();
	      this._pulsate();
	    } else {
	      if (this._timeout) clearTimeout(this._timeout);
	    }
	  },

	  render: function render() {
	    var _props = this.props;
	    var color = _props.color;
	    var innerStyle = _props.innerStyle;
	    var opacity = _props.opacity;
	    var show = _props.show;
	    var style = _props.style;

	    var mergedRootStyles = this.mergeStyles({
	      height: '100%',
	      width: '100%',
	      position: 'absolute',
	      top: 0,
	      left: 0
	    }, style);

	    var innerStyles = this.mergeAndPrefix({
	      position: 'absolute',
	      height: '100%',
	      width: '100%',
	      borderRadius: '50%',
	      opacity: opacity ? opacity : 0.16,
	      backgroundColor: color,
	      transition: Transitions.easeOut(pulsateDuration + 'ms', 'transform', null, Transitions.easeInOutFunction)
	    }, innerStyle);

	    var ripple = show ? React.createElement('div', { ref: 'innerCircle', style: innerStyles }) : null;

	    return React.createElement(
	      ScaleInTransitionGroup,
	      {
	        maxScale: 0.85,
	        style: mergedRootStyles },
	      ripple
	    );
	  },

	  _pulsate: function _pulsate() {
	    if (!this.isMounted()) return;

	    var innerCircle = React.findDOMNode(this.refs.innerCircle);
	    if (!innerCircle) return;

	    var startScale = 'scale(1)';
	    var endScale = 'scale(0.85)';
	    var currentScale = innerCircle.style[AutoPrefix.single('transform')];
	    var nextScale = undefined;

	    currentScale = currentScale || startScale;
	    nextScale = currentScale === startScale ? endScale : startScale;

	    innerCircle.style[AutoPrefix.single('transform')] = nextScale;
	    this._timeout = setTimeout(this._pulsate, pulsateDuration);
	  },

	  _setRippleSize: function _setRippleSize() {
	    var el = React.findDOMNode(this.refs.innerCircle);
	    var height = el.offsetHeight;
	    var width = el.offsetWidth;
	    var size = Math.max(height, width);

	    el.style.height = size + 'px';
	    el.style.top = size / 2 * -1 + height / 2 + 'px';
	  }

	});

	module.exports = FocusRipple;

/***/ },
/* 230 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var AutoPrefix = __webpack_require__(225);

	module.exports = {

	  easeOutFunction: 'cubic-bezier(0.23, 1, 0.32, 1)',
	  easeInOutFunction: 'cubic-bezier(0.445, 0.05, 0.55, 0.95)',

	  easeOut: function easeOut(duration, property, delay, easeFunction) {

	    easeFunction = easeFunction || this.easeOutFunction;

	    if (property && Object.prototype.toString.call(property) === '[object Array]') {

	      var transitions = '';
	      for (var i = 0; i < property.length; i++) {
	        if (transitions) transitions += ',';
	        transitions += this.create(duration, property[i], delay, easeFunction);
	      }
	      return transitions;
	    } else {
	      return this.create(duration, property, delay, easeFunction);
	    }
	  },

	  create: function create(duration, property, delay, easeFunction) {
	    duration = duration || '450ms';
	    property = property || 'all';
	    delay = delay || '0ms';
	    easeFunction = easeFunction || 'linear';

	    return AutoPrefix.singleHyphened(property) + ' ' + duration + ' ' + easeFunction + ' ' + delay;
	  }
	};

/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(207);
	var ReactTransitionGroup = React.addons.TransitionGroup;
	var StylePropable = __webpack_require__(206);
	var ScaleInChild = __webpack_require__(232);

	var ScaleIn = React.createClass({
	  displayName: 'ScaleIn',

	  mixins: [StylePropable],

	  propTypes: {
	    childStyle: React.PropTypes.object,
	    enterDelay: React.PropTypes.number,
	    maxScale: React.PropTypes.number,
	    minScale: React.PropTypes.number
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      enterDelay: 0
	    };
	  },

	  render: function render() {
	    var _props = this.props;
	    var children = _props.children;
	    var childStyle = _props.childStyle;
	    var enterDelay = _props.enterDelay;
	    var maxScale = _props.maxScale;
	    var minScale = _props.minScale;
	    var style = _props.style;

	    var other = _objectWithoutProperties(_props, ['children', 'childStyle', 'enterDelay', 'maxScale', 'minScale', 'style']);

	    var mergedRootStyles = this.mergeAndPrefix({
	      position: 'relative',
	      overflow: 'hidden',
	      height: '100%'
	    }, style);

	    var newChildren = React.Children.map(children, function (child) {
	      return React.createElement(
	        ScaleInChild,
	        {
	          key: child.key,
	          enterDelay: enterDelay,
	          maxScale: maxScale,
	          minScale: minScale,
	          style: childStyle },
	        child
	      );
	    });

	    return React.createElement(
	      ReactTransitionGroup,
	      _extends({}, other, {
	        style: mergedRootStyles,
	        component: 'div' }),
	      newChildren
	    );
	  }

	});

	module.exports = ScaleIn;

/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(207);
	var StylePropable = __webpack_require__(206);
	var AutoPrefix = __webpack_require__(225);
	var Transitions = __webpack_require__(230);

	var ScaleInChild = React.createClass({
	  displayName: 'ScaleInChild',

	  mixins: [StylePropable],

	  propTypes: {
	    enterDelay: React.PropTypes.number,
	    maxScale: React.PropTypes.number,
	    minScale: React.PropTypes.number
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      enterDelay: 0,
	      maxScale: 1,
	      minScale: 0
	    };
	  },

	  componentWillEnter: function componentWillEnter(callback) {
	    var style = React.findDOMNode(this).style;

	    style.opacity = '0';
	    AutoPrefix.set(style, 'transform', 'scale(0)');

	    setTimeout(callback, this.props.enterDelay);
	  },

	  componentDidEnter: function componentDidEnter() {
	    var style = React.findDOMNode(this).style;

	    style.opacity = '1';
	    AutoPrefix.set(style, 'transform', 'scale(' + this.props.maxScale + ')');
	  },

	  componentWillLeave: function componentWillLeave(callback) {
	    var style = React.findDOMNode(this).style;

	    style.opacity = '0';
	    AutoPrefix.set(style, 'transform', 'scale(' + this.props.minScale + ')');

	    setTimeout(callback, 450);
	  },

	  render: function render() {
	    var _props = this.props;
	    var children = _props.children;
	    var enterDelay = _props.enterDelay;
	    var style = _props.style;

	    var other = _objectWithoutProperties(_props, ['children', 'enterDelay', 'style']);

	    var mergedRootStyles = this.mergeAndPrefix({
	      position: 'absolute',
	      height: '100%',
	      width: '100%',
	      top: 0,
	      left: 0,
	      transition: Transitions.easeOut(null, ['transform', 'opacity'])
	    }, style);

	    return React.createElement(
	      'div',
	      _extends({}, other, { style: mergedRootStyles }),
	      children
	    );
	  }

	});

	module.exports = ScaleInChild;

/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(206);
	var Dom = __webpack_require__(234);
	var RippleCircle = __webpack_require__(235);

	var TouchRipple = React.createClass({
	  displayName: 'TouchRipple',

	  mixins: [StylePropable],

	  propTypes: {
	    centerRipple: React.PropTypes.bool,
	    color: React.PropTypes.string,
	    opacity: React.PropTypes.number
	  },

	  getInitialState: function getInitialState() {
	    return {
	      ripples: [{
	        key: 0,
	        started: false,
	        ending: false
	      }]
	    };
	  },

	  render: function render() {
	    var styles = this.mergeAndPrefix({
	      height: '100%',
	      width: '100%',
	      position: 'absolute',
	      top: 0,
	      left: 0,
	      overflow: 'hidden'
	    }, this.props.style);

	    return React.createElement(
	      'div',
	      {
	        onMouseUp: this._handleMouseUp,
	        onMouseDown: this._handleMouseDown,
	        onMouseLeave: this._handleMouseLeave,
	        onTouchStart: this._handleTouchStart,
	        onTouchEnd: this._handleTouchEnd },
	      React.createElement(
	        'div',
	        { style: styles },
	        this._getRippleElements()
	      ),
	      this.props.children
	    );
	  },

	  start: function start(e, isRippleTouchGenerated) {
	    var ripples = this.state.ripples;
	    var nextKey = ripples[ripples.length - 1].key + 1;
	    var style = !this.props.centerRipple ? this._getRippleStyle(e) : {};
	    var ripple = undefined;

	    //Do nothing if we're starting a click-event-generated ripple
	    //while having touch-generated ripples
	    if (!isRippleTouchGenerated) {
	      for (var i = 0; i < ripples.length; i++) {
	        if (ripples[i].touchGenerated) return;
	      }
	    }

	    //Start the next unstarted ripple
	    for (var i = 0; i < ripples.length; i++) {
	      ripple = ripples[i];
	      if (!ripple.started) {
	        ripple.started = true;
	        ripple.touchGenerated = isRippleTouchGenerated;
	        ripple.style = style;
	        break;
	      }
	    }

	    //Add an unstarted ripple at the end
	    ripples.push({
	      key: nextKey,
	      started: false,
	      ending: false
	    });

	    //Re-render
	    this.setState({
	      ripples: ripples
	    });
	  },

	  end: function end() {
	    var _this = this;

	    var ripples = this.state.ripples;
	    var ripple = undefined;
	    var endingRipple = undefined;

	    //End the the next un-ended ripple
	    for (var i = 0; i < ripples.length; i++) {
	      ripple = ripples[i];
	      if (ripple.started && !ripple.ending) {
	        ripple.ending = true;
	        endingRipple = ripple;
	        break;
	      }
	    }

	    //Only update if a ripple was found
	    if (endingRipple) {
	      //Re-render
	      this.setState({
	        ripples: ripples
	      });

	      //Wait 2 seconds and remove the ripple from DOM
	      setTimeout(function () {
	        ripples.shift();
	        if (_this.isMounted()) {
	          _this.setState({
	            ripples: ripples
	          });
	        }
	      }, 2000);
	    }
	  },

	  _handleMouseDown: function _handleMouseDown(e) {
	    //only listen to left clicks
	    if (e.button === 0) this.start(e, false);
	  },

	  _handleMouseUp: function _handleMouseUp() {
	    this.end();
	  },

	  _handleMouseLeave: function _handleMouseLeave() {
	    this.end();
	  },

	  _handleTouchStart: function _handleTouchStart(e) {
	    this.start(e, true);
	  },

	  _handleTouchEnd: function _handleTouchEnd() {
	    this.end();
	  },

	  _getRippleStyle: function _getRippleStyle(e) {
	    var style = {};
	    var el = React.findDOMNode(this);
	    var elHeight = el.offsetHeight;
	    var elWidth = el.offsetWidth;
	    var offset = Dom.offset(el);
	    var isTouchEvent = e.touches && e.touches.length;
	    var pageX = isTouchEvent ? e.touches[0].pageX : e.pageX;
	    var pageY = isTouchEvent ? e.touches[0].pageY : e.pageY;
	    var pointerX = pageX - offset.left;
	    var pointerY = pageY - offset.top;
	    var topLeftDiag = this._calcDiag(pointerX, pointerY);
	    var topRightDiag = this._calcDiag(elWidth - pointerX, pointerY);
	    var botRightDiag = this._calcDiag(elWidth - pointerX, elHeight - pointerY);
	    var botLeftDiag = this._calcDiag(pointerX, elHeight - pointerY);
	    var rippleRadius = Math.max(topLeftDiag, topRightDiag, botRightDiag, botLeftDiag);
	    var rippleSize = rippleRadius * 2;
	    var left = pointerX - rippleRadius;
	    var top = pointerY - rippleRadius;

	    style.height = rippleSize + 'px';
	    style.width = rippleSize + 'px';
	    style.top = top + 'px';
	    style.left = left + 'px';

	    return style;
	  },

	  _calcDiag: function _calcDiag(a, b) {
	    return Math.sqrt(a * a + b * b);
	  },

	  _getRippleElements: function _getRippleElements() {
	    var _this2 = this;

	    return this.state.ripples.map(function (ripple) {
	      return React.createElement(RippleCircle, {
	        key: ripple.key,
	        started: ripple.started,
	        ending: ripple.ending,
	        style: ripple.style,
	        color: _this2.props.color,
	        opacity: _this2.props.opacity });
	    });
	  }

	});

	module.exports = TouchRipple;

/***/ },
/* 234 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {

	  isDescendant: function isDescendant(parent, child) {
	    var node = child.parentNode;

	    while (node !== null) {
	      if (node === parent) return true;
	      node = node.parentNode;
	    }

	    return false;
	  },

	  offset: function offset(el) {
	    var rect = el.getBoundingClientRect();
	    return {
	      top: rect.top + document.body.scrollTop,
	      left: rect.left + document.body.scrollLeft
	    };
	  },

	  getStyleAttributeAsNumber: function getStyleAttributeAsNumber(el, attr) {
	    var attrStyle = el.style[attr];
	    var attrNum = 0;
	    if (attrStyle && attrStyle.length) {
	      attrNum = parseInt(attrStyle);
	    }

	    return attrNum;
	  },

	  addClass: function addClass(el, className) {
	    if (el.classList) el.classList.add(className);else el.className += ' ' + className;
	  },

	  removeClass: function removeClass(el, className) {
	    if (el.classList) el.classList.remove(className);else el.className = el.className.replace(new RegExp('(^|\\b)' + className.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
	  },

	  hasClass: function hasClass(el, className) {
	    if (el.classList) return el.classList.contains(className);else return new RegExp('(^| )' + className + '( |$)', 'gi').test(el.className);
	  },

	  toggleClass: function toggleClass(el, className) {
	    if (this.hasClass(el, className)) this.removeClass(el, className);else this.addClass(el, className);
	  },

	  forceRedraw: function forceRedraw(el) {
	    var originalDisplay = el.style.display;

	    el.style.display = 'none';
	    el.offsetHeight;
	    el.style.display = originalDisplay;
	  },

	  withoutTransition: function withoutTransition(el, callback) {
	    var originalTransition = el.style.transition;

	    //turn off transition
	    el.style.transition = null;

	    callback();

	    //force a redraw
	    this.forceRedraw(el);

	    //put the transition back
	    el.style.transition = originalTransition;
	  }

	};

/***/ },
/* 235 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(206);
	var Transitions = __webpack_require__(230);
	var Colors = __webpack_require__(228);

	var CircleRipple = React.createClass({
	  displayName: 'CircleRipple',

	  mixins: [StylePropable],

	  propTypes: {
	    color: React.PropTypes.string,
	    opacity: React.PropTypes.number,
	    started: React.PropTypes.bool,
	    ending: React.PropTypes.bool
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      color: Colors.darkBlack
	    };
	  },

	  render: function render() {
	    var _props = this.props;
	    var color = _props.color;
	    var started = _props.started;
	    var ending = _props.ending;
	    var style = _props.style;

	    var other = _objectWithoutProperties(_props, ['color', 'started', 'ending', 'style']);

	    var styles = this.mergeAndPrefix({
	      position: 'absolute',
	      top: 0,
	      left: 0,
	      height: '100%',
	      width: '100%',
	      opacity: this.props.ending ? 0 : this.props.opacity ? this.props.opacity : 0.16,
	      borderRadius: '50%',
	      transform: this.props.started ? 'scale(1)' : 'scale(0)',
	      backgroundColor: this.props.color,
	      transition: Transitions.easeOut('2s', 'opacity') + ',' + Transitions.easeOut('1s', 'transform')
	    }, this.props.style);

	    return React.createElement('div', _extends({}, other, { style: styles }));
	  }

	});

	module.exports = CircleRipple;

/***/ },
/* 236 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(1);

	module.exports = {

	  corners: React.PropTypes.oneOf(['bottom-left', 'bottom-right', 'top-left', 'top-right']),

	  cornersAndCenter: React.PropTypes.oneOf(['bottom-center', 'bottom-left', 'bottom-right', 'top-center', 'top-left', 'top-right']),

	  stringOrNumber: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.number]),

	  zDepth: React.PropTypes.oneOf([0, 1, 2, 3, 4, 5])

	};

/***/ },
/* 237 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(206);
	var Transitions = __webpack_require__(230);

	var FontIcon = React.createClass({
	  displayName: 'FontIcon',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    color: React.PropTypes.string,
	    hoverColor: React.PropTypes.string,
	    onMouseLeave: React.PropTypes.func,
	    onMouseEnter: React.PropTypes.func
	  },

	  getInitialState: function getInitialState() {
	    return {
	      hovered: false
	    };
	  },

	  render: function render() {
	    var _props = this.props;
	    var color = _props.color;
	    var hoverColor = _props.hoverColor;
	    var onMouseLeave = _props.onMouseLeave;
	    var onMouseEnter = _props.onMouseEnter;
	    var style = _props.style;

	    var other = _objectWithoutProperties(_props, ['color', 'hoverColor', 'onMouseLeave', 'onMouseEnter', 'style']);

	    var spacing = this.context.muiTheme.spacing;
	    var offColor = color ? color : style && style.color ? style.color : this.context.muiTheme.palette.textColor;
	    var onColor = hoverColor ? hoverColor : offColor;

	    var mergedStyles = this.mergeAndPrefix({
	      position: 'relative',
	      fontSize: spacing.iconSize,
	      display: 'inline-block',
	      userSelect: 'none',
	      transition: Transitions.easeOut()
	    }, style, {
	      color: this.state.hovered ? onColor : offColor
	    });

	    return React.createElement('span', _extends({}, other, {
	      onMouseLeave: this._handleMouseLeave,
	      onMouseEnter: this._handleMouseEnter,
	      style: mergedStyles }));
	  },

	  _handleMouseLeave: function _handleMouseLeave(e) {
	    // hover is needed only when a hoverColor is defined
	    if (this.props.hoverColor !== undefined) this.setState({ hovered: false });
	    if (this.props.onMouseLeave) {
	      this.props.onMouseLeave(e);
	    }
	  },

	  _handleMouseEnter: function _handleMouseEnter(e) {
	    // hover is needed only when a hoverColor is defined
	    if (this.props.hoverColor !== undefined) this.setState({ hovered: true });
	    if (this.props.onMouseEnter) {
	      this.props.onMouseEnter(e);
	    }
	  }
	});

	module.exports = FontIcon;

/***/ },
/* 238 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(206);
	var Transitions = __webpack_require__(230);
	var Colors = __webpack_require__(228);

	var Tooltip = React.createClass({
	  displayName: 'Tooltip',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    className: React.PropTypes.string,
	    label: React.PropTypes.string.isRequired,
	    show: React.PropTypes.bool,
	    touch: React.PropTypes.bool,
	    verticalPosition: React.PropTypes.oneOf(['top', 'bottom']),
	    horizontalPosition: React.PropTypes.oneOf(['left', 'right', 'center'])
	  },

	  componentDidMount: function componentDidMount() {
	    this._setRippleSize();
	    this._setTooltipPosition();
	  },

	  componentDidUpdate: function componentDidUpdate() {
	    this._setRippleSize();
	  },

	  getInitialState: function getInitialState() {
	    return {
	      offsetWidth: null
	    };
	  },

	  getStyles: function getStyles() {
	    var verticalPosition = this.props.verticalPosition;
	    var horizontalPosition = this.props.horizontalPosition;
	    var touchMarginOffset = this.props.touch ? 10 : 0;
	    var touchOffsetTop = this.props.touch ? -20 : -10;
	    var offset = verticalPosition === 'bottom' ? 14 + touchMarginOffset : -14 - touchMarginOffset;

	    var styles = {
	      root: {
	        position: 'absolute',
	        fontFamily: this.context.muiTheme.contentFontFamily,
	        fontSize: '10px',
	        lineHeight: '22px',
	        padding: '0 8px',
	        color: Colors.white,
	        overflow: 'hidden',
	        top: -10000,
	        borderRadius: 2,
	        userSelect: 'none',
	        opacity: 0,
	        right: horizontalPosition === 'left' ? 12 : null,
	        left: horizontalPosition === 'center' ? (this.state.offsetWidth - 48) / 2 * -1 : null,
	        transition: Transitions.easeOut('0ms', 'top', '450ms') + ',' + Transitions.easeOut('450ms', 'transform', '0ms') + ',' + Transitions.easeOut('450ms', 'opacity', '0ms')
	      },
	      label: {
	        position: 'relative',
	        whiteSpace: 'nowrap'
	      },
	      ripple: {
	        position: 'absolute',
	        left: horizontalPosition === 'center' ? '50%' : horizontalPosition === 'left' ? '100%' : '0%',
	        top: verticalPosition === 'bottom' ? 0 : '100%',
	        transform: 'translate(-50%, -50%)',
	        borderRadius: '50%',
	        backgroundColor: 'transparent',
	        transition: Transitions.easeOut('0ms', 'width', '450ms') + ',' + Transitions.easeOut('0ms', 'height', '450ms') + ',' + Transitions.easeOut('450ms', 'backgroundColor', '0ms')
	      },
	      rootWhenShown: {
	        top: verticalPosition === 'top' ? touchOffsetTop : 36,
	        opacity: 0.9,
	        transform: 'translate3d(0px, ' + offset + 'px, 0px)',
	        transition: Transitions.easeOut('0ms', 'top', '0ms') + ',' + Transitions.easeOut('450ms', 'transform', '0ms') + ',' + Transitions.easeOut('450ms', 'opacity', '0ms')
	      },
	      rootWhenTouched: {
	        fontSize: '14px',
	        lineHeight: '32px',
	        padding: '0 16px'
	      },
	      rippleWhenShown: {
	        backgroundColor: Colors.grey700,
	        transition: Transitions.easeOut('450ms', 'width', '0ms') + ',' + Transitions.easeOut('450ms', 'height', '0ms') + ',' + Transitions.easeOut('450ms', 'backgroundColor', '0ms')
	      }
	    };

	    return styles;
	  },

	  render: function render() {
	    var _props = this.props;
	    var label = _props.label;

	    var other = _objectWithoutProperties(_props, ['label']);

	    var styles = this.getStyles();
	    return React.createElement(
	      'div',
	      _extends({}, other, {
	        style: this.mergeAndPrefix(styles.root, this.props.show && styles.rootWhenShown, this.props.touch && styles.rootWhenTouched, this.props.style) }),
	      React.createElement('div', {
	        ref: 'ripple',
	        style: this.mergeAndPrefix(styles.ripple, this.props.show && styles.rippleWhenShown) }),
	      React.createElement(
	        'span',
	        { style: this.mergeAndPrefix(styles.label) },
	        this.props.label
	      )
	    );
	  },

	  _setRippleSize: function _setRippleSize() {
	    var ripple = React.findDOMNode(this.refs.ripple);
	    var tooltip = window.getComputedStyle(React.findDOMNode(this));
	    var tooltipWidth = parseInt(tooltip.getPropertyValue('width'), 10) / (this.props.horizontalPosition === 'center' ? 2 : 1);
	    var tooltipHeight = parseInt(tooltip.getPropertyValue('height'), 10);

	    var rippleDiameter = Math.ceil(Math.sqrt(Math.pow(tooltipHeight, 2) + Math.pow(tooltipWidth, 2)) * 2);
	    if (this.props.show) {
	      ripple.style.height = rippleDiameter + 'px';
	      ripple.style.width = rippleDiameter + 'px';
	    } else {
	      ripple.style.width = '0px';
	      ripple.style.height = '0px';
	    }
	  },

	  _setTooltipPosition: function _setTooltipPosition() {
	    var tooltip = React.findDOMNode(this);
	    this.setState({ offsetWidth: tooltip.offsetWidth });
	  }

	});

	module.exports = Tooltip;

/***/ },
/* 239 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(1);

	module.exports = {

	  extend: function extend(children, extendedProps, extendedChildren) {

	    return React.isValidElement(children) ? React.Children.map(children, function (child) {

	      var newProps = typeof extendedProps === 'function' ? extendedProps(child) : extendedProps;

	      var newChildren = typeof extendedChildren === 'function' ? extendedChildren(child) : extendedChildren ? extendedChildren : child.props.children;

	      return React.cloneElement(child, newProps, newChildren);
	    }) : children;
	  }

	};

/***/ },
/* 240 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var Colors = __webpack_require__(228);

	var Typography = function Typography() {
	  _classCallCheck(this, Typography);

	  // text colors
	  this.textFullBlack = Colors.fullBlack;
	  this.textDarkBlack = Colors.darkBlack;
	  this.textLightBlack = Colors.lightBlack;
	  this.textMinBlack = Colors.minBlack;
	  this.textFullWhite = Colors.fullWhite;
	  this.textDarkWhite = Colors.darkWhite;
	  this.textLightWhite = Colors.lightWhite;

	  // font weight
	  this.fontWeightLight = 300;
	  this.fontWeightNormal = 400;
	  this.fontWeightMedium = 500;

	  this.fontStyleButtonFontSize = 14;
	};

	module.exports = new Typography();

/***/ },
/* 241 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(207);
	var PureRenderMixin = React.addons.PureRenderMixin;
	var SvgIcon = __webpack_require__(242);

	var NavigationMenu = React.createClass({
	  displayName: 'NavigationMenu',

	  mixins: [PureRenderMixin],

	  render: function render() {
	    return React.createElement(
	      SvgIcon,
	      this.props,
	      React.createElement('path', { d: 'M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z' })
	    );
	  }

	});

	module.exports = NavigationMenu;

/***/ },
/* 242 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(206);
	var Transitions = __webpack_require__(230);

	var SvgIcon = React.createClass({
	  displayName: 'SvgIcon',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    color: React.PropTypes.string,
	    hoverColor: React.PropTypes.string,
	    onMouseEnter: React.PropTypes.func,
	    onMouseLeave: React.PropTypes.func,
	    viewBox: React.PropTypes.string
	  },

	  getInitialState: function getInitialState() {
	    return {
	      hovered: false
	    };
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      onMouseEnter: function onMouseEnter() {},
	      onMouseLeave: function onMouseLeave() {},
	      viewBox: '0 0 24 24'
	    };
	  },

	  render: function render() {
	    var _props = this.props;
	    var children = _props.children;
	    var color = _props.color;
	    var hoverColor = _props.hoverColor;
	    var onMouseEnter = _props.onMouseEnter;
	    var onMouseLeave = _props.onMouseLeave;
	    var style = _props.style;
	    var viewBox = _props.viewBox;

	    var other = _objectWithoutProperties(_props, ['children', 'color', 'hoverColor', 'onMouseEnter', 'onMouseLeave', 'style', 'viewBox']);

	    var offColor = color ? color : style && style.fill ? style.fill : this.context.muiTheme.palette.textColor;
	    var onColor = hoverColor ? hoverColor : offColor;

	    var mergedStyles = this.mergeAndPrefix({
	      display: 'inline-block',
	      height: 24,
	      width: 24,
	      userSelect: 'none',
	      transition: Transitions.easeOut()
	    }, style, {
	      // Make sure our fill color overrides fill provided in props.style
	      fill: this.state.hovered ? onColor : offColor
	    });

	    var events = hoverColor ? {
	      onMouseEnter: this._handleMouseEnter,
	      onMouseLeave: this._handleMouseLeave
	    } : {};

	    return React.createElement(
	      'svg',
	      _extends({}, other, events, {
	        style: mergedStyles,
	        viewBox: viewBox }),
	      children
	    );
	  },

	  _handleMouseLeave: function _handleMouseLeave(e) {
	    this.setState({ hovered: false });
	    this.props.onMouseLeave(e);
	  },

	  _handleMouseEnter: function _handleMouseEnter(e) {
	    this.setState({ hovered: true });
	    this.props.onMouseEnter(e);
	  }
	});

	module.exports = SvgIcon;

/***/ },
/* 243 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(206);
	var PropTypes = __webpack_require__(236);
	var Transitions = __webpack_require__(230);

	var Paper = React.createClass({
	  displayName: 'Paper',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    circle: React.PropTypes.bool,
	    rounded: React.PropTypes.bool,
	    transitionEnabled: React.PropTypes.bool,
	    zDepth: PropTypes.zDepth
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      circle: false,
	      rounded: true,
	      transitionEnabled: true,
	      zDepth: 1
	    };
	  },

	  getStyles: function getStyles() {
	    var styles = {
	      root: {
	        backgroundColor: this.context.muiTheme.component.paper.backgroundColor,
	        transition: this.props.transitionEnabled && Transitions.easeOut(),
	        boxSizing: 'border-box',
	        fontFamily: this.context.muiTheme.contentFontFamily,
	        WebkitTapHighlightColor: 'rgba(0,0,0,0)',
	        boxShadow: this._getZDepthShadows(this.props.zDepth),
	        borderRadius: this.props.circle ? '50%' : this.props.rounded ? '2px' : '0px'
	      }
	    };

	    return styles;
	  },

	  render: function render() {
	    var _props = this.props;
	    var style = _props.style;
	    var circle = _props.circle;
	    var rounded = _props.rounded;
	    var zDepth = _props.zDepth;

	    var other = _objectWithoutProperties(_props, ['style', 'circle', 'rounded', 'zDepth']);

	    var styles = this.getStyles();

	    return React.createElement(
	      'div',
	      _extends({}, other, { style: this.mergeAndPrefix(styles.root, this.props.style) }),
	      this.props.children
	    );
	  },

	  _getZDepthShadows: function _getZDepthShadows(zDepth) {
	    var shadows = [null, '0 1px 6px rgba(0, 0, 0, 0.12), 0 1px 4px rgba(0, 0, 0, 0.24)', '0 3px 10px rgba(0, 0, 0, 0.16), 0 3px 10px rgba(0, 0, 0, 0.23)', '0 10px 30px rgba(0, 0, 0, 0.19), 0 6px 10px rgba(0, 0, 0, 0.23)', '0 14px 45px rgba(0, 0, 0, 0.25), 0 10px 18px rgba(0, 0, 0, 0.22)', '0 19px 60px rgba(0, 0, 0, 0.30), 0 15px 20px rgba(0, 0, 0, 0.22)'];

	    return shadows[zDepth];
	  }

	});

	module.exports = Paper;

/***/ },
/* 244 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(206);

	var AppCanvas = React.createClass({
	  displayName: 'AppCanvas',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  render: function render() {
	    var _this = this;

	    var styles = {
	      height: '100%',
	      backgroundColor: this.context.muiTheme.palette.canvasColor,
	      WebkitFontSmoothing: 'antialiased'
	    };

	    var newChildren = React.Children.map(this.props.children, function (currentChild) {
	      if (!currentChild) {
	        // If undefined, skip it
	        return null;
	      }

	      switch (currentChild.type.displayName) {
	        case 'AppBar':
	          return React.cloneElement(currentChild, {
	            style: _this.mergeStyles({
	              position: 'fixed'
	            }, currentChild.props.style)
	          });
	        default:
	          return currentChild;
	      }
	    }, this);

	    return React.createElement(
	      'div',
	      { style: styles },
	      newChildren
	    );
	  }

	});

	module.exports = AppCanvas;

/***/ },
/* 245 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(207);
	var StylePropable = __webpack_require__(206);
	var Colors = __webpack_require__(228);

	var Avatar = React.createClass({
	  displayName: 'Avatar',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    backgroundColor: React.PropTypes.string,
	    color: React.PropTypes.string,
	    icon: React.PropTypes.element,
	    size: React.PropTypes.number,
	    src: React.PropTypes.string,
	    style: React.PropTypes.object
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      backgroundColor: Colors.grey400,
	      color: Colors.white,
	      size: 40
	    };
	  },

	  render: function render() {
	    var _props = this.props;
	    var backgroundColor = _props.backgroundColor;
	    var color = _props.color;
	    var icon = _props.icon;
	    var size = _props.size;
	    var src = _props.src;
	    var style = _props.style;

	    var other = _objectWithoutProperties(_props, ['backgroundColor', 'color', 'icon', 'size', 'src', 'style']);

	    var styles = {
	      root: {
	        height: size,
	        width: size,
	        userSelect: 'none',
	        borderRadius: '50%',
	        display: 'inline-block'
	      }
	    };

	    if (src) {
	      var borderColor = this.context.muiTheme.component.avatar.borderColor;

	      if (borderColor) {
	        styles.root = this.mergeStyles(styles.root, {
	          height: size - 2,
	          width: size - 2,
	          border: 'solid 1px ' + borderColor
	        });
	      }

	      return React.createElement('img', _extends({}, other, { src: src, style: this.mergeAndPrefix(styles.root, style) }));
	    } else {
	      styles.root = this.mergeStyles(styles.root, {
	        backgroundColor: backgroundColor,
	        textAlign: 'center',
	        lineHeight: size + 'px',
	        fontSize: size / 2 + 4,
	        color: color
	      });

	      var styleIcon = {
	        margin: 8
	      };

	      var iconElement = icon ? React.cloneElement(icon, {
	        color: color,
	        style: this.mergeStyles(styleIcon, icon.props.style)
	      }) : null;

	      return React.createElement(
	        'div',
	        _extends({}, other, { style: this.mergeAndPrefix(styles.root, style) }),
	        iconElement,
	        this.props.children
	      );
	    }
	  }
	});

	module.exports = Avatar;

/***/ },
/* 246 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(206);
	var AutoPrefix = __webpack_require__(225);

	/**
	 *  BeforeAfterWrapper
	 *    An alternative for the ::before and ::after css pseudo-elements for
	 *    components whose styles are defined in javascript instead of css.
	 *
	 *  Usage: For the element that we want to apply before and after elements to,
	 *    wrap its children with BeforeAfterWrapper. For example:
	 *
	 *                                            <Paper>
	 *  <Paper>                                     <div> // See notice
	 *    <BeforeAfterWrapper>        renders         <div/> // before element
	 *      [children of paper]       ------>         [children of paper]
	 *    </BeforeAfterWrapper>                       <div/> // after element
	 *  </Paper>                                    </div>
	 *                                            </Paper>
	 *
	 *  Notice: Notice that this div bundles together our elements. If the element
	 *    that we want to apply before and after elements is a HTML tag (i.e. a
	 *    div, p, or button tag), we can avoid this extra nesting by passing using
	 *    the BeforeAfterWrapper in place of said tag like so:
	 *
	 *  <p>
	 *    <BeforeAfterWrapper>   do this instead   <BeforeAfterWrapper elementType='p'>
	 *      [children of p]          ------>         [children of p]
	 *    </BeforeAfterWrapper>                    </BeforeAfterWrapper>
	 *  </p>
	 *
	 *  BeforeAfterWrapper features spread functionality. This means that we can
	 *  pass HTML tag properties directly into the BeforeAfterWrapper tag.
	 *
	 *  When using BeforeAfterWrapper, ensure that the parent of the beforeElement
	 *  and afterElement have a defined style position.
	 */

	var BeforeAfterWrapper = React.createClass({
	  displayName: 'BeforeAfterWrapper',

	  mixins: [StylePropable],

	  propTypes: {
	    beforeStyle: React.PropTypes.object,
	    afterStyle: React.PropTypes.object,
	    beforeElementType: React.PropTypes.string,
	    afterElementType: React.PropTypes.string,
	    elementType: React.PropTypes.string
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      beforeElementType: 'div',
	      afterElementType: 'div',
	      elementType: 'div'
	    };
	  },

	  render: function render() {
	    var _props = this.props;
	    var beforeStyle = _props.beforeStyle;
	    var afterStyle = _props.afterStyle;
	    var beforeElementType = _props.beforeElementType;
	    var afterElementType = _props.afterElementType;
	    var elementType = _props.elementType;

	    var other = _objectWithoutProperties(_props, ['beforeStyle', 'afterStyle', 'beforeElementType', 'afterElementType', 'elementType']);

	    var beforeElement = undefined,
	        afterElement = undefined;

	    beforeStyle = AutoPrefix.all({ boxSizing: 'border-box' });
	    afterStyle = AutoPrefix.all({ boxSizing: 'border-box' });

	    if (this.props.beforeStyle) beforeElement = React.createElement(this.props.beforeElementType, {
	      style: this.mergeAndPrefix(beforeStyle, this.props.beforeStyle),
	      key: '::before'
	    });
	    if (this.props.afterStyle) afterElement = React.createElement(this.props.afterElementType, {
	      style: this.mergeAndPrefix(afterStyle, this.props.afterStyle),
	      key: '::after'
	    });

	    var children = [beforeElement, this.props.children, afterElement];

	    var props = other;
	    props.style = this.props.style;

	    return React.createElement(this.props.elementType, props, children);
	  }

	});

	module.exports = BeforeAfterWrapper;

/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var Paper = __webpack_require__(243);
	var StylePropable = __webpack_require__(206);
	var CardExpandable = __webpack_require__(248);

	var Card = React.createClass({
	  displayName: 'Card',

	  mixins: [StylePropable],

	  getInitialState: function getInitialState() {
	    return { expanded: this.props.initiallyExpanded ? true : false };
	  },

	  propTypes: {
	    style: React.PropTypes.object,
	    expandable: React.PropTypes.bool,
	    initiallyExpanded: React.PropTypes.bool,
	    onExpandChange: React.PropTypes.func
	  },

	  _onExpandable: function _onExpandable(value) {
	    this.setState({ expanded: value });
	    if (this.props.onExpandChange) this.props.onExpandChange(value);
	  },

	  render: function render() {
	    var _this = this;

	    var lastElement = undefined;
	    var newChildren = React.Children.map(this.props.children, function (currentChild) {
	      if (!currentChild) {
	        return null;
	      }
	      if (_this.state.expanded === false && currentChild.props.expandable === true) return;
	      if (currentChild.props.showExpandableButton === true) {
	        lastElement = React.cloneElement(currentChild, {}, currentChild.props.children, React.createElement(CardExpandable, { expanded: _this.state.expanded, onExpanding: _this._onExpandable }));
	      } else {
	        lastElement = currentChild;
	      }
	      return lastElement;
	    }, this);

	    // If the last element is text or a title we should add
	    // 8px padding to the bottom of the card
	    var addBottomPadding = lastElement && (lastElement.type.displayName === 'CardText' || lastElement.type.displayName === 'CardTitle');
	    var _props = this.props;
	    var style = _props.style;

	    var other = _objectWithoutProperties(_props, ['style']);

	    var mergedStyles = this.mergeAndPrefix({
	      overflow: 'hidden',
	      zIndex: 1
	    }, style);

	    return React.createElement(
	      Paper,
	      _extends({}, other, { style: mergedStyles }),
	      React.createElement(
	        'div',
	        { style: { paddingBottom: addBottomPadding ? 8 : 0 } },
	        newChildren
	      )
	    );
	  }
	});

	module.exports = Card;

/***/ },
/* 248 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(1);
	var OpenIcon = __webpack_require__(249);
	var CloseIcon = __webpack_require__(250);
	var IconButton = __webpack_require__(203);

	var CardExpandable = React.createClass({
	  displayName: 'CardExpandable',

	  getStyles: function getStyles() {
	    return {
	      root: {
	        right: 4,
	        top: 0,
	        bottom: 0,
	        margin: 'auto',
	        position: 'absolute'
	      }
	    };
	  },

	  propTypes: {
	    onExpanding: React.PropTypes.func.isRequired,
	    expanded: React.PropTypes.bool
	  },

	  _onExpanding: function _onExpanding() {
	    if (this.props.expanded === true) this.props.onExpanding(false);else this.props.onExpanding(true);
	  },

	  render: function render() {
	    var styles = this.getStyles();

	    var expandable = undefined;
	    if (this.props.expanded === true) expandable = React.createElement(OpenIcon, null);else expandable = React.createElement(CloseIcon, null);

	    var expandableBtn = React.createElement(
	      IconButton,
	      {
	        style: styles.root,
	        onClick: this._onExpanding },
	      expandable
	    );

	    return expandableBtn;
	  }
	});

	module.exports = CardExpandable;

/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(207);
	var PureRenderMixin = React.addons.PureRenderMixin;
	var SvgIcon = __webpack_require__(242);

	var HardwareKeyboardArrowUp = React.createClass({
	  displayName: 'HardwareKeyboardArrowUp',

	  mixins: [PureRenderMixin],

	  render: function render() {
	    return React.createElement(
	      SvgIcon,
	      this.props,
	      React.createElement('path', { d: 'M7.41 15.41L12 10.83l4.59 4.58L18 14l-6-6-6 6z' })
	    );
	  }

	});

	module.exports = HardwareKeyboardArrowUp;

/***/ },
/* 250 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(207);
	var PureRenderMixin = React.addons.PureRenderMixin;
	var SvgIcon = __webpack_require__(242);

	var HardwareKeyboardArrowDown = React.createClass({
	  displayName: 'HardwareKeyboardArrowDown',

	  mixins: [PureRenderMixin],

	  render: function render() {
	    return React.createElement(
	      SvgIcon,
	      this.props,
	      React.createElement('path', { d: 'M7.41 7.84L12 12.42l4.59-4.58L18 9.25l-6 6-6-6z' })
	    );
	  }

	});

	module.exports = HardwareKeyboardArrowDown;

/***/ },
/* 251 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var React = __webpack_require__(1);

	var CardActions = React.createClass({
	  displayName: 'CardActions',

	  getStyles: function getStyles() {
	    return {
	      root: {
	        padding: 8,
	        position: 'relative'
	      }
	    };
	  },

	  propTypes: {
	    expandable: React.PropTypes.bool,
	    showExpandableButton: React.PropTypes.bool
	  },

	  render: function render() {
	    var styles = this.getStyles();

	    var children = React.Children.map(this.props.children, function (child) {
	      return React.cloneElement(child, {
	        style: { marginRight: 8 }
	      });
	    });

	    return React.createElement(
	      'div',
	      _extends({}, this.props, { style: styles.root }),
	      children
	    );
	  }
	});

	module.exports = CardActions;

/***/ },
/* 252 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var React = __webpack_require__(1);
	var Styles = __webpack_require__(253);
	var Avatar = __webpack_require__(245);
	var StylePropable = __webpack_require__(206);

	var CardHeader = React.createClass({
	  displayName: 'CardHeader',

	  mixins: [StylePropable],

	  propTypes: {
	    title: React.PropTypes.string,
	    titleColor: React.PropTypes.string,
	    titleStyle: React.PropTypes.object,
	    subtitle: React.PropTypes.string,
	    subtitleColor: React.PropTypes.string,
	    subtitleStyle: React.PropTypes.object,
	    textStyle: React.PropTypes.object,
	    expandable: React.PropTypes.bool,
	    showExpandableButton: React.PropTypes.bool
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      titleColor: Styles.Colors.darkBlack,
	      subtitleColor: Styles.Colors.lightBlack
	    };
	  },

	  getStyles: function getStyles() {
	    return {
	      root: {
	        height: 72,
	        padding: 16,
	        fontWeight: Styles.Typography.fontWeightMedium,
	        boxSizing: 'border-box',
	        position: 'relative'
	      },
	      text: {
	        display: 'inline-block',
	        verticalAlign: 'top'
	      },
	      avatar: {
	        marginRight: 16
	      },
	      title: {
	        color: this.props.titleColor,
	        display: 'block',
	        fontSize: 15
	      },
	      subtitle: {
	        color: this.props.subtitleColor,
	        display: 'block',
	        fontSize: 14
	      }
	    };
	  },

	  render: function render() {
	    var styles = this.getStyles();
	    var rootStyle = this.mergeAndPrefix(styles.root, this.props.style);
	    var textStyle = this.mergeAndPrefix(styles.text, this.props.textStyle);
	    var titleStyle = this.mergeAndPrefix(styles.title, this.props.titleStyle);
	    var subtitleStyle = this.mergeAndPrefix(styles.subtitle, this.props.subtitleStyle);

	    var avatar = this.props.avatar;
	    if (React.isValidElement(this.props.avatar)) {
	      var avatarMergedStyle = this.mergeStyles(styles.avatar, avatar.props.style);
	      avatar = React.cloneElement(avatar, { style: avatarMergedStyle });
	    } else avatar = React.createElement(Avatar, { src: this.props.avatar, style: styles.avatar });

	    return React.createElement(
	      'div',
	      _extends({}, this.props, { style: rootStyle }),
	      avatar,
	      React.createElement(
	        'div',
	        { style: textStyle },
	        React.createElement(
	          'span',
	          { style: titleStyle },
	          this.props.title
	        ),
	        React.createElement(
	          'span',
	          { style: subtitleStyle },
	          this.props.subtitle
	        )
	      ),
	      this.props.children
	    );
	  }
	});

	module.exports = CardHeader;

/***/ },
/* 253 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = {
	  AutoPrefix: __webpack_require__(225),
	  Colors: __webpack_require__(228),
	  Spacing: __webpack_require__(256),
	  ThemeManager: __webpack_require__(254),
	  Transitions: __webpack_require__(230),
	  Typography: __webpack_require__(240)
	};

/***/ },
/* 254 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Extend = __webpack_require__(227);

	var Types = {
	  LIGHT: __webpack_require__(255),
	  DARK: __webpack_require__(258)
	};

	var ThemeManager = function ThemeManager() {
	  return {
	    types: Types,
	    template: Types.LIGHT,

	    spacing: Types.LIGHT.spacing,
	    contentFontFamily: 'Roboto, sans-serif',

	    palette: Types.LIGHT.getPalette(),
	    component: Types.LIGHT.getComponentThemes(Types.LIGHT.getPalette()),

	    getCurrentTheme: function getCurrentTheme() {
	      return this;
	    },

	    // Component gets updated to reflect palette changes.
	    setTheme: function setTheme(newTheme) {
	      this.setSpacing(newTheme.spacing);
	      this.setPalette(newTheme.getPalette());
	      this.setComponentThemes(newTheme.getComponentThemes(newTheme.getPalette()));
	    },

	    setSpacing: function setSpacing(newSpacing) {
	      this.spacing = Extend(this.spacing, newSpacing);
	      this.component = Extend(this.component, this.template.getComponentThemes(this.palette, this.spacing));
	    },

	    setPalette: function setPalette(newPalette) {
	      this.palette = Extend(this.palette, newPalette);
	      this.component = Extend(this.component, this.template.getComponentThemes(this.palette));
	    },

	    setComponentThemes: function setComponentThemes(overrides) {
	      this.component = Extend(this.component, overrides);
	    }
	  };
	};

	module.exports = ThemeManager;

/***/ },
/* 255 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Colors = __webpack_require__(228);
	var Spacing = __webpack_require__(256);
	var ColorManipulator = __webpack_require__(257);

	/**
	 *  Light Theme is the default theme used in material-ui. It is guaranteed to
	 *  have all theme variables needed for every component. Variables not defined
	 *  in a custom theme will default to these values.
	 */

	var LightTheme = {
	  spacing: Spacing,
	  contentFontFamily: 'Roboto, sans-serif',
	  getPalette: function getPalette() {
	    return {
	      primary1Color: Colors.cyan500,
	      primary2Color: Colors.cyan700,
	      primary3Color: Colors.cyan100,
	      accent1Color: Colors.pinkA200,
	      accent2Color: Colors.pinkA400,
	      accent3Color: Colors.pinkA100,
	      textColor: Colors.darkBlack,
	      canvasColor: Colors.white,
	      borderColor: Colors.grey300,
	      disabledColor: ColorManipulator.fade(Colors.darkBlack, 0.3)
	    };
	  },
	  getComponentThemes: function getComponentThemes(palette, spacing) {
	    spacing = spacing || Spacing;
	    var obj = {
	      appBar: {
	        color: palette.primary1Color,
	        textColor: Colors.darkWhite,
	        height: spacing.desktopKeylineIncrement
	      },
	      avatar: {
	        borderColor: 'rgba(0, 0, 0, 0.08)'
	      },
	      button: {
	        height: 36,
	        minWidth: 88,
	        iconButtonSize: spacing.iconSize * 2
	      },
	      checkbox: {
	        boxColor: palette.textColor,
	        checkedColor: palette.primary1Color,
	        requiredColor: palette.primary1Color,
	        disabledColor: palette.disabledColor,
	        labelColor: palette.textColor,
	        labelDisabledColor: palette.disabledColor
	      },
	      datePicker: {
	        color: palette.primary1Color,
	        textColor: Colors.white,
	        calendarTextColor: palette.textColor,
	        selectColor: palette.primary2Color,
	        selectTextColor: Colors.white
	      },
	      dropDownMenu: {
	        accentColor: palette.borderColor
	      },
	      flatButton: {
	        color: palette.canvasColor,
	        textColor: palette.textColor,
	        primaryTextColor: palette.accent1Color,
	        secondaryTextColor: palette.primary1Color
	      },
	      floatingActionButton: {
	        buttonSize: 56,
	        miniSize: 40,
	        color: palette.accent1Color,
	        iconColor: Colors.white,
	        secondaryColor: palette.primary1Color,
	        secondaryIconColor: Colors.white
	      },
	      leftNav: {
	        width: spacing.desktopKeylineIncrement * 4,
	        color: Colors.white
	      },
	      listItem: {
	        nestedLevelDepth: 18
	      },
	      menu: {
	        backgroundColor: Colors.white,
	        containerBackgroundColor: Colors.white
	      },
	      menuItem: {
	        dataHeight: 32,
	        height: 48,
	        hoverColor: 'rgba(0, 0, 0, .035)',
	        padding: spacing.desktopGutter,
	        selectedTextColor: palette.accent1Color
	      },
	      menuSubheader: {
	        padding: spacing.desktopGutter,
	        borderColor: palette.borderColor,
	        textColor: palette.primary1Color
	      },
	      paper: {
	        backgroundColor: Colors.white
	      },
	      radioButton: {
	        borderColor: palette.textColor,
	        backgroundColor: Colors.white,
	        checkedColor: palette.primary1Color,
	        requiredColor: palette.primary1Color,
	        disabledColor: palette.disabledColor,
	        size: 24,
	        labelColor: palette.textColor,
	        labelDisabledColor: palette.disabledColor
	      },
	      raisedButton: {
	        color: Colors.white,
	        textColor: palette.textColor,
	        primaryColor: palette.accent1Color,
	        primaryTextColor: Colors.white,
	        secondaryColor: palette.primary1Color,
	        secondaryTextColor: Colors.white
	      },
	      slider: {
	        trackSize: 2,
	        trackColor: Colors.minBlack,
	        trackColorSelected: Colors.grey500,
	        handleSize: 12,
	        handleSizeDisabled: 8,
	        handleColorZero: Colors.grey400,
	        handleFillColor: Colors.white,
	        selectionColor: palette.primary3Color,
	        rippleColor: palette.primary1Color
	      },
	      snackbar: {
	        textColor: Colors.white,
	        backgroundColor: '#323232',
	        actionColor: palette.accent1Color
	      },
	      table: {
	        backgroundColor: Colors.white
	      },
	      tableHeader: {
	        borderColor: palette.borderColor
	      },
	      tableHeaderColumn: {
	        textColor: Colors.lightBlack,
	        height: 56,
	        spacing: 28
	      },
	      tableFooter: {
	        borderColor: palette.borderColor,
	        textColor: Colors.lightBlack
	      },
	      tableRow: {
	        hoverColor: Colors.grey200,
	        stripeColor: ColorManipulator.lighten(palette.primary1Color, 0.55),
	        selectedColor: Colors.grey300,
	        textColor: Colors.darkBlack,
	        borderColor: palette.borderColor
	      },
	      tableRowColumn: {
	        height: 48,
	        spacing: 28
	      },
	      timePicker: {
	        color: Colors.white,
	        textColor: Colors.grey600,
	        accentColor: palette.primary1Color,
	        clockColor: Colors.black,
	        selectColor: palette.primary2Color,
	        selectTextColor: Colors.white
	      },
	      toggle: {
	        thumbOnColor: palette.primary1Color,
	        thumbOffColor: Colors.grey50,
	        thumbDisabledColor: Colors.grey400,
	        thumbRequiredColor: palette.primary1Color,
	        trackOnColor: ColorManipulator.fade(palette.primary1Color, 0.5),
	        trackOffColor: Colors.minBlack,
	        trackDisabledColor: Colors.faintBlack,
	        labelColor: palette.textColor,
	        labelDisabledColor: palette.disabledColor
	      },
	      toolbar: {
	        backgroundColor: ColorManipulator.darken('#eeeeee', 0.05),
	        height: 56,
	        titleFontSize: 20,
	        iconColor: 'rgba(0, 0, 0, .40)',
	        separatorColor: 'rgba(0, 0, 0, .175)',
	        menuHoverColor: 'rgba(0, 0, 0, .10)'
	      },
	      tabs: {
	        backgroundColor: palette.primary1Color
	      },
	      textField: {
	        textColor: palette.textColor,
	        hintColor: palette.disabledColor,
	        floatingLabelColor: palette.textColor,
	        disabledTextColor: palette.disabledColor,
	        errorColor: Colors.red500,
	        focusColor: palette.primary1Color,
	        backgroundColor: 'transparent',
	        borderColor: palette.borderColor
	      }
	    };

	    // Properties based on previous properties
	    obj.flatButton.disabledTextColor = ColorManipulator.fade(obj.flatButton.textColor, 0.3);
	    obj.floatingActionButton.disabledColor = ColorManipulator.darken(Colors.white, 0.1);
	    obj.floatingActionButton.disabledTextColor = ColorManipulator.fade(palette.textColor, 0.3);
	    obj.raisedButton.disabledColor = ColorManipulator.darken(obj.raisedButton.color, 0.1);
	    obj.raisedButton.disabledTextColor = ColorManipulator.fade(obj.raisedButton.textColor, 0.3);
	    obj.slider.handleSizeActive = obj.slider.handleSize * 2;
	    obj.toggle.trackRequiredColor = ColorManipulator.fade(obj.toggle.thumbRequiredColor, 0.5);

	    return obj;
	  }
	};

	module.exports = LightTheme;

/***/ },
/* 256 */
/***/ function(module, exports) {

	"use strict";

	module.exports = {
	  iconSize: 24,

	  desktopGutter: 24,
	  desktopGutterMore: 32,
	  desktopGutterLess: 16,
	  desktopGutterMini: 8,
	  desktopKeylineIncrement: 64,
	  desktopDropDownMenuItemHeight: 32,
	  desktopDropDownMenuFontSize: 15,
	  desktopLeftNavMenuItemHeight: 48,
	  desktopSubheaderHeight: 48,
	  desktopToolbarHeight: 56
	};

/***/ },
/* 257 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {

	  /**
	   * The relative brightness of any point in a colorspace, normalized to 0 for
	   * darkest black and 1 for lightest white. RGB colors only. Does not take
	   * into account alpha values.
	   *
	   * TODO:
	   * - Take into account alpha values.
	   * - Identify why there are minor discrepancies for some use cases
	   *   (i.e. #F0F & #FFF). Note that these cases rarely occur.
	   *
	   * Formula: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
	   */
	  _luminance: function _luminance(color) {
	    color = this._decomposeColor(color);

	    if (color.type.indexOf('rgb') > -1) {
	      var rgb = color.values.map(function (val) {
	        val /= 255; // normalized
	        return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);
	      });

	      return 0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2];
	    } else {
	      var message = 'Calculating the relative luminance is not available for ' + 'HSL and HSLA.';
	      console.error(message);
	      return -1;
	    }
	  },

	  /**
	   * @params:
	   * additionalValue = An extra value that has been calculated but not included
	   *                   with the original color object, such as an alpha value.
	   */
	  _convertColorToString: function _convertColorToString(color, additonalValue) {
	    var str = color.type + '(' + parseInt(color.values[0]) + ',' + parseInt(color.values[1]) + ',' + parseInt(color.values[2]);

	    if (additonalValue !== undefined) {
	      str += ',' + additonalValue + ')';
	    } else if (color.values.length === 4) {
	      str += ',' + color.values[3] + ')';
	    } else {
	      str += ')';
	    }

	    return str;
	  },

	  // Converts a color from hex format to rgb format.
	  _convertHexToRGB: function _convertHexToRGB(color) {
	    if (color.length === 4) {
	      var extendedColor = '#';
	      for (var i = 1; i < color.length; i++) {
	        extendedColor += color.charAt(i) + color.charAt(i);
	      }
	      color = extendedColor;
	    }

	    var values = {
	      r: parseInt(color.substr(1, 2), 16),
	      g: parseInt(color.substr(3, 2), 16),
	      b: parseInt(color.substr(5, 2), 16)
	    };

	    return 'rgb(' + values.r + ',' + values.g + ',' + values.b + ')';
	  },

	  // Returns the type and values of a color of any given type.
	  _decomposeColor: function _decomposeColor(color) {
	    if (color.charAt(0) === '#') {
	      return this._decomposeColor(this._convertHexToRGB(color));
	    }

	    var marker = color.indexOf('(');
	    var type = color.substring(0, marker);
	    var values = color.substring(marker + 1, color.length - 1).split(',');

	    return { type: type, values: values };
	  },

	  // Set the absolute transparency of a color.
	  // Any existing alpha values are overwritten.
	  fade: function fade(color, amount) {
	    color = this._decomposeColor(color);
	    if (color.type === 'rgb' || color.type === 'hsl') color.type += 'a';
	    return this._convertColorToString(color, amount);
	  },

	  // Desaturates rgb and sets opacity to 0.15
	  lighten: function lighten(color, amount) {
	    color = this._decomposeColor(color);

	    if (color.type.indexOf('hsl') > -1) {
	      color.values[2] += amount;
	      return this._decomposeColor(this._convertColorToString(color));
	    } else if (color.type.indexOf('rgb') > -1) {
	      for (var i = 0; i < 3; i++) {
	        color.values[i] *= 1 + amount;
	        if (color.values[i] > 255) color.values[i] = 255;
	      }
	    }

	    if (color.type.indexOf('a') <= -1) color.type += 'a';

	    return this._convertColorToString(color, '0.15');
	  },

	  darken: function darken(color, amount) {
	    color = this._decomposeColor(color);

	    if (color.type.indexOf('hsl') > -1) {
	      color.values[2] += amount;
	      return this._decomposeColor(this._convertColorToString(color));
	    } else if (color.type.indexOf('rgb') > -1) {
	      for (var i = 0; i < 3; i++) {
	        color.values[i] *= 1 - amount;
	        if (color.values[i] < 0) color.values[i] = 0;
	      }
	    }

	    return this._convertColorToString(color);
	  },

	  // Calculates the contrast ratio between two colors.
	  //
	  // Formula: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef
	  contrastRatio: function contrastRatio(background, foreground) {
	    var lumA = this._luminance(background);
	    var lumB = this._luminance(foreground);

	    if (lumA >= lumB) {
	      return ((lumA + 0.05) / (lumB + 0.05)).toFixed(2);
	    } else {
	      return ((lumB + 0.05) / (lumA + 0.05)).toFixed(2);
	    }
	  },

	  /**
	   * Determines how readable a color combination is based on its level.
	   * Levels are defined from @LeaVerou:
	   * https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/contrast-ratio.js
	   */
	  contrastRatioLevel: function contrastRatioLevel(background, foreground) {
	    var levels = {
	      'fail': {
	        range: [0, 3],
	        color: 'hsl(0, 100%, 40%)'
	      },
	      'aa-large': {
	        range: [3, 4.5],
	        color: 'hsl(40, 100%, 45%)'
	      },
	      'aa': {
	        range: [4.5, 7],
	        color: 'hsl(80, 60%, 45%)'
	      },
	      'aaa': {
	        range: [7, 22],
	        color: 'hsl(95, 60%, 41%)'
	      }
	    };

	    var ratio = this.contrastRatio(background, foreground);

	    for (var level in levels) {
	      var range = levels[level].range;
	      if (ratio >= range[0] && ratio <= range[1]) return level;
	    }
	  }
	};

/***/ },
/* 258 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Colors = __webpack_require__(228);
	var ColorManipulator = __webpack_require__(257);

	var DarkTheme = {
	  getPalette: function getPalette() {
	    return {
	      textColor: Colors.fullWhite,
	      canvasColor: '#303030',
	      borderColor: ColorManipulator.fade(Colors.fullWhite, 0.3), //Colors.grey300
	      disabledColor: ColorManipulator.fade(Colors.fullWhite, 0.3),
	      primary1Color: Colors.teal200
	    };
	  },
	  getComponentThemes: function getComponentThemes(palette) {
	    var cardColor = Colors.grey800;
	    return {
	      avatar: {
	        borderColor: 'rgba(0, 0, 0, 0.5)'
	      },
	      floatingActionButton: {
	        disabledColor: ColorManipulator.fade(palette.textColor, 0.12)
	      },
	      leftNav: {
	        color: cardColor
	      },
	      menu: {
	        backgroundColor: cardColor,
	        containerBackgroundColor: cardColor
	      },
	      menuItem: {
	        hoverColor: 'rgba(255, 255, 255, .03)'
	      },
	      menuSubheader: {
	        borderColor: 'rgba(255, 255, 255, 0.3)'
	      },
	      paper: {
	        backgroundColor: cardColor
	      },
	      raisedButton: {
	        color: Colors.grey500
	      },
	      toggle: {
	        thumbOnColor: Colors.cyan200,
	        thumbOffColor: Colors.grey400,
	        thumbDisabledColor: Colors.grey800,
	        thumbRequiredColor: Colors.cyan200,
	        trackOnColor: ColorManipulator.fade(Colors.cyan200, 0.5),
	        trackOffColor: 'rgba(255, 255, 255, 0.3)',
	        trackDisabledColor: 'rgba(255, 255, 255, 0.1)'
	      },
	      slider: {
	        trackColor: Colors.minBlack,
	        handleColorZero: cardColor,
	        handleFillColor: cardColor,
	        selectionColor: Colors.cyan200
	      }
	    };
	  }
	};

	module.exports = DarkTheme;

/***/ },
/* 259 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var React = __webpack_require__(1);
	var Styles = __webpack_require__(253);
	var StylePropable = __webpack_require__(206);

	var CardMedia = React.createClass({
	  displayName: 'CardMedia',

	  mixins: [StylePropable],

	  propTypes: {
	    overlay: React.PropTypes.node,
	    style: React.PropTypes.object,
	    overlayStyle: React.PropTypes.object,
	    overlayContainerStyle: React.PropTypes.object,
	    overlayContentStyle: React.PropTypes.object,
	    mediaStyle: React.PropTypes.object,
	    expandable: React.PropTypes.bool
	  },

	  getStyles: function getStyles() {
	    return {
	      root: {
	        position: 'relative'
	      },
	      overlayContainer: {
	        position: 'absolute',
	        top: 0,
	        bottom: 0,
	        right: 0,
	        left: 0
	      },
	      overlay: {
	        height: '100%',
	        position: 'relative'
	      },
	      overlayContent: {
	        position: 'absolute',
	        bottom: 0,
	        right: 0,
	        left: 0,
	        paddingTop: 8,
	        background: Styles.Colors.lightBlack
	      },
	      media: {}
	    };
	  },

	  render: function render() {
	    var styles = this.getStyles();
	    var rootStyle = this.mergeAndPrefix(styles.root, this.props.style);
	    var mediaStyle = this.mergeAndPrefix(styles.media, this.props.mediaStyle);
	    var overlayContainerStyle = this.mergeAndPrefix(styles.overlayContainer, this.props.overlayContainerStyle);
	    var overlayContentStyle = this.mergeAndPrefix(styles.overlayContent, this.props.overlayContentStyle);
	    var overlayStyle = this.mergeAndPrefix(styles.overlay, this.props.overlayStyle);

	    var children = React.Children.map(this.props.children, function (child) {
	      return React.cloneElement(child, {
	        style: {
	          verticalAlign: 'top',
	          maxWidth: '100%',
	          minWidth: '100%'
	        }
	      });
	    });

	    var overlayChildren = React.Children.map(this.props.overlay, function (child) {
	      if (child.type.displayName === 'CardHeader' || child.type.displayName === 'CardTitle') {
	        return React.cloneElement(child, {
	          titleColor: Styles.Colors.darkWhite,
	          subtitleColor: Styles.Colors.lightWhite
	        });
	      } else if (child.type.displayName === 'CardText') {
	        return React.cloneElement(child, {
	          color: Styles.Colors.darkWhite
	        });
	      } else {
	        return child;
	      }
	    });

	    return React.createElement(
	      'div',
	      _extends({}, this.props, { style: rootStyle }),
	      React.createElement(
	        'div',
	        { style: mediaStyle },
	        children
	      ),
	      this.props.overlay ? React.createElement(
	        'div',
	        { style: overlayContainerStyle },
	        React.createElement(
	          'div',
	          { style: overlayStyle },
	          React.createElement(
	            'div',
	            { style: overlayContentStyle },
	            overlayChildren
	          )
	        )
	      ) : ''
	    );
	  }
	});

	module.exports = CardMedia;

/***/ },
/* 260 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var React = __webpack_require__(1);
	var Styles = __webpack_require__(253);
	var StylePropable = __webpack_require__(206);

	var CardText = React.createClass({
	  displayName: 'CardText',

	  mixins: [StylePropable],

	  propTypes: {
	    color: React.PropTypes.string,
	    style: React.PropTypes.object,
	    expandable: React.PropTypes.bool
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      color: Styles.Colors.ck
	    };
	  },

	  getStyles: function getStyles() {
	    return {
	      root: {
	        padding: 16,
	        fontSize: '14px',
	        color: this.props.color
	      }
	    };
	  },

	  render: function render() {
	    var styles = this.getStyles();
	    var rootStyle = this.mergeAndPrefix(styles.root, this.props.style);

	    return React.createElement(
	      'div',
	      _extends({}, this.props, { style: rootStyle }),
	      this.props.children
	    );
	  }
	});

	module.exports = CardText;

/***/ },
/* 261 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var React = __webpack_require__(1);
	var Styles = __webpack_require__(253);
	var StylePropable = __webpack_require__(206);

	var CardTitle = React.createClass({
	  displayName: 'CardTitle',

	  mixins: [StylePropable],

	  propTypes: {
	    title: React.PropTypes.string,
	    titleColor: React.PropTypes.string,
	    titleStyle: React.PropTypes.object,
	    subtitle: React.PropTypes.string,
	    subtitleColor: React.PropTypes.string,
	    subtitleStyle: React.PropTypes.object,
	    expandable: React.PropTypes.bool,
	    showExpandableButton: React.PropTypes.bool
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      titleColor: Styles.Colors.darkBlack,
	      subtitleColor: Styles.Colors.lightBlack
	    };
	  },

	  getStyles: function getStyles() {
	    return {
	      root: {
	        padding: 16,
	        position: 'relative'
	      },
	      title: {
	        fontSize: 24,
	        color: this.props.titleColor,
	        display: 'block',
	        lineHeight: '36px'
	      },
	      subtitle: {
	        fontSize: 14,
	        color: this.props.subtitleColor,
	        display: 'block'
	      }
	    };
	  },

	  render: function render() {
	    var styles = this.getStyles();
	    var rootStyle = this.mergeAndPrefix(styles.root, this.props.style);
	    var titleStyle = this.mergeAndPrefix(styles.title, this.props.titleStyle);
	    var subtitleStyle = this.mergeAndPrefix(styles.subtitle, this.props.subtitleStyle);

	    return React.createElement(
	      'div',
	      _extends({}, this.props, { style: rootStyle }),
	      React.createElement(
	        'span',
	        { style: titleStyle },
	        this.props.title
	      ),
	      React.createElement(
	        'span',
	        { style: subtitleStyle },
	        this.props.subtitle
	      ),
	      this.props.children
	    );
	  }
	});

	module.exports = CardTitle;

/***/ },
/* 262 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var EnhancedSwitch = __webpack_require__(263);
	var StylePropable = __webpack_require__(206);
	var Transitions = __webpack_require__(230);
	var CheckboxOutline = __webpack_require__(268);
	var CheckboxChecked = __webpack_require__(269);

	var Checkbox = React.createClass({
	  displayName: 'Checkbox',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    iconStyle: React.PropTypes.object,
	    labelStyle: React.PropTypes.object,
	    onCheck: React.PropTypes.func,
	    checkedIcon: React.PropTypes.element,
	    unCheckedIcon: React.PropTypes.element
	  },

	  getInitialState: function getInitialState() {
	    return {
	      switched: this.props.checked || this.props.defaultChecked || this.props.valueLink && this.props.valueLink.value || false
	    };
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.checkbox;
	  },

	  getStyles: function getStyles() {
	    var checkboxSize = 24;
	    var styles = {
	      icon: {
	        height: checkboxSize,
	        width: checkboxSize
	      },
	      check: {
	        position: 'absolute',
	        opacity: 0,
	        transform: 'scale(0)',
	        transitionOrigin: '50% 50%',
	        transition: Transitions.easeOut('450ms', 'opacity', '0ms') + ', ' + Transitions.easeOut('0ms', 'transform', '450ms'),
	        fill: this.getTheme().checkedColor
	      },
	      box: {
	        position: 'absolute',
	        opacity: 1,
	        fill: this.getTheme().boxColor,
	        transition: Transitions.easeOut('2s', null, '200ms')
	      },
	      checkWhenSwitched: {
	        opacity: 1,
	        transform: 'scale(1)',
	        transition: Transitions.easeOut('0ms', 'opacity', '0ms') + ', ' + Transitions.easeOut('800ms', 'transform', '0ms')
	      },
	      boxWhenSwitched: {
	        transition: Transitions.easeOut('100ms', null, '0ms'),
	        fill: this.getTheme().checkedColor
	      },
	      checkWhenDisabled: {
	        fill: this.getTheme().disabledColor
	      },
	      boxWhenDisabled: {
	        fill: this.getTheme().disabledColor
	      },
	      label: {
	        color: this.props.disabled ? this.getTheme().labelDisabledColor : this.getTheme().labelColor
	      }
	    };

	    return styles;
	  },

	  render: function render() {
	    var _props = this.props;
	    var iconStyle = _props.iconStyle;
	    var onCheck = _props.onCheck;
	    var checkedIcon = _props.checkedIcon;
	    var unCheckedIcon = _props.unCheckedIcon;

	    var other = _objectWithoutProperties(_props, ['iconStyle', 'onCheck', 'checkedIcon', 'unCheckedIcon']);

	    var styles = this.getStyles();
	    var boxStyles = this.mergeAndPrefix(styles.box, this.state.switched && styles.boxWhenSwitched, iconStyle, this.props.disabled && styles.boxWhenDisabled);
	    var checkStyles = this.mergeAndPrefix(styles.check, this.state.switched && styles.checkWhenSwitched, iconStyle, this.props.disabled && styles.checkWhenDisabled);

	    var checkedElement = checkedIcon ? React.cloneElement(checkedIcon, {
	      style: this.mergeAndPrefix(checkStyles, checkedIcon.props.style)
	    }) : React.createElement(CheckboxChecked, {
	      style: checkStyles
	    });

	    var unCheckedElement = unCheckedIcon ? React.cloneElement(unCheckedIcon, {
	      style: this.mergeAndPrefix(boxStyles, unCheckedIcon.props.style)
	    }) : React.createElement(CheckboxOutline, {
	      style: boxStyles
	    });

	    var checkboxElement = React.createElement(
	      'div',
	      null,
	      unCheckedElement,
	      checkedElement
	    );

	    var rippleColor = this.state.switched ? checkStyles.fill : boxStyles.fill;
	    var mergedIconStyle = this.mergeAndPrefix(styles.icon, iconStyle);

	    var labelStyle = this.mergeAndPrefix(styles.label, this.props.labelStyle);

	    var enhancedSwitchProps = {
	      ref: 'enhancedSwitch',
	      inputType: 'checkbox',
	      switched: this.state.switched,
	      switchElement: checkboxElement,
	      rippleColor: rippleColor,
	      iconStyle: mergedIconStyle,
	      onSwitch: this._handleCheck,
	      labelStyle: labelStyle,
	      onParentShouldUpdate: this._handleStateChange,
	      defaultSwitched: this.props.defaultChecked,
	      labelPosition: this.props.labelPosition ? this.props.labelPosition : 'right'
	    };

	    return React.createElement(EnhancedSwitch, _extends({}, other, enhancedSwitchProps));
	  },

	  isChecked: function isChecked() {
	    return this.refs.enhancedSwitch.isSwitched();
	  },

	  setChecked: function setChecked(newCheckedValue) {
	    this.refs.enhancedSwitch.setSwitched(newCheckedValue);
	  },

	  _handleCheck: function _handleCheck(e, isInputChecked) {
	    if (this.props.onCheck) this.props.onCheck(e, isInputChecked);
	  },

	  _handleStateChange: function _handleStateChange(newSwitched) {
	    this.setState({ switched: newSwitched });
	  }

	});

	module.exports = Checkbox;

/***/ },
/* 263 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var KeyCode = __webpack_require__(205);
	var StylePropable = __webpack_require__(206);
	var Transitions = __webpack_require__(230);
	var UniqueId = __webpack_require__(266);
	var WindowListenable = __webpack_require__(264);
	var ClearFix = __webpack_require__(267);
	var FocusRipple = __webpack_require__(229);
	var TouchRipple = __webpack_require__(233);
	var Paper = __webpack_require__(243);

	var EnhancedSwitch = React.createClass({
	  displayName: 'EnhancedSwitch',

	  mixins: [WindowListenable, StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    id: React.PropTypes.string,
	    inputType: React.PropTypes.string.isRequired,
	    switchElement: React.PropTypes.element.isRequired,
	    onParentShouldUpdate: React.PropTypes.func.isRequired,
	    switched: React.PropTypes.bool.isRequired,
	    rippleStyle: React.PropTypes.object,
	    rippleColor: React.PropTypes.string,
	    iconStyle: React.PropTypes.object,
	    thumbStyle: React.PropTypes.object,
	    trackStyle: React.PropTypes.object,
	    labelStyle: React.PropTypes.object,
	    name: React.PropTypes.string,
	    value: React.PropTypes.string,
	    label: React.PropTypes.string,
	    onSwitch: React.PropTypes.func,
	    required: React.PropTypes.bool,
	    disabled: React.PropTypes.bool,
	    defaultSwitched: React.PropTypes.bool,
	    labelPosition: React.PropTypes.oneOf(['left', 'right']),
	    disableFocusRipple: React.PropTypes.bool,
	    disableTouchRipple: React.PropTypes.bool
	  },

	  windowListeners: {
	    keydown: '_handleWindowKeydown',
	    keyup: '_handleWindowKeyup'
	  },

	  getInitialState: function getInitialState() {
	    return {
	      isKeyboardFocused: false,
	      parentWidth: 100
	    };
	  },

	  getEvenWidth: function getEvenWidth() {
	    return parseInt(window.getComputedStyle(React.findDOMNode(this.refs.root)).getPropertyValue('width'), 10);
	  },

	  componentDidMount: function componentDidMount() {
	    var inputNode = React.findDOMNode(this.refs.checkbox);
	    if (!this.props.switched || inputNode.checked !== this.props.switched) {
	      this.props.onParentShouldUpdate(inputNode.checked);
	    }

	    window.addEventListener('resize', this._handleResize);

	    this._handleResize();
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    window.removeEventListener('resize', this._handleResize);
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    var hasCheckedLinkProp = nextProps.hasOwnProperty('checkedLink');
	    var hasCheckedProp = nextProps.hasOwnProperty('checked');
	    var hasToggledProp = nextProps.hasOwnProperty('toggled');
	    var hasNewDefaultProp = nextProps.hasOwnProperty('defaultSwitched') && nextProps.defaultSwitched !== this.props.defaultSwitched;
	    var newState = {};

	    if (hasCheckedProp) {
	      newState.switched = nextProps.checked;
	    } else if (hasToggledProp) {
	      newState.switched = nextProps.toggled;
	    } else if (hasCheckedLinkProp) {
	      newState.switched = nextProps.checkedLink.value;
	    } else if (hasNewDefaultProp) {
	      newState.switched = nextProps.defaultSwitched;
	    }

	    if (newState.switched !== undefined && newState.switched !== this.props.switched) {
	      this.props.onParentShouldUpdate(newState.switched);
	    }
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.palette;
	  },

	  getStyles: function getStyles() {
	    var spacing = this.context.muiTheme.spacing;
	    var switchWidth = 60 - spacing.desktopGutterLess;
	    var labelWidth = 'calc(100% - 60px)';
	    var styles = {
	      root: {
	        position: 'relative',
	        cursor: this.props.disabled ? 'default' : 'pointer',
	        overflow: 'visible',
	        display: 'table',
	        height: 'auto',
	        width: '100%'
	      },
	      input: {
	        position: 'absolute',
	        cursor: this.props.disabled ? 'default' : 'pointer',
	        pointerEvents: 'all',
	        opacity: 0,
	        width: '100%',
	        height: '100%',
	        zIndex: 2,
	        left: 0,
	        boxSizing: 'border-box',
	        padding: 0,
	        margin: 0
	      },
	      controls: {
	        width: '100%',
	        height: '100%'
	      },
	      label: {
	        float: 'left',
	        position: 'relative',
	        display: 'block',
	        width: labelWidth,
	        lineHeight: '24px',
	        color: this.getTheme().textColor
	      },
	      wrap: {
	        transition: Transitions.easeOut(),
	        float: 'left',
	        position: 'relative',
	        display: 'block',
	        width: switchWidth,
	        marginRight: this.props.labelPosition === 'right' ? spacing.desktopGutterLess : 0,
	        marginLeft: this.props.labelPosition === 'left' ? spacing.desktopGutterLess : 0
	      },
	      ripple: {
	        height: '200%',
	        width: '200%',
	        top: -12,
	        left: -12
	      }
	    };

	    return styles;
	  },

	  render: function render() {
	    var _props = this.props;
	    var type = _props.type;
	    var name = _props.name;
	    var value = _props.value;
	    var label = _props.label;
	    var onSwitch = _props.onSwitch;
	    var defaultSwitched = _props.defaultSwitched;
	    var onBlur = _props.onBlur;
	    var onFocus = _props.onFocus;
	    var onMouseUp = _props.onMouseUp;
	    var onMouseDown = _props.onMouseDown;
	    var onMouseLeave = _props.onMouseLeave;
	    var onTouchStart = _props.onTouchStart;
	    var onTouchEnd = _props.onTouchEnd;
	    var disableTouchRipple = _props.disableTouchRipple;
	    var disableFocusRipple = _props.disableFocusRipple;
	    var className = _props.className;

	    var other = _objectWithoutProperties(_props, ['type', 'name', 'value', 'label', 'onSwitch', 'defaultSwitched', 'onBlur', 'onFocus', 'onMouseUp', 'onMouseDown', 'onMouseLeave', 'onTouchStart', 'onTouchEnd', 'disableTouchRipple', 'disableFocusRipple', 'className']);

	    var styles = this.getStyles();
	    var wrapStyles = this.mergeAndPrefix(styles.wrap, this.props.iconStyle);
	    var rippleStyle = this.mergeAndPrefix(styles.ripple, this.props.rippleStyle);
	    var rippleColor = this.props.hasOwnProperty('rippleColor') ? this.props.rippleColor : this.getTheme().primary1Color;

	    if (this.props.thumbStyle) {
	      wrapStyles.marginLeft /= 2;
	      wrapStyles.marginRight /= 2;
	    }

	    var inputId = this.props.id || UniqueId.generate();

	    var labelStyle = this.mergeAndPrefix(styles.label, this.props.labelStyle);
	    var labelElement = this.props.label ? React.createElement(
	      'label',
	      { style: labelStyle, htmlFor: inputId },
	      this.props.label
	    ) : null;

	    var inputProps = {
	      ref: 'checkbox',
	      type: this.props.inputType,
	      style: this.mergeAndPrefix(styles.input),
	      name: this.props.name,
	      value: this.props.value,
	      defaultChecked: this.props.defaultSwitched,
	      onBlur: this._handleBlur,
	      onFocus: this._handleFocus
	    };

	    var hideTouchRipple = this.props.disabled || disableTouchRipple;

	    if (!hideTouchRipple) {
	      inputProps.onMouseUp = this._handleMouseUp;
	      inputProps.onMouseDown = this._handleMouseDown;
	      inputProps.onMouseLeave = this._handleMouseLeave;
	      inputProps.onTouchStart = this._handleTouchStart;
	      inputProps.onTouchEnd = this._handleTouchEnd;
	    }

	    if (!this.props.hasOwnProperty('checkedLink')) {
	      inputProps.onChange = this._handleChange;
	    }

	    var inputElement = React.createElement('input', _extends({}, other, inputProps));

	    var touchRipple = React.createElement(TouchRipple, {
	      ref: 'touchRipple',
	      key: 'touchRipple',
	      style: rippleStyle,
	      color: rippleColor,
	      centerRipple: true });

	    var focusRipple = React.createElement(FocusRipple, {
	      key: 'focusRipple',
	      innerStyle: rippleStyle,
	      color: rippleColor,
	      show: this.state.isKeyboardFocused });

	    var ripples = [hideTouchRipple ? null : touchRipple, this.props.disabled || disableFocusRipple ? null : focusRipple];

	    // If toggle component (indicated by whether the style includes thumb) manually lay out
	    // elements in order to nest ripple elements
	    var switchElement = !this.props.thumbStyle ? React.createElement(
	      'div',
	      { style: wrapStyles },
	      this.props.switchElement,
	      ripples
	    ) : React.createElement(
	      'div',
	      { style: wrapStyles },
	      React.createElement('div', { style: this.props.trackStyle }),
	      React.createElement(
	        Paper,
	        { style: this.props.thumbStyle, zDepth: 1, circle: true },
	        ' ',
	        ripples,
	        ' '
	      )
	    );

	    var labelPositionExist = this.props.labelPosition;

	    // Position is left if not defined or invalid.
	    var elementsInOrder = labelPositionExist && this.props.labelPosition.toUpperCase() === 'RIGHT' ? React.createElement(
	      ClearFix,
	      { style: this.mergeAndPrefix(styles.controls) },
	      switchElement,
	      labelElement
	    ) : React.createElement(
	      ClearFix,
	      { style: this.mergeAndPrefix(styles.controls) },
	      labelElement,
	      switchElement
	    );

	    return React.createElement(
	      'div',
	      { ref: 'root', className: className, style: this.mergeAndPrefix(styles.root, this.props.style) },
	      inputElement,
	      elementsInOrder
	    );
	  },

	  isSwitched: function isSwitched() {
	    return React.findDOMNode(this.refs.checkbox).checked;
	  },

	  // no callback here because there is no event
	  setSwitched: function setSwitched(newSwitchedValue) {
	    if (!this.props.hasOwnProperty('checked') || this.props.checked === false) {
	      this.props.onParentShouldUpdate(newSwitchedValue);
	      React.findDOMNode(this.refs.checkbox).checked = newSwitchedValue;
	    } else if (process.env.NODE_ENV !== 'production') {
	      var message = 'Cannot call set method while checked is defined as a property.';
	      console.error(message);
	    }
	  },

	  getValue: function getValue() {
	    return React.findDOMNode(this.refs.checkbox).value;
	  },

	  isKeyboardFocused: function isKeyboardFocused() {
	    return this.state.isKeyboardFocused;
	  },

	  _handleChange: function _handleChange(e) {
	    this._tabPressed = false;
	    this.setState({
	      isKeyboardFocused: false
	    });

	    var isInputChecked = React.findDOMNode(this.refs.checkbox).checked;

	    if (!this.props.hasOwnProperty('checked')) {
	      this.props.onParentShouldUpdate(isInputChecked);
	    }
	    if (this.props.onSwitch) {
	      this.props.onSwitch(e, isInputChecked);
	    }
	  },

	  // Checkbox inputs only use SPACE to change their state. Using ENTER will
	  // update the ui but not the input.
	  _handleWindowKeydown: function _handleWindowKeydown(e) {
	    if (e.keyCode === KeyCode.TAB) {
	      this._tabPressed = true;
	    }
	    if (e.keyCode === KeyCode.SPACE && this.state.isKeyboardFocused) {
	      this._handleChange(e);
	    }
	  },

	  _handleWindowKeyup: function _handleWindowKeyup(e) {
	    if (e.keyCode === KeyCode.SPACE && this.state.isKeyboardFocused) {
	      this._handleChange(e);
	    }
	  },

	  /**
	   * Because both the ripples and the checkbox input cannot share pointer
	   * events, the checkbox input takes control of pointer events and calls
	   * ripple animations manually.
	   */
	  _handleMouseDown: function _handleMouseDown(e) {
	    //only listen to left clicks
	    if (e.button === 0) {
	      this.refs.touchRipple.start(e);
	    }
	  },

	  _handleMouseUp: function _handleMouseUp() {
	    this.refs.touchRipple.end();
	  },

	  _handleMouseLeave: function _handleMouseLeave() {
	    this.refs.touchRipple.end();
	  },

	  _handleTouchStart: function _handleTouchStart(e) {
	    this.refs.touchRipple.start(e);
	  },

	  _handleTouchEnd: function _handleTouchEnd() {
	    this.refs.touchRipple.end();
	  },

	  _handleBlur: function _handleBlur(e) {
	    this.setState({
	      isKeyboardFocused: false
	    });

	    if (this.props.onBlur) {
	      this.props.onBlur(e);
	    }
	  },

	  _handleFocus: function _handleFocus(e) {
	    var _this = this;

	    //setTimeout is needed becuase the focus event fires first
	    //Wait so that we can capture if this was a keyboard focus
	    //or touch focus
	    setTimeout(function () {
	      if (_this._tabPressed) {
	        _this.setState({
	          isKeyboardFocused: true
	        });
	      }
	    }, 150);

	    if (this.props.onFocus) {
	      this.props.onFocus(e);
	    }
	  },

	  _handleResize: function _handleResize() {
	    this.setState({ parentWidth: this.getEvenWidth() });
	  }

	});

	module.exports = EnhancedSwitch;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 264 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Events = __webpack_require__(265);

	module.exports = {

	  componentDidMount: function componentDidMount() {
	    var listeners = this.windowListeners;

	    for (var eventName in listeners) {
	      var callbackName = listeners[eventName];
	      Events.on(window, eventName, this[callbackName]);
	    }
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    var listeners = this.windowListeners;

	    for (var eventName in listeners) {
	      var callbackName = listeners[eventName];
	      Events.off(window, eventName, this[callbackName]);
	    }
	  }

	};

/***/ },
/* 265 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {

	  once: function once(el, type, callback) {
	    var typeArray = type.split(' ');
	    var recursiveFunction = function recursiveFunction(e) {
	      e.target.removeEventListener(e.type, recursiveFunction);
	      return callback(e);
	    };

	    for (var i = typeArray.length - 1; i >= 0; i--) {
	      this.on(el, typeArray[i], recursiveFunction);
	    }
	  },

	  on: function on(el, type, callback) {
	    if (el.addEventListener) {
	      el.addEventListener(type, callback);
	    } else {
	      // IE8+ Support
	      el.attachEvent('on' + type, function () {
	        callback.call(el);
	      });
	    }
	  },

	  off: function off(el, type, callback) {
	    if (el.removeEventListener) {
	      el.removeEventListener(type, callback);
	    } else {
	      // IE8+ Support
	      el.detachEvent('on' + type, callback);
	    }
	  },

	  isKeyboard: function isKeyboard(e) {
	    return ['keydown', 'keypress', 'keyup'].indexOf(e.type) !== -1;
	  }
	};

/***/ },
/* 266 */
/***/ function(module, exports) {

	"use strict";

	var index = 0;

	module.exports = {
	  generate: function generate() {
	    return "mui-id-" + index++;
	  }
	};

/***/ },
/* 267 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var BeforeAfterWrapper = __webpack_require__(246);

	var ClearFix = React.createClass({
	  displayName: 'ClearFix',

	  render: function render() {
	    var _props = this.props;
	    var style = _props.style;

	    var other = _objectWithoutProperties(_props, ['style']);

	    var before = function before() {
	      return {
	        content: '\' \'',
	        display: 'table'
	      };
	    };

	    var after = before();
	    after.clear = 'both';

	    return React.createElement(
	      BeforeAfterWrapper,
	      _extends({}, other, {
	        beforeStyle: before(),
	        afterStyle: after,
	        style: this.props.style }),
	      this.props.children
	    );
	  }
	});

	module.exports = ClearFix;

/***/ },
/* 268 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(207);
	var PureRenderMixin = React.addons.PureRenderMixin;
	var SvgIcon = __webpack_require__(242);

	var ToggleCheckBoxOutlineBlank = React.createClass({
	  displayName: 'ToggleCheckBoxOutlineBlank',

	  mixins: [PureRenderMixin],

	  render: function render() {
	    return React.createElement(
	      SvgIcon,
	      this.props,
	      React.createElement('path', { d: 'M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z' })
	    );
	  }

	});

	module.exports = ToggleCheckBoxOutlineBlank;

/***/ },
/* 269 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(207);
	var PureRenderMixin = React.addons.PureRenderMixin;
	var SvgIcon = __webpack_require__(242);

	var ToggleCheckBox = React.createClass({
	  displayName: 'ToggleCheckBox',

	  mixins: [PureRenderMixin],

	  render: function render() {
	    return React.createElement(
	      SvgIcon,
	      this.props,
	      React.createElement('path', { d: 'M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z' })
	    );
	  }

	});

	module.exports = ToggleCheckBox;

/***/ },
/* 270 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(206);
	var AutoPrefix = __webpack_require__(225);
	var Transitions = __webpack_require__(230);

	var CircularProgress = React.createClass({
	  displayName: 'CircularProgress',

	  mixins: [StylePropable],

	  propTypes: {
	    mode: React.PropTypes.oneOf(['determinate', 'indeterminate']),
	    value: React.PropTypes.number,
	    min: React.PropTypes.number,
	    max: React.PropTypes.number,
	    size: React.PropTypes.number,
	    color: React.PropTypes.string,
	    innerStyle: React.PropTypes.object
	  },

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  _getRelativeValue: function _getRelativeValue() {
	    var value = this.props.value;
	    var min = this.props.min;
	    var max = this.props.max;

	    var clampedValue = Math.min(Math.max(min, value), max);
	    var rangeValue = max - min;
	    var relValue = Math.round(clampedValue / rangeValue * 10000) / 10000;
	    return relValue * 100;
	  },

	  componentDidMount: function componentDidMount() {
	    var wrapper = React.findDOMNode(this.refs.wrapper);
	    var path = React.findDOMNode(this.refs.path);

	    this._scalePath(path);
	    this._rotateWrapper(wrapper);
	  },

	  _scalePath: function _scalePath(path, step) {
	    step = step || 0;
	    step %= 3;

	    setTimeout(this._scalePath.bind(this, path, step + 1), step ? 750 : 250);

	    if (!this.isMounted()) return;
	    if (this.props.mode !== 'indeterminate') return;

	    if (step === 0) {
	      path.style.strokeDasharray = '1, 200';
	      path.style.strokeDashoffset = 0;
	      path.style.transitionDuration = '0ms';
	    } else if (step === 1) {
	      path.style.strokeDasharray = '89, 200';
	      path.style.strokeDashoffset = -35;
	      path.style.transitionDuration = '750ms';
	    } else {
	      path.style.strokeDasharray = '89,200';
	      path.style.strokeDashoffset = -124;
	      path.style.transitionDuration = '850ms';
	    }
	  },

	  _rotateWrapper: function _rotateWrapper(wrapper) {
	    setTimeout(this._rotateWrapper.bind(this, wrapper), 10050);

	    if (!this.isMounted()) return;
	    if (this.props.mode !== 'indeterminate') return;

	    AutoPrefix.set(wrapper.style, 'transform', null);
	    AutoPrefix.set(wrapper.style, 'transform', 'rotate(0deg)');
	    wrapper.style.transitionDuration = '0ms';

	    setTimeout(function () {
	      AutoPrefix.set(wrapper.style, 'transform', 'rotate(1800deg)');
	      wrapper.style.transitionDuration = '10s';
	      //wrapper.style.webkitTransitionTimingFunction = "linear";
	      AutoPrefix.set(wrapper.style, 'transitionTimingFunction', 'linear');
	    }, 50);
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      mode: 'indeterminate',
	      value: 0,
	      min: 0,
	      max: 100,
	      size: 1
	    };
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.palette;
	  },

	  getStyles: function getStyles(zoom) {
	    zoom *= 1.4;
	    var size = '50px';

	    var margin = Math.round((50 * zoom - 50) / 2);

	    if (margin < 0) margin = 0;

	    var styles = {
	      root: {
	        position: 'relative',
	        margin: margin + 'px',
	        display: 'inline-block',
	        width: size,
	        height: size
	      },
	      wrapper: {
	        width: size,
	        height: size,
	        margin: '5px',
	        display: 'inline-block',
	        transition: Transitions.create('transform', '20s', null, 'linear')
	      },
	      svg: {
	        height: size,
	        position: 'relative',
	        transform: 'scale(' + zoom + ')',
	        width: size
	      },
	      path: {
	        strokeDasharray: '89,200',
	        strokeDashoffset: 0,
	        stroke: this.props.color || this.getTheme().primary1Color,
	        strokeLinecap: 'round',
	        transition: Transitions.create('all', '1.5s', null, 'ease-in-out')
	      }
	    };

	    AutoPrefix.set(styles.wrapper, 'transitionTimingFunction', 'linear');

	    if (this.props.mode === 'determinate') {
	      var relVal = this._getRelativeValue();
	      styles.path.transition = Transitions.create('all', '0.3s', null, 'linear');
	      styles.path.strokeDasharray = Math.round(relVal * 1.25) + ',200';
	    }

	    return styles;
	  },

	  render: function render() {
	    var _props = this.props;
	    var style = _props.style;
	    var innerStyle = _props.innerStyle;
	    var size = _props.size;

	    var other = _objectWithoutProperties(_props, ['style', 'innerStyle', 'size']);

	    var styles = this.getStyles(size || 1);

	    return React.createElement(
	      'div',
	      _extends({}, other, { style: this.mergeAndPrefix(styles.root, style) }),
	      React.createElement(
	        'div',
	        { ref: 'wrapper', style: this.mergeAndPrefix(styles.wrapper, innerStyle) },
	        React.createElement(
	          'svg',
	          { style: this.mergeAndPrefix(styles.svg) },
	          React.createElement('circle', { ref: 'path', style: this.mergeAndPrefix(styles.path), cx: '25', cy: '25', r: '20', fill: 'none', strokeWidth: '2.5', strokeMiterlimit: '10' })
	        )
	      )
	    );
	  }
	});

	module.exports = CircularProgress;

/***/ },
/* 271 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(206);
	var WindowListenable = __webpack_require__(264);
	var DateTime = __webpack_require__(272);
	var DatePickerDialog = __webpack_require__(273);
	var TextField = __webpack_require__(293);

	var DatePicker = React.createClass({
	  displayName: 'DatePicker',

	  mixins: [StylePropable, WindowListenable],

	  propTypes: {
	    autoOk: React.PropTypes.bool,
	    defaultDate: React.PropTypes.object,
	    formatDate: React.PropTypes.func,
	    hideToolbarYearChange: React.PropTypes.bool,
	    maxDate: React.PropTypes.object,
	    minDate: React.PropTypes.object,
	    mode: React.PropTypes.oneOf(['portrait', 'landscape', 'inline']),
	    onDismiss: React.PropTypes.func,
	    onChange: React.PropTypes.func,
	    onFocus: React.PropTypes.func,
	    onShow: React.PropTypes.func,
	    onTouchTap: React.PropTypes.func,
	    shouldDisableDate: React.PropTypes.func,
	    showYearSelector: React.PropTypes.bool,
	    style: React.PropTypes.object,
	    textFieldStyle: React.PropTypes.object
	  },

	  windowListeners: {
	    keyup: '_handleWindowKeyUp'
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      formatDate: DateTime.format,
	      autoOk: false,
	      showYearSelector: false
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      date: this._isControlled() ? this._getControlledDate() : this.props.defaultDate,
	      dialogDate: new Date()
	    };
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    if (this._isControlled()) {
	      var newDate = this._getControlledDate(nextProps);
	      if (!DateTime.isEqualDate(this.state.date, newDate)) {
	        this.setState({
	          date: newDate
	        });
	      }
	    }
	  },

	  render: function render() {
	    var _props = this.props;
	    var autoOk = _props.autoOk;
	    var defaultDate = _props.defaultDate;
	    var formatDate = _props.formatDate;
	    var maxDate = _props.maxDate;
	    var minDate = _props.minDate;
	    var mode = _props.mode;
	    var onDismiss = _props.onDismiss;
	    var onFocus = _props.onFocus;
	    var onTouchTap = _props.onTouchTap;
	    var onShow = _props.onShow;
	    var showYearSelector = _props.showYearSelector;
	    var style = _props.style;
	    var textFieldStyle = _props.textFieldStyle;

	    var other = _objectWithoutProperties(_props, ['autoOk', 'defaultDate', 'formatDate', 'maxDate', 'minDate', 'mode', 'onDismiss', 'onFocus', 'onTouchTap', 'onShow', 'showYearSelector', 'style', 'textFieldStyle']);

	    return React.createElement(
	      'div',
	      { style: style },
	      React.createElement(TextField, _extends({}, other, {
	        style: textFieldStyle,
	        ref: 'input',
	        value: this.state.date ? formatDate(this.state.date) : undefined,
	        onFocus: this._handleInputFocus,
	        onTouchTap: this._handleInputTouchTap })),
	      React.createElement(DatePickerDialog, {
	        ref: 'dialogWindow',
	        mode: mode,
	        initialDate: this.state.dialogDate,
	        onAccept: this._handleDialogAccept,
	        onShow: onShow,
	        onDismiss: this._handleDialogDismiss,
	        minDate: minDate,
	        maxDate: maxDate,
	        autoOk: autoOk,
	        showYearSelector: showYearSelector,
	        shouldDisableDate: this.props.shouldDisableDate,
	        hideToolbarYearChange: this.props.hideToolbarYearChange })
	    );
	  },

	  getDate: function getDate() {
	    return this.state.date;
	  },

	  setDate: function setDate(d) {
	    if (process.env.NODE_ENV !== 'production' && this._isControlled()) {
	      console.error('Cannot call DatePicker.setDate when value or valueLink is defined as a property.');
	    }
	    this.setState({
	      date: d
	    });
	  },

	  /**
	   * Open the date-picker dialog programmatically from a parent.
	   */
	  openDialog: function openDialog() {
	    this.setState({
	      dialogDate: this.getDate()
	    }, this.refs.dialogWindow.show);
	  },

	  /**
	   * Alias for `openDialog()` for an api consistent with TextField.
	   */
	  focus: function focus() {
	    this.openDialog();
	  },

	  _handleDialogAccept: function _handleDialogAccept(d) {
	    if (!this._isControlled()) {
	      this.setDate(d);
	    }
	    if (this.props.onChange) this.props.onChange(null, d);
	    if (this.props.valueLink) this.props.valueLink.requestChange(d);
	  },

	  _handleDialogDismiss: function _handleDialogDismiss() {
	    if (this.props.onDismiss) this.props.onDismiss();
	  },

	  _handleInputFocus: function _handleInputFocus(e) {
	    e.target.blur();
	    if (this.props.onFocus) this.props.onFocus(e);
	  },

	  _handleInputTouchTap: function _handleInputTouchTap(e) {
	    this.openDialog();
	    if (this.props.onTouchTap) this.props.onTouchTap(e);
	  },

	  _handleWindowKeyUp: function _handleWindowKeyUp() {},

	  _isControlled: function _isControlled() {
	    return this.props.hasOwnProperty('value') || this.props.hasOwnProperty('valueLink');
	  },

	  _getControlledDate: function _getControlledDate() {
	    var props = arguments[0] === undefined ? this.props : arguments[0];

	    if (DateTime.isDateObject(props.value)) {
	      return props.value;
	    } else if (props.valueLink && DateTime.isDateObject(props.valueLink.value)) {
	      return props.valueLink.value;
	    }
	  }

	});

	module.exports = DatePicker;

	//TO DO: open the dialog if input has focus
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 272 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {

	  addDays: function addDays(d, days) {
	    var newDate = this.clone(d);
	    newDate.setDate(d.getDate() + days);
	    return newDate;
	  },

	  addMonths: function addMonths(d, months) {
	    var newDate = this.clone(d);
	    newDate.setMonth(d.getMonth() + months);
	    return newDate;
	  },

	  addYears: function addYears(d, years) {
	    var newDate = this.clone(d);
	    newDate.setFullYear(d.getFullYear() + years);
	    return newDate;
	  },

	  clone: function clone(d) {
	    return new Date(d.getTime());
	  },

	  cloneAsDate: function cloneAsDate(d) {
	    var clonedDate = this.clone(d);
	    clonedDate.setHours(0, 0, 0, 0);
	    return clonedDate;
	  },

	  getDaysInMonth: function getDaysInMonth(d) {
	    var resultDate = this.getFirstDayOfMonth(d);

	    resultDate.setMonth(resultDate.getMonth() + 1);
	    resultDate.setDate(resultDate.getDate() - 1);

	    return resultDate.getDate();
	  },

	  getFirstDayOfMonth: function getFirstDayOfMonth(d) {
	    return new Date(d.getFullYear(), d.getMonth(), 1);
	  },

	  getFullMonth: function getFullMonth(d) {
	    var month = d.getMonth();
	    switch (month) {
	      case 0:
	        return 'January';
	      case 1:
	        return 'February';
	      case 2:
	        return 'March';
	      case 3:
	        return 'April';
	      case 4:
	        return 'May';
	      case 5:
	        return 'June';
	      case 6:
	        return 'July';
	      case 7:
	        return 'August';
	      case 8:
	        return 'September';
	      case 9:
	        return 'October';
	      case 10:
	        return 'November';
	      case 11:
	        return 'December';
	    }
	  },

	  getShortMonth: function getShortMonth(d) {
	    var month = d.getMonth();
	    switch (month) {
	      case 0:
	        return 'Jan';
	      case 1:
	        return 'Feb';
	      case 2:
	        return 'Mar';
	      case 3:
	        return 'Apr';
	      case 4:
	        return 'May';
	      case 5:
	        return 'Jun';
	      case 6:
	        return 'Jul';
	      case 7:
	        return 'Aug';
	      case 8:
	        return 'Sep';
	      case 9:
	        return 'Oct';
	      case 10:
	        return 'Nov';
	      case 11:
	        return 'Dec';
	    }
	  },

	  getDayOfWeek: function getDayOfWeek(d) {
	    var dow = d.getDay();
	    switch (dow) {
	      case 0:
	        return 'Sunday';
	      case 1:
	        return 'Monday';
	      case 2:
	        return 'Tuesday';
	      case 3:
	        return 'Wednesday';
	      case 4:
	        return 'Thursday';
	      case 5:
	        return 'Friday';
	      case 6:
	        return 'Saturday';
	    }
	  },

	  getWeekArray: function getWeekArray(d) {
	    var dayArray = [];
	    var daysInMonth = this.getDaysInMonth(d);
	    var daysInWeek = undefined;
	    var emptyDays = undefined;
	    var firstDayOfWeek = undefined;
	    var week = undefined;
	    var weekArray = [];

	    for (var i = 1; i <= daysInMonth; i++) {
	      dayArray.push(new Date(d.getFullYear(), d.getMonth(), i));
	    }

	    while (dayArray.length) {
	      firstDayOfWeek = dayArray[0].getDay();
	      daysInWeek = 7 - firstDayOfWeek;
	      emptyDays = 7 - daysInWeek;
	      week = dayArray.splice(0, daysInWeek);

	      for (var i = 0; i < emptyDays; i++) {
	        week.unshift(null);
	      }

	      weekArray.push(week);
	    }

	    return weekArray;
	  },

	  format: function format(date) {
	    var m = date.getMonth() + 1;
	    var d = date.getDate();
	    var y = date.getFullYear();
	    return m + '/' + d + '/' + y;
	  },

	  isEqualDate: function isEqualDate(d1, d2) {
	    return d1 && d2 && d1.getFullYear() === d2.getFullYear() && d1.getMonth() === d2.getMonth() && d1.getDate() === d2.getDate();
	  },

	  isBeforeDate: function isBeforeDate(d1, d2) {
	    var date1 = this.cloneAsDate(d1);
	    var date2 = this.cloneAsDate(d2);

	    return date1.getTime() < date2.getTime();
	  },

	  isAfterDate: function isAfterDate(d1, d2) {
	    var date1 = this.cloneAsDate(d1);
	    var date2 = this.cloneAsDate(d2);

	    return date1.getTime() > date2.getTime();
	  },

	  isBetweenDates: function isBetweenDates(dateToCheck, startDate, endDate) {
	    return !this.isBeforeDate(dateToCheck, startDate) && !this.isAfterDate(dateToCheck, endDate);
	  },

	  isDateObject: function isDateObject(d) {
	    return d instanceof Date;
	  },

	  monthDiff: function monthDiff(d1, d2) {
	    var m = undefined;
	    m = (d1.getFullYear() - d2.getFullYear()) * 12;
	    m += d1.getMonth();
	    m -= d2.getMonth();
	    return m;
	  },

	  yearDiff: function yearDiff(d1, d2) {
	    return ~ ~(this.monthDiff(d1, d2) / 12);
	  }

	};

/***/ },
/* 273 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(206);
	var WindowListenable = __webpack_require__(264);
	var CssEvent = __webpack_require__(274);
	var KeyCode = __webpack_require__(205);
	var Calendar = __webpack_require__(275);
	var Dialog = __webpack_require__(290);
	var FlatButton = __webpack_require__(291);

	var DatePickerDialog = React.createClass({
	  displayName: 'DatePickerDialog',

	  mixins: [StylePropable, WindowListenable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    initialDate: React.PropTypes.object,
	    onAccept: React.PropTypes.func,
	    onShow: React.PropTypes.func,
	    onDismiss: React.PropTypes.func,
	    onClickAway: React.PropTypes.func,
	    minDate: React.PropTypes.object,
	    maxDate: React.PropTypes.object,
	    shouldDisableDate: React.PropTypes.func,
	    hideToolbarYearChange: React.PropTypes.bool,
	    showYearSelector: React.PropTypes.bool
	  },

	  windowListeners: {
	    keyup: '_handleWindowKeyUp'
	  },

	  getInitialState: function getInitialState() {
	    return {
	      isCalendarActive: false,
	      showMonthDayPicker: true
	    };
	  },

	  render: function render() {
	    var _props = this.props;
	    var initialDate = _props.initialDate;
	    var onAccept = _props.onAccept;
	    var style = _props.style;

	    var other = _objectWithoutProperties(_props, ['initialDate', 'onAccept', 'style']);

	    var styles = {
	      root: {
	        fontSize: 14,
	        color: this.context.muiTheme.component.datePicker.calendarTextColor
	      },

	      dialogContent: {
	        width: this.props.mode === 'landscape' ? 560 : 280
	      },

	      dialogBodyContent: {
	        padding: 0
	      },

	      actions: {
	        marginRight: 8
	      }
	    };

	    var actions = [React.createElement(FlatButton, {
	      key: 0,
	      label: 'Cancel',
	      secondary: true,
	      style: styles.actions,
	      onTouchTap: this._handleCancelTouchTap })];

	    if (!this.props.autoOk) {
	      actions.push(React.createElement(FlatButton, {
	        key: 1,
	        label: 'OK',
	        secondary: true,
	        disabled: this.refs.calendar !== undefined && this.refs.calendar.isSelectedDateDisabled(),
	        style: styles.actions,
	        onTouchTap: this._handleOKTouchTap }));
	    }

	    return React.createElement(
	      Dialog,
	      _extends({}, other, {
	        ref: 'dialog',
	        style: styles.root,
	        contentStyle: styles.dialogContent,
	        bodyStyle: styles.dialogBodyContent,
	        actions: actions,
	        onDismiss: this._handleDialogDismiss,
	        onShow: this._handleDialogShow,
	        onClickAway: this._handleDialogClickAway,
	        repositionOnUpdate: false }),
	      React.createElement(Calendar, {
	        ref: 'calendar',
	        onDayTouchTap: this._onDayTouchTap,
	        initialDate: this.props.initialDate,
	        isActive: this.state.isCalendarActive,
	        minDate: this.props.minDate,
	        maxDate: this.props.maxDate,
	        shouldDisableDate: this.props.shouldDisableDate,
	        shouldShowMonthDayPickerFirst: this.state.showMonthDayPicker,
	        hideToolbarYearChange: this.props.hideToolbarYearChange,
	        showYearSelector: this.props.showYearSelector,
	        mode: this.props.mode })
	    );
	  },

	  show: function show() {
	    this.refs.dialog.show();
	  },

	  dismiss: function dismiss() {
	    this.refs.dialog.dismiss();
	  },

	  _onDayTouchTap: function _onDayTouchTap() {
	    if (this.props.autoOk) {
	      setTimeout(this._handleOKTouchTap, 300);
	    }
	  },

	  _handleCancelTouchTap: function _handleCancelTouchTap() {
	    this.dismiss();
	  },

	  _handleOKTouchTap: function _handleOKTouchTap() {
	    if (this.props.onAccept && !this.refs.calendar.isSelectedDateDisabled()) {
	      this.props.onAccept(this.refs.calendar.getSelectedDate());
	    }

	    this.dismiss();
	  },

	  _handleDialogShow: function _handleDialogShow() {
	    this.setState({
	      isCalendarActive: true
	    });

	    if (this.props.onShow) this.props.onShow();
	  },

	  _handleDialogDismiss: function _handleDialogDismiss() {
	    var _this = this;

	    CssEvent.onTransitionEnd(this.refs.dialog.getDOMNode(), function () {
	      _this.setState({
	        isCalendarActive: false,
	        showMonthDayPicker: true
	      });
	    });

	    if (this.props.onDismiss) this.props.onDismiss();
	  },

	  _handleDialogClickAway: function _handleDialogClickAway() {
	    var _this2 = this;

	    CssEvent.onTransitionEnd(this.refs.dialog.getDOMNode(), function () {
	      _this2.setState({
	        isCalendarActive: false,
	        showMonthDayPicker: true
	      });
	    });

	    if (this.props.onClickAway) this.props.onClickAway();
	  },

	  _handleWindowKeyUp: function _handleWindowKeyUp(e) {
	    if (this.state.isCalendarActive) {
	      switch (e.keyCode) {
	        case KeyCode.ENTER:
	          this._handleOKTouchTap();
	          break;
	      }
	    }
	  }

	});

	module.exports = DatePickerDialog;

/***/ },
/* 274 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Events = __webpack_require__(265);

	module.exports = {

	  _testSupportedProps: function _testSupportedProps(props) {
	    var i = undefined,
	        el = document.createElement('div');

	    for (i in props) {
	      if (props.hasOwnProperty(i) && el.style[i] !== undefined) {
	        return props[i];
	      }
	    }
	  },

	  //Returns the correct event name to use
	  transitionEndEventName: function transitionEndEventName() {
	    return this._testSupportedProps({
	      'transition': 'transitionend',
	      'OTransition': 'otransitionend',
	      'MozTransition': 'transitionend',
	      'WebkitTransition': 'webkitTransitionEnd'
	    });
	  },

	  animationEndEventName: function animationEndEventName() {
	    return this._testSupportedProps({
	      'animation': 'animationend',
	      '-o-animation': 'oAnimationEnd',
	      '-moz-animation': 'animationend',
	      '-webkit-animation': 'webkitAnimationEnd'
	    });
	  },

	  onTransitionEnd: function onTransitionEnd(el, callback) {
	    var transitionEnd = this.transitionEndEventName();

	    Events.once(el, transitionEnd, function () {
	      return callback();
	    });
	  },

	  onAnimationEnd: function onAnimationEnd(el, callback) {
	    var animationEnd = this.animationEndEventName();

	    Events.once(el, animationEnd, function () {
	      return callback();
	    });
	  }
	};

/***/ },
/* 275 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(206);
	var WindowListenable = __webpack_require__(264);
	var DateTime = __webpack_require__(272);
	var KeyCode = __webpack_require__(205);
	var Transitions = __webpack_require__(230);
	var CalendarMonth = __webpack_require__(276);
	var CalendarYear = __webpack_require__(278);
	var CalendarToolbar = __webpack_require__(280);
	var DateDisplay = __webpack_require__(289);
	var SlideInTransitionGroup = __webpack_require__(287);
	var ClearFix = __webpack_require__(267);

	var Calendar = React.createClass({
	  displayName: 'Calendar',

	  mixins: [StylePropable, WindowListenable],

	  propTypes: {
	    initialDate: React.PropTypes.object,
	    isActive: React.PropTypes.bool,
	    minDate: React.PropTypes.object,
	    maxDate: React.PropTypes.object,
	    shouldDisableDate: React.PropTypes.func,
	    hideToolbarYearChange: React.PropTypes.bool,
	    shouldShowMonthDayPickerFirst: React.PropTypes.bool,
	    shouldShowYearPickerFirst: React.PropTypes.bool,
	    showYearSelector: React.PropTypes.bool,
	    onDayTouchTap: React.PropTypes.func
	  },

	  windowListeners: {
	    'keydown': '_handleWindowKeyDown'
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      initialDate: new Date(),
	      minDate: DateTime.addYears(new Date(), -100),
	      maxDate: DateTime.addYears(new Date(), 100),
	      hideToolbarYearChange: false,
	      shouldShowMonthDayPickerFirst: true,
	      shouldShowYearPickerFirst: false,
	      showYearSelector: false
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      displayDate: DateTime.getFirstDayOfMonth(this.props.initialDate),
	      selectedDate: this.props.initialDate,
	      transitionDirection: 'left',
	      displayMonthDay: this.props.shouldShowMonthDayPickerFirst || this.props.shouldShowYearPickerFirst || true,
	      transitionEnter: true
	    };
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    if (nextProps.initialDate !== this.props.initialDate) {
	      var d = nextProps.initialDate || new Date();
	      this.setState({
	        displayDate: DateTime.getFirstDayOfMonth(d),
	        selectedDate: d
	      });
	    }

	    if (nextProps.shouldShowMonthDayPickerFirst) {
	      this.setState({ displayMonthDay: nextProps.shouldShowMonthDayPickerFirst });
	    }
	  },

	  render: function render() {
	    var yearCount = DateTime.yearDiff(this.props.maxDate, this.props.minDate) + 1;
	    var weekCount = DateTime.getWeekArray(this.state.displayDate).length;
	    var toolbarInteractions = this._getToolbarInteractions();
	    var hideYearChangeButtons = this.props.hideToolbarYearChange || !this.props.showYearSelector;
	    var isMultiYearRange = yearCount > 2; // Want a year range greater than 1. Ex. [2014,2016] has a count of 3
	    var isLandscape = this.props.mode === 'landscape';
	    var styles = {
	      root: {
	        fontSize: 12
	      },
	      calendarContainer: {
	        width: isLandscape ? 280 : '100%',
	        height: weekCount === 5 ? 268 : weekCount === 6 ? 308 : 228,
	        float: isLandscape ? 'right' : 'none',
	        transition: Transitions.easeOut('150ms', 'height'),
	        overflow: 'hidden'
	      },
	      yearContainer: {
	        width: 280,
	        overflow: 'hidden',
	        height: yearCount < 6 ? yearCount * 56 + 10 : weekCount === 5 ? 268 : weekCount === 6 ? 308 : 228,
	        float: isLandscape ? 'right' : 'none'
	      },
	      dateDisplay: {
	        width: isLandscape ? 280 : '100%',
	        height: '100%',
	        float: isLandscape ? 'left' : 'none'
	      },
	      weekTitle: {
	        padding: '0 14px',
	        lineHeight: '12px',
	        opacity: '0.5',
	        height: 12,
	        fontWeight: '500',
	        margin: 0
	      },
	      weekTitleDay: {
	        listStyle: 'none',
	        float: 'left',
	        width: 32,
	        textAlign: 'center',
	        margin: '0 2px'
	      }
	    };

	    if (this.state.displayMonthDay || !this.props.showYearSelector) {
	      styles.yearContainer.display = 'none';
	    } else {
	      styles.calendarContainer.display = 'none';
	    }

	    return React.createElement(
	      ClearFix,
	      { style: this.mergeAndPrefix(styles.root) },
	      React.createElement(DateDisplay, {
	        style: styles.dateDisplay,
	        selectedDate: this.state.selectedDate,
	        handleMonthDayClick: this._handleMonthDayClick,
	        handleYearClick: this._handleYearClick,
	        yearSelectionAvailable: this.props.showYearSelector && isMultiYearRange,
	        monthDaySelected: this.state.displayMonthDay,
	        mode: this.props.mode,
	        weekCount: weekCount }),
	      React.createElement(
	        'div',
	        { style: styles.calendarContainer },
	        React.createElement(CalendarToolbar, {
	          displayDate: this.state.displayDate,
	          onMonthChange: this._handleMonthChange,
	          onYearChange: this._handleYearChange,
	          prevMonth: toolbarInteractions.prevMonth,
	          nextMonth: toolbarInteractions.nextMonth,
	          prevYear: toolbarInteractions.prevYear,
	          nextYear: toolbarInteractions.nextYear,
	          hideYearChangeButtons: hideYearChangeButtons }),
	        React.createElement(
	          ClearFix,
	          {
	            elementType: 'ul',
	            style: styles.weekTitle },
	          React.createElement(
	            'li',
	            { style: styles.weekTitleDay },
	            'S'
	          ),
	          React.createElement(
	            'li',
	            { style: styles.weekTitleDay },
	            'M'
	          ),
	          React.createElement(
	            'li',
	            { style: styles.weekTitleDay },
	            'T'
	          ),
	          React.createElement(
	            'li',
	            { style: styles.weekTitleDay },
	            'W'
	          ),
	          React.createElement(
	            'li',
	            { style: styles.weekTitleDay },
	            'T'
	          ),
	          React.createElement(
	            'li',
	            { style: styles.weekTitleDay },
	            'F'
	          ),
	          React.createElement(
	            'li',
	            { style: styles.weekTitleDay },
	            'S'
	          )
	        ),
	        React.createElement(
	          SlideInTransitionGroup,
	          {
	            direction: this.state.transitionDirection },
	          React.createElement(CalendarMonth, {
	            key: this.state.displayDate.toDateString(),
	            ref: 'calendar',
	            displayDate: this.state.displayDate,
	            onDayTouchTap: this._handleDayTouchTap,
	            selectedDate: this.state.selectedDate,
	            minDate: this.props.minDate,
	            maxDate: this.props.maxDate,
	            shouldDisableDate: this.props.shouldDisableDate })
	        )
	      ),
	      React.createElement(
	        'div',
	        { style: styles.yearContainer },
	        this._yearSelector()
	      )
	    );
	  },

	  _yearSelector: function _yearSelector() {
	    if (this.props.showYearSelector) {
	      return React.createElement(CalendarYear, {
	        key: 'years',
	        displayDate: this.state.displayDate,
	        onYearTouchTap: this._handleYearTouchTap,
	        selectedDate: this.state.selectedDate,
	        minDate: this.props.minDate,
	        maxDate: this.props.maxDate });
	    }
	  },

	  getSelectedDate: function getSelectedDate() {
	    return this.state.selectedDate;
	  },

	  isSelectedDateDisabled: function isSelectedDateDisabled() {
	    return this.refs.calendar.isSelectedDateDisabled();
	  },

	  _addSelectedDays: function _addSelectedDays(days) {
	    this._setSelectedDate(DateTime.addDays(this.state.selectedDate, days));
	  },

	  _addSelectedMonths: function _addSelectedMonths(months) {
	    this._setSelectedDate(DateTime.addMonths(this.state.selectedDate, months));
	  },

	  _addSelectedYears: function _addSelectedYears(years) {
	    this._setSelectedDate(DateTime.addYears(this.state.selectedDate, years));
	  },

	  _setDisplayDate: function _setDisplayDate(d, newSelectedDate) {
	    var newDisplayDate = DateTime.getFirstDayOfMonth(d);
	    var direction = newDisplayDate > this.state.displayDate ? 'left' : 'right';

	    if (newDisplayDate !== this.state.displayDate) {
	      this.setState({
	        displayDate: newDisplayDate,
	        transitionDirection: direction,
	        selectedDate: newSelectedDate || this.state.selectedDate
	      });
	    }
	  },

	  _setSelectedDate: function _setSelectedDate(date) {
	    var adjustedDate = date;
	    if (DateTime.isBeforeDate(date, this.props.minDate)) {
	      adjustedDate = this.props.minDate;
	    } else if (DateTime.isAfterDate(date, this.props.maxDate)) {
	      adjustedDate = this.props.maxDate;
	    }

	    var newDisplayDate = DateTime.getFirstDayOfMonth(adjustedDate);
	    if (newDisplayDate !== this.state.displayDate) {
	      this._setDisplayDate(newDisplayDate, adjustedDate);
	    } else {
	      this.setState({
	        selectedDate: adjustedDate
	      });
	    }
	  },

	  _handleDayTouchTap: function _handleDayTouchTap(e, date) {
	    this._setSelectedDate(date);
	    if (this.props.onDayTouchTap) this.props.onDayTouchTap(e, date);
	  },

	  _handleMonthChange: function _handleMonthChange(months) {
	    this._addSelectedMonths(months);
	  },

	  _handleYearChange: function _handleYearChange(years) {
	    this._addSelectedYears(years);
	  },

	  _handleYearTouchTap: function _handleYearTouchTap(e, year) {
	    var date = DateTime.clone(this.state.selectedDate);
	    date.setFullYear(year);
	    this._setSelectedDate(date, e);
	  },

	  _getToolbarInteractions: function _getToolbarInteractions() {
	    return {
	      prevMonth: DateTime.monthDiff(this.state.selectedDate, this.props.minDate) > 0,
	      nextMonth: DateTime.monthDiff(this.state.selectedDate, this.props.maxDate) < 0,
	      prevYear: DateTime.yearDiff(this.state.selectedDate, this.props.minDate) > 0,
	      nextYear: DateTime.yearDiff(this.state.selectedDate, this.props.maxDate) < 0
	    };
	  },

	  _handleMonthDayClick: function _handleMonthDayClick() {
	    this.setState({ displayMonthDay: true });
	  },

	  _handleYearClick: function _handleYearClick() {
	    this.setState({ displayMonthDay: false });
	  },

	  _handleWindowKeyDown: function _handleWindowKeyDown(e) {
	    if (this.props.isActive) {

	      switch (e.keyCode) {
	        case KeyCode.UP:
	          if (e.altKey && e.shiftKey) {
	            this._addSelectedYears(-1);
	          } else if (e.shiftKey) {
	            this._addSelectedMonths(-1);
	          } else {
	            this._addSelectedDays(-7);
	          }
	          break;

	        case KeyCode.DOWN:
	          if (e.altKey && e.shiftKey) {
	            this._addSelectedYears(1);
	          } else if (e.shiftKey) {
	            this._addSelectedMonths(1);
	          } else {
	            this._addSelectedDays(7);
	          }
	          break;

	        case KeyCode.RIGHT:
	          if (e.altKey && e.shiftKey) {
	            this._addSelectedYears(1);
	          } else if (e.shiftKey) {
	            this._addSelectedMonths(1);
	          } else {
	            this._addSelectedDays(1);
	          }
	          break;

	        case KeyCode.LEFT:
	          if (e.altKey && e.shiftKey) {
	            this._addSelectedYears(-1);
	          } else if (e.shiftKey) {
	            this._addSelectedMonths(-1);
	          } else {
	            this._addSelectedDays(-1);
	          }
	          break;
	      }
	    }
	  }

	});

	module.exports = Calendar;

/***/ },
/* 276 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(1);
	var DateTime = __webpack_require__(272);
	var DayButton = __webpack_require__(277);
	var ClearFix = __webpack_require__(267);

	var CalendarMonth = React.createClass({
	  displayName: 'CalendarMonth',

	  propTypes: {
	    displayDate: React.PropTypes.object.isRequired,
	    onDayTouchTap: React.PropTypes.func,
	    selectedDate: React.PropTypes.object.isRequired,
	    minDate: React.PropTypes.object,
	    maxDate: React.PropTypes.object,
	    shouldDisableDate: React.PropTypes.func,
	    autoOk: React.PropTypes.bool
	  },

	  render: function render() {
	    var styles = {
	      lineHeight: '32px',
	      textAlign: 'center',
	      padding: '8px 14px 0 14px'
	    };

	    return React.createElement(
	      'div',
	      { style: styles },
	      this._getWeekElements()
	    );
	  },

	  isSelectedDateDisabled: function isSelectedDateDisabled() {
	    return this._selectedDateDisabled;
	  },

	  _getWeekElements: function _getWeekElements() {
	    var _this = this;

	    var weekArray = DateTime.getWeekArray(this.props.displayDate);

	    return weekArray.map(function (week, i) {
	      return React.createElement(
	        ClearFix,
	        { key: i },
	        _this._getDayElements(week, i)
	      );
	    }, this);
	  },

	  _getDayElements: function _getDayElements(week, i) {
	    var _this2 = this;

	    return week.map(function (day, j) {
	      var isSameDate = DateTime.isEqualDate(_this2.props.selectedDate, day);
	      var disabled = _this2._shouldDisableDate(day);
	      var selected = !disabled && isSameDate;

	      if (isSameDate) {
	        if (disabled) {
	          _this2._selectedDateDisabled = true;
	        } else {
	          _this2._selectedDateDisabled = false;
	        }
	      }

	      return React.createElement(DayButton, {
	        key: 'db' + i + j,
	        date: day,
	        onTouchTap: _this2._handleDayTouchTap,
	        selected: selected,
	        disabled: disabled });
	    }, this);
	  },

	  _handleDayTouchTap: function _handleDayTouchTap(e, date) {
	    if (this.props.onDayTouchTap) this.props.onDayTouchTap(e, date);
	  },

	  _shouldDisableDate: function _shouldDisableDate(day) {
	    if (day === null) return false;
	    var disabled = !DateTime.isBetweenDates(day, this.props.minDate, this.props.maxDate);
	    if (!disabled && this.props.shouldDisableDate) disabled = this.props.shouldDisableDate(day);

	    return disabled;
	  }

	});

	module.exports = CalendarMonth;

/***/ },
/* 277 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(206);
	var Transition = __webpack_require__(230);
	var DateTime = __webpack_require__(272);
	var EnhancedButton = __webpack_require__(204);

	var DayButton = React.createClass({
	  displayName: 'DayButton',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    date: React.PropTypes.object,
	    onTouchTap: React.PropTypes.func,
	    selected: React.PropTypes.bool,
	    disabled: React.PropTypes.bool
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      selected: false,
	      disabled: false
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      hover: false
	    };
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.datePicker;
	  },

	  render: function render() {
	    var _props = this.props;
	    var date = _props.date;
	    var onTouchTap = _props.onTouchTap;
	    var selected = _props.selected;

	    var other = _objectWithoutProperties(_props, ['date', 'onTouchTap', 'selected']);

	    var styles = {
	      root: {
	        boxSizing: 'border-box',
	        WebkitTapHighlightColor: 'rgba(0,0,0,0)',
	        position: 'relative',
	        float: 'left',
	        width: 36,
	        padding: '4px 2px'
	      },

	      label: {
	        position: 'relative',
	        color: this.context.muiTheme.palette.textColor
	      },

	      buttonState: {
	        position: 'absolute',
	        height: 32,
	        width: 32,
	        opacity: 0,
	        borderRadius: '50%',
	        transform: 'scale(0)',
	        transition: Transition.easeOut(),
	        backgroundColor: this.getTheme().selectColor
	      }
	    };

	    if (this.state.hover) {
	      styles.label.color = this.getTheme().selectTextColor;
	      styles.buttonState.opacity = '0.6';
	      styles.buttonState.transform = 'scale(1)';
	    }

	    if (this.props.selected) {
	      styles.label.color = this.getTheme().selectTextColor;
	      styles.buttonState.opacity = 1;
	      styles.buttonState.transform = 'scale(1)';
	    } else if (this.props.disabled) {
	      styles.root.opacity = '0.6';
	    }

	    if (DateTime.isEqualDate(this.props.date, new Date()) && !this.props.selected) {
	      styles.label.color = this.getTheme().color;
	    }

	    return this.props.date ? React.createElement(
	      EnhancedButton,
	      _extends({}, other, {
	        style: styles.root,
	        hoverStyle: styles.hover,
	        disabled: this.props.disabled,
	        disableFocusRipple: true,
	        disableTouchRipple: true,
	        onMouseEnter: this._handleMouseEnter,
	        onMouseLeave: this._handleMouseLeave,
	        onTouchTap: this._handleTouchTap,
	        onKeyboardFocus: this._handleKeyboardFocus }),
	      React.createElement('div', { style: styles.buttonState }),
	      React.createElement(
	        'span',
	        { style: styles.label },
	        this.props.date.getDate()
	      )
	    ) : React.createElement('span', { style: styles.root });
	  },

	  _handleMouseEnter: function _handleMouseEnter() {
	    if (!this.props.disabled) this.setState({ hover: true });
	  },

	  _handleMouseLeave: function _handleMouseLeave() {
	    if (!this.props.disabled) this.setState({ hover: false });
	  },

	  _handleTouchTap: function _handleTouchTap(e) {
	    if (!this.props.disabled && this.props.onTouchTap) this.props.onTouchTap(e, this.props.date);
	  },

	  _handleKeyboardFocus: function _handleKeyboardFocus(e, keyboardFocused) {
	    if (!this.props.disabled && this.props.onKeyboardFocus) this.props.onKeyboardFocus(e, keyboardFocused, this.props.date);
	  }

	});

	module.exports = DayButton;

/***/ },
/* 278 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(206);
	var Colors = __webpack_require__(228);
	var DateTime = __webpack_require__(272);
	var YearButton = __webpack_require__(279);

	var CalendarYear = React.createClass({
	  displayName: 'CalendarYear',

	  mixins: [StylePropable],

	  propTypes: {
	    displayDate: React.PropTypes.object.isRequired,
	    onYearTouchTap: React.PropTypes.func,
	    selectedDate: React.PropTypes.object.isRequired,
	    minDate: React.PropTypes.object,
	    maxDate: React.PropTypes.object
	  },

	  componentDidMount: function componentDidMount() {
	    this._scrollToSelectedYear();
	  },

	  componentDidUpdate: function componentDidUpdate() {
	    this._scrollToSelectedYear();
	  },

	  render: function render() {
	    var years = this._getYears();
	    var styles = {
	      position: 'relative',
	      height: 'inherit',
	      lineHeight: '36px',
	      textAlign: 'center',
	      padding: '8px 14px 0 14px',
	      backgroundColor: Colors.white,
	      overflowX: 'hidden',
	      overflowY: 'scroll'
	    };

	    return React.createElement(
	      'div',
	      { style: styles },
	      years
	    );
	  },

	  _getYears: function _getYears() {
	    var minYear = this.props.minDate.getFullYear();
	    var maxYear = this.props.maxDate.getFullYear();

	    var years = [];
	    var dateCheck = DateTime.clone(this.props.selectedDate);
	    for (var year = minYear; year <= maxYear; year++) {
	      dateCheck.setFullYear(year);
	      if (!DateTime.isBetweenDates(dateCheck, this.props.minDate, this.props.maxDate)) continue;
	      var selected = this.props.selectedDate.getFullYear() === year;
	      var selectedProps = {};
	      if (selected) {
	        selectedProps = { ref: 'selectedYearButton' };
	      }

	      var yearButton = React.createElement(YearButton, _extends({
	        key: 'yb' + year,
	        year: year,
	        onTouchTap: this._handleYearTouchTap,
	        selected: selected
	      }, selectedProps));

	      years.push(yearButton);
	    }

	    return years;
	  },

	  _scrollToSelectedYear: function _scrollToSelectedYear() {
	    if (this.refs.selectedYearButton === undefined) return;

	    var container = this.getDOMNode();
	    var yearButtonNode = this.refs.selectedYearButton.getDOMNode();

	    var containerHeight = container.clientHeight;
	    var yearButtonNodeHeight = yearButtonNode.clientHeight || 32;

	    var scrollYOffset = yearButtonNode.offsetTop + yearButtonNodeHeight / 2 - containerHeight / 2;
	    container.scrollTop = scrollYOffset;
	  },

	  _handleYearTouchTap: function _handleYearTouchTap(e, year) {
	    if (this.props.onYearTouchTap) this.props.onYearTouchTap(e, year);
	  }

	});

	module.exports = CalendarYear;

/***/ },
/* 279 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(206);
	var EnhancedButton = __webpack_require__(204);

	var YearButton = React.createClass({
	  displayName: 'YearButton',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    year: React.PropTypes.number,
	    onTouchTap: React.PropTypes.func,
	    selected: React.PropTypes.bool
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      selected: false
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      hover: false
	    };
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.datePicker;
	  },

	  render: function render() {
	    var _props = this.props;
	    var className = _props.className;
	    var year = _props.year;
	    var onTouchTap = _props.onTouchTap;
	    var selected = _props.selected;

	    var other = _objectWithoutProperties(_props, ['className', 'year', 'onTouchTap', 'selected']);

	    var styles = {
	      root: {
	        boxSizing: 'border-box',
	        WebkitTapHighlightColor: 'rgba(0,0,0,0)',
	        position: 'relative',
	        display: 'block',
	        margin: '0 auto',
	        width: 36,
	        fontSize: 14,
	        padding: '8px 2px'
	      },

	      label: {
	        position: 'relative',
	        top: -1,
	        color: this.context.muiTheme.palette.textColor
	      },

	      buttonState: {
	        position: 'absolute',
	        height: 32,
	        width: 32,
	        opacity: 0,
	        borderRadius: '50%',
	        transform: 'scale(0)',
	        backgroundColor: this.getTheme().selectColor
	      }
	    };

	    if (this.state.hover) {
	      styles.label.color = this.getTheme().selectTextColor;
	      styles.buttonState.opacity = 0.6;
	      styles.buttonState.transform = 'scale(1.5)';
	    }

	    if (selected) {
	      styles.label.color = this.getTheme().selectTextColor;
	      styles.buttonState.opacity = 1;
	      styles.buttonState.transform = 'scale(1.5)';
	    }

	    if (year === new Date().getFullYear()) {
	      styles.root.color = this.getTheme().color;
	    }

	    return React.createElement(
	      EnhancedButton,
	      _extends({}, other, {
	        style: styles.root,
	        disableFocusRipple: true,
	        disableTouchRipple: true,
	        onMouseEnter: this._handleMouseEnter,
	        onMouseLeave: this._handleMouseLeave,
	        onTouchTap: this._handleTouchTap }),
	      React.createElement('div', { style: styles.buttonState }),
	      React.createElement(
	        'span',
	        { style: styles.label },
	        year
	      )
	    );
	  },

	  _handleMouseEnter: function _handleMouseEnter() {
	    this.setState({ hover: true });
	  },

	  _handleMouseLeave: function _handleMouseLeave() {
	    this.setState({ hover: false });
	  },

	  _handleTouchTap: function _handleTouchTap(e) {
	    if (this.props.onTouchTap) this.props.onTouchTap(e, this.props.year);
	  }

	});

	module.exports = YearButton;

/***/ },
/* 280 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(1);
	var DateTime = __webpack_require__(272);
	var IconButton = __webpack_require__(203);
	var Toolbar = __webpack_require__(282);
	var ToolbarGroup = __webpack_require__(283);
	var NavigationChevronLeft = __webpack_require__(281);
	var NavigationChevronLeftDouble = __webpack_require__(284);
	var NavigationChevronRight = __webpack_require__(285);
	var NavigationChevronRightDouble = __webpack_require__(286);
	var SlideInTransitionGroup = __webpack_require__(287);

	var CalendarToolbar = React.createClass({
	  displayName: 'CalendarToolbar',

	  propTypes: {
	    displayDate: React.PropTypes.object.isRequired,
	    onMonthChange: React.PropTypes.func,
	    onYearChange: React.PropTypes.func,
	    prevYear: React.PropTypes.bool,
	    nextYear: React.PropTypes.bool,
	    prevMonth: React.PropTypes.bool,
	    nextMonth: React.PropTypes.bool,
	    hideYearChangeButtons: React.PropTypes.bool
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      prevYear: true,
	      nextYear: true,
	      prevMonth: true,
	      nextMonth: true,
	      hideYearChangeButtons: false
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      transitionDirection: 'up'
	    };
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    var direction = undefined;

	    if (nextProps.displayDate !== this.props.displayDate) {
	      direction = nextProps.displayDate > this.props.displayDate ? 'up' : 'down';
	      this.setState({
	        transitionDirection: direction
	      });
	    }
	  },

	  _styles: function _styles() {
	    return {
	      root: {
	        position: 'relative',
	        padding: 0,
	        backgroundColor: 'inherit'
	      },

	      title: {
	        position: 'absolute',
	        top: '17px',
	        lineHeight: '14px',
	        fontSize: '14px',
	        height: '14px',
	        width: '100%',
	        fontWeight: '500',
	        textAlign: 'center'
	      }
	    };
	  },

	  render: function render() {
	    var month = DateTime.getFullMonth(this.props.displayDate);
	    var year = this.props.displayDate.getFullYear();
	    var prevYearChangeButton = this._getPrevYearChangeButton();
	    var nextYearChangeButton = this._getNextYearChangeButton();
	    var styles = this._styles();

	    return React.createElement(
	      Toolbar,
	      { className: 'mui-date-picker-calendar-toolbar', style: styles.root, noGutter: true },
	      React.createElement(
	        SlideInTransitionGroup,
	        {
	          style: styles.title,
	          direction: this.state.transitionDirection },
	        React.createElement(
	          'div',
	          { key: month + '_' + year },
	          month,
	          ' ',
	          year
	        )
	      ),
	      React.createElement(
	        ToolbarGroup,
	        { key: 0, float: 'left' },
	        prevYearChangeButton,
	        React.createElement(
	          IconButton,
	          {
	            style: styles.button,
	            disabled: !this.props.prevMonth,
	            onTouchTap: this._prevMonthTouchTap },
	          React.createElement(NavigationChevronLeft, null)
	        )
	      ),
	      React.createElement(
	        ToolbarGroup,
	        { key: 1, float: 'right' },
	        React.createElement(
	          IconButton,
	          {
	            style: styles.button,
	            disabled: !this.props.nextMonth,
	            onTouchTap: this._nextMonthTouchTap },
	          React.createElement(NavigationChevronRight, null)
	        ),
	        nextYearChangeButton
	      )
	    );
	  },

	  _getPrevYearChangeButton: function _getPrevYearChangeButton() {
	    var style = {
	      display: this.props.hideYearChangeButtons ? 'none' : ''
	    };

	    return React.createElement(
	      IconButton,
	      {
	        style: style,
	        disabled: !this.props.prevYear,
	        onTouchTap: this._prevYearTouchTap },
	      React.createElement(NavigationChevronLeftDouble, null)
	    );
	  },

	  _getNextYearChangeButton: function _getNextYearChangeButton() {
	    var style = {
	      display: this.props.hideYearChangeButtons ? 'none' : ''
	    };

	    return React.createElement(
	      IconButton,
	      {
	        style: style,
	        disabled: !this.props.nextYear,
	        onTouchTap: this._nextYearTouchTap },
	      React.createElement(NavigationChevronRightDouble, null)
	    );
	  },

	  _prevYearTouchTap: function _prevYearTouchTap() {
	    if (this.props.onYearChange && this.props.prevYear) this.props.onYearChange(-1);
	  },

	  _nextYearTouchTap: function _nextYearTouchTap() {
	    if (this.props.onYearChange && this.props.nextYear) this.props.onYearChange(1);
	  },

	  _prevMonthTouchTap: function _prevMonthTouchTap() {
	    if (this.props.onMonthChange && this.props.prevMonth) this.props.onMonthChange(-1);
	  },

	  _nextMonthTouchTap: function _nextMonthTouchTap() {
	    if (this.props.onMonthChange && this.props.nextMonth) this.props.onMonthChange(1);
	  }

	});

	module.exports = CalendarToolbar;

/***/ },
/* 281 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(207);
	var PureRenderMixin = React.addons.PureRenderMixin;
	var SvgIcon = __webpack_require__(242);

	var NavigationChevronLeft = React.createClass({
	  displayName: 'NavigationChevronLeft',

	  mixins: [PureRenderMixin],

	  render: function render() {
	    return React.createElement(
	      SvgIcon,
	      this.props,
	      React.createElement('path', { d: 'M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z' })
	    );
	  }

	});

	module.exports = NavigationChevronLeft;

/***/ },
/* 282 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(206);

	var Toolbar = React.createClass({
	  displayName: 'Toolbar',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    className: React.PropTypes.string,
	    style: React.PropTypes.object
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.toolbar;
	  },

	  getStyles: function getStyles() {
	    return this.mergeAndPrefix({
	      boxSizing: 'border-box',
	      WebkitTapHighlightColor: 'rgba(0,0,0,0)',
	      backgroundColor: this.getTheme().backgroundColor,
	      height: this.getTheme().height,
	      width: '100%',
	      padding: this.props.noGutter ? 0 : '0px ' + this.context.muiTheme.spacing.desktopGutter + 'px'
	    }, this.props.style);
	  },

	  render: function render() {
	    return React.createElement(
	      'div',
	      { className: this.props.className, style: this.getStyles() },
	      this.props.children
	    );
	  }

	});

	module.exports = Toolbar;

/***/ },
/* 283 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(1);
	var Colors = __webpack_require__(228);
	var StylePropable = __webpack_require__(206);

	var ToolbarGroup = React.createClass({
	  displayName: 'ToolbarGroup',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    className: React.PropTypes.string,
	    float: React.PropTypes.string
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      float: 'left'
	    };
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.toolbar;
	  },

	  getSpacing: function getSpacing() {
	    return this.context.muiTheme.spacing.desktopGutter;
	  },

	  getStyles: function getStyles() {
	    var marginHorizontal = this.getSpacing();
	    var marginVertical = (this.getTheme().height - this.context.muiTheme.component.button.height) / 2;
	    var styles = {
	      root: {
	        position: 'relative',
	        float: this.props.float
	      },
	      dropDownMenu: {
	        root: {
	          float: 'left',
	          color: Colors.lightBlack, // removes hover color change, we want to keep it
	          display: 'inline-block',
	          marginRight: this.getSpacing()
	        },
	        controlBg: {
	          backgroundColor: this.getTheme().menuHoverColor,
	          borderRadius: 0
	        },
	        underline: {
	          display: 'none'
	        }
	      },
	      button: {
	        float: 'left',
	        margin: marginVertical + 'px ' + marginHorizontal + 'px',
	        position: 'relative'
	      },
	      icon: {
	        root: {
	          float: 'left',
	          cursor: 'pointer',
	          color: this.getTheme().iconColor,
	          lineHeight: this.getTheme().height + 'px',
	          paddingLeft: this.getSpacing()
	        },
	        hover: {
	          color: Colors.darkBlack
	        }
	      },
	      span: {
	        float: 'left',
	        color: this.getTheme().iconColor,
	        lineHeight: this.getTheme().height + 'px'
	      }
	    };

	    return styles;
	  },

	  render: function render() {
	    var _this = this;

	    var styles = this.getStyles();

	    if (this.props.firstChild) styles.marginLeft = -24;
	    if (this.props.lastChild) styles.marginRight = -24;

	    var newChildren = React.Children.map(this.props.children, function (currentChild) {
	      if (!currentChild) {
	        return null;
	      }
	      switch (currentChild.type.displayName) {
	        case 'DropDownMenu':
	          return React.cloneElement(currentChild, {
	            style: _this.mergeStyles(styles.dropDownMenu.root, currentChild.props.style),
	            styleControlBg: styles.dropDownMenu.controlBg,
	            styleUnderline: styles.dropDownMenu.underline
	          });
	        case 'DropDownIcon':
	          return React.cloneElement(currentChild, {
	            style: _this.mergeStyles({ float: 'left' }, currentChild.props.style),
	            iconStyle: styles.icon.root,
	            onMouseEnter: _this._handleMouseEnterDropDownMenu,
	            onMouseLeave: _this._handleMouseLeaveDropDownMenu
	          });
	        case 'RaisedButton':case 'FlatButton':
	          return React.cloneElement(currentChild, {
	            style: _this.mergeStyles(styles.button, currentChild.props.style)
	          });
	        case 'FontIcon':
	          return React.cloneElement(currentChild, {
	            style: _this.mergeStyles(styles.icon.root, currentChild.props.style),
	            onMouseEnter: _this._handleMouseEnterFontIcon,
	            onMouseLeave: _this._handleMouseLeaveFontIcon
	          });
	        case 'ToolbarSeparator':case 'ToolbarTitle':
	          return React.cloneElement(currentChild, {
	            style: _this.mergeStyles(styles.span, currentChild.props.style)
	          });
	        default:
	          return currentChild;
	      }
	    }, this);

	    return React.createElement(
	      'div',
	      { className: this.props.className, style: this.mergeAndPrefix(styles.root, this.props.style) },
	      newChildren
	    );
	  },

	  _handleMouseEnterDropDownMenu: function _handleMouseEnterDropDownMenu(e) {
	    e.target.style.zIndex = this.getStyles().icon.hover.zIndex;
	    e.target.style.color = this.getStyles().icon.hover.color;
	  },

	  _handleMouseLeaveDropDownMenu: function _handleMouseLeaveDropDownMenu(e) {
	    e.target.style.zIndex = 'auto';
	    e.target.style.color = this.getStyles().icon.root.color;
	  },

	  _handleMouseEnterFontIcon: function _handleMouseEnterFontIcon(e) {
	    e.target.style.zIndex = this.getStyles().icon.hover.zIndex;
	    e.target.style.color = this.getStyles().icon.hover.color;
	  },

	  _handleMouseLeaveFontIcon: function _handleMouseLeaveFontIcon(e) {
	    e.target.style.zIndex = 'auto';
	    e.target.style.color = this.getStyles().icon.root.color;
	  }
	});

	module.exports = ToolbarGroup;

/***/ },
/* 284 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(1);
	var SvgIcon = __webpack_require__(242);

	var NavigationChevronLeftDouble = React.createClass({
	  displayName: 'NavigationChevronLeftDouble',

	  render: function render() {
	    return React.createElement(
	      SvgIcon,
	      this.props,
	      React.createElement('path', { d: 'M11.41 7.41 L10 6 l-6 6 6 6 1.41-1.41 L6.83 12z' }),
	      React.createElement('path', { d: 'M18.41 7.41 L17 6 l-6 6 6 6 1.41-1.41 L13.83 12z' })
	    );
	  }

	});

	module.exports = NavigationChevronLeftDouble;

/***/ },
/* 285 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(207);
	var PureRenderMixin = React.addons.PureRenderMixin;
	var SvgIcon = __webpack_require__(242);

	var NavigationChevronRight = React.createClass({
	  displayName: 'NavigationChevronRight',

	  mixins: [PureRenderMixin],

	  render: function render() {
	    return React.createElement(
	      SvgIcon,
	      this.props,
	      React.createElement('path', { d: 'M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z' })
	    );
	  }

	});

	module.exports = NavigationChevronRight;

/***/ },
/* 286 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(1);
	var SvgIcon = __webpack_require__(242);

	var NavigationChevronRightDouble = React.createClass({
	  displayName: 'NavigationChevronRightDouble',

	  render: function render() {
	    return React.createElement(
	      SvgIcon,
	      this.props,
	      React.createElement('path', { d: 'M6 6 L4.59  7.41 9.17 12 l-4.58 4.59 L6 18 l6 -6z' }),
	      React.createElement('path', { d: 'M13 6 L11.59 7.41 16.17 12 l-4.58 4.59 L13 18 l6 -6z' })
	    );
	  }

	});

	module.exports = NavigationChevronRightDouble;

/***/ },
/* 287 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(207);
	var ReactTransitionGroup = React.addons.TransitionGroup;
	var StylePropable = __webpack_require__(206);
	var SlideInChild = __webpack_require__(288);

	var SlideIn = React.createClass({
	  displayName: 'SlideIn',

	  mixins: [StylePropable],

	  propTypes: {
	    enterDelay: React.PropTypes.number,
	    childStyle: React.PropTypes.object,
	    direction: React.PropTypes.oneOf(['left', 'right', 'up', 'down'])
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      enterDelay: 0,
	      direction: 'left'
	    };
	  },

	  render: function render() {
	    var _this = this;

	    var _props = this.props;
	    var enterDelay = _props.enterDelay;
	    var children = _props.children;
	    var childStyle = _props.childStyle;
	    var direction = _props.direction;
	    var style = _props.style;

	    var other = _objectWithoutProperties(_props, ['enterDelay', 'children', 'childStyle', 'direction', 'style']);

	    var mergedRootStyles = this.mergeAndPrefix({
	      position: 'relative',
	      overflow: 'hidden',
	      height: '100%'
	    }, style);

	    var newChildren = React.Children.map(children, function (child) {
	      return React.createElement(
	        SlideInChild,
	        {
	          key: child.key,
	          direction: direction,
	          enterDelay: enterDelay,
	          getLeaveDirection: _this._getLeaveDirection,
	          style: childStyle },
	        child
	      );
	    }, this);

	    return React.createElement(
	      ReactTransitionGroup,
	      _extends({}, other, {
	        style: mergedRootStyles,
	        component: 'div' }),
	      newChildren
	    );
	  },

	  _getLeaveDirection: function _getLeaveDirection() {
	    return this.props.direction;
	  }

	});

	module.exports = SlideIn;

/***/ },
/* 288 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(207);
	var StylePropable = __webpack_require__(206);
	var AutoPrefix = __webpack_require__(225);
	var Transitions = __webpack_require__(230);

	var SlideInChild = React.createClass({
	  displayName: 'SlideInChild',

	  mixins: [StylePropable],

	  propTypes: {
	    enterDelay: React.PropTypes.number,
	    //This callback is needed bacause the direction could change
	    //when leaving the dom
	    getLeaveDirection: React.PropTypes.func.isRequired
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      enterDelay: 0
	    };
	  },

	  componentWillEnter: function componentWillEnter(callback) {
	    var style = React.findDOMNode(this).style;
	    var x = this.props.direction === 'left' ? '100%' : this.props.direction === 'right' ? '-100%' : '0';
	    var y = this.props.direction === 'up' ? '100%' : this.props.direction === 'down' ? '-100%' : '0';

	    style.opacity = '0';
	    AutoPrefix.set(style, 'transform', 'translate3d(' + x + ',' + y + ',0)');

	    setTimeout(callback, this.props.enterDelay);
	  },

	  componentDidEnter: function componentDidEnter() {
	    var style = React.findDOMNode(this).style;
	    style.opacity = '1';
	    AutoPrefix.set(style, 'transform', 'translate3d(0,0,0)');
	  },

	  componentWillLeave: function componentWillLeave(callback) {
	    var style = React.findDOMNode(this).style;
	    var direction = this.props.getLeaveDirection();
	    var x = direction === 'left' ? '-100%' : direction === 'right' ? '100%' : '0';
	    var y = direction === 'up' ? '-100%' : direction === 'down' ? '100%' : '0';

	    style.opacity = '0';
	    AutoPrefix.set(style, 'transform', 'translate3d(' + x + ',' + y + ',0)');

	    setTimeout(callback, 450);
	  },

	  render: function render() {
	    var _props = this.props;
	    var children = _props.children;
	    var enterDelay = _props.enterDelay;
	    var getLeaveDirection = _props.getLeaveDirection;
	    var style = _props.style;

	    var other = _objectWithoutProperties(_props, ['children', 'enterDelay', 'getLeaveDirection', 'style']);

	    var mergedRootStyles = this.mergeAndPrefix({
	      position: 'absolute',
	      height: '100%',
	      width: '100%',
	      top: 0,
	      left: 0,
	      transition: Transitions.easeOut(null, ['transform', 'opacity'])
	    }, style);

	    return React.createElement(
	      'div',
	      _extends({}, other, { style: mergedRootStyles }),
	      children
	    );
	  }

	});

	module.exports = SlideInChild;

/***/ },
/* 289 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(206);
	var DateTime = __webpack_require__(272);
	var Transitions = __webpack_require__(230);
	var AutoPrefix = __webpack_require__(225);
	var SlideInTransitionGroup = __webpack_require__(287);

	var DateDisplay = React.createClass({
	  displayName: 'DateDisplay',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    selectedDate: React.PropTypes.object.isRequired,
	    weekCount: React.PropTypes.number,
	    yearSelectionAvailable: React.PropTypes.bool,
	    monthDaySelected: React.PropTypes.bool
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      weekCount: 4,
	      yearSelectionAvailable: true,
	      monthDaySelected: true
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      transitionDirection: 'up',
	      selectedYear: !this.props.monthDaySelected
	    };
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    var direction = undefined;

	    if (nextProps.selectedDate !== this.props.selectedDate) {
	      direction = nextProps.selectedDate > this.props.selectedDate ? 'up' : 'down';
	      this.setState({
	        transitionDirection: direction
	      });
	    }

	    if (nextProps.monthDaySelected !== undefined) {
	      this.setState({ selectedYear: !nextProps.monthDaySelected });
	    }
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.datePicker;
	  },

	  render: function render() {
	    var _props = this.props;
	    var selectedDate = _props.selectedDate;
	    var style = _props.style;

	    var other = _objectWithoutProperties(_props, ['selectedDate', 'style']);

	    var dayOfWeek = DateTime.getDayOfWeek(this.props.selectedDate);
	    var month = DateTime.getShortMonth(this.props.selectedDate);
	    var day = this.props.selectedDate.getDate();
	    var year = this.props.selectedDate.getFullYear();

	    var isLandscape = this.props.mode === 'landscape';
	    var dateYPosition = 0;
	    var dayYPosition = 30;
	    var yearYPosition = 95;

	    if (isLandscape) {
	      dateYPosition = this.props.weekCount === 5 ? 14 : this.props.weekCount === 6 ? 34 : 8;
	      yearYPosition = this.props.weekCount === 4 ? 114 : 150;
	      if (this.props.weekCount > 4) dayYPosition = 50;
	    }

	    var styles = {
	      root: {
	        textAlign: 'center',
	        position: 'relative'
	      },

	      dateContainer: {
	        backgroundColor: this.getTheme().color,
	        height: isLandscape ? this.props.weekCount * 40 + 36 : 150,
	        padding: '16px 0',
	        transition: Transitions.easeOut(),
	        boxSizing: 'border-box'
	      },

	      date: {
	        position: 'relative',
	        color: this.getTheme().textColor,
	        transition: Transitions.easeOut(),
	        transform: 'translate3d(0,' + dateYPosition + 'px,0)'
	      },

	      dowContainer: {
	        height: 32,
	        backgroundColor: this.getTheme().selectColor,
	        borderRadius: isLandscape ? '2px 0 0 0' : '2px 2px 0 0',
	        paddingTop: 9,
	        boxSizing: 'border-box'
	      },

	      dow: {
	        fontSize: 13,
	        lineHeight: '13px',
	        height: '100%',
	        color: this.getTheme().selectTextColor
	      },

	      day: {
	        root: {
	          position: 'absolute',
	          lineHeight: isLandscape ? '76px' : '58px',
	          fontSize: isLandscape ? 76 : 58,
	          height: isLandscape ? 76 : 58,
	          width: '100%',
	          opacity: this.state.selectedYear ? 0.7 : 1.0,
	          transition: Transitions.easeOut(),
	          transform: 'translate3d(0,' + dayYPosition + 'px,0)'
	        },

	        title: {
	          width: 100,
	          marginLeft: 'auto',
	          marginRight: 'auto',
	          cursor: !this.state.selectedYear ? 'default' : 'pointer'
	        }
	      },

	      month: {
	        root: {
	          position: 'absolute',
	          top: isLandscape ? 0 : 1,
	          fontSize: isLandscape ? 26 : 22,
	          lineHeight: isLandscape ? '26px' : '22px',
	          height: isLandscape ? 26 : 22,
	          width: '100%',
	          textTransform: 'uppercase',
	          opacity: this.state.selectedYear ? 0.7 : 1.0
	        },

	        title: {
	          width: 100,
	          marginLeft: 'auto',
	          marginRight: 'auto',
	          cursor: !this.state.selectedYear ? 'default' : 'pointer'
	        }
	      },

	      year: {
	        root: {
	          position: 'absolute',
	          margin: 0,
	          fontSize: isLandscape ? 26 : 22,
	          lineHeight: isLandscape ? '26px' : '22px',
	          height: isLandscape ? 26 : 22,
	          width: '100%',
	          textTransform: 'uppercase',
	          opacity: this.state.selectedYear ? 1.0 : 0.7,
	          transition: Transitions.easeOut(),
	          transform: 'translate3d(0,' + yearYPosition + 'px,0)'
	        },

	        title: {
	          width: 100,
	          marginLeft: 'auto',
	          marginRight: 'auto',
	          cursor: !this.props.yearSelectionAvailable || this.state.selectedYear ? 'default' : 'pointer'
	        }
	      }
	    };

	    return React.createElement(
	      'div',
	      _extends({}, other, { style: this.mergeAndPrefix(styles.root, this.props.style) }),
	      React.createElement(
	        'div',
	        { style: styles.dowContainer },
	        React.createElement(
	          SlideInTransitionGroup,
	          {
	            style: styles.dow,
	            direction: this.state.transitionDirection },
	          React.createElement(
	            'div',
	            { key: dayOfWeek },
	            dayOfWeek
	          )
	        )
	      ),
	      React.createElement(
	        'div',
	        { style: AutoPrefix.all(styles.dateContainer) },
	        React.createElement(
	          'div',
	          { style: AutoPrefix.all(styles.date) },
	          React.createElement(
	            SlideInTransitionGroup,
	            {
	              style: styles.month.root,
	              direction: this.state.transitionDirection },
	            React.createElement(
	              'div',
	              { key: month, style: styles.month.title, onTouchTap: this._handleMonthDayClick },
	              month
	            )
	          ),
	          React.createElement(
	            SlideInTransitionGroup,
	            {
	              style: styles.day.root,
	              direction: this.state.transitionDirection },
	            React.createElement(
	              'div',
	              { key: day, style: styles.day.title, onTouchTap: this._handleMonthDayClick },
	              day
	            )
	          ),
	          React.createElement(
	            SlideInTransitionGroup,
	            {
	              style: styles.year.root,
	              direction: this.state.transitionDirection },
	            React.createElement(
	              'div',
	              { key: year, style: styles.year.title, onTouchTap: this._handleYearClick },
	              year
	            )
	          )
	        )
	      )
	    );
	  },

	  _handleMonthDayClick: function _handleMonthDayClick() {
	    if (this.props.handleMonthDayClick && this.state.selectedYear) {
	      this.props.handleMonthDayClick();
	    }

	    if (this.props.yearSelectionAvailable) this.setState({ selectedYear: false });
	  },

	  _handleYearClick: function _handleYearClick() {
	    if (this.props.handleYearClick && !this.state.selectedYear && this.props.yearSelectionAvailable) {
	      this.props.handleYearClick();
	    }

	    if (this.props.yearSelectionAvailable) this.setState({ selectedYear: true });
	  }

	});

	module.exports = DateDisplay;

/***/ },
/* 290 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var WindowListenable = __webpack_require__(264);
	var CssEvent = __webpack_require__(274);
	var KeyCode = __webpack_require__(205);
	var Transitions = __webpack_require__(230);
	var StylePropable = __webpack_require__(206);
	var FlatButton = __webpack_require__(291);
	var Overlay = __webpack_require__(292);
	var Paper = __webpack_require__(243);

	var ReactTransitionGroup = React.addons.TransitionGroup;

	var TransitionItem = React.createClass({
	  displayName: 'TransitionItem',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  getInitialState: function getInitialState() {
	    return {
	      style: {}
	    };
	  },

	  componentWillEnter: function componentWillEnter(callback) {
	    var spacing = this.context.muiTheme.spacing;

	    this.setState({
	      style: {
	        opacity: 1,
	        transform: 'translate3d(0, ' + spacing.desktopKeylineIncrement + 'px, 0)'
	      }
	    });

	    setTimeout(callback, 450); // matches transition duration
	  },

	  componentWillLeave: function componentWillLeave(callback) {
	    this.setState({
	      style: {
	        opacity: 0,
	        transform: 'translate3d(0, 0, 0)'
	      }
	    });

	    setTimeout(callback, 450); // matches transition duration
	  },

	  render: function render() {
	    var _props = this.props;
	    var style = _props.style;

	    var other = _objectWithoutProperties(_props, ['style']);

	    return React.createElement(
	      'div',
	      _extends({}, other, { style: this.mergeAndPrefix(this.state.style, style) }),
	      this.props.children
	    );
	  }
	});

	var Dialog = React.createClass({
	  displayName: 'Dialog',

	  mixins: [WindowListenable, StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    actions: React.PropTypes.array,
	    autoDetectWindowHeight: React.PropTypes.bool,
	    autoScrollBodyContent: React.PropTypes.bool,
	    bodyStyle: React.PropTypes.object,
	    contentClassName: React.PropTypes.string,
	    contentStyle: React.PropTypes.object,
	    modal: React.PropTypes.bool,
	    openImmediately: React.PropTypes.bool,
	    onClickAway: React.PropTypes.func,
	    onDismiss: React.PropTypes.func,
	    onShow: React.PropTypes.func,
	    repositionOnUpdate: React.PropTypes.bool,
	    title: React.PropTypes.node
	  },

	  windowListeners: {
	    keyup: '_handleWindowKeyUp',
	    resize: '_positionDialog'
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      autoDetectWindowHeight: false,
	      autoScrollBodyContent: false,
	      actions: [],
	      modal: false,
	      repositionOnUpdate: true
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      open: this.props.openImmediately || false
	    };
	  },

	  componentDidMount: function componentDidMount() {
	    this._positionDialog();
	    if (this.props.openImmediately) {
	      this.refs.dialogOverlay.preventScrolling();
	      this._onShow();
	    }
	  },

	  componentDidUpdate: function componentDidUpdate() {
	    this._positionDialog();
	  },

	  getStyles: function getStyles() {
	    var spacing = this.context.muiTheme.spacing;

	    var main = {
	      position: 'fixed',
	      boxSizing: 'border-box',
	      WebkitTapHighlightColor: 'rgba(0,0,0,0)',
	      zIndex: 10,
	      top: 0,
	      left: -10000,
	      width: '100%',
	      height: '100%',
	      transition: Transitions.easeOut('0ms', 'left', '450ms')
	    };

	    var content = {
	      boxSizing: 'border-box',
	      WebkitTapHighlightColor: 'rgba(0,0,0,0)',
	      transition: Transitions.easeOut(),
	      position: 'relative',
	      width: '75%',
	      maxWidth: spacing.desktopKeylineIncrement * 12,
	      margin: '0 auto',
	      zIndex: 10
	    };

	    var body = {
	      padding: spacing.desktopGutter,
	      overflowY: this.props.autoScrollBodyContent ? 'auto' : 'hidden',
	      overflowX: 'hidden'
	    };

	    var gutter = spacing.desktopGutter + 'px ';
	    var title = {
	      margin: 0,
	      padding: gutter + gutter + '0 ' + gutter,
	      color: this.context.muiTheme.palette.textColor,
	      fontSize: 24,
	      lineHeight: '32px',
	      fontWeight: '400'
	    };

	    if (this.state.open) {
	      main = this.mergeAndPrefix(main, {
	        left: 0,
	        transition: Transitions.easeOut('0ms', 'left', '0ms')
	      });
	    }

	    return {
	      main: this.mergeAndPrefix(main, this.props.style),
	      content: this.mergeAndPrefix(content, this.props.contentStyle),
	      paper: {
	        background: this.context.muiTheme.canvasColor
	      },
	      body: this.mergeStyles(body, this.props.bodyStyle),
	      title: this.mergeStyles(title, this.props.titleStyle)
	    };
	  },

	  render: function render() {
	    var styles = this.getStyles();
	    var actions = this._getActionsContainer(this.props.actions);
	    var title = undefined;
	    if (this.props.title) {
	      // If the title is a string, wrap in an h3 tag.
	      // If not, just use it as a node.
	      title = Object.prototype.toString.call(this.props.title) === '[object String]' ? React.createElement(
	        'h3',
	        { style: styles.title },
	        this.props.title
	      ) : this.props.title;
	    }

	    return React.createElement(
	      'div',
	      { ref: 'container', style: styles.main },
	      React.createElement(
	        ReactTransitionGroup,
	        { component: 'div', ref: 'dialogWindow' },
	        this.state.open && React.createElement(
	          TransitionItem,
	          {
	            className: this.props.contentClassName,
	            style: styles.content },
	          React.createElement(
	            Paper,
	            {
	              style: styles.paper,
	              zDepth: 4 },
	            title,
	            React.createElement(
	              'div',
	              { ref: 'dialogContent', style: styles.body },
	              this.props.children
	            ),
	            actions
	          )
	        )
	      ),
	      React.createElement(Overlay, {
	        ref: 'dialogOverlay',
	        show: this.state.open,
	        autoLockScrolling: false,
	        onTouchTap: this._handleOverlayTouchTap })
	    );
	  },

	  isOpen: function isOpen() {
	    return this.state.open;
	  },

	  dismiss: function dismiss() {
	    var _this = this;

	    CssEvent.onTransitionEnd(this.getDOMNode(), (function () {
	      _this.refs.dialogOverlay.allowScrolling();
	    }).bind(this));

	    this.setState({ open: false });
	    this._onDismiss();
	  },

	  show: function show() {
	    this.refs.dialogOverlay.preventScrolling();
	    this.setState({ open: true }, this._onShow);
	  },

	  _getAction: function _getAction(actionJSON, key) {
	    var _this2 = this;

	    var styles = { marginRight: 8 };
	    var props = {
	      key: key,
	      secondary: true,
	      onClick: actionJSON.onClick,
	      onTouchTap: function onTouchTap() {
	        if (actionJSON.onTouchTap) {
	          actionJSON.onTouchTap.call(undefined);
	        }
	        if (!(actionJSON.onClick || actionJSON.onTouchTap)) {
	          _this2.dismiss();
	        }
	      },
	      label: actionJSON.text,
	      style: styles
	    };
	    if (actionJSON.ref) {
	      props.ref = actionJSON.ref;
	      props.keyboardFocused = actionJSON.ref === this.props.actionFocus;
	    }

	    return React.createElement(FlatButton, props);
	  },

	  _getActionsContainer: function _getActionsContainer(actions) {
	    var actionContainer = undefined;
	    var actionObjects = [];
	    var actionStyle = {
	      boxSizing: 'border-box',
	      WebkitTapHighlightColor: 'rgba(0,0,0,0)',
	      padding: 8,
	      marginBottom: 8,
	      width: '100%',
	      textAlign: 'right'
	    };

	    if (actions.length) {
	      for (var i = 0; i < actions.length; i++) {
	        var currentAction = actions[i];

	        //if the current action isn't a react object, create one
	        if (!React.isValidElement(currentAction)) {
	          currentAction = this._getAction(currentAction, i);
	        }

	        actionObjects.push(currentAction);
	      }

	      actionContainer = React.createElement(
	        'div',
	        { style: actionStyle },
	        actionObjects
	      );
	    }

	    return actionContainer;
	  },

	  _positionDialog: function _positionDialog() {
	    if (this.state.open) {
	      var clientHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
	      var container = this.getDOMNode();
	      var dialogWindow = this.refs.dialogWindow.getDOMNode();
	      var dialogContent = this.refs.dialogContent.getDOMNode();
	      var minPaddingTop = 16;

	      //Reset the height in case the window was resized.
	      dialogWindow.style.height = '';
	      dialogContent.style.height = '';

	      var dialogWindowHeight = dialogWindow.offsetHeight;
	      var paddingTop = (clientHeight - dialogWindowHeight) / 2 - 64;
	      if (paddingTop < minPaddingTop) paddingTop = minPaddingTop;

	      //Vertically center the dialog window, but make sure it doesn't
	      //transition to that position.
	      if (this.props.repositionOnUpdate || !container.style.paddingTop) {
	        container.style.paddingTop = paddingTop + 'px';
	      }

	      // Force a height if the dialog is taller than clientHeight
	      if (this.props.autoDetectWindowHeight || this.props.autoScrollBodyContent) {
	        var styles = this.getStyles();
	        var maxDialogContentHeight = clientHeight - 2 * (styles.body.padding + paddingTop + 64);

	        if (this.props.title) maxDialogContentHeight -= dialogContent.previousSibling.offsetHeight;
	        if (this.props.actions) maxDialogContentHeight -= dialogContent.nextSibling.offsetHeight;

	        dialogContent.style.maxHeight = maxDialogContentHeight + 'px';
	      }
	    }
	  },

	  _onShow: function _onShow() {
	    if (this.props.onShow) this.props.onShow();
	  },

	  _onDismiss: function _onDismiss() {
	    if (this.props.onDismiss) this.props.onDismiss();
	  },

	  _handleOverlayTouchTap: function _handleOverlayTouchTap(e) {
	    if (this.props.modal) {
	      e.stopPropagation();
	    } else {
	      this.dismiss();
	      if (this.props.onClickAway) this.props.onClickAway();
	    }
	  },

	  _handleWindowKeyUp: function _handleWindowKeyUp(e) {
	    if (e.keyCode === KeyCode.ESC && !this.props.modal) {
	      this.dismiss();
	    }
	  }

	});

	module.exports = Dialog;

/***/ },
/* 291 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(206);
	var Transitions = __webpack_require__(230);
	var ColorManipulator = __webpack_require__(257);
	var Typography = __webpack_require__(240);
	var EnhancedButton = __webpack_require__(204);

	function validateLabel(props, propName, componentName) {
	  if (!props.children && !props.label) {
	    return new Error('Required prop label or children was not ' + 'specified in ' + componentName + '.');
	  }
	}

	var FlatButton = React.createClass({
	  displayName: 'FlatButton',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    disabled: React.PropTypes.bool,
	    hoverColor: React.PropTypes.string,
	    label: validateLabel,
	    labelStyle: React.PropTypes.object,
	    onKeyboardFocus: React.PropTypes.func,
	    onMouseLeave: React.PropTypes.func,
	    onMouseEnter: React.PropTypes.func,
	    onTouchStart: React.PropTypes.func,
	    primary: React.PropTypes.bool,
	    rippleColor: React.PropTypes.string,
	    secondary: React.PropTypes.bool
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      labelStyle: {}
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      hovered: false,
	      isKeyboardFocused: false,
	      touch: false
	    };
	  },

	  render: function render() {
	    var _props = this.props;
	    var disabled = _props.disabled;
	    var hoverColor = _props.hoverColor;
	    var label = _props.label;
	    var labelStyle = _props.labelStyle;
	    var onKeyboardFocus = _props.onKeyboardFocus;
	    var onMouseLeave = _props.onMouseLeave;
	    var onMouseEnter = _props.onMouseEnter;
	    var onTouchStart = _props.onTouchStart;
	    var primary = _props.primary;
	    var rippleColor = _props.rippleColor;
	    var secondary = _props.secondary;
	    var style = _props.style;

	    var other = _objectWithoutProperties(_props, ['disabled', 'hoverColor', 'label', 'labelStyle', 'onKeyboardFocus', 'onMouseLeave', 'onMouseEnter', 'onTouchStart', 'primary', 'rippleColor', 'secondary', 'style']);

	    var theme = this.context.muiTheme;
	    var buttonTheme = theme.component.button;
	    var flatButtonTheme = theme.component.flatButton;

	    var defaultColor = disabled ? flatButtonTheme.disabledTextColor : primary ? flatButtonTheme.primaryTextColor : secondary ? flatButtonTheme.secondaryTextColor : flatButtonTheme.textColor;

	    var defaultHoverColor = ColorManipulator.fade(ColorManipulator.lighten(defaultColor, 0.4), 0.15);
	    var defaultRippleColor = ColorManipulator.fade(defaultColor, 0.8);
	    var buttonHoverColor = hoverColor || defaultHoverColor;
	    var buttonRippleColor = rippleColor || defaultRippleColor;
	    var hovered = (this.state.hovered || this.state.isKeyboardFocused) && !disabled;

	    var mergedRootStyles = this.mergeStyles({
	      color: defaultColor,
	      transition: Transitions.easeOut(),
	      fontSize: Typography.fontStyleButtonFontSize,
	      letterSpacing: 0,
	      textTransform: 'uppercase',
	      fontWeight: Typography.fontWeightMedium,
	      borderRadius: 2,
	      userSelect: 'none',
	      position: 'relative',
	      overflow: 'hidden',
	      backgroundColor: hovered ? buttonHoverColor : flatButtonTheme.color,
	      lineHeight: buttonTheme.height + 'px',
	      minWidth: buttonTheme.minWidth,
	      padding: 0,
	      margin: 0,
	      //This is need so that ripples do not bleed past border radius.
	      //See: http://stackoverflow.com/questions/17298739
	      transform: 'translate3d(0, 0, 0)'
	    }, this.props.style);

	    var mergedLabelStyles = this.mergeAndPrefix({
	      position: 'relative',
	      padding: '0 ' + theme.spacing.desktopGutterLess + 'px'
	    }, labelStyle);

	    var labelElement = label ? React.createElement(
	      'span',
	      { style: mergedLabelStyles },
	      label
	    ) : null;

	    return React.createElement(
	      EnhancedButton,
	      _extends({}, other, {
	        disabled: disabled,
	        focusRippleColor: buttonRippleColor,
	        onKeyboardFocus: this._handleKeyboardFocus,
	        onMouseLeave: this._handleMouseLeave,
	        onMouseEnter: this._handleMouseEnter,
	        onTouchStart: this._handleTouchStart,
	        style: mergedRootStyles,
	        touchRippleColor: buttonRippleColor }),
	      labelElement,
	      this.props.children
	    );
	  },

	  _handleKeyboardFocus: function _handleKeyboardFocus(e, isKeyboardFocused) {
	    this.setState({ isKeyboardFocused: isKeyboardFocused });
	    if (this.props.onKeyboardFocus) {
	      this.props.onKeyboardFocus(e, isKeyboardFocused);
	    }
	  },

	  _handleMouseEnter: function _handleMouseEnter(e) {
	    //Cancel hover styles for touch devices
	    if (!this.state.touch) this.setState({ hovered: true });
	    if (this.props.onMouseEnter) this.props.onMouseEnter(e);
	  },

	  _handleMouseLeave: function _handleMouseLeave(e) {
	    this.setState({ hovered: false });
	    if (this.props.onMouseLeave) this.props.onMouseLeave(e);
	  },

	  _handleTouchStart: function _handleTouchStart(e) {
	    this.setState({ touch: true });
	    if (this.props.onTouchStart) this.props.onTouchStart(e);
	  }

	});

	module.exports = FlatButton;

/***/ },
/* 292 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(206);
	var Transitions = __webpack_require__(230);
	var Colors = __webpack_require__(228);

	var Overlay = React.createClass({
	  displayName: 'Overlay',

	  _originalBodyOverflow: '',

	  mixins: [StylePropable],

	  propTypes: {
	    autoLockScrolling: React.PropTypes.bool,
	    show: React.PropTypes.bool,
	    transitionEnabled: React.PropTypes.bool
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      autoLockScrolling: true,
	      transitionEnabled: true
	    };
	  },

	  componentDidMount: function componentDidMount() {
	    this._originalBodyOverflow = document.getElementsByTagName('body')[0].style.oveflow;
	  },

	  componentDidUpdate: function componentDidUpdate() {
	    if (this.props.autoLockScrolling) this.props.show ? this._preventScrolling() : this._allowScrolling();
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    this._allowScrolling();
	  },

	  setOpacity: function setOpacity(opacity) {
	    var overlay = React.findDOMNode(this);
	    overlay.style.opacity = opacity;
	  },

	  getStyles: function getStyles() {
	    var styles = {
	      root: {
	        position: 'fixed',
	        height: '100%',
	        width: '100%',
	        zIndex: 9,
	        top: 0,
	        left: '-100%',
	        opacity: 0,
	        backgroundColor: Colors.lightBlack,
	        WebkitTapHighlightColor: 'rgba(0, 0, 0, 0)',

	        // Two ways to promote overlay to its own render layer
	        willChange: 'opacity',
	        transform: 'translateZ(0)',

	        transition: this.props.transitionEnabled && Transitions.easeOut('0ms', 'left', '400ms') + ',' + Transitions.easeOut('400ms', 'opacity')
	      },
	      rootWhenShown: {
	        left: '0',
	        opacity: 1,
	        transition: this.props.transitionEnabled && Transitions.easeOut('0ms', 'left') + ',' + Transitions.easeOut('400ms', 'opacity')
	      }
	    };
	    return styles;
	  },

	  render: function render() {
	    var _props = this.props;
	    var show = _props.show;
	    var style = _props.style;

	    var other = _objectWithoutProperties(_props, ['show', 'style']);

	    var styles = this.mergeAndPrefix(this.getStyles().root, this.props.style, this.props.show && this.getStyles().rootWhenShown);

	    return React.createElement('div', _extends({}, other, { style: styles }));
	  },

	  preventScrolling: function preventScrolling() {
	    if (!this.props.autoLockScrolling) this._preventScrolling();
	  },

	  allowScrolling: function allowScrolling() {
	    if (!this.props.autoLockScrolling) this._allowScrolling();
	  },

	  _preventScrolling: function _preventScrolling() {
	    var body = document.getElementsByTagName('body')[0];
	    body.style.overflow = 'hidden';
	  },

	  _allowScrolling: function _allowScrolling() {
	    var body = document.getElementsByTagName('body')[0];
	    body.style.overflow = this._originalBodyOverflow || '';
	  }

	});

	module.exports = Overlay;

/***/ },
/* 293 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var ColorManipulator = __webpack_require__(257);
	var StylePropable = __webpack_require__(206);
	var Transitions = __webpack_require__(230);
	var UniqueId = __webpack_require__(266);
	var EnhancedTextarea = __webpack_require__(294);

	/**
	 * Check if a value is valid to be displayed inside an input.
	 *
	 * @param The value to check.
	 * @returns True if the string provided is valid, false otherwise.
	 */
	function isValid(value) {
	  return value || value === 0;
	}

	var TextField = React.createClass({
	  displayName: 'TextField',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    errorStyle: React.PropTypes.object,
	    errorText: React.PropTypes.string,
	    floatingLabelStyle: React.PropTypes.object,
	    floatingLabelText: React.PropTypes.string,
	    fullWidth: React.PropTypes.bool,
	    hintText: React.PropTypes.string,
	    id: React.PropTypes.string,
	    inputStyle: React.PropTypes.object,
	    multiLine: React.PropTypes.bool,
	    onBlur: React.PropTypes.func,
	    onChange: React.PropTypes.func,
	    onEnterKeyDown: React.PropTypes.func,
	    onFocus: React.PropTypes.func,
	    onKeyDown: React.PropTypes.func,
	    rows: React.PropTypes.number,
	    type: React.PropTypes.string
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      fullWidth: false,
	      type: 'text',
	      rows: 1
	    };
	  },

	  getInitialState: function getInitialState() {
	    var props = this.props.children ? this.props.children.props : this.props;

	    return {
	      errorText: this.props.errorText,
	      hasValue: isValid(props.value) || isValid(props.defaultValue) || props.valueLink && isValid(props.valueLink.value)
	    };
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.textField;
	  },

	  componentDidMount: function componentDidMount() {
	    this._uniqueId = UniqueId.generate();
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    var newState = {};

	    newState.errorText = nextProps.errorText;
	    if (nextProps.children && nextProps.children.props) {
	      nextProps = nextProps.children.props;
	    }

	    var hasValueLinkProp = nextProps.hasOwnProperty('valueLink');
	    var hasValueProp = nextProps.hasOwnProperty('value');
	    var hasNewDefaultValue = nextProps.defaultValue !== this.props.defaultValue;

	    if (hasValueLinkProp) {
	      newState.hasValue = isValid(nextProps.valueLink.value);
	    } else if (hasValueProp) {
	      newState.hasValue = isValid(nextProps.value);
	    } else if (hasNewDefaultValue) {
	      newState.hasValue = isValid(nextProps.defaultValue);
	    }

	    if (newState) this.setState(newState);
	  },

	  getStyles: function getStyles() {
	    var props = this.props;
	    var theme = this.getTheme();

	    var styles = {
	      root: {
	        fontSize: 16,
	        lineHeight: '24px',
	        width: props.fullWidth ? '100%' : 256,
	        height: (props.rows - 1) * 24 + (props.floatingLabelText ? 72 : 48),
	        display: 'inline-block',
	        position: 'relative',
	        fontFamily: this.context.muiTheme.contentFontFamily,
	        transition: Transitions.easeOut('200ms', 'height')
	      },
	      error: {
	        position: 'relative',
	        bottom: 5,
	        fontSize: 12,
	        lineHeight: '12px',
	        color: theme.errorColor,
	        transition: Transitions.easeOut()
	      },
	      hint: {
	        position: 'absolute',
	        lineHeight: '22px',
	        opacity: 1,
	        color: theme.hintColor,
	        transition: Transitions.easeOut(),
	        bottom: 12
	      },
	      input: {
	        tapHighlightColor: 'rgba(0,0,0,0)',
	        padding: 0,
	        position: 'relative',
	        width: '100%',
	        height: '100%',
	        border: 'none',
	        outline: 'none',
	        backgroundColor: theme.backgroundColor,
	        color: props.disabled ? theme.disabledTextColor : theme.textColor,
	        font: 'inherit'
	      },
	      underline: {
	        border: 'none',
	        borderBottom: 'solid 1px ' + theme.borderColor,
	        position: 'absolute',
	        width: '100%',
	        bottom: 8,
	        margin: 0,
	        MozBoxSizing: 'content-box',
	        boxSizing: 'content-box',
	        height: 0
	      },
	      underlineAfter: {
	        position: 'absolute',
	        width: '100%',
	        overflow: 'hidden',
	        userSelect: 'none',
	        cursor: 'default',
	        bottom: 8,
	        borderBottom: 'dotted 2px ' + theme.disabledTextColor
	      }
	    };

	    styles.floatingLabel = this.mergeStyles(styles.hint, {
	      lineHeight: '22px',
	      top: 38,
	      bottom: 'none',
	      opacity: 1,
	      transform: 'scale(1) translate3d(0, 0, 0)',
	      transformOrigin: 'left top'
	    });

	    styles.textarea = this.mergeStyles(styles.input, {
	      marginTop: props.floatingLabelText ? 36 : 12,
	      marginBottom: props.floatingLabelText ? -36 : -12,
	      boxSizing: 'border-box',
	      font: 'inherit'
	    });

	    styles.focusUnderline = this.mergeStyles(styles.underline, {
	      borderBottom: 'solid 2px',
	      borderColor: theme.focusColor,
	      transform: 'scaleX(0)',
	      transition: Transitions.easeOut()
	    });

	    if (this.state.isFocused) {
	      styles.floatingLabel.color = theme.focusColor;
	      styles.floatingLabel.transform = 'perspective(1px) scale(0.75) translate3d(2px, -28px, 0)';
	      styles.focusUnderline.transform = 'scaleX(1)';
	    }

	    if (this.state.hasValue) {
	      styles.floatingLabel.color = ColorManipulator.fade(props.disabled ? theme.disabledTextColor : theme.floatingLabelColor, 0.5);
	      styles.floatingLabel.transform = 'perspective(1px) scale(0.75) translate3d(2px, -28px, 0)';
	      styles.hint.opacity = 0;
	    }

	    if (props.floatingLabelText) {
	      styles.hint.opacity = 0;
	      styles.input.boxSizing = 'border-box';
	      if (this.state.isFocused && !this.state.hasValue) styles.hint.opacity = 1;
	    }

	    if (props.style && props.style.height) {
	      styles.hint.lineHeight = props.style.height;
	    }

	    if (this.state.errorText && this.state.isFocused) styles.floatingLabel.color = theme.errorColor;
	    if (props.floatingLabelText && !props.multiLine) styles.input.paddingTop = 26;

	    if (this.state.errorText) {
	      styles.focusUnderline.borderColor = theme.errorColor;
	      styles.focusUnderline.transform = 'scaleX(1)';
	    }

	    return styles;
	  },

	  render: function render() {
	    var _props = this.props;
	    var className = _props.className;
	    var errorStyle = _props.errorStyle;
	    var errorText = _props.errorText;
	    var floatingLabelText = _props.floatingLabelText;
	    var fullWidth = _props.fullWidth;
	    var hintText = _props.hintText;
	    var id = _props.id;
	    var multiLine = _props.multiLine;
	    var onBlur = _props.onBlur;
	    var onChange = _props.onChange;
	    var onFocus = _props.onFocus;
	    var type = _props.type;
	    var rows = _props.rows;

	    var other = _objectWithoutProperties(_props, ['className', 'errorStyle', 'errorText', 'floatingLabelText', 'fullWidth', 'hintText', 'id', 'multiLine', 'onBlur', 'onChange', 'onFocus', 'type', 'rows']);

	    var styles = this.getStyles();

	    var inputId = id || this._uniqueId;

	    var errorTextElement = this.state.errorText ? React.createElement(
	      'div',
	      { style: this.mergeAndPrefix(styles.error, errorStyle) },
	      this.state.errorText
	    ) : null;

	    var hintTextElement = hintText ? React.createElement(
	      'div',
	      { style: this.mergeAndPrefix(styles.hint) },
	      hintText
	    ) : null;

	    var floatingLabelTextElement = floatingLabelText ? React.createElement(
	      'label',
	      {
	        style: this.mergeAndPrefix(styles.floatingLabel, this.props.floatingLabelStyle),
	        htmlFor: inputId },
	      floatingLabelText
	    ) : null;

	    var inputProps = undefined;
	    var inputElement = undefined;

	    inputProps = {
	      id: inputId,
	      ref: this._getRef(),
	      style: this.mergeAndPrefix(styles.input, this.props.inputStyle),
	      onBlur: this._handleInputBlur,
	      onFocus: this._handleInputFocus,
	      disabled: this.props.disabled,
	      onKeyDown: this._handleInputKeyDown
	    };

	    if (!this.props.hasOwnProperty('valueLink')) {
	      inputProps.onChange = this._handleInputChange;
	    }
	    if (this.props.children) {
	      inputElement = React.cloneElement(this.props.children, _extends({}, inputProps, this.props.children.props));
	    } else {
	      inputElement = multiLine ? React.createElement(EnhancedTextarea, _extends({}, other, inputProps, {
	        rows: rows,
	        onHeightChange: this._handleTextAreaHeightChange,
	        textareaStyle: this.mergeAndPrefix(styles.textarea) })) : React.createElement('input', _extends({}, other, inputProps, {
	        type: type }));
	    }

	    var underlineElement = this.props.disabled ? React.createElement('div', { style: this.mergeAndPrefix(styles.underlineAfter) }) : React.createElement('hr', { style: this.mergeAndPrefix(styles.underline) });
	    var focusUnderlineElement = React.createElement('hr', { style: this.mergeAndPrefix(styles.focusUnderline) });

	    return React.createElement(
	      'div',
	      { className: className, style: this.mergeAndPrefix(styles.root, this.props.style) },
	      floatingLabelTextElement,
	      hintTextElement,
	      inputElement,
	      underlineElement,
	      focusUnderlineElement,
	      errorTextElement
	    );
	  },

	  blur: function blur() {
	    if (this.isMounted()) this._getInputNode().blur();
	  },

	  clearValue: function clearValue() {
	    this.setValue('');
	  },

	  focus: function focus() {
	    if (this.isMounted()) this._getInputNode().focus();
	  },

	  getValue: function getValue() {
	    return this.isMounted() ? this._getInputNode().value : undefined;
	  },

	  setErrorText: function setErrorText(newErrorText) {
	    if (process.env.NODE_ENV !== 'production' && this.props.hasOwnProperty('errorText')) {
	      console.error('Cannot call TextField.setErrorText when errorText is defined as a property.');
	    } else if (this.isMounted()) {
	      this.setState({ errorText: newErrorText });
	    }
	  },

	  setValue: function setValue(newValue) {
	    if (process.env.NODE_ENV !== 'production' && this._isControlled()) {
	      console.error('Cannot call TextField.setValue when value or valueLink is defined as a property.');
	    } else if (this.isMounted()) {
	      if (this.props.multiLine) {
	        this.refs[this._getRef()].setValue(newValue);
	      } else {
	        this._getInputNode().value = newValue;
	      }

	      this.setState({ hasValue: isValid(newValue) });
	    }
	  },

	  _getRef: function _getRef() {
	    return this.props.ref ? this.props.ref : 'input';
	  },

	  _getInputNode: function _getInputNode() {
	    return this.props.children || this.props.multiLine ? this.refs[this._getRef()].getInputNode() : React.findDOMNode(this.refs[this._getRef()]);
	  },

	  _handleInputBlur: function _handleInputBlur(e) {
	    this.setState({ isFocused: false });
	    if (this.props.onBlur) this.props.onBlur(e);
	  },

	  _handleInputChange: function _handleInputChange(e) {
	    this.setState({ hasValue: isValid(e.target.value) });
	    if (this.props.onChange) this.props.onChange(e);
	  },

	  _handleInputFocus: function _handleInputFocus(e) {
	    if (this.props.disabled) return;
	    this.setState({ isFocused: true });
	    if (this.props.onFocus) this.props.onFocus(e);
	  },

	  _handleInputKeyDown: function _handleInputKeyDown(e) {
	    if (e.keyCode === 13 && this.props.onEnterKeyDown) this.props.onEnterKeyDown(e);
	    if (this.props.onKeyDown) this.props.onKeyDown(e);
	  },

	  _handleTextAreaHeightChange: function _handleTextAreaHeightChange(e, height) {
	    var newHeight = height + 24;
	    if (this.props.floatingLabelText) newHeight += 24;
	    React.findDOMNode(this).style.height = newHeight + 'px';
	  },

	  _isControlled: function _isControlled() {
	    return this.props.hasOwnProperty('value') || this.props.hasOwnProperty('valueLink');
	  }

	});

	module.exports = TextField;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 294 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(206);
	var AutoPrefix = __webpack_require__(225);

	var EnhancedTextarea = React.createClass({
	  displayName: 'EnhancedTextarea',

	  mixins: [StylePropable],

	  propTypes: {
	    onChange: React.PropTypes.func,
	    onHeightChange: React.PropTypes.func,
	    textareaStyle: React.PropTypes.object,
	    rows: React.PropTypes.number
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      rows: 1
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      height: this.props.rows * 24
	    };
	  },

	  componentDidMount: function componentDidMount() {
	    this._syncHeightWithShadow();
	  },

	  getStyles: function getStyles() {
	    var styles = {
	      root: {
	        width: '100%',
	        resize: 'none',
	        overflow: 'hidden',
	        font: 'inherit',
	        padding: 0
	      }
	    };
	    return styles;
	  },

	  render: function render() {
	    var _props = this.props;
	    var onChange = _props.onChange;
	    var onHeightChange = _props.onHeightChange;
	    var rows = _props.rows;
	    var style = _props.style;
	    var textareaStyle = _props.textareaStyle;
	    var valueLink = _props.valueLink;

	    var other = _objectWithoutProperties(_props, ['onChange', 'onHeightChange', 'rows', 'style', 'textareaStyle', 'valueLink']);

	    var styles = this.getStyles().root;

	    var textAreaStyles = {
	      width: '100%',
	      resize: 'none',
	      overflow: 'hidden',
	      font: 'inherit',
	      padding: 0
	    };

	    var inputStyles = this.mergeAndPrefix(styles, {
	      height: this.state.height + 'px'
	    });

	    inputStyles = this.mergeAndPrefix(inputStyles, textareaStyle);

	    // Overflow also needed to here to remove the extra row
	    // added to textareas in Firefox.
	    var shadowStyles = this.mergeAndPrefix(textAreaStyles, {
	      position: 'absolute',
	      opacity: 0
	    });

	    if (this.props.hasOwnProperty('valueLink')) {
	      other.value = this.props.valueLink.value;
	    }
	    if (this.props.disabled) {
	      style.cursor = 'default';
	    }

	    return React.createElement(
	      'div',
	      { style: this.props.style },
	      React.createElement('textarea', {
	        ref: 'shadow',
	        style: AutoPrefix.all(shadowStyles),
	        tabIndex: '-1',
	        rows: this.props.rows,
	        defaultValue: this.props.defaultValue,
	        readOnly: true,
	        value: this.props.value,
	        valueLink: this.props.valueLink }),
	      React.createElement('textarea', _extends({}, other, {
	        ref: 'input',
	        rows: this.props.rows,
	        style: AutoPrefix.all(inputStyles),
	        onChange: this._handleChange }))
	    );
	  },

	  getInputNode: function getInputNode() {
	    return React.findDOMNode(this.refs.input);
	  },

	  setValue: function setValue(value) {
	    this.getInputNode().value = value;
	    this._syncHeightWithShadow(value);
	  },

	  _syncHeightWithShadow: function _syncHeightWithShadow(newValue, e) {
	    var shadow = React.findDOMNode(this.refs.shadow);
	    var currentHeight = this.state.height;
	    var newHeight = undefined;

	    if (newValue !== undefined) {
	      shadow.value = newValue;
	    }
	    newHeight = shadow.scrollHeight;

	    if (currentHeight !== newHeight) {
	      this.setState({ height: newHeight });
	      if (this.props.onHeightChange) {
	        this.props.onHeightChange(e, newHeight);
	      }
	    }
	  },

	  _handleChange: function _handleChange(e) {
	    this._syncHeightWithShadow(e.target.value);

	    if (this.props.hasOwnProperty('valueLink')) {
	      this.props.valueLink.requestChange(e.target.value);
	    }

	    if (this.props.onChange) {
	      this.props.onChange(e);
	    }
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    if (nextProps.value !== this.props.value) {
	      this._syncHeightWithShadow(nextProps.value);
	    }
	  }
	});

	module.exports = EnhancedTextarea;

/***/ },
/* 295 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(206);
	var Transitions = __webpack_require__(230);
	var ClickAwayable = __webpack_require__(296);
	var FontIcon = __webpack_require__(237);
	var Menu = __webpack_require__(297);

	var DropDownIcon = React.createClass({
	  displayName: 'DropDownIcon',

	  mixins: [StylePropable, ClickAwayable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    onChange: React.PropTypes.func,
	    menuItems: React.PropTypes.array.isRequired,
	    closeOnMenuItemTouchTap: React.PropTypes.bool,
	    iconStyle: React.PropTypes.object,
	    iconClassName: React.PropTypes.string,
	    iconLigature: React.PropTypes.string
	  },

	  getInitialState: function getInitialState() {
	    return {
	      open: false
	    };
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      closeOnMenuItemTouchTap: true
	    };
	  },

	  componentDidMount: function componentDidMount() {},

	  componentClickAway: function componentClickAway() {
	    this.setState({ open: false });
	  },

	  getStyles: function getStyles() {
	    var spacing = this.context.muiTheme.spacing;
	    var iconWidth = 48;
	    var styles = {
	      root: {
	        display: 'inline-block',
	        width: iconWidth + 'px !important',
	        position: 'relative',
	        height: spacing.desktopToolbarHeight,
	        fontSize: spacing.desktopDropDownMenuFontSize,
	        cursor: 'pointer'
	      },
	      menu: {
	        transition: Transitions.easeOut(),
	        right: '-14px !important',
	        top: '9px !important',
	        opacity: this.state.open ? 1 : 0
	      },
	      menuItem: { // similair to drop down menu's menu item styles
	        paddingRight: spacing.iconSize + spacing.desktopGutterLess * 2,
	        height: spacing.desktopDropDownMenuItemHeight,
	        lineHeight: spacing.desktopDropDownMenuItemHeight + 'px'
	      }
	    };
	    return styles;
	  },

	  render: function render() {
	    var _props = this.props;
	    var style = _props.style;
	    var children = _props.children;
	    var menuItems = _props.menuItems;
	    var closeOnMenuItemTouchTap = _props.closeOnMenuItemTouchTap;
	    var iconStyle = _props.iconStyle;
	    var iconClassName = _props.iconClassName;

	    var other = _objectWithoutProperties(_props, ['style', 'children', 'menuItems', 'closeOnMenuItemTouchTap', 'iconStyle', 'iconClassName']);

	    var styles = this.getStyles();

	    return React.createElement(
	      'div',
	      _extends({}, other, { style: this.mergeAndPrefix(styles.root, this.props.style) }),
	      React.createElement(
	        'div',
	        { onTouchTap: this._onControlClick },
	        React.createElement(
	          FontIcon,
	          {
	            className: iconClassName,
	            style: iconStyle },
	          this.props.iconLigature
	        ),
	        this.props.children
	      ),
	      React.createElement(Menu, {
	        ref: 'menuItems',
	        style: this.mergeAndPrefix(styles.menu),
	        menuItems: menuItems,
	        menuItemStyle: styles.menuItem,
	        hideable: true,
	        visible: this.state.open,
	        onItemTap: this._onMenuItemClick })
	    );
	  },

	  _onControlClick: function _onControlClick() {
	    this.setState({ open: !this.state.open });
	  },

	  _onMenuItemClick: function _onMenuItemClick(e, key, payload) {
	    if (this.props.onChange) this.props.onChange(e, key, payload);

	    if (this.props.closeOnMenuItemTouchTap) {
	      this.setState({ open: false });
	    }
	  }
	});

	module.exports = DropDownIcon;

	// This component can be deprecated once ./menu/menu has been deprecated.
	// if (process.env.NODE_ENV !== 'production') {
	//   console.warn('DropDownIcon has been deprecated. Use IconMenu instead.');
	// }

/***/ },
/* 296 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(1);
	var Events = __webpack_require__(265);
	var Dom = __webpack_require__(234);

	module.exports = {

	  //When the component mounts, listen to click events and check if we need to
	  //Call the componentClickAway function.
	  componentDidMount: function componentDidMount() {
	    if (!this.manuallyBindClickAway) this._bindClickAway();
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    this._unbindClickAway();
	  },

	  _checkClickAway: function _checkClickAway(event) {
	    var el = React.findDOMNode(this);

	    // Check if the target is inside the current component
	    if (event.target !== el && !Dom.isDescendant(el, event.target) && document.documentElement.contains(event.target)) {
	      if (this.componentClickAway) this.componentClickAway();
	    }
	  },

	  _bindClickAway: function _bindClickAway() {
	    // On touch-enabled devices, both events fire, and the handler is called twice,
	    // but it's fine since all operations for which the mixin is used
	    // are idempotent.
	    Events.on(document, 'mouseup', this._checkClickAway);
	    Events.on(document, 'touchend', this._checkClickAway);
	  },

	  _unbindClickAway: function _unbindClickAway() {
	    Events.off(document, 'mouseup', this._checkClickAway);
	    Events.off(document, 'touchend', this._checkClickAway);
	  }

	};

/***/ },
/* 297 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var CssEvent = __webpack_require__(274);
	var KeyLine = __webpack_require__(298);
	var KeyCode = __webpack_require__(205);
	var StylePropable = __webpack_require__(206);
	var Transitions = __webpack_require__(230);
	var ClickAwayable = __webpack_require__(296);
	var Paper = __webpack_require__(243);
	var MenuItem = __webpack_require__(299);
	var LinkMenuItem = __webpack_require__(301);
	var SubheaderMenuItem = __webpack_require__(302);

	/***********************
	* Nested Menu Component
	***********************/
	var NestedMenuItem = React.createClass({
	  displayName: 'NestedMenuItem',

	  mixins: [ClickAwayable, StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    index: React.PropTypes.number.isRequired,
	    text: React.PropTypes.string,
	    menuItems: React.PropTypes.array.isRequired,
	    zDepth: React.PropTypes.number,
	    disabled: React.PropTypes.bool,
	    active: React.PropTypes.bool,
	    onItemTap: React.PropTypes.func,
	    menuItemStyle: React.PropTypes.object
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      disabled: false
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      open: false,
	      activeIndex: 0
	    };
	  },

	  componentClickAway: function componentClickAway() {
	    this._closeNestedMenu();
	  },

	  componentDidMount: function componentDidMount() {
	    this._positionNestedMenu();
	    var el = this.getDOMNode();
	    el.focus();
	  },

	  componentDidUpdate: function componentDidUpdate() {
	    this._positionNestedMenu();
	  },

	  getSpacing: function getSpacing() {
	    return this.context.muiTheme.spacing;
	  },

	  getStyles: function getStyles() {
	    var styles = {
	      root: {
	        userSelect: 'none',
	        cursor: 'pointer',
	        lineHeight: this.getTheme().height + 'px',
	        color: this.context.muiTheme.palette.textColor
	      },
	      icon: {
	        float: 'left',
	        lineHeight: this.getTheme().height + 'px',
	        marginRight: this.getSpacing().desktopGutter
	      },
	      toggle: {
	        marginTop: (this.getTheme().height - this.context.muiTheme.component.radioButton.size) / 2,
	        float: 'right',
	        width: 42
	      },
	      rootWhenHovered: {
	        backgroundColor: this.getTheme().hoverColor
	      },
	      rootWhenSelected: {
	        color: this.getTheme().selectedTextColor
	      },
	      rootWhenDisabled: {
	        cursor: 'default',
	        color: this.context.muiTheme.palette.disabledColor
	      }
	    };

	    return styles;
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.menuItem;
	  },

	  render: function render() {
	    var styles = this.getStyles();
	    styles = this.mergeAndPrefix(styles.root, this.props.active && !this.props.disabled && styles.rootWhenHovered, {
	      position: 'relative'
	    }, this.props.style);

	    var iconCustomArrowDropRight = {
	      marginRight: this.getSpacing().desktopGutterMini * -1,
	      color: this.context.muiTheme.component.dropDownMenu.accentColor
	    };

	    var _props = this.props;
	    var index = _props.index;
	    var menuItemStyle = _props.menuItemStyle;

	    var other = _objectWithoutProperties(_props, ['index', 'menuItemStyle']);

	    return React.createElement(
	      'div',
	      {
	        ref: 'root',
	        style: styles,
	        onMouseEnter: this._openNestedMenu,
	        onMouseLeave: this._closeNestedMenu,
	        onMouseOver: this._handleMouseOver,
	        onMouseOut: this._handleMouseOut },
	      React.createElement(
	        MenuItem,
	        {
	          index: index,
	          style: menuItemStyle,
	          disabled: this.props.disabled,
	          iconRightStyle: iconCustomArrowDropRight,
	          iconRightClassName: 'muidocs-icon-custom-arrow-drop-right',
	          onTouchTap: this._onParentItemTap },
	        this.props.text
	      ),
	      React.createElement(Menu, _extends({}, other, {
	        ref: 'nestedMenu',
	        menuItems: this.props.menuItems,
	        menuItemStyle: menuItemStyle,
	        onItemTap: this._onMenuItemTap,
	        hideable: true,
	        visible: this.state.open,
	        onRequestClose: this._closeNestedMenu,
	        zDepth: this.props.zDepth + 1 }))
	    );
	  },

	  toggleNestedMenu: function toggleNestedMenu() {
	    if (!this.props.disabled) this.setState({ open: !this.state.open });
	  },

	  isOpen: function isOpen() {
	    return this.state.open;
	  },

	  _positionNestedMenu: function _positionNestedMenu() {
	    var el = React.findDOMNode(this);
	    var nestedMenu = React.findDOMNode(this.refs.nestedMenu);
	    nestedMenu.style.left = el.offsetWidth + 'px';
	  },

	  _openNestedMenu: function _openNestedMenu() {
	    if (!this.props.disabled) this.setState({ open: true });
	  },

	  _closeNestedMenu: function _closeNestedMenu() {
	    this.setState({ open: false });
	    React.findDOMNode(this).focus();
	  },

	  _onParentItemTap: function _onParentItemTap() {
	    this.toggleNestedMenu();
	  },

	  _onMenuItemTap: function _onMenuItemTap(e, index, menuItem) {
	    if (this.props.onItemTap) this.props.onItemTap(e, index, menuItem);
	    this._closeNestedMenu();
	  },
	  _handleMouseOver: function _handleMouseOver(e) {
	    if (!this.props.disabled && this.props.onMouseOver) this.props.onMouseOver(e, this.props.index);
	  },

	  _handleMouseOut: function _handleMouseOut(e) {
	    if (!this.props.disabled && this.props.onMouseOut) this.props.onMouseOut(e, this.props.index);
	  }

	});

	/****************
	* Menu Component
	****************/
	var Menu = React.createClass({
	  displayName: 'Menu',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    autoWidth: React.PropTypes.bool,
	    onItemTap: React.PropTypes.func,
	    onToggle: React.PropTypes.func,
	    onRequestClose: React.PropTypes.func,
	    menuItems: React.PropTypes.array.isRequired,
	    selectedIndex: React.PropTypes.number,
	    hideable: React.PropTypes.bool,
	    visible: React.PropTypes.bool,
	    zDepth: React.PropTypes.number,
	    menuItemStyle: React.PropTypes.object,
	    menuItemStyleSubheader: React.PropTypes.object,
	    menuItemStyleLink: React.PropTypes.object,
	    menuItemClassName: React.PropTypes.string,
	    menuItemClassNameSubheader: React.PropTypes.string,
	    menuItemClassNameLink: React.PropTypes.string
	  },

	  getInitialState: function getInitialState() {
	    return {
	      nestedMenuShown: false,
	      activeIndex: 0
	    };
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      autoWidth: true,
	      hideable: false,
	      visible: true,
	      zDepth: 1,
	      onRequestClose: function onRequestClose() {}
	    };
	  },

	  componentDidMount: function componentDidMount() {
	    var el = React.findDOMNode(this);

	    //Set the menu width
	    this._setKeyWidth(el);

	    //Show or Hide the menu according to visibility
	    this._renderVisibility();
	  },

	  componentDidUpdate: function componentDidUpdate(prevProps) {
	    if (this.props.visible !== prevProps.visible || this.props.menuItems.length !== prevProps.menuItems.length) {
	      this._renderVisibility();
	    }
	  },

	  componentWillReceiveProps: function componentWillReceiveProps() {
	    //Set the menu width
	    this._setKeyWidth(React.findDOMNode(this));
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.menu;
	  },

	  getSpacing: function getSpacing() {
	    return this.context.muiTheme.spacing;
	  },

	  getStyles: function getStyles() {
	    var styles = {
	      root: {
	        backgroundColor: this.getTheme().containerBackgroundColor,
	        paddingTop: this.getSpacing().desktopGutterMini,
	        paddingBottom: this.getSpacing().desktopGutterMini,
	        transition: Transitions.easeOut(null, 'height'),
	        outline: 'none !important'
	      },
	      subheader: {
	        paddingLeft: this.context.muiTheme.component.menuSubheader.padding,
	        paddingRight: this.context.muiTheme.component.menuSubheader.padding
	      },
	      hideable: {
	        overflow: 'hidden',
	        position: 'absolute',
	        top: 0,
	        zIndex: 1
	      },
	      item: {
	        height: 34
	      }
	    };

	    return styles;
	  },

	  render: function render() {
	    var styles = this.getStyles();
	    return React.createElement(
	      Paper,
	      {
	        ref: 'paperContainer',
	        tabIndex: '0',
	        onKeyDown: this._onKeyDown,
	        zDepth: this.props.zDepth,
	        style: this.mergeAndPrefix(styles.root, this.props.hideable && styles.hideable, this.props.style) },
	      this._getChildren()
	    );
	  },

	  _getChildren: function _getChildren() {
	    var menuItem = undefined,
	        itemComponent = undefined,
	        isDisabled = undefined;

	    var styles = this.getStyles();

	    this._children = [];
	    //This array is used to keep track of all nested menu refs
	    this._nestedChildren = [];

	    for (var i = 0; i < this.props.menuItems.length; i++) {
	      menuItem = this.props.menuItems[i];
	      isDisabled = menuItem.disabled === undefined ? false : menuItem.disabled;

	      var icon = menuItem.icon;
	      var data = menuItem.data;
	      var attribute = menuItem.attribute;
	      var number = menuItem.number;
	      var toggle = menuItem.toggle;
	      var onTouchTap = menuItem.onTouchTap;

	      var other = _objectWithoutProperties(menuItem, ['icon', 'data', 'attribute', 'number', 'toggle', 'onTouchTap']);

	      switch (menuItem.type) {

	        case MenuItem.Types.LINK:
	          itemComponent = React.createElement(LinkMenuItem, {
	            key: i,
	            index: i,
	            active: this.state.activeIndex === i,
	            text: menuItem.text,
	            disabled: isDisabled,
	            className: this.props.menuItemClassNameLink,
	            style: this.props.menuItemStyleLink,
	            payload: menuItem.payload,
	            target: menuItem.target });
	          break;

	        case MenuItem.Types.SUBHEADER:
	          itemComponent = React.createElement(SubheaderMenuItem, {
	            key: i,
	            index: i,
	            className: this.props.menuItemClassNameSubheader,
	            style: this.mergeAndPrefix(styles.subheader, this.props.menuItemStyleSubheader),
	            firstChild: i === 0,
	            text: menuItem.text });
	          break;

	        case MenuItem.Types.NESTED:
	          var _props2 = this.props,
	              ref = _props2.ref,
	              key = _props2.key,
	              index = _props2.index,
	              zDepth = _props2.zDepth,
	              other = _objectWithoutProperties(_props2, ['ref', 'key', 'index', 'zDepth']);

	          itemComponent = React.createElement(NestedMenuItem, _extends({}, other, {
	            ref: i,
	            key: i,
	            index: i,
	            nested: true,
	            active: this.state.activeIndex === i,
	            text: menuItem.text,
	            disabled: isDisabled,
	            menuItems: menuItem.items,
	            menuItemStyle: this.props.menuItemStyle,
	            zDepth: this.props.zDepth,
	            onMouseEnter: this._onItemActivated,
	            onMouseLeave: this._onItemDeactivated,
	            onItemTap: this._onNestedItemTap }));
	          this._nestedChildren.push(i);
	          break;

	        default:
	          itemComponent = React.createElement(
	            MenuItem,
	            _extends({}, other, {
	              selected: this.props.selectedIndex === i,
	              key: i,
	              index: i,
	              active: this.state.activeIndex === i,
	              icon: menuItem.icon,
	              data: menuItem.data,
	              className: this.props.menuItemClassName,
	              style: this.props.menuItemStyle,
	              attribute: menuItem.attribute,
	              number: menuItem.number,
	              toggle: menuItem.toggle,
	              onToggle: this.props.onToggle,
	              disabled: isDisabled,
	              onTouchTap: this._onItemTap,
	              onMouseEnter: this._onItemActivated,
	              onMouseLeave: this._onItemDeactivated
	            }),
	            menuItem.text
	          );
	      }
	      this._children.push(itemComponent);
	    }

	    return this._children;
	  },

	  _setKeyWidth: function _setKeyWidth(el) {
	    //Update the menu width
	    var menuWidth = '100%';

	    if (this.props.autoWidth) {
	      el.style.width = 'auto';
	      menuWidth = KeyLine.getIncrementalDim(el.offsetWidth) + 'px';
	    }

	    el.style.width = menuWidth;
	  },

	  _renderVisibility: function _renderVisibility() {
	    if (this.props.hideable) {
	      if (this.props.visible) this._expandHideableMenu();else this._collapseHideableMenu();
	    }
	  },

	  _expandHideableMenu: function _expandHideableMenu() {
	    var _this = this;

	    var el = React.findDOMNode(this);
	    var container = React.findDOMNode(this.refs.paperContainer);
	    var padding = this.getSpacing().desktopGutterMini;
	    var height = this._getHiddenMenuHeight(el, padding);

	    //Add transition
	    if (!el.style.transition) {
	      el.style.transition = Transitions.easeOut();
	    }

	    this._nextAnimationFrame(function () {
	      container.style.overflow = 'hidden';

	      // Yeild to the DOM, then apply height and padding. This makes the transition smoother.
	      el.style.paddingTop = padding + 'px';
	      el.style.paddingBottom = padding + 'px';
	      el.style.height = height + 'px';
	      el.style.opacity = 1;

	      //Set the overflow to visible after the animation is done so
	      //that other nested menus can be shown
	      CssEvent.onTransitionEnd(el, function () {
	        //Make sure the menu is open before setting the overflow.
	        //This is to accout for fast clicks
	        if (_this.props.visible) container.style.overflow = 'visible';
	        el.style.transition = null;
	        el.focus();
	      });
	    });
	  },

	  _getHiddenMenuHeight: function _getHiddenMenuHeight(el, padding) {
	    //Add padding to the offset height, because it is not yet set in the style.
	    var height = padding * 2;

	    //Hide the element and allow the browser to automatically resize it.
	    el.style.visibility = 'hidden';
	    el.style.height = 'auto';

	    //Determine the height of the menu.
	    height += el.offsetHeight;

	    //Unhide the menu with the height set back to zero.
	    el.style.height = '0px';
	    el.style.visibility = 'visible';

	    return height;
	  },

	  _collapseHideableMenu: function _collapseHideableMenu() {
	    var el = React.findDOMNode(this);
	    var container = React.findDOMNode(this.refs.paperContainer);
	    var originalOpacity = el.style.opacity;

	    //Add transition
	    if (!el.style.transition && originalOpacity !== '') {
	      el.style.transition = Transitions.easeOut();
	    }

	    this._nextAnimationFrame(function () {
	      //Set the overflow to hidden so that animation works properly
	      container.style.overflow = 'hidden';

	      //Close the menu
	      el.style.opacity = 0;
	      el.style.height = '0px';
	      el.style.paddingTop = '0px';
	      el.style.paddingBottom = '0px';

	      var end = function end() {
	        el.style.transition = null;
	      };

	      if (originalOpacity === '') end();else CssEvent.onTransitionEnd(el, end);
	    });
	  },

	  _nextAnimationFrame: function _nextAnimationFrame(func) {
	    if (window.requestAnimationFrame) {
	      return window.requestAnimationFrame(func);
	    }
	    return setTimeout(func, 16);
	  },

	  _onNestedItemTap: function _onNestedItemTap(e, index, menuItem) {
	    if (this.props.onItemTap) this.props.onItemTap(e, index, menuItem);
	  },

	  _onItemTap: function _onItemTap(e, index) {
	    if (this.props.onItemTap) this.props.onItemTap(e, index, this.props.menuItems[index]);
	  },

	  _onItemToggle: function _onItemToggle(e, index, toggled) {
	    if (this.props.onItemToggle) this.props.onItemToggle(e, index, this.props.menuItems[index], toggled);
	  },
	  _onItemActivated: function _onItemActivated(e, index) {
	    this.setState({ activeIndex: index });
	  },
	  _onItemDeactivated: function _onItemDeactivated(e, index) {
	    if (this.state.activeKey === index) this.setState({ activeIndex: 0 });
	  },

	  _onKeyDown: function _onKeyDown(e) {
	    if (!(this.state.open || this.props.visible)) return;

	    var nested = this._children[this.state.activeIndex];
	    if (nested && nested.props.nested && this.refs[this.state.activeIndex].isOpen()) return;

	    switch (e.which) {
	      case KeyCode.UP:
	        this._activatePreviousItem();
	        break;
	      case KeyCode.DOWN:
	        this._activateNextItem();
	        break;
	      case KeyCode.RIGHT:
	        this._tryToggleNested(this.state.activeIndex);
	        break;
	      case KeyCode.LEFT:
	        this._close();
	        break;
	      case KeyCode.ESC:
	        this._close();
	        break;
	      case KeyCode.TAB:
	        this._close();
	        return; // so the tab key can propagate
	      case KeyCode.ENTER:
	      case KeyCode.SPACE:
	        e.stopPropagation(); // needs called before the close
	        this._triggerSelection(e);
	        break;
	      default:
	        return; //important
	    }
	    e.preventDefault();
	    e.stopPropagation();
	  },

	  _activatePreviousItem: function _activatePreviousItem() {
	    var active = this.state.activeIndex || 0;
	    active = Math.max(active - 1, 0);
	    this.setState({ activeIndex: active });
	  },

	  _activateNextItem: function _activateNextItem() {
	    var active = this.state.activeIndex || 0;
	    active = Math.min(active + 1, this._children.length - 1);
	    this.setState({ activeIndex: active });
	  },

	  _triggerSelection: function _triggerSelection(e) {
	    var index = this.state.activeIndex || 0;
	    this._onItemTap(e, index);
	  },

	  _close: function _close() {
	    this.props.onRequestClose();
	  },

	  _tryToggleNested: function _tryToggleNested(index) {
	    var item = this.refs[index];
	    if (item && item.toggleNestedMenu) item.toggleNestedMenu();
	  }

	});

	module.exports = Menu;

/***/ },
/* 298 */
/***/ function(module, exports) {

	"use strict";

	module.exports = {

	  Desktop: {
	    GUTTER: 24,
	    GUTTER_LESS: 16,
	    INCREMENT: 64,
	    MENU_ITEM_HEIGHT: 32
	  },

	  getIncrementalDim: function getIncrementalDim(dim) {
	    return Math.ceil(dim / this.Desktop.INCREMENT) * this.Desktop.INCREMENT;
	  }
	};

/***/ },
/* 299 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(206);
	var FontIcon = __webpack_require__(237);
	var Toggle = __webpack_require__(300);

	var Types = {
	  LINK: 'LINK',
	  SUBHEADER: 'SUBHEADER',
	  NESTED: 'NESTED'
	};

	var MenuItem = React.createClass({
	  displayName: 'MenuItem',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    index: React.PropTypes.number.isRequired,
	    className: React.PropTypes.string,
	    iconClassName: React.PropTypes.string,
	    iconRightClassName: React.PropTypes.string,
	    iconStyle: React.PropTypes.object,
	    iconRightStyle: React.PropTypes.object,
	    attribute: React.PropTypes.string,
	    number: React.PropTypes.string,
	    data: React.PropTypes.string,
	    toggle: React.PropTypes.bool,
	    disabled: React.PropTypes.bool,
	    onTouchTap: React.PropTypes.func,
	    onToggle: React.PropTypes.func,
	    selected: React.PropTypes.bool,
	    active: React.PropTypes.bool
	  },

	  statics: {
	    Types: Types
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      toggle: false,
	      disabled: false,
	      active: false
	    };
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.menuItem;
	  },

	  getSpacing: function getSpacing() {
	    return this.context.muiTheme.spacing;
	  },

	  getStyles: function getStyles() {
	    var styles = {
	      root: {
	        userSelect: 'none',
	        cursor: 'pointer',
	        lineHeight: this.getTheme().height + 'px',
	        paddingLeft: this.getTheme().padding,
	        paddingRight: this.getTheme().padding,
	        color: this.context.muiTheme.palette.textColor
	      },
	      number: {
	        float: 'right',
	        width: 24,
	        textAlign: 'center'
	      },
	      attribute: {
	        float: 'right'
	      },
	      iconRight: {
	        lineHeight: this.getTheme().height + 'px',
	        float: 'right'
	      },
	      icon: {
	        float: 'left',
	        lineHeight: this.getTheme().height + 'px',
	        marginRight: this.getSpacing().desktopGutter
	      },
	      data: {
	        display: 'block',
	        paddingLeft: this.getSpacing().desktopGutter * 2,
	        lineHeight: this.getTheme().dataHeight + 'px',
	        height: this.getTheme().dataHeight + 'px',
	        verticalAlign: 'top',
	        top: -12,
	        position: 'relative',
	        fontWeight: 300,
	        color: this.context.muiTheme.palette.textColor
	      },
	      toggle: {
	        marginTop: (this.getTheme().height - this.context.muiTheme.component.radioButton.size) / 2,
	        float: 'right',
	        width: 42
	      },
	      rootWhenHovered: {
	        backgroundColor: this.getTheme().hoverColor
	      },
	      rootWhenSelected: {
	        color: this.getTheme().selectedTextColor
	      },
	      rootWhenDisabled: {
	        cursor: 'default',
	        color: this.context.muiTheme.palette.disabledColor
	      }
	    };

	    return styles;
	  },

	  render: function render() {
	    var icon = undefined;
	    var data = undefined;
	    var iconRight = undefined;
	    var attribute = undefined;
	    var number = undefined;
	    var toggleElement = undefined;
	    var styles = this.getStyles();

	    if (this.props.iconClassName) icon = React.createElement(FontIcon, { style: this.mergeAndPrefix(styles.icon, this.props.iconStyle), className: this.props.iconClassName });
	    if (this.props.iconRightClassName) iconRight = React.createElement(FontIcon, { style: this.mergeAndPrefix(styles.iconRight, this.props.iconRightStyle), className: this.props.iconRightClassName });
	    if (this.props.data) data = React.createElement(
	      'span',
	      { style: this.mergeAndPrefix(styles.data) },
	      this.props.data
	    );
	    if (this.props.number !== undefined) number = React.createElement(
	      'span',
	      { style: this.mergeAndPrefix(styles.number) },
	      this.props.number
	    );
	    if (this.props.attribute !== undefined) attribute = React.createElement(
	      'span',
	      { style: this.mergeAndPrefix(styles.style) },
	      this.props.attribute
	    );
	    if (this.props.icon) icon = this.props.icon;

	    if (this.props.toggle) {
	      var _props = this.props;
	      var toggle = _props.toggle;
	      var onTouchTap = _props.onTouchTap;
	      var onToggle = _props.onToggle;
	      var onMouseEnter = _props.onMouseEnter;
	      var onMouseLeave = _props.onMouseLeave;
	      var children = _props.children;
	      var label = _props.label;
	      var style = _props.style;

	      var other = _objectWithoutProperties(_props, ['toggle', 'onTouchTap', 'onToggle', 'onMouseEnter', 'onMouseLeave', 'children', 'label', 'style']);

	      toggleElement = React.createElement(Toggle, _extends({}, other, { onToggle: this._handleToggle, style: styles.toggle }));
	    }

	    return React.createElement(
	      'div',
	      {
	        key: this.props.index,
	        className: this.props.className,
	        onTouchTap: this._handleTouchTap,
	        onMouseEnter: this._handleMouseEnter,
	        onMouseLeave: this._handleMouseLeave,
	        style: this.mergeAndPrefix(styles.root, this.props.selected && styles.rootWhenSelected, this.props.active && !this.props.disabled && styles.rootWhenHovered, this.props.style, this.props.disabled && styles.rootWhenDisabled) },
	      icon,
	      this.props.children,
	      data,
	      attribute,
	      number,
	      toggleElement,
	      iconRight
	    );
	  },

	  _handleTouchTap: function _handleTouchTap(e) {
	    if (!this.props.disabled && this.props.onTouchTap) this.props.onTouchTap(e, this.props.index);
	  },

	  _handleToggle: function _handleToggle(e, toggled) {
	    if (!this.props.disabled && this.props.onToggle) this.props.onToggle(e, this.props.index, toggled);
	  },

	  _handleMouseEnter: function _handleMouseEnter(e) {
	    if (!this.props.disabled && this.props.onMouseEnter) this.props.onMouseEnter(e, this.props.index);
	  },

	  _handleMouseLeave: function _handleMouseLeave(e) {
	    if (!this.props.disabled && this.props.onMouseLeave) this.props.onMouseLeave(e, this.props.index);
	  }
	});

	module.exports = MenuItem;

/***/ },
/* 300 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(206);
	var Transitions = __webpack_require__(230);
	var Paper = __webpack_require__(243);
	var EnhancedSwitch = __webpack_require__(263);

	var Toggle = React.createClass({
	  displayName: 'Toggle',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    elementStyle: React.PropTypes.object,
	    labelStyle: React.PropTypes.object,
	    onToggle: React.PropTypes.func,
	    toggled: React.PropTypes.bool,
	    defaultToggled: React.PropTypes.bool
	  },

	  getInitialState: function getInitialState() {
	    return {
	      switched: this.props.toggled || this.props.defaultToggled || this.props.valueLink && this.props.valueLink.value || false
	    };
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.toggle;
	  },

	  getStyles: function getStyles() {
	    var toggleSize = 20;
	    var toggleTrackWidth = 36;
	    var styles = {
	      icon: {
	        width: 36,
	        padding: '4px 0px 6px 2px'
	      },
	      toggleElement: {
	        width: toggleTrackWidth
	      },
	      track: {
	        transition: Transitions.easeOut(),
	        width: '100%',
	        height: 14,
	        borderRadius: 30,
	        backgroundColor: this.getTheme().trackOffColor
	      },
	      thumb: {
	        transition: Transitions.easeOut(),
	        position: 'absolute',
	        top: 1,
	        left: 0,
	        width: toggleSize,
	        height: toggleSize,
	        lineHeight: '24px',
	        borderRadius: '50%',
	        backgroundColor: this.getTheme().thumbOffColor
	      },
	      trackWhenSwitched: {
	        backgroundColor: this.getTheme().trackOnColor
	      },
	      thumbWhenSwitched: {
	        backgroundColor: this.getTheme().thumbOnColor,
	        left: '100%'
	      },
	      trackWhenDisabled: {
	        backgroundColor: this.getTheme().trackDisabledColor
	      },
	      thumbWhenDisabled: {
	        backgroundColor: this.getTheme().thumbDisabledColor
	      },
	      label: {
	        color: this.props.disabled ? this.getTheme().labelDisabledColor : this.getTheme().labelColor
	      }
	    };

	    return styles;
	  },

	  render: function render() {
	    var _props = this.props;
	    var onToggle = _props.onToggle;

	    var other = _objectWithoutProperties(_props, ['onToggle']);

	    var styles = this.getStyles();

	    var trackStyles = this.mergeAndPrefix(styles.track, this.props.trackStyle, this.state.switched && styles.trackWhenSwitched, this.props.disabled && styles.trackWhenDisabled);

	    var thumbStyles = this.mergeAndPrefix(styles.thumb, this.props.thumbStyle, this.state.switched && styles.thumbWhenSwitched, this.props.disabled && styles.thumbWhenDisabled);

	    if (this.state.switched) {
	      thumbStyles.marginLeft = '-' + thumbStyles.width;
	    }

	    var toggleElementStyles = this.mergeAndPrefix(styles.toggleElement, this.props.elementStyle);

	    var toggleElement = React.createElement(
	      'div',
	      { style: toggleElementStyles },
	      React.createElement('div', { style: trackStyles }),
	      React.createElement(Paper, { style: thumbStyles, circle: true, zDepth: 1 })
	    );

	    var customRippleStyle = this.mergeAndPrefix({
	      top: -10,
	      left: -10
	    }, this.props.rippleStyle);

	    var rippleColor = this.state.switched ? this.getTheme().thumbOnColor : this.context.muiTheme.component.textColor;

	    var iconStyle = this.mergeAndPrefix(styles.icon, this.props.iconStyle);

	    var labelStyle = this.mergeAndPrefix(styles.label, this.props.labelStyle);

	    var enhancedSwitchProps = {
	      ref: 'enhancedSwitch',
	      inputType: 'checkbox',
	      switchElement: toggleElement,
	      rippleStyle: customRippleStyle,
	      rippleColor: rippleColor,
	      iconStyle: iconStyle,
	      trackStyle: trackStyles,
	      thumbStyle: thumbStyles,
	      labelStyle: labelStyle,
	      switched: this.state.switched,
	      onSwitch: this._handleToggle,
	      onParentShouldUpdate: this._handleStateChange,
	      defaultSwitched: this.props.defaultToggled,
	      labelPosition: this.props.labelPosition ? this.props.labelPosition : 'left'
	    };

	    if (this.props.hasOwnProperty('toggled')) enhancedSwitchProps.checked = this.props.toggled;

	    return React.createElement(EnhancedSwitch, _extends({}, other, enhancedSwitchProps));
	  },

	  isToggled: function isToggled() {
	    return this.refs.enhancedSwitch.isSwitched();
	  },

	  setToggled: function setToggled(newToggledValue) {
	    this.refs.enhancedSwitch.setSwitched(newToggledValue);
	  },

	  _handleToggle: function _handleToggle(e, isInputChecked) {
	    if (this.props.onToggle) this.props.onToggle(e, isInputChecked);
	  },

	  _handleStateChange: function _handleStateChange(newSwitched) {
	    this.setState({ switched: newSwitched });
	  }

	});

	module.exports = Toggle;

/***/ },
/* 301 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(206);

	var LinkMenuItem = React.createClass({
	  displayName: 'LinkMenuItem',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    index: React.PropTypes.number.isRequired,
	    payload: React.PropTypes.string.isRequired,
	    text: React.PropTypes.string.isRequired,
	    target: React.PropTypes.string,
	    active: React.PropTypes.bool,
	    disabled: React.PropTypes.bool,
	    className: React.PropTypes.string
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      active: false,
	      disabled: false
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      hovered: false
	    };
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.menuItem;
	  },

	  getStyles: function getStyles() {
	    var style = {
	      root: {
	        userSelect: 'none',
	        cursor: 'pointer',
	        display: 'block',
	        lineHeight: this.getTheme().height + 'px',
	        paddingLeft: this.getTheme().padding,
	        paddingRight: this.getTheme().padding
	      },
	      rootWhenHovered: {
	        backgroundColor: this.getTheme().hoverColor
	      },
	      rootWhenSelected: {
	        color: this.getTheme().selectedTextColor
	      },
	      rootWhenDisabled: {
	        cursor: 'default',
	        color: this.context.muiTheme.palette.disabledColor
	      }
	    };

	    return style;
	  },

	  render: function render() {
	    var onClickHandler = this.props.disabled ? this._stopLink : undefined;
	    // Prevent context menu 'Open In New Tab/Window'
	    var linkAttribute = this.props.disabled ? 'data-href' : 'href';
	    var link = {};
	    link[linkAttribute] = this.props.payload;

	    var styles = this.getStyles();

	    var linkStyles = this.mergeAndPrefix(styles.root, this.props.selected && styles.rootWhenSelected, this.props.selected && styles.rootWhenSelected, this.props.active && !this.props.disabled && styles.rootWhenHovered, this.props.style, this.props.disabled && styles.rootWhenDisabled);

	    return React.createElement(
	      'a',
	      _extends({
	        key: this.props.index,
	        target: this.props.target,
	        style: linkStyles }, link, {
	        className: this.props.className,
	        onClick: onClickHandler,
	        onMouseEnter: this._handleMouseEnter,
	        onMouseLeave: this._handleMouseLeave }),
	      this.props.text
	    );
	  },

	  _stopLink: function _stopLink(event) {
	    event.preventDefault();
	  },

	  _handleMouseEnter: function _handleMouseEnter(e) {
	    this.setState({ hovered: true });
	    if (!this.props.disabled && this.props.onMouseEnter) this.props.onMouseEnter(e);
	  },

	  _handleMouseLeave: function _handleMouseLeave(e) {
	    this.setState({ hovered: false });
	    if (!this.props.disabled && this.props.onMouseLeave) this.props.onMouseLeave(e);
	  }
	});

	module.exports = LinkMenuItem;

/***/ },
/* 302 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(206);
	var Typography = __webpack_require__(240);

	var SubheaderMenuItem = React.createClass({
	  displayName: 'SubheaderMenuItem',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    index: React.PropTypes.number.isRequired,
	    text: React.PropTypes.string.isRequired,
	    firstChild: React.PropTypes.bool,
	    className: React.PropTypes.string
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.menuSubheader;
	  },

	  getSpacing: function getSpacing() {
	    return this.context.muiTheme.spacing;
	  },

	  getStyles: function getStyles() {
	    var gutterMini = this.getSpacing().desktopGutterMini;
	    var subheaderHeight = this.getSpacing().desktopSubheaderHeight;
	    var styles = {
	      root: {
	        boxSizing: 'border-box',
	        fontSize: '13px',
	        letterSpacing: 0,
	        fontWeight: Typography.fontWeightMedium,
	        margin: 0,
	        height: subheaderHeight + gutterMini,
	        lineHeight: subheaderHeight + 'px',
	        color: this.getTheme().textColor,
	        borderTop: 'solid 1px ' + this.getTheme().borderColor,
	        paddingTop: gutterMini,
	        marginTop: gutterMini
	      },
	      rootWhenFirstChild: {
	        height: subheaderHeight,
	        borderTop: 'none',
	        paddingTop: 0,
	        marginTop: 0
	      }
	    };

	    return styles;
	  },

	  render: function render() {
	    return React.createElement(
	      'div',
	      {
	        key: this.props.index,
	        className: this.props.className,
	        style: this.mergeAndPrefix(this.getStyles().root, this.props.firstChild && this.getStyles().rootWhenFirstChild, this.props.style) },
	      this.props.text
	    );
	  }

	});

	module.exports = SubheaderMenuItem;

/***/ },
/* 303 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(206);
	var Transitions = __webpack_require__(230);
	var KeyCode = __webpack_require__(205);
	var DropDownArrow = __webpack_require__(304);
	var Paper = __webpack_require__(243);
	var Menu = __webpack_require__(297);
	var ClearFix = __webpack_require__(267);

	var DropDownMenu = React.createClass({
	  displayName: 'DropDownMenu',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  // The nested styles for drop-down-menu are modified by toolbar and possibly
	  // other user components, so it will give full access to its js styles rather
	  // than just the parent.
	  propTypes: {
	    className: React.PropTypes.string,
	    displayMember: React.PropTypes.string,
	    valueMember: React.PropTypes.string,
	    autoWidth: React.PropTypes.bool,
	    onChange: React.PropTypes.func,
	    menuItems: React.PropTypes.array.isRequired,
	    menuItemStyle: React.PropTypes.object,
	    underlineStyle: React.PropTypes.object,
	    iconStyle: React.PropTypes.object,
	    labelStyle: React.PropTypes.object,
	    selectedIndex: React.PropTypes.number
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      autoWidth: true,
	      valueMember: 'payload',
	      displayMember: 'text'
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      open: false,
	      isHovered: false,
	      selectedIndex: this.props.hasOwnProperty('value') || this.props.hasOwnProperty('valueLink') ? null : this.props.selectedIndex || 0
	    };
	  },

	  componentDidMount: function componentDidMount() {
	    if (this.props.autoWidth) this._setWidth();
	    if (this.props.hasOwnProperty('selectedIndex')) this._setSelectedIndex(this.props);
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    if (this.props.autoWidth) this._setWidth();
	    if (nextProps.hasOwnProperty('value') || nextProps.hasOwnProperty('valueLink')) {
	      return;
	    } else if (nextProps.hasOwnProperty('selectedIndex')) {
	      this._setSelectedIndex(nextProps);
	    }
	  },

	  getStyles: function getStyles() {
	    var zIndex = 5; // As AppBar
	    var spacing = this.context.muiTheme.spacing;
	    var accentColor = this.context.muiTheme.component.dropDownMenu.accentColor;
	    var backgroundColor = this.context.muiTheme.component.menu.backgroundColor;
	    var styles = {
	      root: {
	        transition: Transitions.easeOut(),
	        position: 'relative',
	        display: 'inline-block',
	        height: spacing.desktopSubheaderHeight,
	        fontSize: spacing.desktopDropDownMenuFontSize,
	        outline: 'none'
	      },
	      control: {
	        cursor: 'pointer',
	        position: 'static',
	        height: '100%'
	      },
	      controlBg: {
	        transition: Transitions.easeOut(),
	        backgroundColor: backgroundColor,
	        height: '100%',
	        width: '100%',
	        opacity: 0
	      },
	      icon: {
	        position: 'absolute',
	        top: (spacing.desktopToolbarHeight - 24) / 2,
	        right: spacing.desktopGutterLess,
	        fill: this.context.muiTheme.component.dropDownMenu.accentColor
	      },
	      label: {
	        transition: Transitions.easeOut(),
	        lineHeight: spacing.desktopToolbarHeight + 'px',
	        position: 'absolute',
	        paddingLeft: spacing.desktopGutter,
	        top: 0,
	        opacity: 1,
	        color: this.context.muiTheme.palette.textColor
	      },
	      underline: {
	        borderTop: 'solid 1px ' + accentColor,
	        margin: '-1px ' + spacing.desktopGutter + 'px'
	      },
	      menu: {
	        zIndex: zIndex + 1
	      },
	      menuItem: {
	        paddingRight: spacing.iconSize + spacing.desktopGutterLess + spacing.desktopGutterMini,
	        height: spacing.desktopDropDownMenuItemHeight,
	        lineHeight: spacing.desktopDropDownMenuItemHeight + 'px',
	        whiteSpace: 'nowrap'
	      },
	      rootWhenOpen: {
	        opacity: 1
	      },
	      labelWhenOpen: {
	        opacity: 0,
	        top: spacing.desktopToolbarHeight / 2
	      },
	      overlay: {
	        height: '100%',
	        width: '100%',
	        position: 'fixed',
	        top: 0,
	        left: 0,
	        zIndex: zIndex
	      }
	    };

	    return styles;
	  },

	  getInputNode: function getInputNode() {
	    var root = this.refs.root;
	    var item = this.props.menuItems[this.state.selectedIndex];
	    if (item) {
	      root.value = item[this.props.displayMember];
	    }

	    return root;
	  },

	  render: function render() {
	    var _this = this;
	    var styles = this.getStyles();
	    var selectedIndex = this.state.selectedIndex;
	    var displayValue = '';
	    if (selectedIndex) {
	      if (process.env.NODE_ENV !== 'production') {
	        console.assert(!!this.props.menuItems[selectedIndex], 'SelectedIndex of ' + selectedIndex + ' does not exist in menuItems.');
	      }
	    } else {
	      if (this.props.valueMember && (this.props.valueLink || this.props.value)) {
	        var value = this.props.value || this.props.valueLink.value;
	        for (var i = 0; i < this.props.menuItems.length; i++) {
	          if (this.props.menuItems[i][this.props.valueMember] === value) {
	            selectedIndex = i;
	          }
	        }
	      }
	    }

	    var selectedItem = this.props.menuItems[selectedIndex];
	    if (selectedItem) {
	      displayValue = selectedItem[this.props.displayMember];
	    }

	    var menuItems = this.props.menuItems.map(function (item) {
	      item.text = item[_this.props.displayMember];
	      item.payload = item[_this.props.valueMember];
	      return item;
	    });

	    return React.createElement(
	      'div',
	      {
	        ref: 'root',
	        onMouseLeave: this._handleMouseLeave,
	        onMouseEnter: this._handleMouseEnter,
	        onKeyDown: this._onKeyDown,
	        onFocus: this.props.onFocus,
	        onBlur: this.props.onBlur,
	        className: this.props.className,
	        style: this.mergeAndPrefix(styles.root, this.state.open && styles.rootWhenOpen, this.props.style) },
	      React.createElement(
	        ClearFix,
	        { style: this.mergeAndPrefix(styles.control), onTouchTap: this._onControlClick },
	        React.createElement(Paper, { style: this.mergeAndPrefix(styles.controlBg), zDepth: 0 }),
	        React.createElement(
	          'div',
	          { style: this.mergeAndPrefix(styles.label, this.state.open && styles.labelWhenOpen, this.props.labelStyle) },
	          displayValue
	        ),
	        React.createElement(DropDownArrow, { style: this.mergeAndPrefix(styles.icon, this.props.iconStyle) }),
	        React.createElement('div', { style: this.mergeAndPrefix(styles.underline, this.props.underlineStyle) })
	      ),
	      React.createElement(Menu, {
	        ref: 'menuItems',
	        autoWidth: this.props.autoWidth,
	        selectedIndex: selectedIndex,
	        menuItems: menuItems,
	        style: styles.menu,
	        menuItemStyle: this.mergeAndPrefix(styles.menuItem, this.props.menuItemStyle),
	        hideable: true,
	        visible: this.state.open,
	        onRequestClose: this._onMenuRequestClose,
	        onItemTap: this._onMenuItemClick }),
	      this.state.open && React.createElement('div', { style: styles.overlay, onTouchTap: this._handleOverlayTouchTap })
	    );
	  },

	  _setWidth: function _setWidth() {
	    var el = React.findDOMNode(this);
	    var menuItemsDom = React.findDOMNode(this.refs.menuItems);
	    if (!this.props.style || !this.props.style.hasOwnProperty('width')) {
	      el.style.width = 'auto';
	      el.style.width = menuItemsDom.offsetWidth + 'px';
	    }
	  },

	  _setSelectedIndex: function _setSelectedIndex(props) {
	    var selectedIndex = props.selectedIndex;

	    if (process.env.NODE_ENV !== 'production' && selectedIndex < 0) {
	      console.warn('Cannot set selectedIndex to a negative index.', selectedIndex);
	    }

	    this.setState({ selectedIndex: selectedIndex > -1 ? selectedIndex : 0 });
	  },

	  _onControlClick: function _onControlClick() {
	    this.setState({ open: !this.state.open });
	  },

	  _onKeyDown: function _onKeyDown(e) {
	    switch (e.which) {
	      case KeyCode.UP:
	        if (!this.state.open) {
	          this._selectPreviousItem();
	        } else {
	          if (e.altKey) {
	            this.setState({ open: false });
	          }
	        }
	        break;
	      case KeyCode.DOWN:
	        if (!this.state.open) {
	          if (e.altKey) {
	            this.setState({ open: true });
	          } else {
	            this._selectNextItem();
	          }
	        }
	        break;
	      case KeyCode.ENTER:
	      case KeyCode.SPACE:
	        this.setState({ open: true });
	        break;
	      default:
	        return; //important
	    }
	    e.preventDefault();
	  },

	  _onMenuItemClick: function _onMenuItemClick(e, key, payload) {
	    if (this.props.onChange && this.state.selectedIndex !== key) {
	      var selectedItem = this.props.menuItems[key];
	      if (selectedItem) {
	        e.target.value = selectedItem[this.props.valueMember];
	      }

	      if (this.props.valueLink) {
	        this.props.valueLink.requestChange(e.target.value);
	      } else {
	        this.props.onChange(e, key, payload);
	      }
	    }

	    this.setState({
	      selectedIndex: key,
	      value: e.target.value,
	      open: false,
	      isHovered: false
	    });
	  },

	  _onMenuRequestClose: function _onMenuRequestClose() {
	    this.setState({ open: false });
	  },

	  _handleMouseEnter: function _handleMouseEnter() {
	    this.setState({ isHovered: true });
	  },

	  _handleMouseLeave: function _handleMouseLeave() {
	    this.setState({ isHovered: false });
	  },

	  _selectPreviousItem: function _selectPreviousItem() {
	    this.setState({ selectedIndex: Math.max(this.state.selectedIndex - 1, 0) });
	  },

	  _selectNextItem: function _selectNextItem() {
	    this.setState({ selectedIndex: Math.min(this.state.selectedIndex + 1, this.props.menuItems.length - 1) });
	  },

	  _handleOverlayTouchTap: function _handleOverlayTouchTap() {
	    this.setState({
	      open: false
	    });
	  }

	});

	module.exports = DropDownMenu;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 304 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(207);
	var PureRenderMixin = React.addons.PureRenderMixin;
	var SvgIcon = __webpack_require__(242);

	var NavigationArrowDropDown = React.createClass({
	  displayName: 'NavigationArrowDropDown',

	  mixins: [PureRenderMixin],

	  render: function render() {
	    return React.createElement(
	      SvgIcon,
	      this.props,
	      React.createElement('path', { d: 'M7 10l5 5 5-5z' })
	    );
	  }

	});

	module.exports = NavigationArrowDropDown;

/***/ },
/* 305 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(206);
	var Transitions = __webpack_require__(230);
	var ColorManipulator = __webpack_require__(257);
	var EnhancedButton = __webpack_require__(204);
	var FontIcon = __webpack_require__(237);
	var Paper = __webpack_require__(243);
	var Children = __webpack_require__(239);

	var getZDepth = function getZDepth(disabled) {
	  var zDepth = disabled ? 0 : 2;
	  return {
	    zDepth: zDepth,
	    initialZDepth: zDepth
	  };
	};

	var FloatingActionButton = React.createClass({
	  displayName: 'FloatingActionButton',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    disabled: React.PropTypes.bool,
	    iconClassName: React.PropTypes.string,
	    iconStyle: React.PropTypes.object,
	    mini: React.PropTypes.bool,
	    onMouseDown: React.PropTypes.func,
	    onMouseUp: React.PropTypes.func,
	    onMouseLeave: React.PropTypes.func,
	    onTouchEnd: React.PropTypes.func,
	    onTouchStart: React.PropTypes.func,
	    secondary: React.PropTypes.bool
	  },

	  getInitialState: function getInitialState() {
	    var zDepth = this.props.disabled ? 0 : 2;
	    return {
	      hovered: false,
	      initialZDepth: zDepth,
	      touch: false,
	      zDepth: zDepth
	    };
	  },

	  componentWillMount: function componentWillMount() {
	    this.setState(getZDepth(this.props.disabled));
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(newProps) {
	    if (newProps.disabled !== this.props.disabled) {
	      this.setState(getZDepth(newProps.disabled));
	    }
	  },

	  componentDidMount: function componentDidMount() {
	    if (process.env.NODE_ENV !== 'production') {
	      if (this.props.iconClassName && this.props.children) {
	        var warning = 'You have set both an iconClassName and a child icon. ' + 'It is recommended you use only one method when adding ' + 'icons to FloatingActionButtons.';
	        console.warn(warning);
	      }
	    }
	  },

	  _getBackgroundColor: function _getBackgroundColor() {
	    return this.props.disabled ? this.getTheme().disabledColor : this.props.secondary ? this.getTheme().secondaryColor : this.getTheme().color;
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.floatingActionButton;
	  },

	  _getIconColor: function _getIconColor() {
	    return this.props.disabled ? this.getTheme().disabledTextColor : this.props.secondary ? this.getTheme().secondaryIconColor : this.getTheme().iconColor;
	  },

	  getStyles: function getStyles() {
	    var themeVariables = this.context.muiTheme.component.floatingActionButton;

	    var styles = {
	      root: {
	        transition: Transitions.easeOut(),
	        display: 'inline-block'
	      },
	      container: {
	        transition: Transitions.easeOut(),
	        position: 'relative',
	        height: themeVariables.buttonSize,
	        width: themeVariables.buttonSize,
	        padding: 0,
	        overflow: 'hidden',
	        backgroundColor: this._getBackgroundColor(),
	        borderRadius: '50%',
	        textAlign: 'center',
	        verticalAlign: 'bottom',
	        //This is need so that ripples do not bleed
	        //past border radius.
	        //See: http://stackoverflow.com/questions/17298739/css-overflow-hidden-not-working-in-chrome-when-parent-has-border-radius-and-chil
	        transform: 'translate3d(0, 0, 0)'
	      },
	      containerWhenMini: {
	        height: themeVariables.miniSize,
	        width: themeVariables.miniSize
	      },
	      overlay: {
	        transition: Transitions.easeOut(),
	        top: 0
	      },
	      overlayWhenHovered: {
	        backgroundColor: ColorManipulator.fade(this._getIconColor(), 0.4)
	      },
	      icon: {
	        height: themeVariables.buttonSize,
	        lineHeight: themeVariables.buttonSize + 'px',
	        fill: themeVariables.iconColor,
	        color: this._getIconColor()
	      },
	      iconWhenMini: {
	        height: themeVariables.miniSize,
	        lineHeight: themeVariables.miniSize + 'px'
	      }
	    };
	    return styles;
	  },

	  render: function render() {
	    var _props = this.props;
	    var disabled = _props.disabled;
	    var mini = _props.mini;
	    var secondary = _props.secondary;
	    var iconStyle = _props.iconStyle;
	    var iconClassName = _props.iconClassName;

	    var other = _objectWithoutProperties(_props, ['disabled', 'mini', 'secondary', 'iconStyle', 'iconClassName']);

	    var styles = this.getStyles();

	    var iconElement = undefined;
	    if (iconClassName) {
	      iconElement = React.createElement(FontIcon, {
	        className: iconClassName,
	        style: this.mergeAndPrefix(styles.icon, mini && styles.iconWhenMini, iconStyle) });
	    }

	    var children = Children.extend(this.props.children, {
	      style: this.mergeAndPrefix(styles.icon, mini && styles.iconWhenMini, iconStyle)
	    });

	    var buttonEventHandlers = disabled ? null : {
	      onMouseDown: this._handleMouseDown,
	      onMouseUp: this._handleMouseUp,
	      onMouseLeave: this._handleMouseLeave,
	      onMouseEnter: this._handleMouseEnter,
	      onTouchStart: this._handleTouchStart,
	      onTouchEnd: this._handleTouchEnd,
	      onKeyboardFocus: this._handleKeyboardFocus
	    };

	    return React.createElement(
	      Paper,
	      {
	        style: this.mergeAndPrefix(styles.root, this.props.style),
	        zDepth: this.state.zDepth,
	        circle: true },
	      React.createElement(
	        EnhancedButton,
	        _extends({}, other, buttonEventHandlers, {
	          ref: 'container',
	          disabled: disabled,
	          style: this.mergeAndPrefix(styles.container, this.props.mini && styles.containerWhenMini),
	          focusRippleColor: styles.icon.color,
	          touchRippleColor: styles.icon.color }),
	        React.createElement(
	          'div',
	          {
	            ref: 'overlay',
	            style: this.mergeAndPrefix(styles.overlay, this.state.hovered && !this.props.disabled && styles.overlayWhenHovered) },
	          iconElement,
	          children
	        )
	      )
	    );
	  },

	  _handleMouseDown: function _handleMouseDown(e) {
	    //only listen to left clicks
	    if (e.button === 0) {
	      this.setState({ zDepth: this.state.initialZDepth + 1 });
	    }
	    if (this.props.onMouseDown) this.props.onMouseDown(e);
	  },

	  _handleMouseUp: function _handleMouseUp(e) {
	    this.setState({ zDepth: this.state.initialZDepth });
	    if (this.props.onMouseUp) this.props.onMouseUp(e);
	  },

	  _handleMouseLeave: function _handleMouseLeave(e) {
	    if (!this.refs.container.isKeyboardFocused()) this.setState({ zDepth: this.state.initialZDepth, hovered: false });
	    if (this.props.onMouseLeave) this.props.onMouseLeave(e);
	  },

	  _handleMouseEnter: function _handleMouseEnter(e) {
	    if (!this.refs.container.isKeyboardFocused() && !this.state.touch) {
	      this.setState({ hovered: true });
	    }
	    if (this.props.onMouseEnter) this.props.onMouseEnter(e);
	  },

	  _handleTouchStart: function _handleTouchStart(e) {
	    this.setState({
	      touch: true,
	      zDepth: this.state.initialZDepth + 1
	    });
	    if (this.props.onTouchStart) this.props.onTouchStart(e);
	  },

	  _handleTouchEnd: function _handleTouchEnd(e) {
	    this.setState({ zDepth: this.state.initialZDepth });
	    if (this.props.onTouchEnd) this.props.onTouchEnd(e);
	  },

	  _handleKeyboardFocus: function _handleKeyboardFocus(e, keyboardFocused) {
	    if (keyboardFocused && !this.props.disabled) {
	      this.setState({ zDepth: this.state.initialZDepth + 1 });
	      React.findDOMNode(this.refs.overlay).style.backgroundColor = ColorManipulator.fade(this.getStyles().icon.color, 0.4);
	    } else if (!this.state.hovered) {
	      this.setState({ zDepth: this.state.initialZDepth });
	      React.findDOMNode(this.refs.overlay).style.backgroundColor = 'transparent';
	    }
	  }

	});

	module.exports = FloatingActionButton;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 306 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(207);
	var ReactTransitionGroup = React.addons.TransitionGroup;
	var ClickAwayable = __webpack_require__(296);
	var StylePropable = __webpack_require__(206);
	var Events = __webpack_require__(265);
	var PropTypes = __webpack_require__(236);
	var Menu = __webpack_require__(307);

	var IconMenu = React.createClass({
	  displayName: 'IconMenu',

	  mixins: [StylePropable, ClickAwayable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    closeOnItemTouchTap: React.PropTypes.bool,
	    iconButtonElement: React.PropTypes.element.isRequired,
	    openDirection: PropTypes.corners,
	    onItemTouchTap: React.PropTypes.func,
	    onKeyboardFocus: React.PropTypes.func,
	    onMouseDown: React.PropTypes.func,
	    onMouseLeave: React.PropTypes.func,
	    onMouseEnter: React.PropTypes.func,
	    onMouseUp: React.PropTypes.func,
	    onTouchTap: React.PropTypes.func,
	    menuStyle: React.PropTypes.object,
	    touchTapCloseDelay: React.PropTypes.number
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      closeOnItemTouchTap: true,
	      openDirection: 'bottom-left',
	      onItemTouchTap: function onItemTouchTap() {},
	      onKeyboardFocus: function onKeyboardFocus() {},
	      onMouseDown: function onMouseDown() {},
	      onMouseLeave: function onMouseLeave() {},
	      onMouseEnter: function onMouseEnter() {},
	      onMouseUp: function onMouseUp() {},
	      onTouchTap: function onTouchTap() {},
	      touchTapCloseDelay: 200
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      iconButtonRef: this.props.iconButtonElement.props.ref || 'iconButton',
	      menuInitiallyKeyboardFocused: false,
	      open: false
	    };
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    if (this._timeout) clearTimeout(this._timeout);
	  },

	  componentClickAway: function componentClickAway() {
	    this.close();
	  },

	  render: function render() {
	    var _this = this;

	    var _props = this.props;
	    var closeOnItemTouchTap = _props.closeOnItemTouchTap;
	    var iconButtonElement = _props.iconButtonElement;
	    var openDirection = _props.openDirection;
	    var onItemTouchTap = _props.onItemTouchTap;
	    var onKeyboardFocus = _props.onKeyboardFocus;
	    var onMouseDown = _props.onMouseDown;
	    var onMouseLeave = _props.onMouseLeave;
	    var onMouseEnter = _props.onMouseEnter;
	    var onMouseUp = _props.onMouseUp;
	    var onTouchTap = _props.onTouchTap;
	    var menuStyle = _props.menuStyle;
	    var style = _props.style;

	    var other = _objectWithoutProperties(_props, ['closeOnItemTouchTap', 'iconButtonElement', 'openDirection', 'onItemTouchTap', 'onKeyboardFocus', 'onMouseDown', 'onMouseLeave', 'onMouseEnter', 'onMouseUp', 'onTouchTap', 'menuStyle', 'style']);

	    var open = this.state.open;
	    var openDown = openDirection.split('-')[0] === 'bottom';
	    var openLeft = openDirection.split('-')[1] === 'left';

	    var styles = {
	      root: {
	        display: 'inline-block',
	        position: 'relative'
	      },

	      menu: {
	        top: openDown ? 12 : null,
	        bottom: !openDown ? 12 : null,
	        left: !openLeft ? 12 : null,
	        right: openLeft ? 12 : null
	      }
	    };

	    var mergedRootStyles = this.mergeAndPrefix(styles.root, style);
	    var mergedMenuStyles = this.mergeStyles(styles.menu, menuStyle);

	    var iconButton = React.cloneElement(iconButtonElement, {
	      onKeyboardFocus: this.props.onKeyboardFocus,
	      onTouchTap: (function (e) {
	        _this.open(Events.isKeyboard(e));
	        if (iconButtonElement.props.onTouchTap) iconButtonElement.props.onTouchTap(e);
	      }).bind(this),
	      ref: this.state.iconButtonRef
	    });

	    var menu = open ? React.createElement(
	      Menu,
	      _extends({}, other, {
	        animated: true,
	        initiallyKeyboardFocused: this.state.menuInitiallyKeyboardFocused,
	        onEscKeyDown: this._handleMenuEscKeyDown,
	        onItemTouchTap: this._handleItemTouchTap,
	        openDirection: openDirection,
	        style: mergedMenuStyles }),
	      this.props.children
	    ) : null;

	    return React.createElement(
	      'div',
	      {
	        onMouseDown: onMouseDown,
	        onMouseLeave: onMouseLeave,
	        onMouseEnter: onMouseEnter,
	        onMouseUp: onMouseUp,
	        onTouchTap: onTouchTap,
	        style: mergedRootStyles },
	      iconButton,
	      React.createElement(
	        ReactTransitionGroup,
	        null,
	        menu
	      )
	    );
	  },

	  close: function close(isKeyboard) {
	    var _this2 = this;

	    if (this.state.open) {
	      this.setState({ open: false }, function () {
	        //Set focus on the icon button when the menu close
	        if (isKeyboard) {
	          var iconButton = _this2.refs[_this2.state.iconButtonRef];
	          React.findDOMNode(iconButton).focus();
	          iconButton.setKeyboardFocus();
	        }
	      });
	    }
	  },

	  open: function open(menuInitiallyKeyboardFocused) {
	    if (!this.state.open) {
	      this.setState({
	        open: true,
	        menuInitiallyKeyboardFocused: menuInitiallyKeyboardFocused
	      });
	    }
	  },

	  _handleItemTouchTap: function _handleItemTouchTap(e, child) {
	    var _this3 = this;

	    if (this.props.closeOnItemTouchTap) {
	      (function () {
	        var isKeyboard = Events.isKeyboard(e);

	        _this3._timeout = setTimeout(function () {
	          _this3.close(isKeyboard);
	        }, _this3.props.touchTapCloseDelay);
	      })();
	    }

	    this.props.onItemTouchTap(e, child);
	  },

	  _handleMenuEscKeyDown: function _handleMenuEscKeyDown() {
	    this.close(true);
	  }

	});

	module.exports = IconMenu;

/***/ },
/* 307 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(207);
	var update = React.addons.update;
	var Controllable = __webpack_require__(308);
	var StylePropable = __webpack_require__(206);
	var AutoPrefix = __webpack_require__(225);
	var Transitions = __webpack_require__(230);
	var KeyCode = __webpack_require__(205);
	var PropTypes = __webpack_require__(236);
	var List = __webpack_require__(309);
	var Paper = __webpack_require__(243);

	var Menu = React.createClass({
	  displayName: 'Menu',

	  mixins: [StylePropable, Controllable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    animated: React.PropTypes.bool,
	    autoWidth: React.PropTypes.bool,
	    desktop: React.PropTypes.bool,
	    initiallyKeyboardFocused: React.PropTypes.bool,
	    listStyle: React.PropTypes.object,
	    maxHeight: React.PropTypes.number,
	    multiple: React.PropTypes.bool,
	    onEscKeyDown: React.PropTypes.func,
	    onItemTouchTap: React.PropTypes.func,
	    onKeyDown: React.PropTypes.func,
	    openDirection: PropTypes.corners,
	    selectedMenuItemStyle: React.PropTypes.object,
	    width: PropTypes.stringOrNumber,
	    zDepth: PropTypes.zDepth
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      animated: false,
	      autoWidth: true,
	      maxHeight: null,
	      onEscKeyDown: function onEscKeyDown() {},
	      onItemTouchTap: function onItemTouchTap() {},
	      onKeyDown: function onKeyDown() {},
	      openDirection: 'bottom-left',
	      zDepth: 1
	    };
	  },

	  getInitialState: function getInitialState() {
	    var selectedIndex = this._getSelectedIndex(this.props);

	    return {
	      focusIndex: selectedIndex >= 0 ? selectedIndex : 0,
	      isKeyboardFocused: this.props.initiallyKeyboardFocused,
	      keyWidth: this.props.desktop ? 64 : 56
	    };
	  },

	  componentDidEnter: function componentDidEnter() {
	    this._animateOpen();
	  },

	  componentDidMount: function componentDidMount() {
	    if (this.props.autoWidth) this._setWidth();
	    if (!this.props.animated) this._animateOpen();
	    this._setScollPosition();
	  },

	  componentDidUpdate: function componentDidUpdate() {
	    if (this.props.autoWidth) this._setWidth();
	  },

	  componentWillLeave: function componentWillLeave(callback) {
	    var rootStyle = React.findDOMNode(this).style;

	    AutoPrefix.set(rootStyle, 'transition', Transitions.easeOut('250ms', ['opacity', 'transform']));
	    AutoPrefix.set(rootStyle, 'transform', 'translate3d(0,-8px,0)');
	    rootStyle.opacity = 0;

	    setTimeout(callback, 250);
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    var selectedIndex = this._getSelectedIndex(nextProps);

	    this.setState({
	      focusIndex: selectedIndex >= 0 ? selectedIndex : 0,
	      keyWidth: nextProps.desktop ? 64 : 56
	    });
	  },

	  render: function render() {
	    var _this = this;

	    var _props = this.props;
	    var animated = _props.animated;
	    var autoWidth = _props.autoWidth;
	    var children = _props.children;
	    var desktop = _props.desktop;
	    var initiallyKeyboardFocused = _props.initiallyKeyboardFocused;
	    var listStyle = _props.listStyle;
	    var maxHeight = _props.maxHeight;
	    var multiple = _props.multiple;
	    var openDirection = _props.openDirection;
	    var selectedMenuItemStyle = _props.selectedMenuItemStyle;
	    var style = _props.style;
	    var value = _props.value;
	    var valueLink = _props.valueLink;
	    var width = _props.width;
	    var zDepth = _props.zDepth;

	    var other = _objectWithoutProperties(_props, ['animated', 'autoWidth', 'children', 'desktop', 'initiallyKeyboardFocused', 'listStyle', 'maxHeight', 'multiple', 'openDirection', 'selectedMenuItemStyle', 'style', 'value', 'valueLink', 'width', 'zDepth']);

	    var openDown = openDirection.split('-')[0] === 'bottom';
	    var openLeft = openDirection.split('-')[1] === 'left';

	    var styles = {
	      root: {
	        //Nested div bacause the List scales x faster than
	        //it scales y
	        transition: animated ? Transitions.easeOut('250ms', 'transform') : null,
	        position: 'absolute',
	        zIndex: 10,
	        top: openDown ? 0 : null,
	        bottom: !openDown ? 0 : null,
	        left: !openLeft ? 0 : null,
	        right: openLeft ? 0 : null,
	        transform: 'scaleX(0)',
	        transformOrigin: openLeft ? 'right' : 'left'
	      },

	      list: {
	        display: 'table-cell',
	        paddingBottom: desktop ? 16 : 8,
	        paddingTop: desktop ? 16 : 8,
	        userSelect: 'none',
	        width: width
	      },

	      menuItemContainer: {
	        transition: animated ? Transitions.easeOut(null, 'opacity') : null,
	        opacity: 0
	      },

	      paper: {
	        transition: animated ? Transitions.easeOut('500ms', ['transform', 'opacity']) : null,
	        transform: 'scaleY(0)',
	        transformOrigin: openDown ? 'top' : 'bottom',
	        opacity: 0,
	        maxHeight: maxHeight,
	        overflowY: maxHeight ? 'scroll' : null
	      },

	      selectedMenuItem: {
	        color: this.context.muiTheme.palette.accent1Color
	      }
	    };

	    var mergedRootStyles = this.mergeAndPrefix(styles.root, style);
	    var mergedListStyles = this.mergeStyles(styles.list, listStyle);

	    //Cascade children opacity
	    var cumulativeDelay = openDown ? 175 : 325;
	    var cascadeChildrenCount = this._getCascadeChildrenCount();
	    var cumulativeDelayIncrement = Math.ceil(150 / cascadeChildrenCount);

	    var menuItemIndex = 0;
	    var newChildren = React.Children.map(children, (function (child) {

	      var childIsADivider = child.type.displayName === 'MenuDivider';
	      var childIsDisabled = child.props.disabled;
	      var childrenContainerStyles = {};

	      if (animated) {
	        var focusIndex = _this.state.focusIndex;
	        var transitionDelay = 0;

	        //Only cascade the visible menu items
	        if (menuItemIndex >= focusIndex - 1 && menuItemIndex <= focusIndex + cascadeChildrenCount - 1) {
	          cumulativeDelay = openDown ? cumulativeDelay + cumulativeDelayIncrement : cumulativeDelay - cumulativeDelayIncrement;
	          transitionDelay = cumulativeDelay;
	        }

	        childrenContainerStyles = _this.mergeAndPrefix(styles.menuItemContainer, {
	          transitionDelay: transitionDelay + 'ms'
	        });
	      }

	      var clonedChild = childIsADivider ? child : childIsDisabled ? React.cloneElement(child, { desktop: desktop }) : _this._cloneMenuItem(child, menuItemIndex, styles);

	      if (!childIsADivider && !childIsDisabled) menuItemIndex++;

	      return animated ? React.createElement(
	        'div',
	        { style: childrenContainerStyles },
	        clonedChild
	      ) : clonedChild;
	    }).bind(this));

	    return React.createElement(
	      'div',
	      {
	        onKeyDown: this._handleKeyDown,
	        style: mergedRootStyles },
	      React.createElement(
	        Paper,
	        {
	          ref: 'scrollContainer',
	          style: styles.paper,
	          zDepth: zDepth },
	        React.createElement(
	          List,
	          _extends({}, other, {
	            ref: 'list',
	            style: mergedListStyles }),
	          newChildren
	        )
	      )
	    );
	  },

	  setKeyboardFocused: function setKeyboardFocused(keyboardFocused) {
	    this.setState({
	      isKeyboardFocused: keyboardFocused
	    });
	  },

	  _animateOpen: function _animateOpen() {
	    var rootStyle = React.findDOMNode(this).style;
	    var scrollContainerStyle = React.findDOMNode(this.refs.scrollContainer).style;
	    var menuContainers = React.findDOMNode(this.refs.list).childNodes;

	    AutoPrefix.set(rootStyle, 'transform', 'scaleX(1)');
	    AutoPrefix.set(scrollContainerStyle, 'transform', 'scaleY(1)');
	    scrollContainerStyle.opacity = 1;

	    for (var i = 0; i < menuContainers.length; ++i) {
	      menuContainers[i].style.opacity = 1;
	    }
	  },

	  _cloneMenuItem: function _cloneMenuItem(child, childIndex, styles) {
	    var _this2 = this;

	    var _props2 = this.props;
	    var desktop = _props2.desktop;
	    var selectedMenuItemStyle = _props2.selectedMenuItemStyle;

	    var selected = this._isChildSelected(child, this.props);
	    var selectedChildrenStyles = {};

	    if (selected) {
	      selectedChildrenStyles = this.mergeStyles(styles.selectedMenuItem, selectedMenuItemStyle);
	    }

	    var mergedChildrenStyles = this.mergeStyles(child.props.style || {}, selectedChildrenStyles);

	    var isFocused = childIndex === this.state.focusIndex;
	    var focusState = 'none';
	    if (isFocused) {
	      focusState = this.state.isKeyboardFocused ? 'keyboard-focused' : 'focused';
	    }

	    return React.cloneElement(child, {
	      desktop: desktop,
	      focusState: focusState,
	      onTouchTap: function onTouchTap(e) {
	        _this2._handleMenuItemTouchTap(e, child);
	        if (child.props.onTouchTap) child.props.onTouchTap(e);
	      },
	      ref: isFocused ? 'focusedMenuItem' : null,
	      style: mergedChildrenStyles
	    });
	  },

	  _decrementKeyboardFocusIndex: function _decrementKeyboardFocusIndex() {
	    var index = this.state.focusIndex;

	    index--;
	    if (index < 0) index = 0;

	    this._setFocusIndex(index, true);
	  },

	  _getCascadeChildrenCount: function _getCascadeChildrenCount() {
	    var _props3 = this.props;
	    var children = _props3.children;
	    var desktop = _props3.desktop;
	    var maxHeight = _props3.maxHeight;

	    var count = 1;
	    var currentHeight = desktop ? 16 : 8;
	    var menuItemHeight = desktop ? 32 : 48;

	    //MaxHeight isn't set - cascade all of the children
	    if (!maxHeight) return React.Children.count(children);

	    //Count all the children that will fit inside the
	    //max menu height
	    React.Children.forEach(children, function (child) {
	      if (currentHeight < maxHeight) {
	        var childIsADivider = child.type.displayName === 'MenuDivider';

	        currentHeight += childIsADivider ? 16 : menuItemHeight;
	        count++;
	      }
	    });

	    return count;
	  },

	  _getMenuItemCount: function _getMenuItemCount() {
	    var menuItemCount = 0;
	    React.Children.forEach(this.props.children, function (child) {
	      var childIsADivider = child.type.displayName === 'MenuDivider';
	      var childIsDisabled = child.props.disabled;
	      if (!childIsADivider && !childIsDisabled) menuItemCount++;
	    });
	    return menuItemCount;
	  },

	  _getSelectedIndex: function _getSelectedIndex(props) {
	    var _this3 = this;

	    var children = props.children;

	    var selectedIndex = -1;
	    var menuItemIndex = 0;

	    React.Children.forEach(children, (function (child) {
	      var childIsADivider = child.type.displayName === 'MenuDivider';

	      if (_this3._isChildSelected(child, props)) selectedIndex = menuItemIndex;
	      if (!childIsADivider) menuItemIndex++;
	    }).bind(this));

	    return selectedIndex;
	  },

	  _handleKeyDown: function _handleKeyDown(e) {
	    switch (e.keyCode) {
	      case KeyCode.DOWN:
	        e.preventDefault();
	        this._incrementKeyboardFocusIndex();
	        break;
	      case KeyCode.ESC:
	        this.props.onEscKeyDown(e);
	        break;
	      case KeyCode.TAB:
	        e.preventDefault();
	        if (e.shiftKey) {
	          this._decrementKeyboardFocusIndex();
	        } else {
	          this._incrementKeyboardFocusIndex();
	        }
	        break;
	      case KeyCode.UP:
	        e.preventDefault();
	        this._decrementKeyboardFocusIndex();
	        break;
	    }
	    this.props.onKeyDown(e);
	  },

	  _handleMenuItemTouchTap: function _handleMenuItemTouchTap(e, item) {
	    var multiple = this.props.multiple;
	    var valueLink = this.getValueLink(this.props);
	    var menuValue = valueLink.value;
	    var itemValue = item.props.value;

	    if (multiple) {
	      var index = menuValue.indexOf(itemValue);
	      var newMenuValue = index === -1 ? update(menuValue, { $push: [itemValue] }) : update(menuValue, { $splice: [[index, 1]] });

	      valueLink.requestChange(e, newMenuValue);
	    } else if (!multiple && itemValue !== menuValue) {
	      valueLink.requestChange(e, itemValue);
	    }

	    this.props.onItemTouchTap(e, item);
	  },

	  _incrementKeyboardFocusIndex: function _incrementKeyboardFocusIndex() {
	    var index = this.state.focusIndex;
	    var maxIndex = this._getMenuItemCount() - 1;

	    index++;
	    if (index > maxIndex) index = maxIndex;

	    this._setFocusIndex(index, true);
	  },

	  _isChildSelected: function _isChildSelected(child, props) {
	    var multiple = props.multiple;
	    var menuValue = this.getValueLink(props).value;
	    var childValue = child.props.value;

	    return multiple && menuValue.length && menuValue.indexOf(childValue) !== -1 || !multiple && menuValue && menuValue === childValue;
	  },

	  _setFocusIndex: function _setFocusIndex(newIndex, isKeyboardFocused) {
	    this.setState({
	      focusIndex: newIndex,
	      isKeyboardFocused: isKeyboardFocused
	    });
	  },

	  _setScollPosition: function _setScollPosition() {
	    var desktop = this.props.desktop;
	    var focusedMenuItem = this.refs.focusedMenuItem;
	    var menuItemHeight = desktop ? 32 : 48;

	    if (focusedMenuItem) {
	      var selectedOffSet = React.findDOMNode(focusedMenuItem).offsetTop;

	      //Make the focused item be the 2nd item in the list the
	      //user sees
	      var scrollTop = selectedOffSet - menuItemHeight;
	      if (scrollTop < menuItemHeight) scrollTop = 0;

	      React.findDOMNode(this.refs.scrollContainer).scrollTop = scrollTop;
	    }
	  },

	  _setWidth: function _setWidth() {
	    var el = React.findDOMNode(this);
	    var listEl = React.findDOMNode(this.refs.list);
	    var elWidth = el.offsetWidth;
	    var keyWidth = this.state.keyWidth;
	    var minWidth = keyWidth * 1.5;
	    var keyIncrements = elWidth / keyWidth;
	    var newWidth = undefined;

	    keyIncrements = keyIncrements <= 1.5 ? 1.5 : Math.ceil(keyIncrements);
	    newWidth = keyIncrements * keyWidth;

	    if (newWidth < minWidth) newWidth = minWidth;

	    el.style.width = newWidth + 'px';
	    listEl.style.width = newWidth + 'px';
	  }

	});

	module.exports = Menu;

/***/ },
/* 308 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(207);

	module.exports = {

	  propTypes: {
	    onChange: React.PropTypes.func,
	    value: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.array]),
	    valueLink: React.PropTypes.shape({
	      value: React.PropTypes.string.isRequired,
	      requestChange: React.PropTypes.func.isRequired
	    })
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      onChange: function onChange() {}
	    };
	  },

	  getValueLink: function getValueLink(props) {
	    return props.valueLink || {
	      value: props.value,
	      requestChange: props.onChange
	    };
	  }

	};

/***/ },
/* 309 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(207);
	var PropTypes = __webpack_require__(236);
	var StylePropable = __webpack_require__(206);
	var Typography = __webpack_require__(240);
	var Paper = __webpack_require__(243);

	var List = React.createClass({
	  displayName: 'List',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    insetSubheader: React.PropTypes.bool,
	    subheader: React.PropTypes.string,
	    subheaderStyle: React.PropTypes.object,
	    zDepth: PropTypes.zDepth
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      zDepth: 0
	    };
	  },

	  render: function render() {
	    var _props = this.props;
	    var insetSubheader = _props.insetSubheader;
	    var style = _props.style;
	    var subheader = _props.subheader;
	    var subheaderStyle = _props.subheaderStyle;
	    var zDepth = _props.zDepth;

	    var other = _objectWithoutProperties(_props, ['insetSubheader', 'style', 'subheader', 'subheaderStyle', 'zDepth']);

	    var styles = {
	      root: {
	        padding: 0,
	        paddingBottom: 8,
	        paddingTop: subheader ? 0 : 8
	      },

	      subheader: {
	        color: Typography.textLightBlack,
	        fontSize: 14,
	        fontWeight: Typography.fontWeightMedium,
	        lineHeight: '48px',
	        paddingLeft: insetSubheader ? 72 : 16
	      }
	    };

	    var mergedRootStyles = this.mergeStyles(styles.root, style);
	    var mergedSubheaderStyles = this.mergeAndPrefix(styles.subheader, subheaderStyle);

	    var subheaderElement = subheader ? React.createElement(
	      'div',
	      { style: mergedSubheaderStyles },
	      subheader
	    ) : null;

	    return React.createElement(
	      Paper,
	      _extends({}, other, {
	        style: mergedRootStyles,
	        zDepth: zDepth }),
	      subheaderElement,
	      this.props.children
	    );
	  }
	});

	module.exports = List;

/***/ },
/* 310 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(1);
	var KeyCode = __webpack_require__(205);
	var StylePropable = __webpack_require__(206);
	var AutoPrefix = __webpack_require__(225);
	var Transitions = __webpack_require__(230);
	var WindowListenable = __webpack_require__(264);
	var Overlay = __webpack_require__(292);
	var Paper = __webpack_require__(243);
	var Menu = __webpack_require__(297);

	var openNavEventHandler = null;

	var LeftNav = React.createClass({
	  displayName: 'LeftNav',

	  mixins: [StylePropable, WindowListenable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    className: React.PropTypes.string,
	    disableSwipeToOpen: React.PropTypes.bool,
	    docked: React.PropTypes.bool,
	    header: React.PropTypes.element,
	    menuItems: React.PropTypes.array.isRequired,
	    onChange: React.PropTypes.func,
	    onNavOpen: React.PropTypes.func,
	    onNavClose: React.PropTypes.func,
	    openRight: React.PropTypes.bool,
	    selectedIndex: React.PropTypes.number
	  },

	  windowListeners: {
	    'keyup': '_onWindowKeyUp',
	    'resize': '_onWindowResize'
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      disableSwipeToOpen: false,
	      docked: true
	    };
	  },

	  getInitialState: function getInitialState() {
	    this._maybeSwiping = false;
	    this._touchStartX = null;
	    this._touchStartY = null;
	    this._swipeStartX = null;

	    return {
	      open: this.props.docked,
	      swiping: null
	    };
	  },

	  componentDidMount: function componentDidMount() {
	    this._updateMenuHeight();
	    this._enableSwipeHandling();
	  },

	  componentDidUpdate: function componentDidUpdate() {
	    this._updateMenuHeight();
	    this._enableSwipeHandling();
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    this._disableSwipeHandling();
	  },

	  toggle: function toggle() {
	    this.setState({ open: !this.state.open });
	    return this;
	  },

	  close: function close() {
	    this.setState({ open: false });
	    if (this.props.onNavClose) this.props.onNavClose();
	    return this;
	  },

	  open: function open() {
	    this.setState({ open: true });
	    if (this.props.onNavOpen) this.props.onNavOpen();
	    return this;
	  },

	  getThemePalette: function getThemePalette() {
	    return this.context.muiTheme.palette;
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.leftNav;
	  },

	  getStyles: function getStyles() {
	    var x = this._getTranslateMultiplier() * (this.state.open ? 0 : this._getMaxTranslateX());
	    var styles = {
	      root: {
	        height: '100%',
	        width: this.getTheme().width,
	        position: 'fixed',
	        zIndex: 10,
	        left: 0,
	        top: 0,
	        transform: 'translate3d(' + x + 'px, 0, 0)',
	        transition: !this.state.swiping && Transitions.easeOut(),
	        backgroundColor: this.getTheme().color,
	        overflow: 'hidden'
	      },
	      menu: {
	        overflowY: 'auto',
	        overflowX: 'hidden',
	        height: '100%',
	        borderRadius: '0'
	      },
	      menuItem: {
	        height: this.context.muiTheme.spacing.desktopLeftNavMenuItemHeight,
	        lineHeight: this.context.muiTheme.spacing.desktopLeftNavMenuItemHeight + 'px'
	      },
	      rootWhenOpenRight: {
	        left: 'auto',
	        right: 0
	      }
	    };
	    styles.menuItemLink = this.mergeAndPrefix(styles.menuItem, {
	      display: 'block',
	      textDecoration: 'none',
	      color: this.getThemePalette().textColor
	    });
	    styles.menuItemSubheader = this.mergeAndPrefix(styles.menuItem, {
	      overflow: 'hidden'
	    });

	    return styles;
	  },

	  render: function render() {
	    var selectedIndex = this.props.selectedIndex;
	    var overlay = undefined;

	    var styles = this.getStyles();
	    if (!this.props.docked) {
	      overlay = React.createElement(Overlay, {
	        ref: 'overlay',
	        show: this.state.open || !!this.state.swiping,
	        transitionEnabled: !this.state.swiping,
	        onTouchTap: this._onOverlayTouchTap
	      });
	    }

	    return React.createElement(
	      'div',
	      { className: this.props.className },
	      overlay,
	      React.createElement(
	        Paper,
	        {
	          ref: 'clickAwayableElement',
	          zDepth: 2,
	          rounded: false,
	          transitionEnabled: !this.state.swiping,
	          style: this.mergeAndPrefix(styles.root, this.props.openRight && styles.rootWhenOpenRight, this.props.style) },
	        this.props.header,
	        React.createElement(Menu, {
	          ref: 'menuItems',
	          style: this.mergeAndPrefix(styles.menu),
	          zDepth: 0,
	          menuItems: this.props.menuItems,
	          menuItemStyle: this.mergeAndPrefix(styles.menuItem),
	          menuItemStyleLink: this.mergeAndPrefix(styles.menuItemLink),
	          menuItemStyleSubheader: this.mergeAndPrefix(styles.menuItemSubheader),
	          selectedIndex: selectedIndex,
	          onItemTap: this._onMenuItemClick })
	      )
	    );
	  },

	  _updateMenuHeight: function _updateMenuHeight() {
	    if (this.props.header) {
	      var container = React.findDOMNode(this.refs.clickAwayableElement);
	      var menu = React.findDOMNode(this.refs.menuItems);
	      var menuHeight = container.clientHeight - menu.offsetTop;
	      menu.style.height = menuHeight + 'px';
	    }
	  },

	  _onMenuItemClick: function _onMenuItemClick(e, key, payload) {
	    if (this.props.onChange && this.props.selectedIndex !== key) {
	      this.props.onChange(e, key, payload);
	    }
	    if (!this.props.docked) this.close();
	  },

	  _onOverlayTouchTap: function _onOverlayTouchTap() {
	    this.close();
	  },

	  _onWindowKeyUp: function _onWindowKeyUp(e) {
	    if (e.keyCode === KeyCode.ESC && !this.props.docked && this.state.open) {
	      this.close();
	    }
	  },

	  _onWindowResize: function _onWindowResize() {
	    this._updateMenuHeight();
	  },

	  _getMaxTranslateX: function _getMaxTranslateX() {
	    return this.getTheme().width + 10;
	  },

	  _getTranslateMultiplier: function _getTranslateMultiplier() {
	    return this.props.openRight ? 1 : -1;
	  },

	  _enableSwipeHandling: function _enableSwipeHandling() {
	    if (!this.props.docked) {
	      document.body.addEventListener('touchstart', this._onBodyTouchStart);
	      if (!openNavEventHandler) {
	        openNavEventHandler = this._onBodyTouchStart;
	      }
	    } else {
	      this._disableSwipeHandling();
	    }
	  },

	  _disableSwipeHandling: function _disableSwipeHandling() {
	    document.body.removeEventListener('touchstart', this._onBodyTouchStart);
	    if (openNavEventHandler === this._onBodyTouchStart) {
	      openNavEventHandler = null;
	    }
	  },

	  _onBodyTouchStart: function _onBodyTouchStart(e) {
	    if (!this.state.open && (openNavEventHandler !== this._onBodyTouchStart || this.props.disableSwipeToOpen)) {
	      return;
	    }

	    var touchStartX = e.touches[0].pageX;
	    var touchStartY = e.touches[0].pageY;

	    this._maybeSwiping = true;
	    this._touchStartX = touchStartX;
	    this._touchStartY = touchStartY;

	    document.body.addEventListener('touchmove', this._onBodyTouchMove);
	    document.body.addEventListener('touchend', this._onBodyTouchEnd);
	    document.body.addEventListener('touchcancel', this._onBodyTouchEnd);
	  },

	  _setPosition: function _setPosition(translateX) {
	    var leftNav = React.findDOMNode(this.refs.clickAwayableElement);
	    leftNav.style[AutoPrefix.single('transform')] = 'translate3d(' + this._getTranslateMultiplier() * translateX + 'px, 0, 0)';
	    this.refs.overlay.setOpacity(1 - translateX / this._getMaxTranslateX());
	  },

	  _getTranslateX: function _getTranslateX(currentX) {
	    return Math.min(Math.max(this.state.swiping === 'closing' ? this._getTranslateMultiplier() * (currentX - this._swipeStartX) : this._getMaxTranslateX() - this._getTranslateMultiplier() * (this._swipeStartX - currentX), 0), this._getMaxTranslateX());
	  },

	  _onBodyTouchMove: function _onBodyTouchMove(e) {
	    var currentX = e.touches[0].pageX;
	    var currentY = e.touches[0].pageY;

	    if (this.state.swiping) {
	      e.preventDefault();
	      this._setPosition(this._getTranslateX(currentX));
	    } else if (this._maybeSwiping) {
	      var dXAbs = Math.abs(currentX - this._touchStartX);
	      var dYAbs = Math.abs(currentY - this._touchStartY);
	      // If the user has moved his thumb ten pixels in either direction,
	      // we can safely make an assumption about whether he was intending
	      // to swipe or scroll.
	      var threshold = 10;

	      if (dXAbs > threshold && dYAbs <= threshold) {
	        this._swipeStartX = currentX;
	        this.setState({
	          swiping: this.state.open ? 'closing' : 'opening'
	        });
	        this._setPosition(this._getTranslateX(currentX));
	      } else if (dXAbs <= threshold && dYAbs > threshold) {
	        this._onBodyTouchEnd();
	      }
	    }
	  },

	  _onBodyTouchEnd: function _onBodyTouchEnd(e) {
	    if (this.state.swiping) {
	      var currentX = e.changedTouches[0].pageX;
	      var translateRatio = this._getTranslateX(currentX) / this._getMaxTranslateX();

	      this._maybeSwiping = false;
	      var swiping = this.state.swiping;
	      this.setState({
	        swiping: null
	      });

	      // We have to open or close after setting swiping to null,
	      // because only then CSS transition is enabled.
	      if (translateRatio > 0.5) {
	        if (swiping === 'opening') {
	          this._setPosition(this._getMaxTranslateX());
	        } else {
	          this.close();
	        }
	      } else {
	        if (swiping === 'opening') {
	          this.open();
	        } else {
	          this._setPosition(0);
	        }
	      }
	    } else {
	      this._maybeSwiping = false;
	    }

	    document.body.removeEventListener('touchmove', this._onBodyTouchMove);
	    document.body.removeEventListener('touchend', this._onBodyTouchEnd);
	    document.body.removeEventListener('touchcancel', this._onBodyTouchEnd);
	  }

	});

	module.exports = LeftNav;

/***/ },
/* 311 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(206);
	var Transitions = __webpack_require__(230);

	var LinearProgress = React.createClass({
	  displayName: 'LinearProgress',

	  mixins: [StylePropable],

	  propTypes: {
	    mode: React.PropTypes.oneOf(['determinate', 'indeterminate']),
	    value: React.PropTypes.number,
	    min: React.PropTypes.number,
	    max: React.PropTypes.number
	  },

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  _getRelativeValue: function _getRelativeValue() {
	    var value = this.props.value;
	    var min = this.props.min;
	    var max = this.props.max;

	    var clampedValue = Math.min(Math.max(min, value), max);
	    var rangeValue = max - min;
	    var relValue = Math.round(clampedValue / rangeValue * 10000) / 10000;
	    return relValue * 100;
	  },

	  componentDidMount: function componentDidMount() {
	    var _this = this;

	    var bar1 = React.findDOMNode(this.refs.bar1);
	    var bar2 = React.findDOMNode(this.refs.bar2);

	    this._barUpdate(0, bar1, [[-35, 100], [100, -90]]);

	    setTimeout(function () {
	      _this._barUpdate(0, bar2, [[-200, 100], [107, -8]]);
	    }, 850);
	  },

	  _barUpdate: function _barUpdate(step, barElement, stepValues) {
	    step = step || 0;
	    step %= 4;
	    setTimeout(this._barUpdate.bind(this, step + 1, barElement, stepValues), 420);
	    if (!this.isMounted()) return;
	    if (this.props.mode !== 'indeterminate') return;

	    if (step === 0) {
	      barElement.style.left = stepValues[0][0] + '%';
	      barElement.style.right = stepValues[0][1] + '%';
	    } else if (step === 1) {
	      barElement.style.transitionDuration = '840ms';
	    } else if (step === 2) {
	      barElement.style.left = stepValues[1][0] + '%';
	      barElement.style.right = stepValues[1][1] + '%';
	    } else if (step === 3) {
	      barElement.style.transitionDuration = '0ms';
	    }
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      mode: 'indeterminate',
	      value: 0,
	      min: 0,
	      max: 100
	    };
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.palette;
	  },

	  getStyles: function getStyles() {
	    var styles = {
	      root: {
	        position: 'relative',
	        height: 4,
	        display: 'block',
	        width: '100%',
	        backgroundColor: this.getTheme().primary3Color,
	        borderRadius: 2,
	        margin: 0,
	        overflow: 'hidden'
	      },
	      bar: {
	        height: '100%'
	      },
	      barFragment1: {},
	      barFragment2: {}
	    };

	    if (this.props.mode === 'indeterminate') {
	      styles.barFragment1 = {
	        position: 'absolute',
	        backgroundColor: this.getTheme().primary1Color,
	        top: 0,
	        left: 0,
	        bottom: 0,
	        transition: Transitions.create('all', '840ms', null, 'cubic-bezier(0.650, 0.815, 0.735, 0.395)')
	      };

	      styles.barFragment2 = {
	        position: 'absolute',
	        backgroundColor: this.getTheme().primary1Color,
	        top: 0,
	        left: 0,
	        bottom: 0,
	        transition: Transitions.create('all', '840ms', null, 'cubic-bezier(0.165, 0.840, 0.440, 1.000)')
	      };
	    } else {
	      styles.bar.backgroundColor = this.getTheme().primary1Color;
	      styles.bar.transition = Transitions.create('width', '.3s', null, 'linear');
	      styles.bar.width = this._getRelativeValue() + '%';
	    }

	    return styles;
	  },

	  render: function render() {
	    var _props = this.props;
	    var style = _props.style;

	    var other = _objectWithoutProperties(_props, ['style']);

	    var styles = this.getStyles();

	    return React.createElement(
	      'div',
	      _extends({}, other, { style: this.mergeAndPrefix(styles.root, style) }),
	      React.createElement(
	        'div',
	        { style: this.mergeAndPrefix(styles.bar) },
	        React.createElement('div', { ref: 'bar1', style: this.mergeAndPrefix(styles.barFragment1) }),
	        React.createElement('div', { ref: 'bar2', style: this.mergeAndPrefix(styles.barFragment2) })
	      )
	    );
	  }
	});

	module.exports = LinearProgress;

/***/ },
/* 312 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(207);
	var StylePropable = __webpack_require__(206);

	var ListDivider = React.createClass({
	  displayName: 'ListDivider',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    inset: React.PropTypes.bool
	  },

	  render: function render() {
	    var _props = this.props;
	    var inset = _props.inset;
	    var style = _props.style;

	    var other = _objectWithoutProperties(_props, ['inset', 'style']);

	    var mergedStyles = this.mergeAndPrefix({
	      margin: 0,
	      marginTop: -1,
	      marginLeft: inset ? 72 : 0,
	      height: 1,
	      border: 'none',
	      backgroundColor: this.context.muiTheme.palette.borderColor
	    }, style);

	    return React.createElement('hr', _extends({}, other, { style: mergedStyles }));
	  }
	});

	module.exports = ListDivider;

/***/ },
/* 313 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(207);
	var ColorManipulator = __webpack_require__(257);
	var StylePropable = __webpack_require__(206);
	var Colors = __webpack_require__(228);
	var Transitions = __webpack_require__(230);
	var Typography = __webpack_require__(240);
	var EnhancedButton = __webpack_require__(204);
	var IconButton = __webpack_require__(203);
	var OpenIcon = __webpack_require__(314);
	var CloseIcon = __webpack_require__(304);
	var ListNested = __webpack_require__(315);

	var ListItem = React.createClass({
	  displayName: 'ListItem',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    autoGenerateNestedIndicator: React.PropTypes.bool,
	    disabled: React.PropTypes.bool,
	    disableKeyboardFocus: React.PropTypes.bool,
	    innerDivStyle: React.PropTypes.object,
	    insetChildren: React.PropTypes.bool,
	    innerStyle: React.PropTypes.object,
	    leftAvatar: React.PropTypes.element,
	    leftCheckbox: React.PropTypes.element,
	    leftIcon: React.PropTypes.element,
	    nestedLevel: React.PropTypes.number,
	    onKeyboardFocus: React.PropTypes.func,
	    onMouseLeave: React.PropTypes.func,
	    onMouseEnter: React.PropTypes.func,
	    onNestedListToggle: React.PropTypes.func,
	    onTouchStart: React.PropTypes.func,
	    open: React.PropTypes.bool,
	    rightAvatar: React.PropTypes.element,
	    rightIcon: React.PropTypes.element,
	    rightIconButton: React.PropTypes.element,
	    rightToggle: React.PropTypes.element,
	    primaryText: React.PropTypes.node,
	    secondaryText: React.PropTypes.node,
	    secondaryTextLines: React.PropTypes.oneOf([1, 2])
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      autoGenerateNestedIndicator: true,
	      nestedLevel: 0,
	      open: false,
	      secondaryTextLines: 1
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      hovered: false,
	      isKeyboardFocused: false,
	      open: this.props.open,
	      rightIconButtonHovered: false,
	      rightIconButtonKeyboardFocused: false,
	      touch: false
	    };
	  },

	  render: function render() {
	    var _props = this.props;
	    var autoGenerateNestedIndicator = _props.autoGenerateNestedIndicator;
	    var disabled = _props.disabled;
	    var disableKeyboardFocus = _props.disableKeyboardFocus;
	    var innerDivStyle = _props.innerDivStyle;
	    var insetChildren = _props.insetChildren;
	    var leftAvatar = _props.leftAvatar;
	    var leftCheckbox = _props.leftCheckbox;
	    var leftIcon = _props.leftIcon;
	    var nestedLevel = _props.nestedLevel;
	    var onKeyboardFocus = _props.onKeyboardFocus;
	    var onMouseLeave = _props.onMouseLeave;
	    var onMouseEnter = _props.onMouseEnter;
	    var onTouchStart = _props.onTouchStart;
	    var rightAvatar = _props.rightAvatar;
	    var rightIcon = _props.rightIcon;
	    var rightIconButton = _props.rightIconButton;
	    var rightToggle = _props.rightToggle;
	    var primaryText = _props.primaryText;
	    var secondaryText = _props.secondaryText;
	    var secondaryTextLines = _props.secondaryTextLines;
	    var style = _props.style;

	    var other = _objectWithoutProperties(_props, ['autoGenerateNestedIndicator', 'disabled', 'disableKeyboardFocus', 'innerDivStyle', 'insetChildren', 'leftAvatar', 'leftCheckbox', 'leftIcon', 'nestedLevel', 'onKeyboardFocus', 'onMouseLeave', 'onMouseEnter', 'onTouchStart', 'rightAvatar', 'rightIcon', 'rightIconButton', 'rightToggle', 'primaryText', 'secondaryText', 'secondaryTextLines', 'style']);

	    var textColor = this.context.muiTheme.palette.textColor;
	    var hoverColor = ColorManipulator.fade(textColor, 0.1);
	    var singleAvatar = !secondaryText && (leftAvatar || rightAvatar);
	    var singleNoAvatar = !secondaryText && !(leftAvatar || rightAvatar);
	    var twoLine = secondaryText && secondaryTextLines === 1;
	    var threeLine = secondaryText && secondaryTextLines > 1;
	    var hasCheckbox = leftCheckbox || rightToggle;

	    var styles = {
	      root: {
	        backgroundColor: (this.state.isKeyboardFocused || this.state.hovered) && !this.state.rightIconButtonHovered && !this.state.rightIconButtonKeyboardFocused ? hoverColor : null,
	        color: textColor,
	        display: 'block',
	        fontSize: 16,
	        lineHeight: '16px',
	        position: 'relative',
	        transition: Transitions.easeOut()
	      },

	      //This inner div is needed so that ripples will span the entire container
	      innerDiv: {
	        marginLeft: nestedLevel * this.context.muiTheme.component.listItem.nestedLevelDepth,
	        paddingLeft: leftIcon || leftAvatar || leftCheckbox || insetChildren ? 72 : 16,
	        paddingRight: rightIcon || rightAvatar || rightIconButton ? 56 : rightToggle ? 72 : 16,
	        paddingBottom: singleAvatar ? 20 : 16,
	        paddingTop: singleNoAvatar || threeLine ? 16 : 20,
	        position: 'relative'
	      },

	      label: {
	        cursor: 'pointer'
	      },

	      icons: {
	        height: 24,
	        width: 24,
	        display: 'block',
	        position: 'absolute',
	        top: twoLine ? 12 : singleAvatar ? 4 : 0,
	        padding: 12
	      },

	      leftIcon: {
	        color: Colors.grey600,
	        fill: Colors.grey600,
	        left: 4
	      },

	      rightIcon: {
	        color: Colors.grey400,
	        fill: Colors.grey400,
	        right: 4
	      },

	      avatars: {
	        position: 'absolute',
	        top: singleAvatar ? 8 : 16
	      },

	      leftAvatar: {
	        left: 16
	      },

	      rightAvatar: {
	        right: 16
	      },

	      leftCheckbox: {
	        position: 'absolute',
	        display: 'block',
	        width: 24,
	        top: twoLine ? 24 : singleAvatar ? 16 : 12,
	        left: 16
	      },

	      primaryText: {
	        margin: 0
	      },

	      rightIconButton: {
	        position: 'absolute',
	        display: 'block',
	        top: twoLine ? 12 : singleAvatar ? 4 : 0,
	        right: 4
	      },

	      rightToggle: {
	        position: 'absolute',
	        display: 'block',
	        width: 54,
	        top: twoLine ? 25 : singleAvatar ? 17 : 13,
	        right: 8
	      },

	      secondaryText: {
	        fontSize: 14,
	        lineHeight: threeLine ? '18px' : '16px',
	        height: threeLine ? 36 : 16,
	        margin: 0,
	        marginTop: 4,
	        color: Typography.textLightBlack,

	        //needed for 2 and 3 line ellipsis
	        overflow: 'hidden',
	        textOverflow: 'ellipsis',
	        whiteSpace: threeLine ? null : 'nowrap',
	        display: threeLine ? '-webkit-box' : null,
	        WebkitLineClamp: threeLine ? 2 : null,
	        WebkitBoxOrient: threeLine ? 'vertical' : null
	      }
	    };

	    var primaryTextIsAnElement = React.isValidElement(primaryText);
	    var secondaryTextIsAnElement = React.isValidElement(secondaryText);

	    var mergedRootStyles = this.mergeAndPrefix(styles.root, style);
	    var mergedInnerDivStyles = this.mergeAndPrefix(styles.innerDiv, innerDivStyle);
	    var mergedDivStyles = this.mergeAndPrefix(styles.root, mergedInnerDivStyles, style);
	    var mergedLabelStyles = this.mergeAndPrefix(styles.root, mergedInnerDivStyles, styles.label, style);
	    var mergedPrimaryTextStyles = primaryTextIsAnElement ? this.mergeStyles(styles.primaryText, primaryText.props.style) : null;
	    var mergedSecondaryTextStyles = secondaryTextIsAnElement ? this.mergeStyles(styles.secondaryText, secondaryText.props.style) : null;

	    var contentChildren = [];
	    var nestedListItems = [];
	    var nestedList = undefined;

	    React.Children.forEach(this.props.children, function (child) {
	      if (child === null) return;

	      if (React.isValidElement(child) && child.type.displayName === 'ListItem') {
	        nestedListItems.push(child);
	      } else {
	        contentChildren.push(child);
	      }
	    });

	    var rightIconButtonHandlers = {
	      onKeyboardFocus: this._handleRightIconButtonKeyboardFocus,
	      onMouseEnter: this._handleRightIconButtonMouseEnter,
	      onMouseLeave: this._handleRightIconButtonMouseLeave,
	      onTouchTap: this._handleRightIconButtonTouchTap,
	      onMouseDown: this._handleRightIconButtonMouseUp,
	      onMouseUp: this._handleRightIconButtonMouseUp
	    };

	    // Create a nested list indicator icon if we don't have an icon on the right
	    if (nestedListItems.length > 0 && autoGenerateNestedIndicator && rightIcon === undefined && rightAvatar === undefined && rightIconButton === undefined) {
	      if (this.state.open) {
	        rightIconButton = React.createElement(
	          IconButton,
	          null,
	          React.createElement(OpenIcon, null)
	        );
	      } else {
	        rightIconButton = React.createElement(
	          IconButton,
	          null,
	          React.createElement(CloseIcon, null)
	        );
	      }

	      rightIconButtonHandlers.onTouchTap = this._handleNestedListToggle;
	    }

	    this._pushElement(contentChildren, leftIcon, this.mergeStyles(styles.icons, styles.leftIcon));
	    this._pushElement(contentChildren, rightIcon, this.mergeStyles(styles.icons, styles.rightIcon));
	    this._pushElement(contentChildren, leftAvatar, this.mergeStyles(styles.avatars, styles.leftAvatar));
	    this._pushElement(contentChildren, rightAvatar, this.mergeStyles(styles.avatars, styles.rightAvatar));
	    this._pushElement(contentChildren, leftCheckbox, this.mergeStyles(styles.leftCheckbox));
	    this._pushElement(contentChildren, rightIconButton, this.mergeStyles(styles.rightIconButton), rightIconButtonHandlers);
	    this._pushElement(contentChildren, rightToggle, this.mergeStyles(styles.rightToggle));

	    if (nestedListItems.length) {
	      nestedList = React.createElement(
	        ListNested,
	        { nestedLevel: nestedLevel + 1, open: this.state.open },
	        nestedListItems
	      );
	    }

	    if (primaryText) {
	      contentChildren.push(React.isValidElement(primaryText) ? React.cloneElement(primaryText, { key: 'primaryText', style: mergedPrimaryTextStyles }) : React.createElement(
	        'div',
	        { key: 'primaryText', style: styles.primaryText },
	        primaryText
	      ));
	    }

	    if (secondaryText) {
	      contentChildren.push(React.isValidElement(secondaryText) ? React.cloneElement(secondaryText, { key: 'secondaryText', style: mergedSecondaryTextStyles }) : React.createElement(
	        'div',
	        { key: 'secondaryText', style: styles.secondaryText },
	        secondaryText
	      ));
	    }

	    return hasCheckbox || disabled ? React.createElement(hasCheckbox ? 'label' : 'div', { style: hasCheckbox ? mergedLabelStyles : mergedDivStyles }, contentChildren) : React.createElement(
	      'div',
	      null,
	      React.createElement(
	        EnhancedButton,
	        _extends({}, other, {
	          disabled: disabled,
	          disableKeyboardFocus: disableKeyboardFocus || this.state.rightIconButtonKeyboardFocused,
	          linkButton: true,
	          onKeyboardFocus: this._handleKeyboardFocus,
	          onMouseLeave: this._handleMouseLeave,
	          onMouseEnter: this._handleMouseEnter,
	          onTouchStart: this._handleTouchStart,
	          ref: 'enhancedButton',
	          style: mergedRootStyles }),
	        React.createElement(
	          'div',
	          { style: mergedInnerDivStyles },
	          contentChildren
	        )
	      ),
	      nestedList
	    );
	  },

	  applyFocusState: function applyFocusState(focusState) {
	    var button = this.refs.enhancedButton;
	    var buttonEl = React.findDOMNode(button);

	    if (button) {
	      switch (focusState) {
	        case 'none':
	          buttonEl.blur();
	          break;
	        case 'focused':
	          buttonEl.focus();
	          break;
	        case 'keyboard-focused':
	          button.setKeyboardFocus();
	          buttonEl.focus();
	          break;
	      }
	    }
	  },

	  _pushElement: function _pushElement(children, element, baseStyles, additionalProps) {
	    if (element) {
	      var styles = this.mergeStyles(baseStyles, element.props.style);
	      children.push(React.cloneElement(element, _extends({
	        key: children.length,
	        style: styles
	      }, additionalProps)));
	    }
	  },

	  _handleKeyboardFocus: function _handleKeyboardFocus(e, isKeyboardFocused) {
	    this.setState({ isKeyboardFocused: isKeyboardFocused });
	    if (this.props.onKeyboardFocus) this.props.onKeyboardFocus(e, isKeyboardFocused);
	  },

	  _handleMouseEnter: function _handleMouseEnter(e) {
	    if (!this.state.touch) this.setState({ hovered: true });
	    if (this.props.onMouseEnter) this.props.onMouseEnter(e);
	  },

	  _handleMouseLeave: function _handleMouseLeave(e) {
	    this.setState({ hovered: false });
	    if (this.props.onMouseLeave) this.props.onMouseLeave(e);
	  },

	  _handleRightIconButtonKeyboardFocus: function _handleRightIconButtonKeyboardFocus(e, isKeyboardFocused) {
	    var iconButton = this.props.rightIconButton;
	    var newState = {};

	    newState.rightIconButtonKeyboardFocused = isKeyboardFocused;
	    if (isKeyboardFocused) newState.isKeyboardFocused = false;
	    this.setState(newState);

	    if (iconButton && iconButton.props.onKeyboardFocus) iconButton.props.onKeyboardFocus(e, isKeyboardFocused);
	  },

	  _handleRightIconButtonMouseDown: function _handleRightIconButtonMouseDown(e) {
	    var iconButton = this.props.rightIconButton;
	    e.stopPropagation();
	    if (iconButton && iconButton.props.onMouseDown) iconButton.props.onMouseDown(e);
	  },

	  _handleRightIconButtonMouseLeave: function _handleRightIconButtonMouseLeave(e) {
	    var iconButton = this.props.rightIconButton;
	    this.setState({ rightIconButtonHovered: false });
	    if (iconButton && iconButton.props.onMouseLeave) iconButton.props.onMouseLeave(e);
	  },

	  _handleRightIconButtonMouseEnter: function _handleRightIconButtonMouseEnter(e) {
	    var iconButton = this.props.rightIconButton;
	    this.setState({ rightIconButtonHovered: true });
	    if (iconButton && iconButton.props.onMouseEnter) iconButton.props.onMouseEnter(e);
	  },

	  _handleRightIconButtonMouseUp: function _handleRightIconButtonMouseUp(e) {
	    var iconButton = this.props.rightIconButton;
	    e.stopPropagation();
	    if (iconButton && iconButton.props.onMouseUp) iconButton.props.onMouseUp(e);
	  },

	  _handleRightIconButtonTouchTap: function _handleRightIconButtonTouchTap(e) {
	    var iconButton = this.props.rightIconButton;

	    //Stop the event from bubbling up to the list-item
	    e.stopPropagation();
	    if (iconButton && iconButton.props.onTouchTap) iconButton.props.onTouchTap(e);
	  },

	  _handleTouchStart: function _handleTouchStart(e) {
	    this.setState({ touch: true });
	    if (this.props.onTouchStart) this.props.onTouchStart(e);
	  },

	  _handleNestedListToggle: function _handleNestedListToggle(e) {
	    e.stopPropagation();
	    this.setState({ open: !this.state.open });

	    if (this.props.onNestedListToggle) this.props.onNestedListToggle(this);
	  }

	});

	module.exports = ListItem;

/***/ },
/* 314 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(207);
	var PureRenderMixin = React.addons.PureRenderMixin;
	var SvgIcon = __webpack_require__(242);

	var NavigationArrowDropUp = React.createClass({
	  displayName: 'NavigationArrowDropUp',

	  mixins: [PureRenderMixin],

	  render: function render() {
	    return React.createElement(
	      SvgIcon,
	      this.props,
	      React.createElement('path', { d: 'M7 14l5-5 5 5z' })
	    );
	  }

	});

	module.exports = NavigationArrowDropUp;

/***/ },
/* 315 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(1);
	var List = __webpack_require__(309);

	var ListNested = React.createClass({
	  displayName: 'ListNested',

	  propTypes: {
	    nestedLevel: React.PropTypes.number,
	    open: React.PropTypes.bool
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      nestedLevel: 1,
	      open: false
	    };
	  },

	  render: function render() {
	    var nestedLevel = this.props.nestedLevel;
	    var style = {
	      nestedList: {}
	    };

	    if (!this.props.open) {
	      style.nestedList.display = 'none';
	    }

	    return React.createElement(
	      List,
	      { style: style.nestedList },
	      React.Children.map(this.props.children, function (child) {
	        if (React.isValidElement(child)) {
	          return React.cloneElement(child, { nestedLevel: nestedLevel + 1 });
	        }
	        return child;
	      })
	    );
	  }

	});

	module.exports = ListNested;

/***/ },
/* 316 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = {
	  Classable: __webpack_require__(317),
	  ClickAwayable: __webpack_require__(296),
	  WindowListenable: __webpack_require__(264),
	  StylePropable: __webpack_require__(206),
	  StyleResizable: __webpack_require__(319)
	};

/***/ },
/* 317 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(1);
	var classNames = __webpack_require__(318);

	module.exports = {

	  propTypes: {
	    className: React.PropTypes.string
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      className: ''
	    };
	  },

	  getClasses: function getClasses(initialClasses, additionalClassObj) {
	    var classString = '';

	    //Initialize the classString with the classNames that were passed in
	    if (this.props.className.length) classString += ' ' + this.props.className;

	    //Add in initial classes
	    if (typeof initialClasses === 'object') {
	      classString += ' ' + classNames(initialClasses);
	    } else {
	      classString += ' ' + initialClasses;
	    }

	    //Add in additional classes
	    if (additionalClassObj) classString += ' ' + classNames(additionalClassObj);

	    //Convert the class string into an object and run it through the class set
	    return classNames(this.getClassSet(classString));
	  },

	  getClassSet: function getClassSet(classString) {
	    var classObj = {};

	    if (classString) {
	      classString.split(' ').forEach(function (className) {
	        if (className) classObj[className] = true;
	      });
	    }

	    return classObj;
	  }

	};

/***/ },
/* 318 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	  Copyright (c) 2015 Jed Watson.
	  Licensed under the MIT License (MIT), see
	  http://jedwatson.github.io/classnames
	*/

	function classNames() {
		var classes = '';
		var arg;

		for (var i = 0; i < arguments.length; i++) {
			arg = arguments[i];
			if (!arg) {
				continue;
			}

			if ('string' === typeof arg || 'number' === typeof arg) {
				classes += ' ' + arg;
			} else if (Object.prototype.toString.call(arg) === '[object Array]') {
				classes += ' ' + classNames.apply(null, arg);
			} else if ('object' === typeof arg) {
				for (var key in arg) {
					if (!arg.hasOwnProperty(key) || !arg[key]) {
						continue;
					}
					classes += ' ' + key;
				}
			}
		}
		return classes.substr(1);
	}

	// safely export classNames for node / browserify
	if (typeof module !== 'undefined' && module.exports) {
		module.exports = classNames;
	}

	// safely export classNames for RequireJS
	if (true) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return classNames;
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}


/***/ },
/* 319 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Events = __webpack_require__(265);

	var Sizes = {
	  SMALL: 1,
	  MEDIUM: 2,
	  LARGE: 3
	};

	module.exports = {

	  statics: {
	    Sizes: Sizes
	  },

	  getInitialState: function getInitialState() {
	    return {
	      deviceSize: Sizes.SMALL
	    };
	  },

	  componentDidMount: function componentDidMount() {
	    this._updateDeviceSize();
	    if (!this.manuallyBindResize) this._bindResize();
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    this._unbindResize();
	  },

	  isDeviceSize: function isDeviceSize(desiredSize) {
	    return this.state.deviceSize >= desiredSize;
	  },

	  _updateDeviceSize: function _updateDeviceSize() {
	    var width = window.innerWidth;
	    if (width >= 992) this.setState({ deviceSize: Sizes.LARGE });else if (width >= 768) this.setState({ deviceSize: Sizes.MEDIUM });else this.setState({ deviceSize: Sizes.SMALL }); // width >= 375
	  },

	  _bindResize: function _bindResize() {
	    Events.on(window, 'resize', this._updateDeviceSize);
	  },

	  _unbindResize: function _unbindResize() {
	    Events.off(window, 'resize', this._updateDeviceSize);
	  }
	};

/***/ },
/* 320 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(206);
	var Transitions = __webpack_require__(230);
	var EnhancedSwitch = __webpack_require__(263);
	var RadioButtonOff = __webpack_require__(321);
	var RadioButtonOn = __webpack_require__(322);

	var RadioButton = React.createClass({
	  displayName: 'RadioButton',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    iconStyle: React.PropTypes.object,
	    labelStyle: React.PropTypes.object,
	    onCheck: React.PropTypes.func
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.radioButton;
	  },

	  getStyles: function getStyles() {
	    var styles = {
	      icon: {
	        height: this.getTheme().size,
	        width: this.getTheme().size
	      },
	      target: {
	        transition: Transitions.easeOut(),
	        position: 'absolute',
	        opacity: 1,
	        transform: 'scale(1)',
	        fill: this.getTheme().borderColor
	      },
	      fill: {
	        position: 'absolute',
	        opacity: 1,
	        transform: 'scale(0)',
	        transformOrigin: '50% 50%',
	        transition: Transitions.easeOut(),
	        fill: this.getTheme().checkedColor
	      },
	      targetWhenChecked: {
	        opacity: 0,
	        transform: 'scale(0)'
	      },
	      fillWhenChecked: {
	        opacity: 1,
	        transform: 'scale(1)'
	      },
	      targetWhenDisabled: {
	        fill: this.getTheme().disabledColor
	      },
	      fillWhenDisabled: {
	        fill: this.getTheme().disabledColor
	      },
	      label: {
	        color: this.props.disabled ? this.getTheme().labelDisabledColor : this.getTheme().labelColor
	      }
	    };

	    return styles;
	  },

	  render: function render() {
	    var _props = this.props;
	    var onCheck = _props.onCheck;

	    var other = _objectWithoutProperties(_props, ['onCheck']);

	    var styles = this.getStyles();
	    var onStyles = this.mergeAndPrefix(styles.target, this.props.checked && styles.targetWhenChecked, this.props.iconStyle, this.props.disabled && styles.targetWhenDisabled);
	    var offStyles = this.mergeAndPrefix(styles.fill, this.props.checked && styles.fillWhenChecked, this.props.iconStyle, this.props.disabled && styles.fillWhenDisabled);

	    var radioButtonElement = React.createElement(
	      'div',
	      null,
	      React.createElement(RadioButtonOff, { style: onStyles }),
	      React.createElement(RadioButtonOn, { style: offStyles })
	    );

	    var rippleColor = this.props.checked ? this.getTheme().checkedColor : this.getTheme().borderColor;

	    var iconStyle = this.mergeAndPrefix(styles.icon, this.props.iconStyle);

	    var labelStyle = this.mergeAndPrefix(styles.label, this.props.labelStyle);

	    var enhancedSwitchProps = {
	      ref: 'enhancedSwitch',
	      inputType: 'radio',
	      switched: this.props.checked || false,
	      switchElement: radioButtonElement,
	      rippleColor: rippleColor,
	      iconStyle: iconStyle,
	      labelStyle: labelStyle,
	      onSwitch: this._handleCheck,
	      onParentShouldUpdate: this._handleStateChange,
	      labelPosition: this.props.labelPosition ? this.props.labelPosition : 'right'
	    };

	    return React.createElement(EnhancedSwitch, _extends({}, other, enhancedSwitchProps));
	  },

	  // Only called when selected, not when unselected.
	  _handleCheck: function _handleCheck(e) {
	    if (this.props.onCheck) this.props.onCheck(e, this.props.value);
	  },

	  _handleStateChange: function _handleStateChange() {},

	  isChecked: function isChecked() {
	    return this.refs.enhancedSwitch.isSwitched();
	  },

	  // Use RadioButtonGroup.setSelectedValue(newSelectionValue) to set a
	  // RadioButton's checked value.
	  setChecked: function setChecked(newCheckedValue) {
	    this.refs.enhancedSwitch.setSwitched(newCheckedValue);
	  },

	  getValue: function getValue() {
	    return this.refs.enhancedSwitch.getValue();
	  }

	});

	module.exports = RadioButton;

/***/ },
/* 321 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(207);
	var PureRenderMixin = React.addons.PureRenderMixin;
	var SvgIcon = __webpack_require__(242);

	var ToggleRadioButtonUnchecked = React.createClass({
	  displayName: 'ToggleRadioButtonUnchecked',

	  mixins: [PureRenderMixin],

	  render: function render() {
	    return React.createElement(
	      SvgIcon,
	      this.props,
	      React.createElement('path', { d: 'M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z' })
	    );
	  }

	});

	module.exports = ToggleRadioButtonUnchecked;

/***/ },
/* 322 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(207);
	var PureRenderMixin = React.addons.PureRenderMixin;
	var SvgIcon = __webpack_require__(242);

	var ToggleRadioButtonChecked = React.createClass({
	  displayName: 'ToggleRadioButtonChecked',

	  mixins: [PureRenderMixin],

	  render: function render() {
	    return React.createElement(
	      SvgIcon,
	      this.props,
	      React.createElement('path', { d: 'M12 7c-2.76 0-5 2.24-5 5s2.24 5 5 5 5-2.24 5-5-2.24-5-5-5zm0-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z' })
	    );
	  }

	});

	module.exports = ToggleRadioButtonChecked;

/***/ },
/* 323 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var RadioButton = __webpack_require__(320);

	var RadioButtonGroup = React.createClass({
	  displayName: 'RadioButtonGroup',

	  propTypes: {
	    name: React.PropTypes.string.isRequired,
	    valueSelected: React.PropTypes.string,
	    defaultSelected: React.PropTypes.string,
	    labelPosition: React.PropTypes.oneOf(['left', 'right']),
	    onChange: React.PropTypes.func
	  },

	  _hasCheckAttribute: function _hasCheckAttribute(radioButton) {
	    return radioButton.props.hasOwnProperty('checked') && radioButton.props.checked;
	  },

	  getInitialState: function getInitialState() {
	    return {
	      numberCheckedRadioButtons: 0,
	      selected: this.props.valueSelected || this.props.defaultSelected || ''
	    };
	  },

	  componentWillMount: function componentWillMount() {
	    var _this = this;

	    var cnt = 0;

	    React.Children.forEach(this.props.children, function (option) {
	      if (_this._hasCheckAttribute(option)) cnt++;
	    }, this);

	    this.setState({ numberCheckedRadioButtons: cnt });
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    if (nextProps.hasOwnProperty('valueSelected')) {
	      this.setState({ selected: nextProps.valueSelected });
	    }
	  },

	  render: function render() {
	    var _this2 = this;

	    var options = React.Children.map(this.props.children, function (option) {
	      var _option$props = option.props;
	      var name = _option$props.name;
	      var value = _option$props.value;
	      var label = _option$props.label;
	      var onCheck = _option$props.onCheck;

	      var other = _objectWithoutProperties(_option$props, ['name', 'value', 'label', 'onCheck']);

	      return React.createElement(RadioButton, _extends({}, other, {
	        ref: option.props.value,
	        name: _this2.props.name,
	        key: option.props.value,
	        value: option.props.value,
	        label: option.props.label,
	        labelPosition: _this2.props.labelPosition,
	        onCheck: _this2._onChange,
	        checked: option.props.value === _this2.state.selected }));
	    }, this);

	    return React.createElement(
	      'div',
	      {
	        style: this.props.style,
	        className: this.props.className || '' },
	      options
	    );
	  },

	  _updateRadioButtons: function _updateRadioButtons(newSelection) {
	    if (this.state.numberCheckedRadioButtons === 0) {
	      this.setState({ selected: newSelection });
	    } else if (process.env.NODE_ENV !== 'production') {
	      var message = 'Cannot select a different radio button while another radio button ' + 'has the \'checked\' property set to true.';
	      console.error(message);
	    }
	  },

	  _onChange: function _onChange(e, newSelection) {
	    this._updateRadioButtons(newSelection);

	    // Successful update
	    if (this.state.numberCheckedRadioButtons === 0) {
	      if (this.props.onChange) this.props.onChange(e, newSelection);
	    }
	  },

	  getSelectedValue: function getSelectedValue() {
	    return this.state.selected;
	  },

	  setSelectedValue: function setSelectedValue(newSelectionValue) {
	    this._updateRadioButtons(newSelectionValue);
	  },

	  clearValue: function clearValue() {
	    this.setSelectedValue('');
	  }

	});

	module.exports = RadioButtonGroup;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 324 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(206);
	var Transitions = __webpack_require__(230);
	var ColorManipulator = __webpack_require__(257);
	var Typography = __webpack_require__(240);
	var EnhancedButton = __webpack_require__(204);
	var Paper = __webpack_require__(243);

	function validateLabel(props, propName, componentName) {
	  if (!props.children && !props.label) {
	    return new Error('Required prop label or children was not ' + 'specified in ' + componentName + '.');
	  }
	}

	var RaisedButton = React.createClass({
	  displayName: 'RaisedButton',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    className: React.PropTypes.string,
	    disabled: React.PropTypes.bool,
	    label: validateLabel,
	    onMouseDown: React.PropTypes.func,
	    onMouseUp: React.PropTypes.func,
	    onMouseLeave: React.PropTypes.func,
	    onTouchEnd: React.PropTypes.func,
	    onTouchStart: React.PropTypes.func,
	    primary: React.PropTypes.bool,
	    secondary: React.PropTypes.bool,
	    labelStyle: React.PropTypes.object,
	    backgroundColor: React.PropTypes.string,
	    labelColor: React.PropTypes.string,
	    disabledBackgroundColor: React.PropTypes.string,
	    disabledLabelColor: React.PropTypes.string,
	    fullWidth: React.PropTypes.bool
	  },

	  getInitialState: function getInitialState() {
	    var zDepth = this.props.disabled ? 0 : 1;
	    return {
	      hovered: false,
	      touched: false,
	      initialZDepth: zDepth,
	      zDepth: zDepth
	    };
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    var zDepth = nextProps.disabled ? 0 : 1;
	    this.setState({
	      zDepth: zDepth,
	      initialZDepth: zDepth
	    });
	  },

	  _getBackgroundColor: function _getBackgroundColor() {
	    var disabledColor = this.props.disabledBackgroundColor ? this.props.disabledBackgroundColor : this.getTheme().disabledColor;

	    return this.props.disabled ? disabledColor : this.props.backgroundColor ? this.props.backgroundColor : this.props.primary ? this.getTheme().primaryColor : this.props.secondary ? this.getTheme().secondaryColor : this.getTheme().color;
	  },

	  _getLabelColor: function _getLabelColor() {
	    var disabledColor = this.props.disabledLabelColor ? this.props.disabledLabelColor : this.getTheme().disabledTextColor;

	    return this.props.disabled ? disabledColor : this.props.labelColor ? this.props.labelColor : this.props.primary ? this.getTheme().primaryTextColor : this.props.secondary ? this.getTheme().secondaryTextColor : this.getTheme().textColor;
	  },

	  getThemeButton: function getThemeButton() {
	    return this.context.muiTheme.component.button;
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.raisedButton;
	  },

	  getStyles: function getStyles() {
	    var amount = this.props.primary || this.props.secondary ? 0.4 : 0.08;
	    var styles = {
	      root: {
	        backgroundColor: 'none',
	        display: 'inline-block',
	        minWidth: this.props.fullWidth ? '100%' : this.getThemeButton().minWidth,
	        height: this.getThemeButton().height,
	        transition: Transitions.easeOut()
	      },
	      container: {
	        position: 'relative',
	        height: '100%',
	        width: '100%',
	        padding: 0,
	        overflow: 'hidden',
	        borderRadius: 2,
	        transition: Transitions.easeOut(),
	        backgroundColor: this._getBackgroundColor(),

	        //This is need so that ripples do not bleed
	        //past border radius.
	        //See: http://stackoverflow.com/questions/17298739/css-overflow-hidden-not-working-in-chrome-when-parent-has-border-radius-and-chil
	        transform: 'translate3d(0, 0, 0)'
	      },
	      label: {
	        position: 'relative',
	        opacity: 1,
	        fontSize: '14px',
	        letterSpacing: 0,
	        textTransform: 'uppercase',
	        fontWeight: Typography.fontWeightMedium,
	        margin: 0,
	        padding: '0px ' + this.context.muiTheme.spacing.desktopGutterLess + 'px',
	        userSelect: 'none',
	        lineHeight: this.props.style && this.props.style.height ? this.props.style.height : this.getThemeButton().height + 'px',
	        color: this._getLabelColor()
	      },
	      overlay: {
	        transition: Transitions.easeOut(),
	        top: 0
	      },
	      overlayWhenHovered: {
	        backgroundColor: ColorManipulator.fade(this._getLabelColor(), amount)
	      }
	    };
	    return styles;
	  },

	  render: function render() {
	    var _props = this.props;
	    var disabled = _props.disabled;
	    var label = _props.label;
	    var primary = _props.primary;
	    var secondary = _props.secondary;

	    var other = _objectWithoutProperties(_props, ['disabled', 'label', 'primary', 'secondary']);

	    var styles = this.getStyles();

	    var labelElement = undefined;
	    if (label) {
	      labelElement = React.createElement(
	        'span',
	        { style: this.mergeAndPrefix(styles.label, this.props.labelStyle) },
	        label
	      );
	    }

	    var rippleColor = styles.label.color;
	    var rippleOpacity = !(primary || secondary) ? 0.1 : 0.16;

	    var buttonEventHandlers = disabled ? null : {
	      onMouseDown: this._handleMouseDown,
	      onMouseUp: this._handleMouseUp,
	      onMouseLeave: this._handleMouseLeave,
	      onMouseEnter: this._handleMouseEnter,
	      onTouchStart: this._handleTouchStart,
	      onTouchEnd: this._handleTouchEnd,
	      onKeyboardFocus: this._handleKeyboardFocus
	    };

	    return React.createElement(
	      Paper,
	      {
	        style: this.mergeAndPrefix(styles.root, this.props.style),
	        zDepth: this.state.zDepth },
	      React.createElement(
	        EnhancedButton,
	        _extends({}, other, buttonEventHandlers, {
	          ref: 'container',
	          disabled: disabled,
	          style: this.mergeAndPrefix(styles.container),
	          focusRippleColor: rippleColor,
	          touchRippleColor: rippleColor,
	          focusRippleOpacity: rippleOpacity,
	          touchRippleOpacity: rippleOpacity }),
	        React.createElement(
	          'div',
	          { ref: 'overlay', style: this.mergeAndPrefix(styles.overlay, this.state.hovered && !this.props.disabled && styles.overlayWhenHovered) },
	          labelElement,
	          this.props.children
	        )
	      )
	    );
	  },

	  _handleMouseDown: function _handleMouseDown(e) {
	    //only listen to left clicks
	    if (e.button === 0) {
	      this.setState({ zDepth: this.state.initialZDepth + 1 });
	    }
	    if (this.props.onMouseDown) this.props.onMouseDown(e);
	  },

	  _handleMouseUp: function _handleMouseUp(e) {
	    this.setState({ zDepth: this.state.initialZDepth });
	    if (this.props.onMouseUp) this.props.onMouseUp(e);
	  },

	  _handleMouseLeave: function _handleMouseLeave(e) {
	    if (!this.refs.container.isKeyboardFocused()) this.setState({ zDepth: this.state.initialZDepth, hovered: false });
	    if (this.props.onMouseLeave) this.props.onMouseLeave(e);
	  },

	  _handleMouseEnter: function _handleMouseEnter(e) {
	    if (!this.refs.container.isKeyboardFocused() && !this.state.touch) {
	      this.setState({ hovered: true });
	    }
	    if (this.props.onMouseEnter) this.props.onMouseEnter(e);
	  },

	  _handleTouchStart: function _handleTouchStart(e) {
	    this.setState({
	      touch: true,
	      zDepth: this.state.initialZDepth + 1
	    });
	    if (this.props.onTouchStart) this.props.onTouchStart(e);
	  },

	  _handleTouchEnd: function _handleTouchEnd(e) {
	    this.setState({ zDepth: this.state.initialZDepth });
	    if (this.props.onTouchEnd) this.props.onTouchEnd(e);
	  },

	  _handleKeyboardFocus: function _handleKeyboardFocus(e, keyboardFocused) {
	    if (keyboardFocused && !this.props.disabled) {
	      this.setState({ zDepth: this.state.initialZDepth + 1 });
	      var amount = this.props.primary || this.props.secondary ? 0.4 : 0.08;
	      React.findDOMNode(this.refs.overlay).style.backgroundColor = ColorManipulator.fade(this.mergeAndPrefix(this.getStyles().label, this.props.labelStyle).color, amount);
	    } else if (!this.state.hovered) {
	      this.setState({ zDepth: this.state.initialZDepth });
	      React.findDOMNode(this.refs.overlay).style.backgroundColor = 'transparent';
	    }
	  }
	});

	module.exports = RaisedButton;

/***/ },
/* 325 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = {
	  CircleRipple: __webpack_require__(235),
	  FocusRipple: __webpack_require__(229),
	  TouchRipple: __webpack_require__(233)
	};

/***/ },
/* 326 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(206);
	var TextField = __webpack_require__(293);
	var DropDownMenu = __webpack_require__(303);

	var SelectField = React.createClass({
	  displayName: 'SelectField',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    errorText: React.PropTypes.string,
	    floatingLabelText: React.PropTypes.string,
	    selectFieldRoot: React.PropTypes.string,
	    underlineStyle: React.PropTypes.object,
	    labelStyle: React.PropTypes.object,
	    hintText: React.PropTypes.string,
	    id: React.PropTypes.string,
	    multiLine: React.PropTypes.bool,
	    onBlur: React.PropTypes.func,
	    onChange: React.PropTypes.func,
	    onFocus: React.PropTypes.func,
	    onKeyDown: React.PropTypes.func,
	    onEnterKeyDown: React.PropTypes.func,
	    type: React.PropTypes.string,
	    rows: React.PropTypes.number,
	    inputStyle: React.PropTypes.object,
	    iconStyle: React.PropTypes.object,
	    floatingLabelStyle: React.PropTypes.object,
	    autoWidth: React.PropTypes.bool,
	    menuItems: React.PropTypes.array.isRequired,
	    menuItemStyle: React.PropTypes.object,
	    selectedIndex: React.PropTypes.number
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      fullWidth: false
	    };
	  },

	  getStyles: function getStyles() {
	    var styles = {
	      root: {
	        height: 46,
	        position: 'relative',
	        width: '100%',
	        top: 16,
	        fontSize: 16
	      },
	      label: {
	        paddingLeft: 0,
	        top: 4,
	        width: '100%'
	      },
	      icon: {
	        top: 20,
	        right: 0
	      },
	      underline: {
	        borderTop: 'none'
	      },
	      input: {}
	    };

	    if (!this.props.floatingLabelText) {
	      if (this.props.hintText) {
	        styles.root.top = -5;
	        styles.label.top = 1;
	        styles.icon.top = 17;
	      } else {
	        styles.root.top = -8;
	      }
	    }

	    return styles;
	  },

	  onChange: function onChange(e, index, payload) {
	    if (payload) {
	      e.target.value = payload[this.props.valueMember] || payload;
	    }
	    if (this.props.onChange) {
	      this.props.onChange(e, index, payload);
	    }
	  },

	  render: function render() {
	    var styles = this.getStyles();
	    var _props = this.props;
	    var style = _props.style;
	    var labelStyle = _props.labelStyle;
	    var iconStyle = _props.iconStyle;
	    var underlineStyle = _props.underlineStyle;
	    var selectFieldRoot = _props.selectFieldRoot;
	    var onChange = _props.onChange;
	    var menuItems = _props.menuItems;
	    var disabled = _props.disabled;
	    var floatingLabelText = _props.floatingLabelText;
	    var hintText = _props.hintText;
	    var fullWidth = _props.fullWidth;
	    var errorText = _props.errorText;

	    var other = _objectWithoutProperties(_props, ['style', 'labelStyle', 'iconStyle', 'underlineStyle', 'selectFieldRoot', 'onChange', 'menuItems', 'disabled', 'floatingLabelText', 'hintText', 'fullWidth', 'errorText']);

	    var textFieldProps = {
	      style: this.mergeAndPrefix(styles.input, style),
	      floatingLabelText: floatingLabelText,
	      hintText: !hintText && !floatingLabelText ? ' ' : hintText,
	      fullWidth: fullWidth,
	      errorText: errorText
	    };
	    var dropDownMenuProps = {
	      onChange: this.onChange,
	      menuItems: menuItems,
	      disabled: disabled,
	      style: this.mergeAndPrefix(styles.root, selectFieldRoot),
	      labelStyle: this.mergeAndPrefix(styles.label, labelStyle),
	      iconStyle: this.mergeAndPrefix(styles.icon, iconStyle),
	      underlineStyle: this.mergeAndPrefix(styles.underline),
	      autoWidth: false
	    };

	    return React.createElement(
	      TextField,
	      textFieldProps,
	      React.createElement(DropDownMenu, _extends({}, dropDownMenuProps, other))
	    );
	  }
	});

	module.exports = SelectField;

/***/ },
/* 327 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(206);
	var Draggable = __webpack_require__(328);
	var Transitions = __webpack_require__(230);
	var FocusRipple = __webpack_require__(229);

	/**
	  * Verifies min/max range.
	  * @param   {Object} props         Properties of the React component.
	  * @param   {String} propName      Name of the property to validate.
	  * @param   {String} componentName Name of the component whose property is being validated.
	  * @returns {Object} Returns an Error if min >= max otherwise null.
	  */
	var minMaxPropType = function minMaxPropType(props, propName, componentName) {
	  var error = React.PropTypes.number(props, propName, componentName);
	  if (error !== null) return error;

	  if (props.min >= props.max) {
	    var errorMsg = propName === 'min' ? 'min should be less than max' : 'max should be greater than min';
	    return new Error(errorMsg);
	  }
	};

	/**
	  * Verifies value is within the min/max range.
	  * @param   {Object} props         Properties of the React component.
	  * @param   {String} propName      Name of the property to validate.
	  * @param   {String} componentName Name of the component whose property is being validated.
	  * @returns {Object} Returns an Error if the value is not within the range otherwise null.
	  */
	var valueInRangePropType = function valueInRangePropType(props, propName, componentName) {
	  var error = React.PropTypes.number(props, propName, componentName);
	  if (error !== null) return error;

	  var value = props[propName];
	  if (value < props.min || props.max < value) {
	    return new Error(propName + ' should be within the range specified by min and max');
	  }
	};

	var Slider = React.createClass({
	  displayName: 'Slider',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    name: React.PropTypes.string.isRequired,
	    defaultValue: valueInRangePropType,
	    description: React.PropTypes.string,
	    disabled: React.PropTypes.bool,
	    error: React.PropTypes.string,
	    max: minMaxPropType,
	    min: minMaxPropType,
	    required: React.PropTypes.bool,
	    step: React.PropTypes.number,
	    onBlur: React.PropTypes.func,
	    onChange: React.PropTypes.func,
	    onDragStart: React.PropTypes.func,
	    onDragStop: React.PropTypes.func,
	    onFocus: React.PropTypes.func,
	    value: valueInRangePropType
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      defaultValue: 0,
	      disabled: false,
	      max: 1,
	      min: 0,
	      required: true,
	      step: 0.01
	    };
	  },

	  getInitialState: function getInitialState() {
	    var value = this.props.value;
	    if (value === undefined) {
	      value = this.props.defaultValue;
	    }
	    var percent = (value - this.props.min) / (this.props.max - this.props.min);
	    if (isNaN(percent)) percent = 0;

	    return {
	      active: false,
	      dragging: false,
	      focused: false,
	      hovered: false,
	      percent: percent,
	      value: value
	    };
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    if (nextProps.value !== undefined) {
	      this.setValue(nextProps.value);
	    }
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.slider;
	  },

	  getStyles: function getStyles() {
	    var size = this.getTheme().handleSize + this.getTheme().trackSize;
	    var gutter = (this.getTheme().handleSizeDisabled + this.getTheme().trackSize) / 2;
	    var fillGutter = this.getTheme().handleSizeDisabled - this.getTheme().trackSize;
	    var styles = {
	      root: {
	        touchCallout: 'none',
	        userSelect: 'none',
	        cursor: 'default',
	        height: this.getTheme().handleSizeActive,
	        position: 'relative',
	        marginTop: 24,
	        marginBottom: 48
	      },
	      track: {
	        position: 'absolute',
	        top: (this.getTheme().handleSizeActive - this.getTheme().trackSize) / 2,
	        left: 0,
	        width: '100%',
	        height: this.getTheme().trackSize
	      },
	      filledAndRemaining: {
	        position: 'absolute',
	        top: 0,
	        height: '100%',
	        transition: Transitions.easeOut(null, 'margin')
	      },
	      percentZeroRemaining: {
	        left: 1,
	        marginLeft: gutter
	      },
	      handle: {
	        boxSizing: 'border-box',
	        position: 'absolute',
	        cursor: 'pointer',
	        pointerEvents: 'inherit',
	        top: (this.getTheme().handleSizeActive - this.getTheme().trackSize) / 2 + 'px',
	        left: '0%',
	        zIndex: 1,
	        margin: this.getTheme().trackSize / 2 + 'px 0 0 0',
	        width: this.getTheme().handleSize,
	        height: this.getTheme().handleSize,
	        backgroundColor: this.getTheme().selectionColor,
	        backgroundClip: 'padding-box',
	        border: '0px solid transparent',
	        borderRadius: '50%',
	        transform: 'translate(-50%, -50%)',
	        transition: Transitions.easeOut('450ms', 'border') + ',' + Transitions.easeOut('450ms', 'width') + ',' + Transitions.easeOut('450ms', 'height'),
	        overflow: 'visible'
	      },
	      handleWhenDisabled: {
	        boxSizing: 'content-box',
	        cursor: 'not-allowed',
	        backgroundColor: this.getTheme().trackColor,
	        width: this.getTheme().handleSizeDisabled,
	        height: this.getTheme().handleSizeDisabled,
	        border: '2px solid white'
	      },
	      handleWhenPercentZero: {
	        border: this.getTheme().trackSize + 'px solid ' + this.getTheme().trackColor,
	        backgroundColor: this.getTheme().handleFillColor,
	        boxShadow: 'none'
	      },
	      handleWhenActive: {
	        borderColor: this.getTheme().trackColorSelected,
	        width: this.getTheme().handleSizeActive,
	        height: this.getTheme().handleSizeActive,
	        transition: Transitions.easeOut('450ms', 'backgroundColor') + ',' + Transitions.easeOut('450ms', 'width') + ',' + Transitions.easeOut('450ms', 'height')
	      },
	      ripples: {
	        height: '300%',
	        width: '300%',
	        top: '-12px',
	        left: '-12px'
	      },
	      handleWhenDisabledAndZero: {
	        width: size / 2 + 'px',
	        height: size / 2 + 'px'
	      },
	      handleWhenPercentZeroAndHovered: {
	        border: this.getTheme().trackSize + 'px solid ' + this.getTheme().handleColorZero,
	        width: size + 'px',
	        height: size + 'px'
	      }
	    };
	    styles.filled = this.mergeAndPrefix(styles.filledAndRemaining, {
	      left: 0,
	      backgroundColor: this.props.disabled ? this.getTheme().trackColor : this.getTheme().selectionColor,
	      marginRight: fillGutter,
	      width: this.state.percent * 100 + (this.props.disabled ? -1 : 0) + '%'
	    });
	    styles.remaining = this.mergeAndPrefix(styles.filledAndRemaining, {
	      right: 0,
	      backgroundColor: this.getTheme().trackColor,
	      marginLeft: fillGutter,
	      width: (1 - this.state.percent) * 100 + (this.props.disabled ? -1 : 0) + '%'
	    });

	    styles.percentZeroRemaining.width = styles.remaining.width - styles.percentZeroRemaining.left;

	    return styles;
	  },

	  render: function render() {
	    var others = _objectWithoutProperties(this.props, []);

	    var percent = this.state.percent;
	    if (percent > 1) percent = 1;else if (percent < 0) percent = 0;
	    var gutter = (this.getTheme().handleSizeDisabled + this.getTheme().trackSize) / 2;
	    var fillGutter = this.getTheme().handleSizeDisabled - this.getTheme().trackSize;

	    var styles = this.getStyles();
	    var sliderStyles = this.mergeAndPrefix(styles.root, this.props.style);
	    var trackStyles = styles.track;
	    var filledStyles = styles.filled;
	    var remainingStyles = this.mergeAndPrefix(styles.remaining, percent === 0 && styles.percentZeroRemaining);
	    var handleStyles = percent === 0 ? this.mergeAndPrefix(styles.handle, styles.handleWhenPercentZero, this.state.active && styles.handleWhenActive, this.state.focused && { outline: 'none' }, this.state.hovered && styles.handleWhenPercentZeroAndHovered, this.props.disabled && styles.handleWhenDisabledAndZero) : this.mergeAndPrefix(styles.handle, this.state.active && styles.handleWhenActive, this.state.focused && { outline: 'none' }, this.props.disabled && styles.handleWhenDisabled);

	    var rippleStyle = { height: '12px', width: '12px' };

	    if ((this.state.hovered || this.state.focused) && !this.props.disabled) {
	      remainingStyles.backgroundColor = this.getTheme().trackColorSelected;
	    }

	    if (percent === 0) filledStyles.marginRight = gutter;
	    if (this.state.percent === 0 && this.state.active) remainingStyles.marginLeft = fillGutter;

	    var rippleShowCondition = (this.state.hovered || this.state.focused) && !this.state.active && this.state.percent !== 0;
	    var rippleColor = this.state.percent === 0 ? this.getTheme().handleColorZero : this.getTheme().rippleColor;
	    var focusRipple = undefined;
	    if (!this.props.disabled && !this.props.disableFocusRipple) {
	      focusRipple = React.createElement(FocusRipple, {
	        ref: 'focusRipple',
	        key: 'focusRipple',
	        style: rippleStyle,
	        innerStyle: styles.ripples,
	        show: rippleShowCondition,
	        color: rippleColor });
	    }

	    return React.createElement(
	      'div',
	      _extends({}, others, { style: this.props.style }),
	      React.createElement('span', { className: 'mui-input-highlight' }),
	      React.createElement('span', { className: 'mui-input-bar' }),
	      React.createElement(
	        'span',
	        { className: 'mui-input-description' },
	        this.props.description
	      ),
	      React.createElement(
	        'span',
	        { className: 'mui-input-error' },
	        this.props.error
	      ),
	      React.createElement(
	        'div',
	        { style: sliderStyles,
	          onFocus: this._onFocus,
	          onBlur: this._onBlur,
	          onMouseDown: this._onMouseDown,
	          onMouseEnter: this._onMouseEnter,
	          onMouseLeave: this._onMouseLeave,
	          onMouseUp: this._onMouseUp },
	        React.createElement(
	          'div',
	          { ref: 'track', style: trackStyles },
	          React.createElement('div', { style: filledStyles }),
	          React.createElement('div', { style: remainingStyles }),
	          React.createElement(
	            Draggable,
	            { axis: 'x', bound: 'point',
	              cancel: this.props.disabled ? '*' : null,
	              start: { x: percent * 100 + '%' },
	              constrain: this._constrain(),
	              onStart: this._onDragStart,
	              onStop: this._onDragStop,
	              onDrag: this._onDragUpdate,
	              onMouseDown: this._onMouseDownKnob },
	            React.createElement(
	              'div',
	              { style: handleStyles, tabIndex: 0 },
	              focusRipple
	            )
	          )
	        )
	      ),
	      React.createElement('input', { ref: 'input', type: 'hidden',
	        name: this.props.name,
	        value: this.state.value,
	        required: this.props.required,
	        min: this.props.min,
	        max: this.props.max,
	        step: this.props.step })
	    );
	  },

	  getValue: function getValue() {
	    return this.state.value;
	  },

	  setValue: function setValue(i) {
	    // calculate percentage
	    var percent = (i - this.props.min) / (this.props.max - this.props.min);
	    if (isNaN(percent)) percent = 0;
	    // update state
	    this.setState({
	      value: i,
	      percent: percent
	    });
	  },

	  getPercent: function getPercent() {
	    return this.state.percent;
	  },

	  setPercent: function setPercent(percent) {
	    var value = this._alignValue(this._percentToValue(percent));
	    this.setState({ value: value, percent: percent });
	  },

	  clearValue: function clearValue() {
	    this.setValue(this.props.min);
	  },

	  _alignValue: function _alignValue(val) {
	    var _props = this.props;
	    var step = _props.step;
	    var min = _props.min;

	    var valModStep = (val - min) % step;
	    var alignValue = val - valModStep;

	    if (Math.abs(valModStep) * 2 >= step) {
	      alignValue += valModStep > 0 ? step : -step;
	    }

	    return parseFloat(alignValue.toFixed(5));
	  },

	  _constrain: function _constrain() {
	    var _this = this;

	    var _props2 = this.props;
	    var min = _props2.min;
	    var max = _props2.max;
	    var step = _props2.step;

	    return function (pos) {
	      var pixelMax = React.findDOMNode(_this.refs.track).clientWidth;
	      var pixelStep = pixelMax / ((max - min) / step);

	      var cursor = min;
	      var i = undefined;
	      for (i = 0; i < (max - min) / step; i++) {
	        var distance = pos.left - cursor;
	        var nextDistance = cursor + pixelStep - pos.left;
	        if (Math.abs(distance) > Math.abs(nextDistance)) {
	          cursor += pixelStep;
	        } else {
	          break;
	        }
	      }

	      return {
	        left: cursor
	      };
	    };
	  },

	  _onFocus: function _onFocus(e) {
	    this.setState({ focused: true });
	    if (this.props.onFocus) this.props.onFocus(e);
	  },

	  _onBlur: function _onBlur(e) {
	    this.setState({ focused: false, active: false });
	    if (this.props.onBlur) this.props.onBlur(e);
	  },

	  _onMouseDown: function _onMouseDown(e) {
	    this._pos = e.clientX;
	  },

	  _onMouseEnter: function _onMouseEnter() {
	    this.setState({ hovered: true });
	  },

	  _onMouseLeave: function _onMouseLeave() {
	    this.setState({ hovered: false });
	  },

	  _onMouseUp: function _onMouseUp(e) {
	    if (!this.props.disabled) this.setState({ active: false });
	    if (!this.state.dragging && Math.abs(this._pos - e.clientX) < 5) {
	      var pos = e.clientX - React.findDOMNode(this).getBoundingClientRect().left;
	      this._dragX(e, pos);
	    }

	    this._pos = undefined;
	  },

	  _onMouseDownKnob: function _onMouseDownKnob() {
	    if (!this.props.disabled) this.setState({ active: true });
	  },

	  _onDragStart: function _onDragStart(e, ui) {
	    this.setState({
	      dragging: true,
	      active: true
	    });
	    if (this.props.onDragStart) this.props.onDragStart(e, ui);
	  },

	  _onDragStop: function _onDragStop(e, ui) {
	    this.setState({
	      dragging: false,
	      active: false
	    });
	    if (this.props.onDragStop) this.props.onDragStop(e, ui);
	  },

	  _onDragUpdate: function _onDragUpdate(e, ui) {
	    if (!this.state.dragging) return;
	    if (!this.props.disabled) this._dragX(e, ui.position.left);
	  },

	  _dragX: function _dragX(e, pos) {
	    var max = React.findDOMNode(this.refs.track).clientWidth;
	    if (pos < 0) pos = 0;else if (pos > max) pos = max;
	    if (pos === this.props.min) {
	      return this._updateWithChangeEvent(e, 0);
	    }
	    this._updateWithChangeEvent(e, pos / max);
	  },

	  _updateWithChangeEvent: function _updateWithChangeEvent(e, percent) {
	    if (this.state.percent === percent) return;
	    this.setPercent(percent);
	    var value = this._alignValue(this._percentToValue(percent));
	    if (this.props.onChange) this.props.onChange(e, value);
	  },

	  _percentToValue: function _percentToValue(percent) {
	    return percent * (this.props.max - this.props.min) + this.props.min;
	  }

	});

	module.exports = Slider;

/***/ },
/* 328 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(207);
	var emptyFunction = function () {};

	// for accessing browser globals
	var root = typeof window !== 'undefined' ? window : this;
	var bodyElement;
	if (typeof document !== 'undefined' && 'body' in document) {
	  bodyElement = document.body;
	}

	function updateBoundState (state, bound) {
	  if (!bound) return state;
	  bound = String(bound);
	  var boundTop = !!~bound.indexOf('top');
	  var boundRight = !!~bound.indexOf('right');
	  var boundBottom = !!~bound.indexOf('bottom');
	  var boundLeft = !!~bound.indexOf('left');
	  var boundAll = !!~bound.indexOf('all') ||
	    !(boundTop || boundRight || boundBottom || boundLeft);
	  var boundBox = !~bound.indexOf('point');
	  state.boundTop = boundAll || boundTop;
	  state.boundRight = boundAll || boundRight;
	  state.boundBottom = boundAll || boundBottom;
	  state.boundLeft = boundAll || boundLeft;
	  state.boundBox = boundBox;
	  return state;
	};

	function createUIEvent(draggable) {
	  return {
	    position: {
	      top: draggable.state.offsetTop,
	      left: draggable.state.offsetLeft
	    }
	  };
	}

	function canDragY(draggable) {
	  return draggable.props.axis === 'both' ||
	      draggable.props.axis === 'y';
	}

	function canDragX(draggable) {
	  return draggable.props.axis === 'both' ||
	      draggable.props.axis === 'x';
	}

	function isFunction(func) {
	  return typeof func === 'function' || Object.prototype.toString.call(func) === '[object Function]'
	}

	// @credits https://gist.github.com/rogozhnikoff/a43cfed27c41e4e68cdc
	function findInArray(array, callback) {
	  for (var i = 0, length = array.length, element = null; i < length, element = array[i]; i++) {
	    if (callback.apply(callback, [element, i, array])) return element;
	  }
	}

	function matchesSelector(el, selector) {
	  var method = findInArray([
	    'matches',
	    'webkitMatchesSelector',
	    'mozMatchesSelector',
	    'msMatchesSelector',
	    'oMatchesSelector'
	  ], function(method){
	    return isFunction(el[method]);
	  });

	  return el[method].call(el, selector);
	}

	// @credits: http://stackoverflow.com/questions/4817029/whats-the-best-way-to-detect-a-touch-screen-device-using-javascript/4819886#4819886
	var isTouchDevice = 'ontouchstart' in root // works on most browsers
	                 || 'onmsgesturechange' in root; // works on ie10 on ms surface

	// look ::handleDragStart
	//function isMultiTouch(e) {
	//  return e.touches && Array.isArray(e.touches) && e.touches.length > 1
	//}

	/**
	 * simple abstraction for dragging events names
	 * */
	var dragEventFor = (function () {
	  var eventsFor = {
	    touch: {
	      start: 'touchstart',
	      move: 'touchmove',
	      end: 'touchend'
	    },
	    mouse: {
	      start: 'mousedown',
	      move: 'mousemove',
	      end: 'mouseup'
	    }
	  };
	  return eventsFor[isTouchDevice ? 'touch' : 'mouse'];
	})();

	/**
	 * get {clientX, clientY} positions of control
	 * */
	function getControlPosition(e) {
	  var position = (e.touches && e.touches[0]) || e;
	  return {
	    clientX: position.clientX,
	    clientY: position.clientY
	  }
	}

	function addEvent(el, event, handler) {
	  if (!el) { return; }
	  if (el.attachEvent) {
	    el.attachEvent('on' + event, handler);
	  } else if (el.addEventListener) {
	    el.addEventListener(event, handler, true);
	  } else {
	    el['on' + event] = handler;
	  }
	}

	function removeEvent(el, event, handler) {
	  if (!el) { return; }
	  if (el.detachEvent) {
	    el.detachEvent('on' + event, handler);
	  } else if (el.removeEventListener) {
	    el.removeEventListener(event, handler, true);
	  } else {
	    el['on' + event] = null;
	  }
	}

	module.exports = React.createClass({
	  displayName: 'Draggable',
	  mixins: [React.addons.PureRenderMixin],

	  propTypes: {
	    /**
	     * `axis` determines which axis the draggable can move.
	     *
	     * 'both' allows movement horizontally and vertically.
	     * 'x' limits movement to horizontal axis.
	     * 'y' limits movement to vertical axis.
	     *
	     * Defaults to 'both'.
	     */
	    axis: React.PropTypes.oneOf(['both', 'x', 'y']),

	    /**
	     * `handle` specifies a selector to be used as the handle that initiates drag.
	     *
	     * Example:
	     *
	     * ```jsx
	     *  var App = React.createClass({
	     *      render: function () {
	     *        return (
	     *          <Draggable handle=".handle">
	     *            <div>
	     *                <div className="handle">Click me to drag</div>
	     *                <div>This is some other content</div>
	     *            </div>
	     *          </Draggable>
	     *        );
	     *      }
	     *  });
	     * ```
	     */
	    handle: React.PropTypes.string,

	    /**
	     * `cancel` specifies a selector to be used to prevent drag initialization.
	     *
	     * Example:
	     *
	     * ```jsx
	     *  var App = React.createClass({
	     *      render: function () {
	     *          return(
	     *              <Draggable cancel=".cancel">
	     *                  <div>
	     *                    <div className="cancel">You can't drag from here</div>
	     *            <div>Dragging here works fine</div>
	     *                  </div>
	     *              </Draggable>
	     *          );
	     *      }
	     *  });
	     * ```
	     */
	    cancel: React.PropTypes.string,

	    /**
	     * `bound` determines whether to bound the movement to the parent box.
	     *
	     * The property takes a list of space-separated strings. The Draggable
	     * is bounded by the nearest DOMNode.offsetParent. To set the offset
	     * parent, give it a position value other than 'static'.
	     *
	     * Optionally choose one or more bounds from:
	     * 'top' bounds movement to the top edge of the parent box.
	     * 'right' bounds movement to the right edge of the parent box.
	     * 'bottom' bounds movement to the bottom edge of the parent box.
	     * 'left' bounds movement to the left edge of the parent box.
	     * 'all' bounds movement to all edges (default if not specified).
	     *
	     * Optionally choose one anchor from:
	     * 'point' to constrain only the top-left corner.
	     * 'box' to constrain the entire box (default if not specified).
	     *
	     * You may use more than one bound, e.g. 'top left point'. Set to a
	     * falsy value to disable.
	     *
	     * Defaults to 'all box'.
	     */
	    bound: React.PropTypes.string,

	    /**
	     * `grid` specifies the x and y that dragging should snap to.
	     *
	     * Example:
	     *
	     * ```jsx
	     *   var App = React.createClass({
	     *       render: function () {
	     *           return (
	     *              <Draggable grid={[25, 25]}>
	     *                   <div>I snap to a 25 x 25 grid</div>
	     *               </Draggable>
	     *           );
	     *      }
	     *   });
	     * ```
	     */
	    grid: React.PropTypes.arrayOf(React.PropTypes.number),

	    /**
	     * `constrain` takes a function to constrain the dragging.
	     *
	     * Example:
	     *
	     * ```jsx
	     *   function constrain (snap) {
	     *         function constrainOffset (offset, prev) {
	     *               var delta = offset - prev;
	     *               if (Math.abs(delta) >= snap) {
	     *                     return prev + (delta < 0 ? -snap : snap);
	     *               }
	     *               return prev;
	     *         }
	     *         return function (pos) {
	     *               return {
	     *                     top: constrainOffset(pos.top, pos.prevTop),
	     *                     left: constrainOffset(pos.left, pos.prevLeft)
	     *               };
	     *         };
	     *   }
	     *   var App = React.createClass({
	     *       render: function () {
	     *           return (
	     *               <Draggable constrain={constrain}>
	     *                   <div>I snap to a 25 x 25 grid</div>
	     *               </Draggable>
	     *           );
	     *       }
	     *   });
	     * ```
	     */
	    constrain: React.PropTypes.func,

	    /**
	     * `start` specifies the x and y that the dragged item should start at
	     *
	     * Example:
	     *
	     * ```jsx
	     *  var App = React.createClass({
	     *      render: function () {
	     *          return (
	     *              <Draggable start={{x: 25, y: 25}}>
	     *                  <div>I start with left: 25px; top: 25px;</div>
	     *              </Draggable>
	     *          );
	     *      }
	     *  });
	     * ```
	     */
	    start: React.PropTypes.object,

	    /**
	     * `zIndex` specifies the zIndex to use while dragging.
	     *
	     * Example:
	     *
	     * ```jsx
	     *  var App = React.createClass({
	     *      render: function () {
	     *          return (
	     *              <Draggable zIndex={100}>
	     *                  <div>I have a zIndex</div>
	     *              </Draggable>
	     *          );
	     *      }
	     *  });
	     * ```
	     */
	    zIndex: React.PropTypes.number,

	    /**
	     * `useChild` determines whether to use the first child as root.
	     *
	     * If false, a div is created. This option is required if any children
	     * have a ref.
	     *
	     * Defaults to true.
	     */
	    useChild: React.PropTypes.bool,

	    /**
	     * Called when dragging starts.
	     *
	     * Example:
	     *
	     * ```js
	     *  function (event, ui) {}
	     * ```
	     *
	     * `event` is the Event that was triggered.
	     * `ui` is an object:
	     *
	     * ```js
	     *  {
	     *    position: {top: 0, left: 0}
	     *  }
	     * ```
	     */
	    onStart: React.PropTypes.func,

	    /**
	     * Called while dragging.
	     *
	     * Example:
	     *
	     * ```js
	     *  function (event, ui) {}
	     * ```
	     *
	     * `event` is the Event that was triggered.
	     * `ui` is an object:
	     *
	     * ```js
	     *  {
	     *    position: {top: 0, left: 0}
	     *  }
	     * ```
	     */
	    onDrag: React.PropTypes.func,

	    /**
	     * Called when dragging stops.
	     *
	     * Example:
	     *
	     * ```js
	     *  function (event, ui) {}
	     * ```
	     *
	     * `event` is the Event that was triggered.
	     * `ui` is an object:
	     *
	     * ```js
	     *  {
	     *    position: {top: 0, left: 0}
	     *  }
	     * ```
	     */
	    onStop: React.PropTypes.func,

	    /**
	     * A workaround option which can be passed if onMouseDown needs to be accessed, since it'll always be blocked (due to that there's internal use of onMouseDown)
	     *
	     */
	    onMouseDown: React.PropTypes.func
	  },

	  getDefaultProps: function () {
	    return {
	      axis: 'both',
	      bound: null,
	      handle: null,
	      cancel: null,
	      grid: null,
	      start: {},
	      zIndex: NaN,
	      useChild: true,
	      onStart: emptyFunction,
	      onDrag: emptyFunction,
	      onStop: emptyFunction,
	      onMouseDown: emptyFunction
	    };
	  },

	  getInitialState: function () {
	    var state = {
	      // Whether or not currently dragging
	      dragging: false,

	      // Pointer offset on screen
	      clientX: 0, clientY: 0,

	      // DOMNode offset relative to parent
	      offsetLeft: this.props.start.x || 0, offsetTop: this.props.start.y || 0
	    };

	    updateBoundState(state, this.props.bound);

	    return state;
	  },

	  componentWillReceiveProps: function (nextProps) {
	    var state = updateBoundState({}, nextProps.bound);
	    if (nextProps.start) {
	      if (nextProps.start.x != null) {
	        state.offsetLeft = nextProps.start.x || 0;
	      }
	      if (nextProps.start.y != null) {
	        state.offsetTop = nextProps.start.y || 0;
	      }
	    }
	    this.setState(state);
	  },

	  componentWillUnmount: function() {
	    // Remove any leftover event handlers
	    removeEvent(root, dragEventFor['move'], this.handleDrag);
	    removeEvent(root, dragEventFor['end'], this.handleDragEnd);
	  },

	  handleDragStart: function (e) {
	    // todo: write right implementation to prevent multitouch drag
	    // prevent multi-touch events
	    // if (isMultiTouch(e)) {
	    //     this.handleDragEnd.apply(e, arguments);
	    //     return
	    // }

	    // Make it possible to attach event handlers on top of this one
	    this.props.onMouseDown(e);

	    // Short circuit if handle or cancel prop was provided and selector doesn't match
	    if ((this.props.handle && !matchesSelector(e.target, this.props.handle)) ||
	      (this.props.cancel && matchesSelector(e.target, this.props.cancel))) {
	      return;
	    }

	    var dragPoint = getControlPosition(e);

	    // Initiate dragging
	    this.setState({
	      dragging: true,
	      clientX: dragPoint.clientX,
	      clientY: dragPoint.clientY
	    });

	    // Call event handler
	    this.props.onStart(e, createUIEvent(this));

	    // Add event handlers
	    addEvent(root, dragEventFor['move'], this.handleDrag);
	    addEvent(root, dragEventFor['end'], this.handleDragEnd);

	    // Add dragging class to body element
	    if (bodyElement) bodyElement.className += ' react-draggable-dragging';
	  },

	  handleDragEnd: function (e) {
	    // Short circuit if not currently dragging
	    if (!this.state.dragging) {
	      return;
	    }

	    // Turn off dragging
	    this.setState({
	      dragging: false
	    });

	    // Call event handler
	    this.props.onStop(e, createUIEvent(this));

	    // Remove event handlers
	    removeEvent(root, dragEventFor['move'], this.handleDrag);
	    removeEvent(root, dragEventFor['end'], this.handleDragEnd);

	    // Remove dragging class from body element
	    if (bodyElement) {
	      var className = bodyElement.className;
	      bodyElement.className =
	        className.replace(/(?:^|\s+)react-draggable-dragging\b/, ' ');
	    }
	  },

	  handleDrag: function (e) {
	    var dragPoint = getControlPosition(e);
	    var offsetLeft = this._toPixels(this.state.offsetLeft);
	    var offsetTop = this._toPixels(this.state.offsetTop);

	    var state = {
	      offsetLeft: offsetLeft,
	      offsetTop: offsetTop
	    };

	    // Get parent DOM node
	    var node = this.getDOMNode();
	    var offsetParent = node.offsetParent;
	    var offset, boundingValue;

	    if (canDragX(this)) {
	      // Calculate updated position
	      offset = offsetLeft + dragPoint.clientX - this.state.clientX;

	      // Bound movement to parent box
	      if (this.state.boundLeft) {
	        boundingValue = state.offsetLeft - node.offsetLeft;
	        if (offset < boundingValue) {
	          offset = boundingValue;
	        }
	      }
	      if (this.state.boundRight) {
	        boundingValue += offsetParent.clientWidth;
	        if (this.state.boundBox) {
	          boundingValue -= node.offsetWidth;
	        }
	        if (offset > boundingValue) {
	          offset = boundingValue;
	        }
	      }
	      // Update left
	      state.offsetLeft = offset;
	    }

	    if (canDragY(this)) {
	      // Calculate updated position
	      offset = offsetTop + dragPoint.clientY - this.state.clientY;
	      // Bound movement to parent box
	      if (this.state.boundTop) {
	        boundingValue = state.offsetTop - node.offsetTop;
	        if (offset < boundingValue) {
	          offset = boundingValue;
	        }
	      }
	      if (this.state.boundBottom) {
	        boundingValue += offsetParent.clientHeight;
	        if (this.state.boundBox) {
	          boundingValue -= node.offsetHeight;
	        }
	        if (offset > boundingValue) {
	          offset = boundingValue;
	        }
	      }
	      // Update top
	      state.offsetTop = offset;
	    }

	    var constrain = this.props.constrain;
	    var grid = this.props.grid;

	    // Backwards-compatibility for snap to grid
	    if (!constrain && Array.isArray(grid)) {
	      var constrainOffset = function (offset, prev, snap) {
	        var delta = offset - prev;
	        if (Math.abs(delta) >= snap) {
	          return prev + parseInt(delta / snap, 10) * snap;
	        }
	        return prev;
	      };
	      constrain = function (pos) {
	        return {
	          left: constrainOffset(pos.left, pos.prevLeft, grid[0]),
	          top: constrainOffset(pos.top, pos.prevTop, grid[1])
	        };
	      };
	    }

	    // Constrain if function has been provided
	    var positions;
	    if (constrain) {
	      // Constrain positions
	      positions = constrain({
	        prevLeft: this.state.offsetLeft,
	        prevTop: this.state.offsetTop,
	        left: state.offsetLeft,
	        top: state.offsetTop
	      });
	      if (positions) {
	        // Update left
	        if ('left' in positions && !isNaN(positions.left)) {
	          state.offsetLeft = positions.left;
	        }
	        // Update top
	        if ('top' in positions && !isNaN(positions.top)) {
	          state.offsetTop = positions.top;
	        }
	      }
	    }

	    // Save new state
	    state.clientX = this.state.clientX + (state.offsetLeft - offsetLeft);
	    state.clientY = this.state.clientY + (state.offsetTop - offsetTop);
	    this.setState(state);

	    // Call event handler
	    this.props.onDrag(e, createUIEvent(this));
	  },

	  onTouchStart: function (e) {
	    e.preventDefault(); // prevent for scroll
	    return this.handleDragStart.apply(this, arguments);
	  },

	  render: function () {
	    var style = {
	      top: this.state.offsetTop,
	      left: this.state.offsetLeft
	    };

	    // Set zIndex if currently dragging and prop has been provided
	    if (this.state.dragging && !isNaN(this.props.zIndex)) {
	      style.zIndex = this.props.zIndex;
	    }

	    var props = {
	      style: style,
	      className: 'react-draggable',

	      onMouseDown: this.handleDragStart,
	      onTouchStart: this.onTouchStart,

	      onMouseUp: this.handleDragEnd,
	      onTouchEnd: this.handleDragEnd
	    };

	    // Reuse the child provided
	    // This makes it flexible to use whatever element is wanted (div, ul, etc)
	    if (this.props.useChild) {
	      return React.addons.cloneWithProps(React.Children.only(this.props.children), props);
	    }

	    return React.DOM.div(props, this.props.children);
	  },

	  _toPixels: function (value) {

	    // Support percentages
	    if (typeof value == 'string' && value.slice(-1) == '%') {
	      return parseInt((+value.replace('%', '') / 100) *
	        this.getDOMNode().offsetParent.clientWidth, 10) || 0;
	    }

	    // Invalid values become zero
	    var i = parseInt(value, 10);
	    if (isNaN(i) || !isFinite(i)) return 0;

	    return i;
	  }

	});


/***/ },
/* 329 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var CssEvent = __webpack_require__(274);
	var StylePropable = __webpack_require__(206);
	var Transitions = __webpack_require__(230);
	var ClickAwayable = __webpack_require__(296);
	var FlatButton = __webpack_require__(291);

	var Snackbar = React.createClass({
	  displayName: 'Snackbar',

	  mixins: [StylePropable, ClickAwayable],

	  manuallyBindClickAway: true,

	  // ID of the active timer.
	  _autoHideTimerId: undefined,

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    message: React.PropTypes.string.isRequired,
	    action: React.PropTypes.string,
	    autoHideDuration: React.PropTypes.number,
	    onActionTouchTap: React.PropTypes.func,
	    openOnMount: React.PropTypes.bool
	  },

	  getInitialState: function getInitialState() {
	    return {
	      open: this.props.openOnMount || false
	    };
	  },

	  componentClickAway: function componentClickAway() {
	    this.dismiss();
	  },

	  componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
	    var _this = this;

	    if (prevState.open !== this.state.open) {
	      if (this.state.open) {
	        this._setAutoHideTimer();

	        //Only Bind clickaway after transition finishes
	        CssEvent.onTransitionEnd(React.findDOMNode(this), function () {
	          _this._bindClickAway();
	        });
	      } else {
	        this._unbindClickAway();
	      }
	    }
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.snackbar;
	  },

	  getSpacing: function getSpacing() {
	    return this.context.muiTheme.spacing;
	  },

	  getStyles: function getStyles() {
	    var styles = {
	      root: {
	        color: this.getTheme().textColor,
	        backgroundColor: this.getTheme().backgroundColor,
	        borderRadius: 2,
	        padding: '0px ' + this.getSpacing().desktopGutter + 'px',
	        height: this.getSpacing().desktopSubheaderHeight,
	        lineHeight: this.getSpacing().desktopSubheaderHeight + 'px',
	        minWidth: 288,
	        maxWidth: 568,

	        position: 'fixed',
	        zIndex: 10,
	        bottom: this.getSpacing().desktopGutter,
	        marginLeft: this.getSpacing().desktopGutter,

	        left: 0,
	        opacity: 0,
	        visibility: 'hidden',
	        transform: 'translate3d(0, 20px, 0)',
	        transition: Transitions.easeOut('0ms', 'left', '400ms') + ',' + Transitions.easeOut('400ms', 'opacity') + ',' + Transitions.easeOut('400ms', 'transform') + ',' + Transitions.easeOut('400ms', 'visibility')
	      },
	      action: {
	        color: this.getTheme().actionColor,
	        float: 'right',
	        marginTop: 6,
	        marginRight: -16,
	        marginLeft: this.getSpacing().desktopGutter,
	        backgroundColor: 'transparent'
	      },
	      rootWhenOpen: {
	        opacity: 1,
	        visibility: 'visible',
	        transform: 'translate3d(0, 0, 0)',
	        transition: Transitions.easeOut('0ms', 'left', '0ms') + ',' + Transitions.easeOut('400ms', 'opacity', '0ms') + ',' + Transitions.easeOut('400ms', 'transform', '0ms') + ',' + Transitions.easeOut('400ms', 'visibility', '0ms')
	      }
	    };

	    return styles;
	  },

	  render: function render() {
	    var _props = this.props;
	    var action = _props.action;
	    var message = _props.message;
	    var onActionTouchTap = _props.onActionTouchTap;
	    var style = _props.style;

	    var others = _objectWithoutProperties(_props, ['action', 'message', 'onActionTouchTap', 'style']);

	    var styles = this.getStyles();

	    var actionButton = undefined;
	    if (action) {
	      actionButton = React.createElement(FlatButton, {
	        style: styles.action,
	        label: action,
	        onTouchTap: onActionTouchTap });
	    }

	    var rootStyles = this.state.open ? this.mergeStyles(styles.root, styles.rootWhenOpen, style) : this.mergeStyles(styles.root, style);

	    return React.createElement(
	      'span',
	      _extends({}, others, { style: rootStyles }),
	      React.createElement(
	        'span',
	        null,
	        message
	      ),
	      actionButton
	    );
	  },

	  show: function show() {
	    this.setState({ open: true });
	  },

	  dismiss: function dismiss() {
	    this._clearAutoHideTimer();
	    this.setState({ open: false });
	  },

	  _clearAutoHideTimer: function _clearAutoHideTimer() {
	    if (this._autoHideTimerId !== undefined) {
	      this._autoHideTimerId = clearTimeout(this._autoHideTimerId);
	    }
	  },

	  _setAutoHideTimer: function _setAutoHideTimer() {
	    var _this2 = this;

	    if (this.props.autoHideDuration > 0) {
	      this._clearAutoHideTimer();
	      this._autoHideTimerId = setTimeout(function () {
	        _this2.dismiss();
	      }, this.props.autoHideDuration);
	    }
	  }

	});

	module.exports = Snackbar;

/***/ },
/* 330 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(206);
	var Colors = __webpack_require__(228);

	var Tab = React.createClass({
	  displayName: 'Tab',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    handleTouchTap: React.PropTypes.func,
	    selected: React.PropTypes.bool,
	    width: React.PropTypes.string
	  },

	  handleTouchTap: function handleTouchTap() {
	    this.props.handleTouchTap(this.props.tabIndex, this);
	  },

	  render: function render() {
	    var styles = this.mergeAndPrefix({
	      display: 'table-cell',
	      cursor: 'pointer',
	      textAlign: 'center',
	      verticalAlign: 'middle',
	      height: 48,
	      color: Colors.white,
	      opacity: 0.6,
	      fontSize: 14,
	      fontWeight: '500',
	      whiteSpace: 'initial',
	      fontFamily: this.context.muiTheme.contentFontFamily,
	      boxSizing: 'border-box',
	      width: this.props.width
	    }, this.props.style);

	    if (this.props.selected) styles.opacity = '1';

	    return React.createElement(
	      'div',
	      { style: styles, onTouchTap: this.handleTouchTap, routeName: this.props.route },
	      this.props.label
	    );
	  }

	});

	module.exports = Tab;

/***/ },
/* 331 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(207);
	var TabTemplate = __webpack_require__(332);
	var InkBar = __webpack_require__(333);
	var StylePropable = __webpack_require__(206);
	var Events = __webpack_require__(265);

	var Tabs = React.createClass({
	  displayName: 'Tabs',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    initialSelectedIndex: React.PropTypes.number,
	    onActive: React.PropTypes.func,
	    tabWidth: React.PropTypes.number,
	    tabItemContainerStyle: React.PropTypes.object,
	    contentContainerStyle: React.PropTypes.object,
	    inkBarStyle: React.PropTypes.object
	  },

	  getInitialState: function getInitialState() {
	    var selectedIndex = 0;
	    if (this.props.initialSelectedIndex && this.props.initialSelectedIndex < this.getTabCount()) {
	      selectedIndex = this.props.initialSelectedIndex;
	    }
	    return {
	      selectedIndex: selectedIndex
	    };
	  },

	  getEvenWidth: function getEvenWidth() {
	    return parseInt(window.getComputedStyle(React.findDOMNode(this)).getPropertyValue('width'), 10);
	  },

	  getTabCount: function getTabCount() {
	    return React.Children.count(this.props.children);
	  },

	  componentDidMount: function componentDidMount() {
	    this._updateTabWidth();
	    Events.on(window, 'resize', this._updateTabWidth);
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    Events.off(window, 'resize', this._updateTabWidth);
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(newProps) {
	    if (newProps.hasOwnProperty('style')) this._updateTabWidth();
	  },

	  handleTouchTap: function handleTouchTap(tabIndex, tab) {
	    if (this.props.onChange && this.state.selectedIndex !== tabIndex) {
	      this.props.onChange(tabIndex, tab);
	    }

	    this.setState({ selectedIndex: tabIndex });
	    //default CB is _onActive. Can be updated in tab.jsx
	    if (tab.props.onActive) tab.props.onActive(tab);
	  },

	  getStyles: function getStyles() {
	    var themeVariables = this.context.muiTheme.component.tabs;

	    return {
	      tabItemContainer: {
	        margin: '0',
	        padding: '0',
	        width: '100%',
	        height: '48px',
	        backgroundColor: themeVariables.backgroundColor,
	        whiteSpace: 'nowrap',
	        display: 'table'
	      }
	    };
	  },

	  render: function render() {
	    var _this = this;

	    var styles = this.getStyles();

	    var tabContent = [];
	    var width = this.state.fixedWidth ? 100 / this.getTabCount() + '%' : this.props.tabWidth + 'px';

	    var left = 'calc(' + width + '*' + this.state.selectedIndex + ')';

	    var tabs = React.Children.map(this.props.children, function (tab, index) {
	      if (tab.type.displayName === 'Tab') {
	        if (tab.props.children) {
	          tabContent.push(React.createElement(TabTemplate, {
	            key: index,
	            selected: _this.state.selectedIndex === index
	          }, tab.props.children));
	        } else {
	          tabContent.push(undefined);
	        }

	        return React.addons.cloneWithProps(tab, {
	          key: index,
	          selected: _this.state.selectedIndex === index,
	          tabIndex: index,
	          width: width,
	          handleTouchTap: _this.handleTouchTap
	        });
	      } else {
	        var type = tab.type.displayName || tab.type;
	        throw 'Tabs only accepts Tab Components as children. Found ' + type + ' as child number ' + (index + 1) + ' of Tabs';
	      }
	    }, this);

	    return React.createElement(
	      'div',
	      { style: this.mergeAndPrefix(this.props.style) },
	      React.createElement(
	        'div',
	        { style: this.mergeAndPrefix(styles.tabItemContainer, this.props.tabItemContainerStyle) },
	        tabs
	      ),
	      React.createElement(InkBar, { left: left, width: width, style: this.props.inkBarStyle }),
	      React.createElement(
	        'div',
	        { style: this.mergeAndPrefix(this.props.contentContainerStyle) },
	        tabContent
	      )
	    );
	  },

	  _tabWidthPropIsValid: function _tabWidthPropIsValid() {
	    return this.props.tabWidth && this.props.tabWidth * this.getTabCount() <= this.getEvenWidth();
	  },

	  // Validates that the tabWidth can fit all tabs on the tab bar. If not, the
	  // tabWidth is recalculated and fixed.
	  _updateTabWidth: function _updateTabWidth() {
	    if (this._tabWidthPropIsValid()) {
	      this.setState({
	        fixedWidth: false
	      });
	    } else {
	      this.setState({
	        fixedWidth: true
	      });
	    }
	  }

	});

	module.exports = Tabs;

/***/ },
/* 332 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(1);

	var TabTemplate = React.createClass({
	  displayName: 'TabTemplate',

	  render: function render() {
	    var styles = {
	      'height': 0,
	      'overflow': 'hidden',
	      'width': '100%',
	      'position': 'relative',
	      'textAlign': 'initial'
	    };

	    if (this.props.selected) {
	      delete styles.height;
	      delete styles.overflow;
	    }

	    return React.createElement(
	      'div',
	      { style: styles },
	      this.props.children
	    );
	  }
	});

	module.exports = TabTemplate;

/***/ },
/* 333 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(1);
	var Transitions = __webpack_require__(230);
	var StylePropable = __webpack_require__(206);

	var InkBar = React.createClass({
	  displayName: 'InkBar',

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    left: React.PropTypes.string.isRequired,
	    width: React.PropTypes.string.isRequired
	  },

	  mixins: [StylePropable],

	  render: function render() {
	    var palette = this.context.muiTheme.palette;

	    var styles = this.mergeAndPrefix({
	      left: this.props.left,
	      width: this.props.width,
	      bottom: 0,
	      display: 'block',
	      backgroundColor: palette.accent1Color,
	      height: 2,
	      marginTop: -2,
	      position: 'relative',
	      transition: Transitions.easeOut('1s', 'left')
	    }, this.props.style);

	    return React.createElement(
	      'div',
	      { style: styles },
	      ' '
	    );
	  }

	});

	module.exports = InkBar;

/***/ },
/* 334 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(206);
	var ClickAwayable = __webpack_require__(296);
	var TableHeader = __webpack_require__(335);
	var TableRow = __webpack_require__(337);
	var TableFooter = __webpack_require__(339);

	var Table = React.createClass({
	  displayName: 'Table',

	  mixins: [StylePropable, ClickAwayable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    rowData: React.PropTypes.array.isRequired,
	    canSelectAll: React.PropTypes.bool,
	    columnOrder: React.PropTypes.array,
	    defaultColumnWidth: React.PropTypes.string,
	    deselectOnClickaway: React.PropTypes.bool,
	    displayRowCheckbox: React.PropTypes.bool,
	    displaySelectAll: React.PropTypes.bool,
	    fixedFooter: React.PropTypes.bool,
	    fixedHeader: React.PropTypes.bool,
	    footer: React.PropTypes.element,
	    footerColumns: React.PropTypes.object,
	    header: React.PropTypes.element,
	    headerColumns: React.PropTypes.object,
	    height: React.PropTypes.string,
	    multiSelectable: React.PropTypes.bool,
	    onCellClick: React.PropTypes.func,
	    onCellHover: React.PropTypes.func,
	    onCellHoverExit: React.PropTypes.func,
	    onRowHover: React.PropTypes.func,
	    onRowHoverExit: React.PropTypes.func,
	    onRowSelection: React.PropTypes.func,
	    preScanRowData: React.PropTypes.bool,
	    selectable: React.PropTypes.bool,
	    showRowHover: React.PropTypes.bool,
	    stripedRows: React.PropTypes.bool
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      canSelectAll: false,
	      defaultColumnWidth: '50px',
	      deselectOnClickaway: true,
	      displayRowCheckbox: true,
	      displaySelectAll: true,
	      fixedFooter: true,
	      fixedHeader: true,
	      height: 'inherit',
	      multiSelectable: false,
	      preScanRowData: true,
	      selectable: true,
	      showRowHover: false,
	      stripedRows: false
	    };
	  },

	  getInitialState: function getInitialState() {
	    // Determine what rows are 'pre-selected'.
	    var preSelectedRows = [];
	    if (this.props.selectable && this.props.preScanRowData) {
	      for (var idx = 0; idx < this.props.rowData.length; idx++) {
	        var row = this.props.rowData[idx];
	        if (row.selected !== undefined && row.selected) {
	          preSelectedRows.push(idx);

	          if (!this.props.multiSelectable) {
	            break;
	          }
	        }
	      }
	    }

	    return {
	      selectedRows: preSelectedRows
	    };
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.table;
	  },

	  getStyles: function getStyles() {
	    var styles = {
	      root: {
	        backgroundColor: this.getTheme().backgroundColor,
	        padding: '0 ' + this.context.muiTheme.spacing.desktopGutter + 'px',
	        width: '100%',
	        borderCollapse: 'collapse',
	        borderSpacing: 0,
	        tableLayout: 'fixed'
	      },
	      bodyTable: {
	        height: this.props.fixedHeader || this.props.fixedFooter ? this.props.height : 'auto',
	        overflowX: 'hidden',
	        overflowY: 'auto'
	      },
	      tableWrapper: {
	        height: this.props.fixedHeader || this.props.fixedFooter ? 'auto' : this.props.height,
	        overflow: 'auto'
	      }
	    };

	    return styles;
	  },

	  componentClickAway: function componentClickAway() {
	    if (this.props.deselectOnClickaway && this.state.selectedRows.length) {
	      this.setState({ selectedRows: [] });
	    }
	  },

	  render: function render() {
	    var className = 'mui-table';
	    var styles = this.getStyles();

	    var tHead = this._getHeader();
	    var tBody = this._getBody();
	    var tFoot = this._getFooter();

	    var headerTable = undefined,
	        footerTable = undefined;
	    var inlineHeader = undefined,
	        inlineFooter = undefined;
	    if (tHead !== undefined) {
	      if (this.props.fixedHeader) {
	        headerTable = React.createElement(
	          'div',
	          { className: 'mui-header-table' },
	          React.createElement(
	            'table',
	            { ref: 'headerTable', className: className, style: styles.root },
	            tHead
	          )
	        );
	      } else {
	        inlineHeader = tHead;
	      }
	    }
	    if (tFoot !== undefined) {
	      if (this.props.fixedFooter) {
	        footerTable = React.createElement(
	          'div',
	          { className: 'mui-footer-table' },
	          React.createElement(
	            'table',
	            { ref: 'footerTable', className: className, style: styles.root },
	            tFoot
	          )
	        );
	      } else {
	        inlineFooter = tFoot;
	      }
	    }

	    return React.createElement(
	      'div',
	      { className: 'mui-table-wrapper', style: styles.tableWrapper },
	      headerTable,
	      React.createElement(
	        'div',
	        { className: 'mui-body-table', style: styles.bodyTable },
	        React.createElement(
	          'table',
	          { ref: 'bodyTable', className: className, style: styles.root },
	          inlineHeader,
	          inlineFooter,
	          tBody
	        )
	      ),
	      footerTable
	    );
	  },

	  _getHeader: function _getHeader() {
	    if (this.props.header) return this.props.header;

	    if (this.props.headerColumns !== undefined) {
	      var orderedHeaderColumns = this._orderColumnBasedData(this.props.headerColumns);
	      return React.createElement(TableHeader, {
	        columns: orderedHeaderColumns,
	        enableSelectAll: this.props.canSelectAll && this.props.selectable,
	        displaySelectAll: this.props.displaySelectAll,
	        onSelectAll: this._onSelectAll });
	    }
	  },

	  _getFooter: function _getFooter() {
	    if (this.props.footer) return this.props.footer;

	    if (this.props.footerColumns !== undefined) {
	      var orderedFooterColumns = this._orderColumnBasedData(this.props.footerColumns);
	      if (this.props.displaySelectAll) {
	        orderedFooterColumns.splice(0, 0, { content: '' });
	      }

	      return React.createElement(TableFooter, { columns: orderedFooterColumns });
	    }
	  },

	  _getBody: function _getBody() {
	    var _this = this;

	    var body = this._orderColumnBasedData(this.props.rowData, function (rowData, rowNumber) {
	      var selected = _this._isRowSelected(rowNumber);
	      var striped = _this.props.stripedRows && rowNumber % 2 === 0;
	      var border = true;
	      if (rowNumber === _this.props.rowData.length - 1) {
	        border = false;
	      }

	      var row = React.createElement(TableRow, {
	        key: 'r-' + rowNumber,
	        rowNumber: rowNumber,
	        columns: rowData,
	        selected: selected,
	        striped: striped,
	        displayRowCheckbox: _this.props.displayRowCheckbox,
	        hoverable: _this.props.showRowHover,
	        displayBorder: border,
	        selectable: _this.props.selectable,
	        onRowClick: _this._handleRowClick,
	        onCellClick: _this._handleCellClick,
	        onRowHover: _this._handleRowHover,
	        onRowHoverExit: _this._handleRowHoverExit,
	        onCellHover: _this._handleCellHover,
	        onCellHoverExit: _this._handleCellHoverExit });

	      return row;
	    });

	    return React.createElement(
	      'tbody',
	      { style: { height: this.props.height } },
	      body
	    );
	  },

	  _orderColumnBasedData: function _orderColumnBasedData(columnBasedData, cb) {
	    // If we do not have a columnOrder, return.
	    if (this.props.columnOrder === undefined) return;

	    var data = Object.prototype.toString.call(columnBasedData) !== '[object Array]' ? [columnBasedData] : columnBasedData;
	    var orderedData = [];

	    for (var rowIdx = 0; rowIdx < data.length; rowIdx++) {
	      var rowData = data[rowIdx];
	      var orderedRowData = [];

	      for (var colIdx = 0; colIdx < this.props.columnOrder.length; colIdx++) {
	        var columnId = this.props.columnOrder[colIdx];
	        var columnData = rowData[columnId] || {};

	        orderedRowData.push(columnData);
	      }

	      if (orderedRowData.length) {
	        rowData = orderedRowData;
	      }

	      // Fixed table layout only requires widths on first row.
	      if (rowIdx === 1 && data.length > 1) {
	        rowData = this._setColumnWidths(rowData);
	      }

	      orderedData.push(cb !== undefined ? cb(rowData, rowIdx) : rowData);
	    }

	    return data.length === 1 ? orderedData[0] : orderedData;
	  },

	  _setColumnWidths: function _setColumnWidths(columnData) {
	    var _this2 = this;

	    columnData.forEach(function (column) {
	      if (column.style === undefined) {
	        column.style = {
	          width: _this2.props.defaultColumnWidth,
	          maxWidth: _this2.props.defaultColumnWidth
	        };
	      } else {
	        if (column.style.width === undefined) column.style.width = _this2.props.defaultColumnWidth;
	        if (column.style.maxWidth === undefined) column.style.maxWidth = _this2.props.defaultColumnWidth;
	      }
	    });

	    return columnData;
	  },

	  _isRowSelected: function _isRowSelected(rowNumber) {
	    if (this.state.allRowsSelected) {
	      return true;
	    }

	    for (var i = 0; i < this.state.selectedRows.length; i++) {
	      var selection = this.state.selectedRows[i];

	      if (typeof selection === 'object') {
	        if (this._isValueInRange(rowNumber, selection)) return true;
	      } else {
	        if (selection === rowNumber) return true;
	      }
	    }

	    return false;
	  },

	  _isValueInRange: function _isValueInRange(value, range) {
	    if (range.start <= value && value <= range.end || range.end <= value && value <= range.start) {
	      return true;
	    }

	    return false;
	  },

	  _handleRowClick: function _handleRowClick(e, rowNumber) {
	    e.stopPropagation();

	    if (this.props.selectable) {
	      // Prevent text selection while selecting rows.
	      window.getSelection().removeAllRanges();
	      this._processRowSelection(e, rowNumber);
	    }
	  },

	  _processRowSelection: function _processRowSelection(e, rowNumber) {
	    var selectedRows = this.state.selectedRows;

	    if (e.shiftKey && this.props.multiSelectable && selectedRows.length) {
	      var lastSelection = selectedRows[selectedRows.length - 1];

	      if (typeof lastSelection === 'object') {
	        lastSelection.end = rowNumber;
	      } else {
	        selectedRows.push({ start: lastSelection, end: rowNumber });
	      }
	    } else if ((e.ctrlKey && !e.metaKey || e.metaKey && !e.ctrlKey) && this.props.multiSelectable) {
	      var idx = selectedRows.indexOf(rowNumber);
	      if (idx < 0) {
	        selectedRows.push(rowNumber);
	      } else {
	        selectedRows.splice(idx, 1);
	      }
	    } else {
	      if (selectedRows.length === 1 && selectedRows[0] === rowNumber) {
	        selectedRows = [];
	      } else {
	        selectedRows = [rowNumber];
	      }
	    }

	    this.setState({ selectedRows: selectedRows });
	    if (this.props.onRowSelection) this.props.onRowSelection(selectedRows);
	  },

	  _handleCellClick: function _handleCellClick(e, rowNumber, columnNumber) {
	    e.stopPropagation();
	    if (this.props.onCellClick) this.props.onCellClick(rowNumber, this._getColumnId(columnNumber));
	  },

	  _handleRowHover: function _handleRowHover(e, rowNumber) {
	    if (this.props.onRowHover) this.props.onRowHover(rowNumber);
	  },

	  _handleRowHoverExit: function _handleRowHoverExit(e, rowNumber) {
	    if (this.props.onRowHoverExit) this.props.onRowHoverExit(rowNumber);
	  },

	  _handleCellHover: function _handleCellHover(e, rowNumber, columnNumber) {
	    if (this.props.onCellHover) this.props.onCellHover(rowNumber, this._getColumnId(columnNumber));
	    this._handleRowHover(e, rowNumber);
	  },

	  _handleCellHoverExit: function _handleCellHoverExit(e, rowNumber, columnNumber) {
	    if (this.props.onCellHoverExit) this.props.onCellHoverExit(rowNumber, this._getColumnId(columnNumber));
	    this._handleRowHoverExit(e, rowNumber);
	  },

	  _onSelectAll: function _onSelectAll() {
	    this.setState({ allRowsSelected: !this.state.allRowsSelected });
	  },

	  _getColumnId: function _getColumnId(columnNumber) {
	    var columnId = columnNumber;
	    if (this.props.displayRowCheckbox) columnId--;
	    columnId = this.props.columnOrder.length ? this.props.columnOrder[columnId] : columnId;

	    return columnId;
	  }

	});

	module.exports = Table;

/***/ },
/* 335 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var Checkbox = __webpack_require__(262);
	var StylePropable = __webpack_require__(206);
	var TableHeaderColumn = __webpack_require__(336);

	var TableHeader = React.createClass({
	  displayName: 'TableHeader',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    columns: React.PropTypes.array.isRequired,
	    superHeaderColumns: React.PropTypes.array,
	    onSelectAll: React.PropTypes.func,
	    displaySelectAll: React.PropTypes.bool,
	    enableSelectAll: React.PropTypes.bool,
	    fixed: React.PropTypes.bool
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      displaySelectAll: true,
	      enableSelectAll: true,
	      fixed: true
	    };
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.tableHeader;
	  },

	  getStyles: function getStyles() {
	    var styles = {
	      root: {
	        borderBottom: '1px solid ' + this.getTheme().borderColor
	      }
	    };

	    return styles;
	  },

	  render: function render() {
	    var className = 'mui-table-header';

	    return React.createElement(
	      'thead',
	      { className: className, style: this.getStyles().root },
	      this._getSuperHeaderRow(),
	      this._getHeaderRow()
	    );
	  },

	  getSuperHeaderRow: function getSuperHeaderRow() {
	    return this.refs.superHeader;
	  },

	  getHeaderRow: function getHeaderRow() {
	    return this.refs.header;
	  },

	  _getSuperHeaderRow: function _getSuperHeaderRow() {
	    if (this.props.superHeaderColumns !== undefined) {
	      return React.createElement(
	        'tr',
	        { className: 'mui-table-super-header-row', ref: 'superHeader' },
	        this._getColumnHeaders(this.props.superHeaderColumns, 'sh')
	      );
	    }
	  },

	  _getHeaderRow: function _getHeaderRow() {
	    var columns = this.props.columns.slice();
	    if (this.props.displaySelectAll) {
	      columns.splice(0, 0, this._getSelectAllCheckbox());
	    }

	    return React.createElement(
	      'tr',
	      { className: 'mui-table-header-row', ref: 'header' },
	      this._getHeaderColumns(columns, 'h')
	    );
	  },

	  _getHeaderColumns: function _getHeaderColumns(headerData, keyPrefix) {
	    var headers = [];

	    for (var index = 0; index < headerData.length; index++) {
	      var _headerData$index = headerData[index];
	      var content = _headerData$index.content;
	      var tooltip = _headerData$index.tooltip;
	      var style = _headerData$index.style;

	      var props = _objectWithoutProperties(_headerData$index, ['content', 'tooltip', 'style']);

	      var key = keyPrefix + index;

	      headers.push(React.createElement(
	        TableHeaderColumn,
	        _extends({ key: key, style: style, tooltip: tooltip, columnNumber: index }, props),
	        content
	      ));
	    }

	    return headers;
	  },

	  _getSelectAllCheckbox: function _getSelectAllCheckbox() {
	    var checkbox = React.createElement(Checkbox, {
	      name: 'selectallcb',
	      value: 'selected',
	      disabled: !this.props.enableSelectAll,
	      onCheck: this._onSelectAll });

	    return {
	      content: checkbox,
	      style: {
	        width: 72,
	        paddingLeft: 24,
	        paddingRight: 24
	      }
	    };
	  },

	  _onSelectAll: function _onSelectAll() {
	    if (this.props.onSelectAll) this.props.onSelectAll();
	  },

	  _onColumnClick: function _onColumnClick(e, columnNumber) {
	    if (this.props.onColumnClick) this.props.onColumnClick(e, columnNumber);
	  }

	});

	module.exports = TableHeader;

/***/ },
/* 336 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(206);
	var Tooltip = __webpack_require__(238);

	var TableHeaderColumn = React.createClass({
	  displayName: 'TableHeaderColumn',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    tooltip: React.PropTypes.string,
	    columnNumber: React.PropTypes.number.isRequired,
	    onClick: React.PropTypes.func
	  },

	  getInitialState: function getInitialState() {
	    return {
	      hovered: false
	    };
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.tableHeaderColumn;
	  },

	  getStyles: function getStyles() {
	    var theme = this.getTheme();
	    var styles = {
	      root: {
	        fontWeight: 'normal',
	        fontSize: 12,
	        paddingLeft: theme.spacing,
	        paddingRight: theme.spacing,
	        height: theme.height,
	        textAlign: 'left',
	        whiteSpace: 'nowrap',
	        textOverflow: 'ellipsis',
	        color: this.getTheme().textColor,
	        position: 'relative'
	      },
	      tooltip: {
	        boxSizing: 'border-box',
	        marginTop: theme.height
	      }
	    };

	    return styles;
	  },

	  render: function render() {
	    var className = 'mui-table-header-column';
	    var styles = this.getStyles();
	    var handlers = {
	      onMouseEnter: this._onMouseEnter,
	      onMouseLeave: this._onMouseLeave,
	      onClick: this._onClick
	    };
	    var tooltip = undefined;

	    if (this.props.tooltip !== undefined) {
	      tooltip = React.createElement(Tooltip, {
	        label: this.props.tooltip,
	        show: this.state.hovered,
	        style: this.mergeStyles(styles.tooltip) });
	    }

	    return React.createElement(
	      'th',
	      _extends({
	        key: this.props.key,
	        className: className,
	        style: this.mergeAndPrefix(styles.root, this.props.style)
	      }, handlers),
	      tooltip,
	      this.props.children
	    );
	  },

	  _onMouseEnter: function _onMouseEnter() {
	    if (this.props.tooltip !== undefined) this.setState({ hovered: true });
	  },

	  _onMouseLeave: function _onMouseLeave() {
	    if (this.props.tooltip !== undefined) this.setState({ hovered: false });
	  },

	  _onClick: function _onClick(e) {
	    if (this.props.onClick) this.props.onClick(e, this.props.columnNumber);
	  }

	});

	module.exports = TableHeaderColumn;

/***/ },
/* 337 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(1);
	var Checkbox = __webpack_require__(262);
	var StylePropable = __webpack_require__(206);
	var TableRowColumn = __webpack_require__(338);

	var TableRow = React.createClass({
	  displayName: 'TableRow',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    rowNumber: React.PropTypes.number.isRequired,
	    columns: React.PropTypes.array.isRequired,
	    onRowClick: React.PropTypes.func,
	    onCellClick: React.PropTypes.func,
	    onRowHover: React.PropTypes.func,
	    onRowHoverExit: React.PropTypes.func,
	    onCellHover: React.PropTypes.func,
	    onCellHoverExit: React.PropTypes.func,
	    selected: React.PropTypes.bool,
	    selectable: React.PropTypes.bool,
	    striped: React.PropTypes.bool,
	    hoverable: React.PropTypes.bool,
	    displayBorder: React.PropTypes.bool,
	    displayRowCheckbox: React.PropTypes.bool
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      selected: false,
	      selectable: true,
	      striped: false,
	      hoverable: false,
	      displayBorder: true,
	      displayRowCheckbox: true
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      hovered: false
	    };
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.tableRow;
	  },

	  getStyles: function getStyles() {
	    var theme = this.getTheme();
	    var cellBgColor = 'inherit';
	    if (this.state.hovered) {
	      cellBgColor = theme.hoverColor;
	    } else if (this.props.selected) {
	      cellBgColor = theme.selectedColor;
	    } else if (this.props.striped) {
	      cellBgColor = theme.stripeColor;
	    }

	    var styles = {
	      root: {
	        borderBottom: '1px solid ' + this.getTheme().borderColor
	      },
	      cell: {
	        backgroundColor: cellBgColor,
	        color: this.getTheme().textColor
	      }
	    };

	    if (!this.props.displayBorder) {
	      styles.root.borderBottom = '';
	    }

	    return styles;
	  },

	  render: function render() {
	    var className = 'mui-table-row';
	    var columns = this.props.columns.slice();
	    if (this.props.displayRowCheckbox) {
	      columns.splice(0, 0, this._getRowCheckbox());
	    }

	    return React.createElement(
	      'tr',
	      { className: className, style: this.getStyles().root },
	      this._getColumns(columns)
	    );
	  },

	  _getColumns: function _getColumns(columns) {
	    var rowColumns = [];
	    var styles = this.getStyles();

	    for (var index = 0; index < columns.length; index++) {
	      var key = this.props.rowNumber + '-' + index;
	      var _columns$index = columns[index];
	      var content = _columns$index.content;
	      var style = _columns$index.style;

	      if (content === undefined) content = columns[index];

	      var columnComponent = React.createElement(
	        TableRowColumn,
	        {
	          key: key,
	          columnNumber: index,
	          style: this.mergeStyles(styles.cell, style),
	          hoverable: this.props.hoverable,
	          onClick: this._onCellClick,
	          onHover: this._onCellHover,
	          onHoverExit: this._onCellHoverExit },
	        content
	      );

	      rowColumns.push(columnComponent);
	    }

	    return rowColumns;
	  },

	  _getRowCheckbox: function _getRowCheckbox() {
	    var key = this.props.rowNumber + '-cb';
	    var checkbox = React.createElement(Checkbox, {
	      ref: 'rowSelectCB',
	      name: key,
	      value: 'selected',
	      disabled: !this.props.selectable,
	      defaultChecked: this.props.selected });

	    return {
	      content: checkbox,
	      style: {
	        width: 72,
	        paddingLeft: 24,
	        paddingRight: 24
	      }
	    };
	  },

	  _onRowClick: function _onRowClick(e) {
	    if (this.props.onRowClick) this.props.onRowClick(e, this.props.rowNumber);
	  },

	  _onRowHover: function _onRowHover(e) {
	    if (this.props.onRowHover) this.props.onRowHover(e, this.props.rowNumber);
	  },

	  _onRowHoverExit: function _onRowHoverExit(e) {
	    if (this.props.onRowHoverExit) this.props.onRowHoverExit(e, this.props.rowNumber);
	  },

	  _onCellClick: function _onCellClick(e, columnIndex) {
	    if (this.props.selectable && this.props.onCellClick) this.props.onCellClick(e, this.props.rowNumber, columnIndex);
	    if (this.refs.rowSelectCB !== undefined) {
	      this.refs.rowSelectCB.setChecked(!this.refs.rowSelectCB.isChecked());
	      e.ctrlKey = true;
	    }
	    this._onRowClick(e);
	  },

	  _onCellHover: function _onCellHover(e, columnIndex) {
	    if (this.props.hoverable) {
	      this.setState({ hovered: true });
	      if (this.props.onCellHover) this.props.onCellHover(e, this.props.rowNumber, columnIndex);
	      this._onRowHover(e);
	    }
	  },

	  _onCellHoverExit: function _onCellHoverExit(e, columnIndex) {
	    if (this.props.hoverable) {
	      this.setState({ hovered: false });
	      if (this.props.onCellHoverExit) this.props.onCellHoverExit(e, this.props.rowNumber, columnIndex);
	      this._onRowHoverExit(e);
	    }
	  }

	});

	module.exports = TableRow;

/***/ },
/* 338 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(206);

	var TableRowColumn = React.createClass({
	  displayName: 'TableRowColumn',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    columnNumber: React.PropTypes.number.isRequired,
	    onClick: React.PropTypes.func,
	    onHover: React.PropTypes.func,
	    onHoverExit: React.PropTypes.func,
	    hoverable: React.PropTypes.bool
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      hoverable: false
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      hovered: false
	    };
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.tableRowColumn;
	  },

	  getStyles: function getStyles() {
	    var theme = this.getTheme();
	    var styles = {
	      paddingLeft: theme.spacing,
	      paddingRight: theme.spacing,
	      height: theme.height,
	      textAlign: 'left',
	      fontSize: 13,
	      overflow: 'hidden',
	      whiteSpace: 'nowrap',
	      textOverflow: 'ellipsis'
	    };

	    if (React.Children.count(this.props.children) === 1 && !isNaN(this.props.children)) {
	      styles.textAlign = 'right';
	    }

	    return styles;
	  },

	  render: function render() {
	    var className = 'mui-table-row-column';
	    var styles = this.getStyles();
	    var handlers = {
	      onClick: this._onClick,
	      onMouseEnter: this._onMouseEnter,
	      onMouseLeave: this._onMouseLeave
	    };

	    return React.createElement(
	      'td',
	      _extends({
	        key: this.props.key,
	        className: className,
	        style: this.mergeAndPrefix(styles, this.props.style)
	      }, handlers),
	      this.props.children
	    );
	  },

	  _onClick: function _onClick(e) {
	    if (this.props.onClick) this.props.onClick(e, this.props.columnNumber);
	  },

	  _onMouseEnter: function _onMouseEnter(e) {
	    if (this.props.hoverable) {
	      this.setState({ hovered: true });
	      if (this.props.onHover) this.props.onHover(e, this.props.columnNumber);
	    }
	  },

	  _onMouseLeave: function _onMouseLeave(e) {
	    if (this.props.hoverable) {
	      this.setState({ hovered: false });
	      if (this.props.onHoverExit) this.props.onHoverExit(e, this.props.columnNumber);
	    }
	  }

	});

	module.exports = TableRowColumn;

/***/ },
/* 339 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(206);

	var TableFooter = React.createClass({
	  displayName: 'TableFooter',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    columns: React.PropTypes.array.isRequired
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {};
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.tableFooter;
	  },

	  getStyles: function getStyles() {

	    var styles = {
	      cell: {
	        borderTop: '1px solid ' + this.getTheme().borderColor,
	        verticalAlign: 'bottom',
	        padding: 20,
	        textAlign: 'left',
	        whiteSpace: 'nowrap'
	      }
	    };

	    return styles;
	  },

	  render: function render() {
	    var className = 'mui-table-footer';

	    return React.createElement(
	      'tfoot',
	      { className: className },
	      this._getFooterRow()
	    );
	  },

	  _getFooterRow: function _getFooterRow() {
	    return React.createElement(
	      'tr',
	      { className: 'mui-table-footer-row' },
	      this._getColumnHeaders(this.props.columns, 'f')
	    );
	  },

	  _getColumnHeaders: function _getColumnHeaders(footerData, keyPrefix) {
	    var footers = [];
	    var styles = this.getStyles();

	    for (var index = 0; index < footerData.length; index++) {
	      var _footerData$index = footerData[index];
	      var content = _footerData$index.content;

	      var props = _objectWithoutProperties(_footerData$index, ['content']);

	      if (content === undefined) content = footerData[index];
	      var key = keyPrefix + index;
	      props.style = props.style !== undefined ? this.mergeAndPrefix(props.style, styles.cell) : styles.cell;

	      footers.push(React.createElement(
	        'td',
	        _extends({ key: key, className: 'mui-table-footer-column' }, props),
	        content
	      ));
	    }

	    return footers;
	  }

	});

	module.exports = TableFooter;

/***/ },
/* 340 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var React = __webpack_require__(1);
	var ThemeManager = __webpack_require__(254);

	var Theme = React.createClass({
	  displayName: 'Theme',

	  propTypes: {
	    theme: React.PropTypes.object
	  },

	  childContextTypes: {
	    muiTheme: React.PropTypes.object.isRequired,
	    muiThemeManager: React.PropTypes.object.isRequired
	  },

	  getChildContext: function getChildContext() {
	    return {
	      muiTheme: this.themeManager.getCurrentTheme(),
	      muiThemeManager: this.themeManager
	    };
	  },

	  componentWillMount: function componentWillMount() {
	    this.themeManager = new ThemeManager();

	    if (this.props.theme) {
	      this.themeManager.setTheme(this.props.theme);
	    }
	  },

	  render: function render() {
	    return this.props.children({
	      muiTheme: this.themeManager.getCurrentTheme(),
	      muiThemeManager: this.themeManager
	    });
	  }
	});

	function getDisplayName(Component) {
	  return Component.displayName || Component.name || 'Component';
	}

	function theme(customTheme) {
	  return function (Component) {
	    return React.createClass({

	      displayName: 'Theme(' + getDisplayName(Component) + ')',

	      render: function render() {
	        return React.createElement(
	          Theme,
	          { theme: customTheme },
	          (function (props) {
	            return React.createElement(Component, _extends({}, this.props, props));
	          }).bind(this)
	        );
	      }
	    });
	  };
	}

	module.exports = Theme;
	module.exports.theme = theme;

/***/ },
/* 341 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(342);

/***/ },
/* 342 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(206);
	var WindowListenable = __webpack_require__(264);
	var TimePickerDialog = __webpack_require__(343);
	var TextField = __webpack_require__(293);

	var emptyTime = new Date();
	emptyTime.setHours(0);
	emptyTime.setMinutes(0);

	var TimePicker = React.createClass({
	  displayName: 'TimePicker',

	  mixins: [StylePropable, WindowListenable],

	  propTypes: {
	    defaultTime: React.PropTypes.object,
	    format: React.PropTypes.oneOf(['ampm', '24hr']),
	    onFocus: React.PropTypes.func,
	    onTouchTap: React.PropTypes.func,
	    onChange: React.PropTypes.func,
	    onShow: React.PropTypes.func,
	    onDismiss: React.PropTypes.func
	  },

	  windowListeners: {
	    'keyup': '_handleWindowKeyUp'
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      defaultTime: emptyTime,
	      format: 'ampm'
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      time: this.props.defaultTime,
	      dialogTime: new Date()
	    };
	  },

	  formatTime: function formatTime(date) {
	    var hours = date.getHours();
	    var mins = date.getMinutes();
	    var aditional = '';

	    if (this.props.format === 'ampm') {
	      var isAM = hours < 12;
	      hours = hours % 12;
	      aditional += isAM ? ' am' : ' pm';
	      hours = hours || 12;
	    }

	    hours = hours.toString();
	    mins = mins.toString();

	    if (hours.length < 2) hours = '0' + hours;
	    if (mins.length < 2) mins = '0' + mins;

	    return hours + ':' + mins + aditional;
	  },

	  render: function render() {
	    var _props = this.props;
	    var format = _props.format;
	    var onFocus = _props.onFocus;
	    var onTouchTap = _props.onTouchTap;
	    var onShow = _props.onShow;
	    var onDismiss = _props.onDismiss;

	    var other = _objectWithoutProperties(_props, ['format', 'onFocus', 'onTouchTap', 'onShow', 'onDismiss']);

	    var defaultInputValue = undefined;

	    if (this.props.defaultTime) {
	      defaultInputValue = this.formatTime(this.props.defaultTime);
	    }

	    return React.createElement(
	      'div',
	      null,
	      React.createElement(TextField, _extends({}, other, {
	        ref: 'input',
	        defaultValue: defaultInputValue,
	        onFocus: this._handleInputFocus,
	        onTouchTap: this._handleInputTouchTap })),
	      React.createElement(TimePickerDialog, {
	        ref: 'dialogWindow',
	        initialTime: this.state.dialogTime,
	        onAccept: this._handleDialogAccept,
	        onShow: onShow,
	        onDismiss: onDismiss,
	        format: format })
	    );
	  },

	  getTime: function getTime() {
	    return this.state.time;
	  },

	  setTime: function setTime(t) {
	    this.setState({
	      time: t
	    });
	    this.refs.input.setValue(this.formatTime(t));
	  },

	  _handleDialogAccept: function _handleDialogAccept(t) {
	    this.setTime(t);
	    if (this.props.onChange) this.props.onChange(null, t);
	  },

	  _handleInputFocus: function _handleInputFocus(e) {
	    e.target.blur();
	    if (this.props.onFocus) this.props.onFocus(e);
	  },

	  _handleInputTouchTap: function _handleInputTouchTap(e) {
	    e.preventDefault();

	    this.setState({
	      dialogTime: this.getTime()
	    });

	    this.refs.dialogWindow.show();
	    if (this.props.onTouchTap) this.props.onTouchTap(e);
	  }
	});

	module.exports = TimePicker;

/***/ },
/* 343 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(206);
	var WindowListenable = __webpack_require__(264);
	var KeyCode = __webpack_require__(205);
	var Clock = __webpack_require__(344);
	var Dialog = __webpack_require__(290);
	var FlatButton = __webpack_require__(291);

	var TimePickerDialog = React.createClass({
	  displayName: 'TimePickerDialog',

	  mixins: [StylePropable, WindowListenable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    initialTime: React.PropTypes.object,
	    onAccept: React.PropTypes.func,
	    onShow: React.PropTypes.func,
	    onDismiss: React.PropTypes.func
	  },

	  windowListeners: {
	    keyup: '_handleWindowKeyUp'
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.timePicker;
	  },

	  render: function render() {
	    var _props = this.props;
	    var initialTime = _props.initialTime;
	    var onAccept = _props.onAccept;
	    var format = _props.format;

	    var other = _objectWithoutProperties(_props, ['initialTime', 'onAccept', 'format']);

	    var styles = {
	      root: {
	        fontSize: 14,
	        color: this.getTheme().clockColor
	      },
	      dialogContent: {
	        width: 280
	      },
	      body: {
	        padding: 0
	      }
	    };

	    var actions = [React.createElement(FlatButton, {
	      key: 0,
	      label: 'Cancel',
	      secondary: true,
	      onTouchTap: this._handleCancelTouchTap }), React.createElement(FlatButton, {
	      key: 1,
	      label: 'OK',
	      secondary: true,
	      onTouchTap: this._handleOKTouchTap })];

	    return React.createElement(
	      Dialog,
	      _extends({}, other, {
	        ref: 'dialogWindow',
	        style: this.mergeAndPrefix(styles.root),
	        bodyStyle: this.mergeAndPrefix(styles.body),
	        actions: actions,
	        contentStyle: styles.dialogContent,
	        onDismiss: this._handleDialogDismiss,
	        onShow: this._handleDialogShow,
	        repositionOnUpdate: false }),
	      React.createElement(Clock, {
	        ref: 'clock',
	        format: format,
	        initialTime: initialTime })
	    );
	  },

	  show: function show() {
	    this.refs.dialogWindow.show();
	  },

	  dismiss: function dismiss() {
	    this.refs.dialogWindow.dismiss();
	  },

	  _handleCancelTouchTap: function _handleCancelTouchTap() {
	    this.dismiss();
	  },

	  _handleOKTouchTap: function _handleOKTouchTap() {
	    this.dismiss();
	    if (this.props.onAccept) {
	      this.props.onAccept(this.refs.clock.getSelectedTime());
	    }
	  },

	  _handleDialogShow: function _handleDialogShow() {
	    if (this.props.onShow) {
	      this.props.onShow();
	    }
	  },

	  _handleDialogDismiss: function _handleDialogDismiss() {
	    if (this.props.onDismiss) {
	      this.props.onDismiss();
	    }
	  },

	  _handleWindowKeyUp: function _handleWindowKeyUp(e) {
	    if (this.refs.dialogWindow.isOpen()) {
	      switch (e.keyCode) {
	        case KeyCode.ENTER:
	          this._handleOKTouchTap();
	          break;
	      }
	    }
	  }

	});

	module.exports = TimePickerDialog;

/***/ },
/* 344 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(206);
	var TimeDisplay = __webpack_require__(346);
	var ClockButton = __webpack_require__(345);
	var ClockHours = __webpack_require__(347);
	var ClockMinutes = __webpack_require__(350);

	var Clock = React.createClass({
	  displayName: 'Clock',

	  mixins: [StylePropable],

	  propTypes: {
	    initialTime: React.PropTypes.object,
	    mode: React.PropTypes.oneOf(['hour', 'minute']),
	    format: React.PropTypes.oneOf(['ampm', '24hr']),
	    isActive: React.PropTypes.bool
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      initialTime: new Date()
	    };
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    this.setState({
	      selectedTime: nextProps.initialTime
	    });
	  },

	  getInitialState: function getInitialState() {
	    return {
	      selectedTime: this.props.initialTime,
	      mode: 'hour'
	    };
	  },

	  _setMode: function _setMode(mode) {
	    var _this = this;

	    setTimeout(function () {
	      _this.setState({
	        mode: mode
	      });
	    }, 100);
	  },

	  _setAffix: function _setAffix(affix) {
	    if (affix === this._getAffix()) return;

	    var hours = this.state.selectedTime.getHours();

	    if (affix === 'am') {
	      this.handleChangeHours(hours - 12);
	      return;
	    }

	    this.handleChangeHours(hours + 12);
	  },

	  _getAffix: function _getAffix() {
	    if (this.props.format !== 'ampm') return '';

	    var hours = this.state.selectedTime.getHours();
	    if (hours < 12) {
	      return 'am';
	    }

	    return 'pm';
	  },

	  _getButtons: function _getButtons() {
	    var buttons = [];
	    var isAM = this._getIsAM();

	    if (this.props.format === 'ampm') {
	      buttons = [React.createElement(
	        ClockButton,
	        { position: 'left', onTouchTap: this._setAffix.bind(this, 'am'), selected: isAM },
	        'AM'
	      ), React.createElement(
	        ClockButton,
	        { position: 'right', onTouchTap: this._setAffix.bind(this, 'pm'), selected: !isAM },
	        'PM'
	      )];
	    }
	    return buttons;
	  },

	  _getIsAM: function _getIsAM() {
	    return this._getAffix() === 'am';
	  },

	  render: function render() {
	    var clock = null;
	    var buttons = this._getButtons();

	    var styles = {
	      root: {},

	      container: {
	        height: 280,
	        padding: 10
	      }
	    };

	    if (this.state.mode === 'hour') {
	      clock = React.createElement(ClockHours, { key: 'hours',
	        format: this.props.format,
	        onChange: this.handleChangeHours,
	        initialHours: this.state.selectedTime.getHours() });
	    } else {
	      clock = React.createElement(ClockMinutes, { key: 'minutes',
	        onChange: this.handleChangeMinutes,
	        initialMinutes: this.state.selectedTime.getMinutes() });
	    }

	    return React.createElement(
	      'div',
	      { style: styles.root },
	      React.createElement(TimeDisplay, {
	        selectedTime: this.state.selectedTime,
	        mode: this.state.mode,
	        format: this.props.format,
	        affix: this._getAffix(),
	        onSelectHour: this._setMode.bind(this, 'hour'),
	        onSelectMin: this._setMode.bind(this, 'minute') }),
	      React.createElement(
	        'div',
	        { style: styles.container },
	        clock
	      ),
	      buttons
	    );
	  },

	  handleChangeHours: function handleChangeHours(hours, finished) {
	    var _this2 = this;

	    var time = new Date(this.state.selectedTime);
	    time.setHours(hours);
	    this.setState({
	      selectedTime: time
	    });

	    if (finished) {
	      setTimeout(function () {
	        _this2.setState({
	          mode: 'minute'
	        });
	      }, 100);
	    }
	  },

	  handleChangeMinutes: function handleChangeMinutes(minutes) {
	    var time = new Date(this.state.selectedTime);
	    time.setMinutes(minutes);
	    this.setState({
	      selectedTime: time
	    });
	  },

	  getSelectedTime: function getSelectedTime() {
	    return this.state.selectedTime;
	  }
	});

	module.exports = Clock;

/***/ },
/* 345 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(206);
	var EnhancedButton = __webpack_require__(204);
	var Transitions = __webpack_require__(230);

	var ClockButton = React.createClass({
	  displayName: 'ClockButton',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    position: React.PropTypes.oneOf(['left', 'right'])
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      position: 'left'
	    };
	  },

	  _handleTouchTap: function _handleTouchTap() {
	    this.setState({
	      selected: true
	    });
	    this.props.onTouchTap();
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.timePicker;
	  },

	  render: function render() {
	    var _props = this.props;
	    var className = _props.className;

	    var other = _objectWithoutProperties(_props, ['className']);

	    var styles = {
	      root: {
	        position: 'absolute',
	        bottom: 65,
	        pointerEvents: 'auto',
	        height: 50,
	        width: 50,
	        borderRadius: '100%'
	      },

	      label: {
	        position: 'absolute',
	        top: 17,
	        left: 14
	      },

	      select: {
	        position: 'absolute',
	        height: 50,
	        width: 50,
	        top: 0,
	        left: 0,
	        opacity: 0,
	        borderRadius: '50%',
	        transform: 'scale(0)',
	        transition: Transitions.easeOut(),
	        backgroundColor: this.getTheme().accentColor
	      }
	    };

	    if (this.props.selected) {
	      styles.label.color = this.getTheme().selectTextColor;
	      styles.select.opacity = 1;
	      styles.select.transform = 'scale(1)';
	    }

	    if (this.props.position === 'right') {
	      styles.root.right = '5px';
	    } else {
	      styles.root.left = '5px';
	    }

	    return React.createElement(
	      EnhancedButton,
	      _extends({}, other, {
	        style: this.mergeAndPrefix(styles.root),
	        disableFocusRipple: true,
	        disableTouchRipple: true,
	        onTouchTap: this._handleTouchTap }),
	      React.createElement('span', { style: this.mergeAndPrefix(styles.select) }),
	      React.createElement(
	        'span',
	        { style: this.mergeAndPrefix(styles.label) },
	        this.props.children
	      )
	    );
	  }
	});

	module.exports = ClockButton;

/***/ },
/* 346 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(206);

	var TimeDisplay = React.createClass({
	  displayName: 'TimeDisplay',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    selectedTime: React.PropTypes.object.isRequired,
	    format: React.PropTypes.oneOf(['ampm', '24hr']),
	    mode: React.PropTypes.oneOf(['hour', 'minute']),
	    affix: React.PropTypes.oneOf(['', 'pm', 'am'])
	  },

	  getInitialState: function getInitialState() {
	    return {
	      transitionDirection: 'up'
	    };
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      mode: 'hour',
	      affix: ''
	    };
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    var direction = undefined;

	    if (nextProps.selectedTime !== this.props.selectedTime) {
	      direction = nextProps.selectedTime > this.props.selectedTime ? 'up' : 'down';

	      this.setState({
	        transitionDirection: direction
	      });
	    }
	  },

	  sanitizeTime: function sanitizeTime() {
	    var hour = this.props.selectedTime.getHours();
	    var min = this.props.selectedTime.getMinutes().toString();

	    if (this.props.format === 'ampm') {
	      hour %= 12;
	      hour = hour || 12;
	    }

	    hour = hour.toString();
	    if (hour.length < 2) hour = '0' + hour;
	    if (min.length < 2) min = '0' + min;

	    return [hour, min];
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.timePicker;
	  },

	  render: function render() {
	    var _props = this.props;
	    var selectedTime = _props.selectedTime;
	    var mode = _props.mode;

	    var other = _objectWithoutProperties(_props, ['selectedTime', 'mode']);

	    var styles = {
	      root: {
	        textAlign: 'center',
	        position: 'relative',
	        width: 280,
	        height: '100%'
	      },

	      time: {
	        margin: '6px 0',
	        lineHeight: '58px',
	        height: 58,
	        fontSize: '58px'
	      },

	      box: {
	        padding: '16px 0',
	        backgroundColor: this.getTheme().color,
	        color: this.getTheme().textColor
	      },

	      hour: {},

	      minute: {}
	    };

	    var _sanitizeTime = this.sanitizeTime();

	    var _sanitizeTime2 = _slicedToArray(_sanitizeTime, 2);

	    var hour = _sanitizeTime2[0];
	    var min = _sanitizeTime2[1];

	    styles[mode].color = this.getTheme().accentColor;

	    return React.createElement(
	      'div',
	      _extends({}, other, { style: this.mergeAndPrefix(styles.root) }),
	      React.createElement(
	        'div',
	        { style: this.mergeAndPrefix(styles.box) },
	        React.createElement(
	          'div',
	          { style: this.mergeAndPrefix(styles.time) },
	          React.createElement(
	            'span',
	            { style: this.mergeAndPrefix(styles.hour), onTouchTap: this.props.onSelectHour },
	            hour
	          ),
	          React.createElement(
	            'span',
	            null,
	            ':'
	          ),
	          React.createElement(
	            'span',
	            { style: this.mergeAndPrefix(styles.minute), onTouchTap: this.props.onSelectMin },
	            min
	          )
	        ),
	        React.createElement(
	          'span',
	          { key: 'affix' },
	          this.props.affix.toUpperCase()
	        )
	      )
	    );
	  }

	});

	module.exports = TimeDisplay;

/***/ },
/* 347 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(206);
	var ClockNumber = __webpack_require__(348);
	var ClockPointer = __webpack_require__(349);

	function rad2deg(rad) {
	  return rad * 57.29577951308232;
	}

	function getTouchEventOffsetValues(e) {
	  var el = e.target;
	  var boundingRect = el.getBoundingClientRect();

	  var offset = {
	    offsetX: e.clientX - boundingRect.left,
	    offsetY: e.clientY - boundingRect.top
	  };

	  return offset;
	}

	var ClockHours = React.createClass({
	  displayName: 'ClockHours',

	  mixins: [StylePropable],

	  propTypes: {
	    initialHours: React.PropTypes.number,
	    onChange: React.PropTypes.func,
	    format: React.PropTypes.oneOf(['ampm', '24hr'])
	  },

	  center: { x: 0, y: 0 },
	  basePoint: { x: 0, y: 0 },

	  isMousePressed: function isMousePressed(e) {
	    if (typeof e.buttons === 'undefined') {
	      return e.nativeEvent.which;
	    }

	    return e.buttons;
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      initialHours: new Date().getHours(),
	      onChange: function onChange() {},
	      format: 'ampm'
	    };
	  },

	  componentDidMount: function componentDidMount() {
	    var clockElement = React.findDOMNode(this.refs.mask);

	    this.center = {
	      x: clockElement.offsetWidth / 2,
	      y: clockElement.offsetHeight / 2
	    };

	    this.basePoint = {
	      x: this.center.x,
	      y: 0
	    };
	  },

	  handleUp: function handleUp(e) {
	    e.preventDefault();
	    this.setClock(e.nativeEvent, true);
	  },

	  handleMove: function handleMove(e) {
	    e.preventDefault();
	    if (this.isMousePressed(e) !== 1) return;
	    this.setClock(e.nativeEvent, false);
	  },

	  handleTouchMove: function handleTouchMove(e) {
	    e.preventDefault();
	    this.setClock(e.changedTouches[0], false);
	  },

	  handleTouchEnd: function handleTouchEnd(e) {
	    e.preventDefault();
	    this.setClock(e.changedTouches[0], true);
	  },

	  setClock: function setClock(e, finish) {
	    if (typeof e.offsetX === 'undefined') {
	      var offset = getTouchEventOffsetValues(e);

	      e.offsetX = offset.offsetX;
	      e.offsetY = offset.offsetY;
	    }

	    var hours = this.getHours(e.offsetX, e.offsetY);

	    this.props.onChange(hours, finish);
	  },

	  getHours: function getHours(offsetX, offsetY) {
	    var step = 30;
	    var x = offsetX - this.center.x;
	    var y = offsetY - this.center.y;
	    var cx = this.basePoint.x - this.center.x;
	    var cy = this.basePoint.y - this.center.y;

	    var atan = Math.atan2(cx, cy) - Math.atan2(x, y);

	    var deg = rad2deg(atan);
	    deg = Math.round(deg / step) * step;
	    deg %= 360;

	    var value = Math.floor(deg / step) || 0;

	    var delta = Math.pow(x, 2) + Math.pow(y, 2);
	    var distance = Math.sqrt(delta);

	    value = value || 12;
	    if (this.props.format === '24hr') {
	      if (distance < 90) {
	        value += 12;
	        value %= 24;
	      }
	    } else {
	      value %= 12;
	    }

	    return value;
	  },

	  _getSelected: function _getSelected() {
	    var hour = this.props.initialHours;

	    if (this.props.format === 'ampm') {
	      hour %= 12;
	      hour = hour || 12;
	    }

	    return hour;
	  },

	  _getHourNumbers: function _getHourNumbers() {
	    var _this = this;

	    var style = {
	      pointerEvents: 'none'
	    };
	    var hourSize = this.props.format === 'ampm' ? 12 : 24;

	    var hours = [];
	    for (var i = 1; i <= hourSize; i++) {
	      hours.push(i % 24);
	    }

	    return hours.map(function (hour) {
	      var isSelected = _this._getSelected() === hour;
	      return React.createElement(ClockNumber, { key: hour, style: style, isSelected: isSelected, type: 'hour', value: hour });
	    });
	  },

	  render: function render() {
	    var styles = {
	      root: {
	        height: '100%',
	        width: '100%',
	        borderRadius: '100%',
	        position: 'relative',
	        pointerEvents: 'none',
	        boxSizing: 'border-box'
	      },

	      hitMask: {
	        height: '100%',
	        width: '100%',
	        pointerEvents: 'auto'
	      }
	    };

	    var hours = this._getSelected();
	    var numbers = this._getHourNumbers();

	    return React.createElement(
	      'div',
	      { ref: 'clock', style: this.mergeAndPrefix(styles.root) },
	      React.createElement(ClockPointer, { hasSelected: true, value: hours, type: 'hour' }),
	      numbers,
	      React.createElement('div', { ref: 'mask', style: this.mergeAndPrefix(styles.hitMask), onTouchMove: this.handleTouchMove, onTouchEnd: this.handleTouchEnd, onMouseUp: this.handleUp, onMouseMove: this.handleMove })
	    );
	  }
	});

	module.exports = ClockHours;

/***/ },
/* 348 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(206);

	var ClockNumber = React.createClass({
	  displayName: 'ClockNumber',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    value: React.PropTypes.number,
	    type: React.PropTypes.oneOf(['hour', 'minute']),
	    onSelected: React.PropTypes.func,
	    isSelected: React.PropTypes.bool
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      value: 0,
	      type: 'minute',
	      isSelected: false
	    };
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.timePicker;
	  },

	  render: function render() {
	    var pos = this.props.value;
	    var inner = false;

	    if (this.props.type === 'hour') {
	      inner = pos < 1 || pos > 12;
	      pos %= 12;
	    } else {
	      pos = pos / 5;
	    }

	    var positions = [[0, 5], [54.5, 16.6], [94.4, 59.5], [109, 114], [94.4, 168.5], [54.5, 208.4], [0, 223], [-54.5, 208.4], [-94.4, 168.5], [-109, 114], [-94.4, 59.5], [-54.5, 19.6]];

	    var innerPositions = [[0, 40], [36.9, 49.9], [64, 77], [74, 114], [64, 151], [37, 178], [0, 188], [-37, 178], [-64, 151], [-74, 114], [-64, 77], [-37, 50]];

	    var styles = {
	      root: {
	        display: 'inline-block',
	        position: 'absolute',
	        width: 32,
	        height: 32,
	        borderRadius: '100%',
	        left: 'calc(50% - 16px)',
	        top: 10,
	        textAlign: 'center',
	        paddingTop: 5,
	        userSelect: 'none', /* Chrome all / Safari all */
	        fontSize: '1.1em',
	        pointerEvents: 'none',
	        boxSizing: 'border-box'
	      }
	    };

	    if (this.props.isSelected) {
	      styles.root.backgroundColor = this.getTheme().accentColor;
	      styles.root.color = this.getTheme().selectTextColor;
	    }

	    var transformPos = positions[pos];

	    if (inner) {
	      styles.root.width = '28px';
	      styles.root.height = '28px';
	      styles.root.left = 'calc(50% - 14px)';
	      transformPos = innerPositions[pos];
	    }

	    var _transformPos = _slicedToArray(transformPos, 2);

	    var x = _transformPos[0];
	    var y = _transformPos[1];

	    styles.root.transform = 'translate(' + x + 'px, ' + y + 'px)';

	    return React.createElement(
	      'span',
	      { style: this.mergeAndPrefix(styles.root) },
	      this.props.value
	    );
	  }
	});

	module.exports = ClockNumber;

/***/ },
/* 349 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(206);

	var ClockPointer = React.createClass({
	  displayName: 'ClockPointer',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    value: React.PropTypes.number,
	    type: React.PropTypes.oneOf(['hour', 'minute'])
	  },

	  getInitialState: function getInitialState() {
	    return {
	      inner: this.isInner(this.props.value)
	    };
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      value: null,
	      type: 'minute',
	      hasSelected: false
	    };
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    this.setState({
	      inner: this.isInner(nextProps.value)
	    });
	  },

	  isInner: function isInner(value) {
	    if (this.props.type !== 'hour') {
	      return false;
	    }
	    return value < 1 || value > 12;
	  },

	  getAngle: function getAngle() {
	    if (this.props.type === 'hour') {
	      return this.calcAngle(this.props.value, 12);
	    }

	    return this.calcAngle(this.props.value, 60);
	  },

	  calcAngle: function calcAngle(value, base) {
	    value %= base;
	    var angle = 360 / base * value;
	    return angle;
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.timePicker;
	  },

	  render: function render() {
	    if (this.props.value === null) {
	      return React.createElement('span', null);
	    }

	    var angle = this.getAngle();

	    var styles = {
	      root: {
	        height: '30%',
	        background: this.getTheme().accentColor,
	        width: 2,
	        left: 'calc(50% - 1px)',
	        position: 'absolute',
	        bottom: '50%',
	        transformOrigin: 'bottom',
	        pointerEvents: 'none',
	        transform: 'rotateZ(' + angle + 'deg)'
	      },
	      mark: {
	        background: this.getTheme().selectTextColor,
	        border: '4px solid ' + this.getTheme().accentColor,
	        width: 7,
	        height: 7,
	        position: 'absolute',
	        top: -5,
	        left: -6,
	        borderRadius: '100%'
	      }
	    };

	    if (!this.state.inner) {
	      styles.root.height = '40%';
	    }

	    if (this.props.hasSelected) {
	      styles.mark.display = 'none';
	    }

	    return React.createElement(
	      'div',
	      { style: this.mergeAndPrefix(styles.root) },
	      React.createElement('div', { style: styles.mark })
	    );
	  }
	});

	module.exports = ClockPointer;

/***/ },
/* 350 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(206);
	var ClockNumber = __webpack_require__(348);
	var ClockPointer = __webpack_require__(349);

	function rad2deg(rad) {
	  return rad * 57.29577951308232;
	}

	function getTouchEventOffsetValues(e) {
	  var el = e.target;
	  var boundingRect = el.getBoundingClientRect();

	  var offset = {
	    offsetX: e.clientX - boundingRect.left,
	    offsetY: e.clientY - boundingRect.top
	  };

	  return offset;
	}

	var ClockMinutes = React.createClass({
	  displayName: 'ClockMinutes',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    initialMinutes: React.PropTypes.number,
	    onChange: React.PropTypes.func
	  },

	  center: { x: 0, y: 0 },
	  basePoint: { x: 0, y: 0 },

	  isMousePressed: function isMousePressed(e) {

	    if (typeof e.buttons === 'undefined') {
	      return e.nativeEvent.which;
	    }
	    return e.buttons;
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      initialMinutes: new Date().getMinutes(),
	      onChange: function onChange() {}
	    };
	  },

	  componentDidMount: function componentDidMount() {
	    var clockElement = React.findDOMNode(this.refs.mask);

	    this.center = {
	      x: clockElement.offsetWidth / 2,
	      y: clockElement.offsetHeight / 2
	    };

	    this.basePoint = {
	      x: this.center.x,
	      y: 0
	    };
	  },

	  handleUp: function handleUp(e) {
	    e.preventDefault();
	    this.setClock(e.nativeEvent, true);
	  },

	  handleMove: function handleMove(e) {
	    e.preventDefault();
	    if (this.isMousePressed(e) !== 1) return;
	    this.setClock(e.nativeEvent, false);
	  },

	  handleTouch: function handleTouch(e) {
	    e.preventDefault();
	    this.setClock(e.changedTouches[0], false);
	  },

	  setClock: function setClock(e, finish) {
	    if (typeof e.offsetX === 'undefined') {
	      var offset = getTouchEventOffsetValues(e);

	      e.offsetX = offset.offsetX;
	      e.offsetY = offset.offsetY;
	    }

	    var minutes = this.getMinutes(e.offsetX, e.offsetY);

	    this.props.onChange(minutes, finish);
	  },

	  getMinutes: function getMinutes(offsetX, offsetY) {
	    var step = 6;
	    var x = offsetX - this.center.x;
	    var y = offsetY - this.center.y;
	    var cx = this.basePoint.x - this.center.x;
	    var cy = this.basePoint.y - this.center.y;

	    var atan = Math.atan2(cx, cy) - Math.atan2(x, y);

	    var deg = rad2deg(atan);
	    deg = Math.round(deg / step) * step;
	    deg %= 360;

	    var value = Math.floor(deg / step) || 0;

	    return value;
	  },

	  _getMinuteNumbers: function _getMinuteNumbers() {
	    var minutes = [];
	    for (var i = 0; i < 12; i++) {
	      minutes.push(i * 5);
	    }
	    var selectedMinutes = this.props.initialMinutes;
	    var hasSelected = false;

	    var numbers = minutes.map(function (minute) {
	      var isSelected = selectedMinutes === minute;
	      if (isSelected) hasSelected = true;
	      return React.createElement(ClockNumber, { key: minute, isSelected: isSelected, type: 'minute', value: minute });
	    });

	    return {
	      numbers: numbers,
	      hasSelected: hasSelected,
	      selected: selectedMinutes
	    };
	  },

	  render: function render() {
	    var styles = {
	      root: {
	        height: '100%',
	        width: '100%',
	        borderRadius: '100%',
	        position: 'relative',
	        pointerEvents: 'none',
	        boxSizing: 'border-box'
	      },

	      hitMask: {
	        height: '100%',
	        width: '100%',
	        pointerEvents: 'auto'
	      }
	    };

	    var minutes = this._getMinuteNumbers();

	    return React.createElement(
	      'div',
	      { ref: 'clock', style: this.mergeAndPrefix(styles.root) },
	      React.createElement(ClockPointer, { value: minutes.selected, type: 'minute' }),
	      minutes.numbers,
	      React.createElement('div', { ref: 'mask', style: this.mergeAndPrefix(styles.hitMask), hasSelected: minutes.hasSelected, onTouchMove: this.handleTouch, onTouchEnd: this.handleTouch, onMouseUp: this.handleUp, onMouseMove: this.handleMove })
	    );
	  }
	});

	module.exports = ClockMinutes;

/***/ },
/* 351 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(206);

	var ToolbarSeparator = React.createClass({
	  displayName: 'ToolbarSeparator',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.toolbar;
	  },

	  getSpacing: function getSpacing() {
	    return this.context.muiTheme.spacing;
	  },

	  render: function render() {
	    var styles = this.mergeAndPrefix({
	      backgroundColor: this.getTheme().separatorColor,
	      display: 'inline-block',
	      height: this.getSpacing().desktopGutterMore,
	      marginLeft: this.getSpacing().desktopGutter,
	      position: 'relative',
	      top: (this.getTheme().height - this.getSpacing().desktopGutterMore) / 2,
	      width: 1
	    }, this.props.style);

	    return React.createElement('span', { className: this.props.className, style: styles });
	  }

	});

	module.exports = ToolbarSeparator;

/***/ },
/* 352 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = __webpack_require__(1);
	var StylePropable = __webpack_require__(206);

	var ToolbarTitle = React.createClass({
	  displayName: 'ToolbarTitle',

	  mixins: [StylePropable],

	  contextTypes: {
	    muiTheme: React.PropTypes.object
	  },

	  propTypes: {
	    text: React.PropTypes.string
	  },

	  getTheme: function getTheme() {
	    return this.context.muiTheme.component.toolbar;
	  },

	  render: function render() {
	    var _props = this.props;
	    var style = _props.style;
	    var text = _props.text;

	    var other = _objectWithoutProperties(_props, ['style', 'text']);

	    var styles = this.mergeAndPrefix({
	      paddingRight: this.context.muiTheme.spacing.desktopGutterLess,
	      lineHeight: this.getTheme().height + 'px',
	      fontSize: this.getTheme().titleFontSize + 'px',
	      display: 'inline-block',
	      position: 'relative'
	    }, style);

	    return React.createElement(
	      'span',
	      _extends({ style: styles }, other),
	      text
	    );
	  }

	});

	module.exports = ToolbarTitle;

/***/ },
/* 353 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = {
	  CssEvent: __webpack_require__(274),
	  Dom: __webpack_require__(234),
	  Events: __webpack_require__(265),
	  KeyCode: __webpack_require__(205),
	  KeyLine: __webpack_require__(298),
	  ColorManipulator: __webpack_require__(257),
	  Extend: __webpack_require__(227),
	  UniqueId: __webpack_require__(266)
	};

/***/ },
/* 354 */,
/* 355 */,
/* 356 */,
/* 357 */,
/* 358 */,
/* 359 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * jQuery JavaScript Library v2.1.4
	 * http://jquery.com/
	 *
	 * Includes Sizzle.js
	 * http://sizzlejs.com/
	 *
	 * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2015-04-28T16:01Z
	 */

	(function( global, factory ) {

		if ( typeof module === "object" && typeof module.exports === "object" ) {
			// For CommonJS and CommonJS-like environments where a proper `window`
			// is present, execute the factory and get jQuery.
			// For environments that do not have a `window` with a `document`
			// (such as Node.js), expose a factory as module.exports.
			// This accentuates the need for the creation of a real `window`.
			// e.g. var jQuery = require("jquery")(window);
			// See ticket #14549 for more info.
			module.exports = global.document ?
				factory( global, true ) :
				function( w ) {
					if ( !w.document ) {
						throw new Error( "jQuery requires a window with a document" );
					}
					return factory( w );
				};
		} else {
			factory( global );
		}

	// Pass this if window is not defined yet
	}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

	// Support: Firefox 18+
	// Can't be in strict mode, several libs including ASP.NET trace
	// the stack via arguments.caller.callee and Firefox dies if
	// you try to trace through "use strict" call chains. (#13335)
	//

	var arr = [];

	var slice = arr.slice;

	var concat = arr.concat;

	var push = arr.push;

	var indexOf = arr.indexOf;

	var class2type = {};

	var toString = class2type.toString;

	var hasOwn = class2type.hasOwnProperty;

	var support = {};



	var
		// Use the correct document accordingly with window argument (sandbox)
		document = window.document,

		version = "2.1.4",

		// Define a local copy of jQuery
		jQuery = function( selector, context ) {
			// The jQuery object is actually just the init constructor 'enhanced'
			// Need init if jQuery is called (just allow error to be thrown if not included)
			return new jQuery.fn.init( selector, context );
		},

		// Support: Android<4.1
		// Make sure we trim BOM and NBSP
		rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

		// Matches dashed string for camelizing
		rmsPrefix = /^-ms-/,
		rdashAlpha = /-([\da-z])/gi,

		// Used by jQuery.camelCase as callback to replace()
		fcamelCase = function( all, letter ) {
			return letter.toUpperCase();
		};

	jQuery.fn = jQuery.prototype = {
		// The current version of jQuery being used
		jquery: version,

		constructor: jQuery,

		// Start with an empty selector
		selector: "",

		// The default length of a jQuery object is 0
		length: 0,

		toArray: function() {
			return slice.call( this );
		},

		// Get the Nth element in the matched element set OR
		// Get the whole matched element set as a clean array
		get: function( num ) {
			return num != null ?

				// Return just the one element from the set
				( num < 0 ? this[ num + this.length ] : this[ num ] ) :

				// Return all the elements in a clean array
				slice.call( this );
		},

		// Take an array of elements and push it onto the stack
		// (returning the new matched element set)
		pushStack: function( elems ) {

			// Build a new jQuery matched element set
			var ret = jQuery.merge( this.constructor(), elems );

			// Add the old object onto the stack (as a reference)
			ret.prevObject = this;
			ret.context = this.context;

			// Return the newly-formed element set
			return ret;
		},

		// Execute a callback for every element in the matched set.
		// (You can seed the arguments with an array of args, but this is
		// only used internally.)
		each: function( callback, args ) {
			return jQuery.each( this, callback, args );
		},

		map: function( callback ) {
			return this.pushStack( jQuery.map(this, function( elem, i ) {
				return callback.call( elem, i, elem );
			}));
		},

		slice: function() {
			return this.pushStack( slice.apply( this, arguments ) );
		},

		first: function() {
			return this.eq( 0 );
		},

		last: function() {
			return this.eq( -1 );
		},

		eq: function( i ) {
			var len = this.length,
				j = +i + ( i < 0 ? len : 0 );
			return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
		},

		end: function() {
			return this.prevObject || this.constructor(null);
		},

		// For internal use only.
		// Behaves like an Array's method, not like a jQuery method.
		push: push,
		sort: arr.sort,
		splice: arr.splice
	};

	jQuery.extend = jQuery.fn.extend = function() {
		var options, name, src, copy, copyIsArray, clone,
			target = arguments[0] || {},
			i = 1,
			length = arguments.length,
			deep = false;

		// Handle a deep copy situation
		if ( typeof target === "boolean" ) {
			deep = target;

			// Skip the boolean and the target
			target = arguments[ i ] || {};
			i++;
		}

		// Handle case when target is a string or something (possible in deep copy)
		if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
			target = {};
		}

		// Extend jQuery itself if only one argument is passed
		if ( i === length ) {
			target = this;
			i--;
		}

		for ( ; i < length; i++ ) {
			// Only deal with non-null/undefined values
			if ( (options = arguments[ i ]) != null ) {
				// Extend the base object
				for ( name in options ) {
					src = target[ name ];
					copy = options[ name ];

					// Prevent never-ending loop
					if ( target === copy ) {
						continue;
					}

					// Recurse if we're merging plain objects or arrays
					if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
						if ( copyIsArray ) {
							copyIsArray = false;
							clone = src && jQuery.isArray(src) ? src : [];

						} else {
							clone = src && jQuery.isPlainObject(src) ? src : {};
						}

						// Never move original objects, clone them
						target[ name ] = jQuery.extend( deep, clone, copy );

					// Don't bring in undefined values
					} else if ( copy !== undefined ) {
						target[ name ] = copy;
					}
				}
			}
		}

		// Return the modified object
		return target;
	};

	jQuery.extend({
		// Unique for each copy of jQuery on the page
		expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

		// Assume jQuery is ready without the ready module
		isReady: true,

		error: function( msg ) {
			throw new Error( msg );
		},

		noop: function() {},

		isFunction: function( obj ) {
			return jQuery.type(obj) === "function";
		},

		isArray: Array.isArray,

		isWindow: function( obj ) {
			return obj != null && obj === obj.window;
		},

		isNumeric: function( obj ) {
			// parseFloat NaNs numeric-cast false positives (null|true|false|"")
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
			// subtraction forces infinities to NaN
			// adding 1 corrects loss of precision from parseFloat (#15100)
			return !jQuery.isArray( obj ) && (obj - parseFloat( obj ) + 1) >= 0;
		},

		isPlainObject: function( obj ) {
			// Not plain objects:
			// - Any object or value whose internal [[Class]] property is not "[object Object]"
			// - DOM nodes
			// - window
			if ( jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
				return false;
			}

			if ( obj.constructor &&
					!hasOwn.call( obj.constructor.prototype, "isPrototypeOf" ) ) {
				return false;
			}

			// If the function hasn't returned already, we're confident that
			// |obj| is a plain object, created by {} or constructed with new Object
			return true;
		},

		isEmptyObject: function( obj ) {
			var name;
			for ( name in obj ) {
				return false;
			}
			return true;
		},

		type: function( obj ) {
			if ( obj == null ) {
				return obj + "";
			}
			// Support: Android<4.0, iOS<6 (functionish RegExp)
			return typeof obj === "object" || typeof obj === "function" ?
				class2type[ toString.call(obj) ] || "object" :
				typeof obj;
		},

		// Evaluates a script in a global context
		globalEval: function( code ) {
			var script,
				indirect = eval;

			code = jQuery.trim( code );

			if ( code ) {
				// If the code includes a valid, prologue position
				// strict mode pragma, execute code by injecting a
				// script tag into the document.
				if ( code.indexOf("use strict") === 1 ) {
					script = document.createElement("script");
					script.text = code;
					document.head.appendChild( script ).parentNode.removeChild( script );
				} else {
				// Otherwise, avoid the DOM node creation, insertion
				// and removal by using an indirect global eval
					indirect( code );
				}
			}
		},

		// Convert dashed to camelCase; used by the css and data modules
		// Support: IE9-11+
		// Microsoft forgot to hump their vendor prefix (#9572)
		camelCase: function( string ) {
			return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
		},

		nodeName: function( elem, name ) {
			return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
		},

		// args is for internal usage only
		each: function( obj, callback, args ) {
			var value,
				i = 0,
				length = obj.length,
				isArray = isArraylike( obj );

			if ( args ) {
				if ( isArray ) {
					for ( ; i < length; i++ ) {
						value = callback.apply( obj[ i ], args );

						if ( value === false ) {
							break;
						}
					}
				} else {
					for ( i in obj ) {
						value = callback.apply( obj[ i ], args );

						if ( value === false ) {
							break;
						}
					}
				}

			// A special, fast, case for the most common use of each
			} else {
				if ( isArray ) {
					for ( ; i < length; i++ ) {
						value = callback.call( obj[ i ], i, obj[ i ] );

						if ( value === false ) {
							break;
						}
					}
				} else {
					for ( i in obj ) {
						value = callback.call( obj[ i ], i, obj[ i ] );

						if ( value === false ) {
							break;
						}
					}
				}
			}

			return obj;
		},

		// Support: Android<4.1
		trim: function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},

		// results is for internal usage only
		makeArray: function( arr, results ) {
			var ret = results || [];

			if ( arr != null ) {
				if ( isArraylike( Object(arr) ) ) {
					jQuery.merge( ret,
						typeof arr === "string" ?
						[ arr ] : arr
					);
				} else {
					push.call( ret, arr );
				}
			}

			return ret;
		},

		inArray: function( elem, arr, i ) {
			return arr == null ? -1 : indexOf.call( arr, elem, i );
		},

		merge: function( first, second ) {
			var len = +second.length,
				j = 0,
				i = first.length;

			for ( ; j < len; j++ ) {
				first[ i++ ] = second[ j ];
			}

			first.length = i;

			return first;
		},

		grep: function( elems, callback, invert ) {
			var callbackInverse,
				matches = [],
				i = 0,
				length = elems.length,
				callbackExpect = !invert;

			// Go through the array, only saving the items
			// that pass the validator function
			for ( ; i < length; i++ ) {
				callbackInverse = !callback( elems[ i ], i );
				if ( callbackInverse !== callbackExpect ) {
					matches.push( elems[ i ] );
				}
			}

			return matches;
		},

		// arg is for internal usage only
		map: function( elems, callback, arg ) {
			var value,
				i = 0,
				length = elems.length,
				isArray = isArraylike( elems ),
				ret = [];

			// Go through the array, translating each of the items to their new values
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback( elems[ i ], i, arg );

					if ( value != null ) {
						ret.push( value );
					}
				}

			// Go through every key on the object,
			} else {
				for ( i in elems ) {
					value = callback( elems[ i ], i, arg );

					if ( value != null ) {
						ret.push( value );
					}
				}
			}

			// Flatten any nested arrays
			return concat.apply( [], ret );
		},

		// A global GUID counter for objects
		guid: 1,

		// Bind a function to a context, optionally partially applying any
		// arguments.
		proxy: function( fn, context ) {
			var tmp, args, proxy;

			if ( typeof context === "string" ) {
				tmp = fn[ context ];
				context = fn;
				fn = tmp;
			}

			// Quick check to determine if target is callable, in the spec
			// this throws a TypeError, but we will just return undefined.
			if ( !jQuery.isFunction( fn ) ) {
				return undefined;
			}

			// Simulated bind
			args = slice.call( arguments, 2 );
			proxy = function() {
				return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
			};

			// Set the guid of unique handler to the same of original handler, so it can be removed
			proxy.guid = fn.guid = fn.guid || jQuery.guid++;

			return proxy;
		},

		now: Date.now,

		// jQuery.support is not used in Core but other projects attach their
		// properties to it so it needs to exist.
		support: support
	});

	// Populate the class2type map
	jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	});

	function isArraylike( obj ) {

		// Support: iOS 8.2 (not reproducible in simulator)
		// `in` check used to prevent JIT error (gh-2145)
		// hasOwn isn't used here due to false negatives
		// regarding Nodelist length in IE
		var length = "length" in obj && obj.length,
			type = jQuery.type( obj );

		if ( type === "function" || jQuery.isWindow( obj ) ) {
			return false;
		}

		if ( obj.nodeType === 1 && length ) {
			return true;
		}

		return type === "array" || length === 0 ||
			typeof length === "number" && length > 0 && ( length - 1 ) in obj;
	}
	var Sizzle =
	/*!
	 * Sizzle CSS Selector Engine v2.2.0-pre
	 * http://sizzlejs.com/
	 *
	 * Copyright 2008, 2014 jQuery Foundation, Inc. and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2014-12-16
	 */
	(function( window ) {

	var i,
		support,
		Expr,
		getText,
		isXML,
		tokenize,
		compile,
		select,
		outermostContext,
		sortInput,
		hasDuplicate,

		// Local document vars
		setDocument,
		document,
		docElem,
		documentIsHTML,
		rbuggyQSA,
		rbuggyMatches,
		matches,
		contains,

		// Instance-specific data
		expando = "sizzle" + 1 * new Date(),
		preferredDoc = window.document,
		dirruns = 0,
		done = 0,
		classCache = createCache(),
		tokenCache = createCache(),
		compilerCache = createCache(),
		sortOrder = function( a, b ) {
			if ( a === b ) {
				hasDuplicate = true;
			}
			return 0;
		},

		// General-purpose constants
		MAX_NEGATIVE = 1 << 31,

		// Instance methods
		hasOwn = ({}).hasOwnProperty,
		arr = [],
		pop = arr.pop,
		push_native = arr.push,
		push = arr.push,
		slice = arr.slice,
		// Use a stripped-down indexOf as it's faster than native
		// http://jsperf.com/thor-indexof-vs-for/5
		indexOf = function( list, elem ) {
			var i = 0,
				len = list.length;
			for ( ; i < len; i++ ) {
				if ( list[i] === elem ) {
					return i;
				}
			}
			return -1;
		},

		booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

		// Regular expressions

		// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
		whitespace = "[\\x20\\t\\r\\n\\f]",
		// http://www.w3.org/TR/css3-syntax/#characters
		characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

		// Loosely modeled on CSS identifier characters
		// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
		// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
		identifier = characterEncoding.replace( "w", "w#" ),

		// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
		attributes = "\\[" + whitespace + "*(" + characterEncoding + ")(?:" + whitespace +
			// Operator (capture 2)
			"*([*^$|!~]?=)" + whitespace +
			// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
			"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
			"*\\]",

		pseudos = ":(" + characterEncoding + ")(?:\\((" +
			// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
			// 1. quoted (capture 3; capture 4 or capture 5)
			"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
			// 2. simple (capture 6)
			"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
			// 3. anything else (capture 2)
			".*" +
			")\\)|)",

		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
		rwhitespace = new RegExp( whitespace + "+", "g" ),
		rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

		rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
		rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

		rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

		rpseudo = new RegExp( pseudos ),
		ridentifier = new RegExp( "^" + identifier + "$" ),

		matchExpr = {
			"ID": new RegExp( "^#(" + characterEncoding + ")" ),
			"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
			"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
			"ATTR": new RegExp( "^" + attributes ),
			"PSEUDO": new RegExp( "^" + pseudos ),
			"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
				"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
				"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
			"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
			// For use in libraries implementing .is()
			// We use this for POS matching in `select`
			"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
				whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
		},

		rinputs = /^(?:input|select|textarea|button)$/i,
		rheader = /^h\d$/i,

		rnative = /^[^{]+\{\s*\[native \w/,

		// Easily-parseable/retrievable ID or TAG or CLASS selectors
		rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

		rsibling = /[+~]/,
		rescape = /'|\\/g,

		// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
		runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
		funescape = function( _, escaped, escapedWhitespace ) {
			var high = "0x" + escaped - 0x10000;
			// NaN means non-codepoint
			// Support: Firefox<24
			// Workaround erroneous numeric interpretation of +"0x"
			return high !== high || escapedWhitespace ?
				escaped :
				high < 0 ?
					// BMP codepoint
					String.fromCharCode( high + 0x10000 ) :
					// Supplemental Plane codepoint (surrogate pair)
					String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
		},

		// Used for iframes
		// See setDocument()
		// Removing the function wrapper causes a "Permission Denied"
		// error in IE
		unloadHandler = function() {
			setDocument();
		};

	// Optimize for push.apply( _, NodeList )
	try {
		push.apply(
			(arr = slice.call( preferredDoc.childNodes )),
			preferredDoc.childNodes
		);
		// Support: Android<4.0
		// Detect silently failing push.apply
		arr[ preferredDoc.childNodes.length ].nodeType;
	} catch ( e ) {
		push = { apply: arr.length ?

			// Leverage slice if possible
			function( target, els ) {
				push_native.apply( target, slice.call(els) );
			} :

			// Support: IE<9
			// Otherwise append directly
			function( target, els ) {
				var j = target.length,
					i = 0;
				// Can't trust NodeList.length
				while ( (target[j++] = els[i++]) ) {}
				target.length = j - 1;
			}
		};
	}

	function Sizzle( selector, context, results, seed ) {
		var match, elem, m, nodeType,
			// QSA vars
			i, groups, old, nid, newContext, newSelector;

		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
			setDocument( context );
		}

		context = context || document;
		results = results || [];
		nodeType = context.nodeType;

		if ( typeof selector !== "string" || !selector ||
			nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

			return results;
		}

		if ( !seed && documentIsHTML ) {

			// Try to shortcut find operations when possible (e.g., not under DocumentFragment)
			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {
				// Speed-up: Sizzle("#ID")
				if ( (m = match[1]) ) {
					if ( nodeType === 9 ) {
						elem = context.getElementById( m );
						// Check parentNode to catch when Blackberry 4.6 returns
						// nodes that are no longer in the document (jQuery #6963)
						if ( elem && elem.parentNode ) {
							// Handle the case where IE, Opera, and Webkit return items
							// by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}
					} else {
						// Context is not a document
						if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
							contains( context, elem ) && elem.id === m ) {
							results.push( elem );
							return results;
						}
					}

				// Speed-up: Sizzle("TAG")
				} else if ( match[2] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Speed-up: Sizzle(".CLASS")
				} else if ( (m = match[3]) && support.getElementsByClassName ) {
					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// QSA path
			if ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
				nid = old = expando;
				newContext = context;
				newSelector = nodeType !== 1 && selector;

				// qSA works strangely on Element-rooted queries
				// We can work around this by specifying an extra ID on the root
				// and working up from there (Thanks to Andrew Dupont for the technique)
				// IE 8 doesn't work on object elements
				if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
					groups = tokenize( selector );

					if ( (old = context.getAttribute("id")) ) {
						nid = old.replace( rescape, "\\$&" );
					} else {
						context.setAttribute( "id", nid );
					}
					nid = "[id='" + nid + "'] ";

					i = groups.length;
					while ( i-- ) {
						groups[i] = nid + toSelector( groups[i] );
					}
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) || context;
					newSelector = groups.join(",");
				}

				if ( newSelector ) {
					try {
						push.apply( results,
							newContext.querySelectorAll( newSelector )
						);
						return results;
					} catch(qsaError) {
					} finally {
						if ( !old ) {
							context.removeAttribute("id");
						}
					}
				}
			}
		}

		// All others
		return select( selector.replace( rtrim, "$1" ), context, results, seed );
	}

	/**
	 * Create key-value caches of limited size
	 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
	 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
	 *	deleting the oldest entry
	 */
	function createCache() {
		var keys = [];

		function cache( key, value ) {
			// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
			if ( keys.push( key + " " ) > Expr.cacheLength ) {
				// Only keep the most recent entries
				delete cache[ keys.shift() ];
			}
			return (cache[ key + " " ] = value);
		}
		return cache;
	}

	/**
	 * Mark a function for special use by Sizzle
	 * @param {Function} fn The function to mark
	 */
	function markFunction( fn ) {
		fn[ expando ] = true;
		return fn;
	}

	/**
	 * Support testing using an element
	 * @param {Function} fn Passed the created div and expects a boolean result
	 */
	function assert( fn ) {
		var div = document.createElement("div");

		try {
			return !!fn( div );
		} catch (e) {
			return false;
		} finally {
			// Remove from its parent by default
			if ( div.parentNode ) {
				div.parentNode.removeChild( div );
			}
			// release memory in IE
			div = null;
		}
	}

	/**
	 * Adds the same handler for all of the specified attrs
	 * @param {String} attrs Pipe-separated list of attributes
	 * @param {Function} handler The method that will be applied
	 */
	function addHandle( attrs, handler ) {
		var arr = attrs.split("|"),
			i = attrs.length;

		while ( i-- ) {
			Expr.attrHandle[ arr[i] ] = handler;
		}
	}

	/**
	 * Checks document order of two siblings
	 * @param {Element} a
	 * @param {Element} b
	 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
	 */
	function siblingCheck( a, b ) {
		var cur = b && a,
			diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
				( ~b.sourceIndex || MAX_NEGATIVE ) -
				( ~a.sourceIndex || MAX_NEGATIVE );

		// Use IE sourceIndex if available on both nodes
		if ( diff ) {
			return diff;
		}

		// Check if b follows a
		if ( cur ) {
			while ( (cur = cur.nextSibling) ) {
				if ( cur === b ) {
					return -1;
				}
			}
		}

		return a ? 1 : -1;
	}

	/**
	 * Returns a function to use in pseudos for input types
	 * @param {String} type
	 */
	function createInputPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === type;
		};
	}

	/**
	 * Returns a function to use in pseudos for buttons
	 * @param {String} type
	 */
	function createButtonPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return (name === "input" || name === "button") && elem.type === type;
		};
	}

	/**
	 * Returns a function to use in pseudos for positionals
	 * @param {Function} fn
	 */
	function createPositionalPseudo( fn ) {
		return markFunction(function( argument ) {
			argument = +argument;
			return markFunction(function( seed, matches ) {
				var j,
					matchIndexes = fn( [], seed.length, argument ),
					i = matchIndexes.length;

				// Match elements found at the specified indexes
				while ( i-- ) {
					if ( seed[ (j = matchIndexes[i]) ] ) {
						seed[j] = !(matches[j] = seed[j]);
					}
				}
			});
		});
	}

	/**
	 * Checks a node for validity as a Sizzle context
	 * @param {Element|Object=} context
	 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
	 */
	function testContext( context ) {
		return context && typeof context.getElementsByTagName !== "undefined" && context;
	}

	// Expose support vars for convenience
	support = Sizzle.support = {};

	/**
	 * Detects XML nodes
	 * @param {Element|Object} elem An element or a document
	 * @returns {Boolean} True iff elem is a non-HTML XML node
	 */
	isXML = Sizzle.isXML = function( elem ) {
		// documentElement is verified for cases where it doesn't yet exist
		// (such as loading iframes in IE - #4833)
		var documentElement = elem && (elem.ownerDocument || elem).documentElement;
		return documentElement ? documentElement.nodeName !== "HTML" : false;
	};

	/**
	 * Sets document-related variables once based on the current document
	 * @param {Element|Object} [doc] An element or document object to use to set the document
	 * @returns {Object} Returns the current document
	 */
	setDocument = Sizzle.setDocument = function( node ) {
		var hasCompare, parent,
			doc = node ? node.ownerDocument || node : preferredDoc;

		// If no document and documentElement is available, return
		if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
			return document;
		}

		// Set our document
		document = doc;
		docElem = doc.documentElement;
		parent = doc.defaultView;

		// Support: IE>8
		// If iframe document is assigned to "document" variable and if iframe has been reloaded,
		// IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
		// IE6-8 do not support the defaultView property so parent will be undefined
		if ( parent && parent !== parent.top ) {
			// IE11 does not have attachEvent, so all must suffer
			if ( parent.addEventListener ) {
				parent.addEventListener( "unload", unloadHandler, false );
			} else if ( parent.attachEvent ) {
				parent.attachEvent( "onunload", unloadHandler );
			}
		}

		/* Support tests
		---------------------------------------------------------------------- */
		documentIsHTML = !isXML( doc );

		/* Attributes
		---------------------------------------------------------------------- */

		// Support: IE<8
		// Verify that getAttribute really returns attributes and not properties
		// (excepting IE8 booleans)
		support.attributes = assert(function( div ) {
			div.className = "i";
			return !div.getAttribute("className");
		});

		/* getElement(s)By*
		---------------------------------------------------------------------- */

		// Check if getElementsByTagName("*") returns only elements
		support.getElementsByTagName = assert(function( div ) {
			div.appendChild( doc.createComment("") );
			return !div.getElementsByTagName("*").length;
		});

		// Support: IE<9
		support.getElementsByClassName = rnative.test( doc.getElementsByClassName );

		// Support: IE<10
		// Check if getElementById returns elements by name
		// The broken getElementById methods don't pick up programatically-set names,
		// so use a roundabout getElementsByName test
		support.getById = assert(function( div ) {
			docElem.appendChild( div ).id = expando;
			return !doc.getElementsByName || !doc.getElementsByName( expando ).length;
		});

		// ID find and filter
		if ( support.getById ) {
			Expr.find["ID"] = function( id, context ) {
				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
					var m = context.getElementById( id );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					return m && m.parentNode ? [ m ] : [];
				}
			};
			Expr.filter["ID"] = function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					return elem.getAttribute("id") === attrId;
				};
			};
		} else {
			// Support: IE6/7
			// getElementById is not reliable as a find shortcut
			delete Expr.find["ID"];

			Expr.filter["ID"] =  function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
					return node && node.value === attrId;
				};
			};
		}

		// Tag
		Expr.find["TAG"] = support.getElementsByTagName ?
			function( tag, context ) {
				if ( typeof context.getElementsByTagName !== "undefined" ) {
					return context.getElementsByTagName( tag );

				// DocumentFragment nodes don't have gEBTN
				} else if ( support.qsa ) {
					return context.querySelectorAll( tag );
				}
			} :

			function( tag, context ) {
				var elem,
					tmp = [],
					i = 0,
					// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
					results = context.getElementsByTagName( tag );

				// Filter out possible comments
				if ( tag === "*" ) {
					while ( (elem = results[i++]) ) {
						if ( elem.nodeType === 1 ) {
							tmp.push( elem );
						}
					}

					return tmp;
				}
				return results;
			};

		// Class
		Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
			if ( documentIsHTML ) {
				return context.getElementsByClassName( className );
			}
		};

		/* QSA/matchesSelector
		---------------------------------------------------------------------- */

		// QSA and matchesSelector support

		// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
		rbuggyMatches = [];

		// qSa(:focus) reports false when true (Chrome 21)
		// We allow this because of a bug in IE8/9 that throws an error
		// whenever `document.activeElement` is accessed on an iframe
		// So, we allow :focus to pass through QSA all the time to avoid the IE error
		// See http://bugs.jquery.com/ticket/13378
		rbuggyQSA = [];

		if ( (support.qsa = rnative.test( doc.querySelectorAll )) ) {
			// Build QSA regex
			// Regex strategy adopted from Diego Perini
			assert(function( div ) {
				// Select is set to empty string on purpose
				// This is to test IE's treatment of not explicitly
				// setting a boolean content attribute,
				// since its presence should be enough
				// http://bugs.jquery.com/ticket/12359
				docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
					"<select id='" + expando + "-\f]' msallowcapture=''>" +
					"<option selected=''></option></select>";

				// Support: IE8, Opera 11-12.16
				// Nothing should be selected when empty strings follow ^= or $= or *=
				// The test attribute must be unknown in Opera but "safe" for WinRT
				// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
				if ( div.querySelectorAll("[msallowcapture^='']").length ) {
					rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
				}

				// Support: IE8
				// Boolean attributes and "value" are not treated correctly
				if ( !div.querySelectorAll("[selected]").length ) {
					rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
				}

				// Support: Chrome<29, Android<4.2+, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.7+
				if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
					rbuggyQSA.push("~=");
				}

				// Webkit/Opera - :checked should return selected option elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				// IE8 throws error here and will not see later tests
				if ( !div.querySelectorAll(":checked").length ) {
					rbuggyQSA.push(":checked");
				}

				// Support: Safari 8+, iOS 8+
				// https://bugs.webkit.org/show_bug.cgi?id=136851
				// In-page `selector#id sibing-combinator selector` fails
				if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {
					rbuggyQSA.push(".#.+[+~]");
				}
			});

			assert(function( div ) {
				// Support: Windows 8 Native Apps
				// The type and name attributes are restricted during .innerHTML assignment
				var input = doc.createElement("input");
				input.setAttribute( "type", "hidden" );
				div.appendChild( input ).setAttribute( "name", "D" );

				// Support: IE8
				// Enforce case-sensitivity of name attribute
				if ( div.querySelectorAll("[name=d]").length ) {
					rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
				}

				// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
				// IE8 throws error here and will not see later tests
				if ( !div.querySelectorAll(":enabled").length ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}

				// Opera 10-11 does not throw on post-comma invalid pseudos
				div.querySelectorAll("*,:x");
				rbuggyQSA.push(",.*:");
			});
		}

		if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
			docElem.webkitMatchesSelector ||
			docElem.mozMatchesSelector ||
			docElem.oMatchesSelector ||
			docElem.msMatchesSelector) )) ) {

			assert(function( div ) {
				// Check to see if it's possible to do matchesSelector
				// on a disconnected node (IE 9)
				support.disconnectedMatch = matches.call( div, "div" );

				// This should fail with an exception
				// Gecko does not error, returns false instead
				matches.call( div, "[s!='']:x" );
				rbuggyMatches.push( "!=", pseudos );
			});
		}

		rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
		rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

		/* Contains
		---------------------------------------------------------------------- */
		hasCompare = rnative.test( docElem.compareDocumentPosition );

		// Element contains another
		// Purposefully does not implement inclusive descendent
		// As in, an element does not contain itself
		contains = hasCompare || rnative.test( docElem.contains ) ?
			function( a, b ) {
				var adown = a.nodeType === 9 ? a.documentElement : a,
					bup = b && b.parentNode;
				return a === bup || !!( bup && bup.nodeType === 1 && (
					adown.contains ?
						adown.contains( bup ) :
						a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
				));
			} :
			function( a, b ) {
				if ( b ) {
					while ( (b = b.parentNode) ) {
						if ( b === a ) {
							return true;
						}
					}
				}
				return false;
			};

		/* Sorting
		---------------------------------------------------------------------- */

		// Document order sorting
		sortOrder = hasCompare ?
		function( a, b ) {

			// Flag for duplicate removal
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}

			// Sort on method existence if only one input has compareDocumentPosition
			var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
			if ( compare ) {
				return compare;
			}

			// Calculate position if both inputs belong to the same document
			compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
				a.compareDocumentPosition( b ) :

				// Otherwise we know they are disconnected
				1;

			// Disconnected nodes
			if ( compare & 1 ||
				(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

				// Choose the first element that is related to our preferred document
				if ( a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
					return -1;
				}
				if ( b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
					return 1;
				}

				// Maintain original order
				return sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;
			}

			return compare & 4 ? -1 : 1;
		} :
		function( a, b ) {
			// Exit early if the nodes are identical
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}

			var cur,
				i = 0,
				aup = a.parentNode,
				bup = b.parentNode,
				ap = [ a ],
				bp = [ b ];

			// Parentless nodes are either documents or disconnected
			if ( !aup || !bup ) {
				return a === doc ? -1 :
					b === doc ? 1 :
					aup ? -1 :
					bup ? 1 :
					sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;

			// If the nodes are siblings, we can do a quick check
			} else if ( aup === bup ) {
				return siblingCheck( a, b );
			}

			// Otherwise we need full lists of their ancestors for comparison
			cur = a;
			while ( (cur = cur.parentNode) ) {
				ap.unshift( cur );
			}
			cur = b;
			while ( (cur = cur.parentNode) ) {
				bp.unshift( cur );
			}

			// Walk down the tree looking for a discrepancy
			while ( ap[i] === bp[i] ) {
				i++;
			}

			return i ?
				// Do a sibling check if the nodes have a common ancestor
				siblingCheck( ap[i], bp[i] ) :

				// Otherwise nodes in our document sort first
				ap[i] === preferredDoc ? -1 :
				bp[i] === preferredDoc ? 1 :
				0;
		};

		return doc;
	};

	Sizzle.matches = function( expr, elements ) {
		return Sizzle( expr, null, null, elements );
	};

	Sizzle.matchesSelector = function( elem, expr ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}

		// Make sure that attribute selectors are quoted
		expr = expr.replace( rattributeQuotes, "='$1']" );

		if ( support.matchesSelector && documentIsHTML &&
			( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
			( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

			try {
				var ret = matches.call( elem, expr );

				// IE 9's matchesSelector returns false on disconnected nodes
				if ( ret || support.disconnectedMatch ||
						// As well, disconnected nodes are said to be in a document
						// fragment in IE 9
						elem.document && elem.document.nodeType !== 11 ) {
					return ret;
				}
			} catch (e) {}
		}

		return Sizzle( expr, document, null, [ elem ] ).length > 0;
	};

	Sizzle.contains = function( context, elem ) {
		// Set document vars if needed
		if ( ( context.ownerDocument || context ) !== document ) {
			setDocument( context );
		}
		return contains( context, elem );
	};

	Sizzle.attr = function( elem, name ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}

		var fn = Expr.attrHandle[ name.toLowerCase() ],
			// Don't get fooled by Object.prototype properties (jQuery #13807)
			val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
				fn( elem, name, !documentIsHTML ) :
				undefined;

		return val !== undefined ?
			val :
			support.attributes || !documentIsHTML ?
				elem.getAttribute( name ) :
				(val = elem.getAttributeNode(name)) && val.specified ?
					val.value :
					null;
	};

	Sizzle.error = function( msg ) {
		throw new Error( "Syntax error, unrecognized expression: " + msg );
	};

	/**
	 * Document sorting and removing duplicates
	 * @param {ArrayLike} results
	 */
	Sizzle.uniqueSort = function( results ) {
		var elem,
			duplicates = [],
			j = 0,
			i = 0;

		// Unless we *know* we can detect duplicates, assume their presence
		hasDuplicate = !support.detectDuplicates;
		sortInput = !support.sortStable && results.slice( 0 );
		results.sort( sortOrder );

		if ( hasDuplicate ) {
			while ( (elem = results[i++]) ) {
				if ( elem === results[ i ] ) {
					j = duplicates.push( i );
				}
			}
			while ( j-- ) {
				results.splice( duplicates[ j ], 1 );
			}
		}

		// Clear input after sorting to release objects
		// See https://github.com/jquery/sizzle/pull/225
		sortInput = null;

		return results;
	};

	/**
	 * Utility function for retrieving the text value of an array of DOM nodes
	 * @param {Array|Element} elem
	 */
	getText = Sizzle.getText = function( elem ) {
		var node,
			ret = "",
			i = 0,
			nodeType = elem.nodeType;

		if ( !nodeType ) {
			// If no nodeType, this is expected to be an array
			while ( (node = elem[i++]) ) {
				// Do not traverse comment nodes
				ret += getText( node );
			}
		} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
			// Use textContent for elements
			// innerText usage removed for consistency of new lines (jQuery #11153)
			if ( typeof elem.textContent === "string" ) {
				return elem.textContent;
			} else {
				// Traverse its children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					ret += getText( elem );
				}
			}
		} else if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}
		// Do not include comment or processing instruction nodes

		return ret;
	};

	Expr = Sizzle.selectors = {

		// Can be adjusted by the user
		cacheLength: 50,

		createPseudo: markFunction,

		match: matchExpr,

		attrHandle: {},

		find: {},

		relative: {
			">": { dir: "parentNode", first: true },
			" ": { dir: "parentNode" },
			"+": { dir: "previousSibling", first: true },
			"~": { dir: "previousSibling" }
		},

		preFilter: {
			"ATTR": function( match ) {
				match[1] = match[1].replace( runescape, funescape );

				// Move the given value to match[3] whether quoted or unquoted
				match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

				if ( match[2] === "~=" ) {
					match[3] = " " + match[3] + " ";
				}

				return match.slice( 0, 4 );
			},

			"CHILD": function( match ) {
				/* matches from matchExpr["CHILD"]
					1 type (only|nth|...)
					2 what (child|of-type)
					3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
					4 xn-component of xn+y argument ([+-]?\d*n|)
					5 sign of xn-component
					6 x of xn-component
					7 sign of y-component
					8 y of y-component
				*/
				match[1] = match[1].toLowerCase();

				if ( match[1].slice( 0, 3 ) === "nth" ) {
					// nth-* requires argument
					if ( !match[3] ) {
						Sizzle.error( match[0] );
					}

					// numeric x and y parameters for Expr.filter.CHILD
					// remember that false/true cast respectively to 0/1
					match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
					match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

				// other types prohibit arguments
				} else if ( match[3] ) {
					Sizzle.error( match[0] );
				}

				return match;
			},

			"PSEUDO": function( match ) {
				var excess,
					unquoted = !match[6] && match[2];

				if ( matchExpr["CHILD"].test( match[0] ) ) {
					return null;
				}

				// Accept quoted arguments as-is
				if ( match[3] ) {
					match[2] = match[4] || match[5] || "";

				// Strip excess characters from unquoted arguments
				} else if ( unquoted && rpseudo.test( unquoted ) &&
					// Get excess from tokenize (recursively)
					(excess = tokenize( unquoted, true )) &&
					// advance to the next closing parenthesis
					(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

					// excess is a negative index
					match[0] = match[0].slice( 0, excess );
					match[2] = unquoted.slice( 0, excess );
				}

				// Return only captures needed by the pseudo filter method (type and argument)
				return match.slice( 0, 3 );
			}
		},

		filter: {

			"TAG": function( nodeNameSelector ) {
				var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
				return nodeNameSelector === "*" ?
					function() { return true; } :
					function( elem ) {
						return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
					};
			},

			"CLASS": function( className ) {
				var pattern = classCache[ className + " " ];

				return pattern ||
					(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
					classCache( className, function( elem ) {
						return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
					});
			},

			"ATTR": function( name, operator, check ) {
				return function( elem ) {
					var result = Sizzle.attr( elem, name );

					if ( result == null ) {
						return operator === "!=";
					}
					if ( !operator ) {
						return true;
					}

					result += "";

					return operator === "=" ? result === check :
						operator === "!=" ? result !== check :
						operator === "^=" ? check && result.indexOf( check ) === 0 :
						operator === "*=" ? check && result.indexOf( check ) > -1 :
						operator === "$=" ? check && result.slice( -check.length ) === check :
						operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
						operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
						false;
				};
			},

			"CHILD": function( type, what, argument, first, last ) {
				var simple = type.slice( 0, 3 ) !== "nth",
					forward = type.slice( -4 ) !== "last",
					ofType = what === "of-type";

				return first === 1 && last === 0 ?

					// Shortcut for :nth-*(n)
					function( elem ) {
						return !!elem.parentNode;
					} :

					function( elem, context, xml ) {
						var cache, outerCache, node, diff, nodeIndex, start,
							dir = simple !== forward ? "nextSibling" : "previousSibling",
							parent = elem.parentNode,
							name = ofType && elem.nodeName.toLowerCase(),
							useCache = !xml && !ofType;

						if ( parent ) {

							// :(first|last|only)-(child|of-type)
							if ( simple ) {
								while ( dir ) {
									node = elem;
									while ( (node = node[ dir ]) ) {
										if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
											return false;
										}
									}
									// Reverse direction for :only-* (if we haven't yet done so)
									start = dir = type === "only" && !start && "nextSibling";
								}
								return true;
							}

							start = [ forward ? parent.firstChild : parent.lastChild ];

							// non-xml :nth-child(...) stores cache data on `parent`
							if ( forward && useCache ) {
								// Seek `elem` from a previously-cached index
								outerCache = parent[ expando ] || (parent[ expando ] = {});
								cache = outerCache[ type ] || [];
								nodeIndex = cache[0] === dirruns && cache[1];
								diff = cache[0] === dirruns && cache[2];
								node = nodeIndex && parent.childNodes[ nodeIndex ];

								while ( (node = ++nodeIndex && node && node[ dir ] ||

									// Fallback to seeking `elem` from the start
									(diff = nodeIndex = 0) || start.pop()) ) {

									// When found, cache indexes on `parent` and break
									if ( node.nodeType === 1 && ++diff && node === elem ) {
										outerCache[ type ] = [ dirruns, nodeIndex, diff ];
										break;
									}
								}

							// Use previously-cached element index if available
							} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
								diff = cache[1];

							// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
							} else {
								// Use the same loop as above to seek `elem` from the start
								while ( (node = ++nodeIndex && node && node[ dir ] ||
									(diff = nodeIndex = 0) || start.pop()) ) {

									if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
										// Cache the index of each encountered element
										if ( useCache ) {
											(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}

							// Incorporate the offset, then check against cycle size
							diff -= last;
							return diff === first || ( diff % first === 0 && diff / first >= 0 );
						}
					};
			},

			"PSEUDO": function( pseudo, argument ) {
				// pseudo-class names are case-insensitive
				// http://www.w3.org/TR/selectors/#pseudo-classes
				// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
				// Remember that setFilters inherits from pseudos
				var args,
					fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
						Sizzle.error( "unsupported pseudo: " + pseudo );

				// The user may use createPseudo to indicate that
				// arguments are needed to create the filter function
				// just as Sizzle does
				if ( fn[ expando ] ) {
					return fn( argument );
				}

				// But maintain support for old signatures
				if ( fn.length > 1 ) {
					args = [ pseudo, pseudo, "", argument ];
					return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
						markFunction(function( seed, matches ) {
							var idx,
								matched = fn( seed, argument ),
								i = matched.length;
							while ( i-- ) {
								idx = indexOf( seed, matched[i] );
								seed[ idx ] = !( matches[ idx ] = matched[i] );
							}
						}) :
						function( elem ) {
							return fn( elem, 0, args );
						};
				}

				return fn;
			}
		},

		pseudos: {
			// Potentially complex pseudos
			"not": markFunction(function( selector ) {
				// Trim the selector passed to compile
				// to avoid treating leading and trailing
				// spaces as combinators
				var input = [],
					results = [],
					matcher = compile( selector.replace( rtrim, "$1" ) );

				return matcher[ expando ] ?
					markFunction(function( seed, matches, context, xml ) {
						var elem,
							unmatched = matcher( seed, null, xml, [] ),
							i = seed.length;

						// Match elements unmatched by `matcher`
						while ( i-- ) {
							if ( (elem = unmatched[i]) ) {
								seed[i] = !(matches[i] = elem);
							}
						}
					}) :
					function( elem, context, xml ) {
						input[0] = elem;
						matcher( input, null, xml, results );
						// Don't keep the element (issue #299)
						input[0] = null;
						return !results.pop();
					};
			}),

			"has": markFunction(function( selector ) {
				return function( elem ) {
					return Sizzle( selector, elem ).length > 0;
				};
			}),

			"contains": markFunction(function( text ) {
				text = text.replace( runescape, funescape );
				return function( elem ) {
					return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
				};
			}),

			// "Whether an element is represented by a :lang() selector
			// is based solely on the element's language value
			// being equal to the identifier C,
			// or beginning with the identifier C immediately followed by "-".
			// The matching of C against the element's language value is performed case-insensitively.
			// The identifier C does not have to be a valid language name."
			// http://www.w3.org/TR/selectors/#lang-pseudo
			"lang": markFunction( function( lang ) {
				// lang value must be a valid identifier
				if ( !ridentifier.test(lang || "") ) {
					Sizzle.error( "unsupported lang: " + lang );
				}
				lang = lang.replace( runescape, funescape ).toLowerCase();
				return function( elem ) {
					var elemLang;
					do {
						if ( (elemLang = documentIsHTML ?
							elem.lang :
							elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

							elemLang = elemLang.toLowerCase();
							return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
						}
					} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
					return false;
				};
			}),

			// Miscellaneous
			"target": function( elem ) {
				var hash = window.location && window.location.hash;
				return hash && hash.slice( 1 ) === elem.id;
			},

			"root": function( elem ) {
				return elem === docElem;
			},

			"focus": function( elem ) {
				return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
			},

			// Boolean properties
			"enabled": function( elem ) {
				return elem.disabled === false;
			},

			"disabled": function( elem ) {
				return elem.disabled === true;
			},

			"checked": function( elem ) {
				// In CSS3, :checked should return both checked and selected elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				var nodeName = elem.nodeName.toLowerCase();
				return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
			},

			"selected": function( elem ) {
				// Accessing this property makes selected-by-default
				// options in Safari work properly
				if ( elem.parentNode ) {
					elem.parentNode.selectedIndex;
				}

				return elem.selected === true;
			},

			// Contents
			"empty": function( elem ) {
				// http://www.w3.org/TR/selectors/#empty-pseudo
				// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
				//   but not by others (comment: 8; processing instruction: 7; etc.)
				// nodeType < 6 works because attributes (2) do not appear as children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					if ( elem.nodeType < 6 ) {
						return false;
					}
				}
				return true;
			},

			"parent": function( elem ) {
				return !Expr.pseudos["empty"]( elem );
			},

			// Element/input types
			"header": function( elem ) {
				return rheader.test( elem.nodeName );
			},

			"input": function( elem ) {
				return rinputs.test( elem.nodeName );
			},

			"button": function( elem ) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === "button" || name === "button";
			},

			"text": function( elem ) {
				var attr;
				return elem.nodeName.toLowerCase() === "input" &&
					elem.type === "text" &&

					// Support: IE<8
					// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
					( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
			},

			// Position-in-collection
			"first": createPositionalPseudo(function() {
				return [ 0 ];
			}),

			"last": createPositionalPseudo(function( matchIndexes, length ) {
				return [ length - 1 ];
			}),

			"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
				return [ argument < 0 ? argument + length : argument ];
			}),

			"even": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 0;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"odd": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 1;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; --i >= 0; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; ++i < length; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			})
		}
	};

	Expr.pseudos["nth"] = Expr.pseudos["eq"];

	// Add button/input type pseudos
	for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
		Expr.pseudos[ i ] = createInputPseudo( i );
	}
	for ( i in { submit: true, reset: true } ) {
		Expr.pseudos[ i ] = createButtonPseudo( i );
	}

	// Easy API for creating new setFilters
	function setFilters() {}
	setFilters.prototype = Expr.filters = Expr.pseudos;
	Expr.setFilters = new setFilters();

	tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
		var matched, match, tokens, type,
			soFar, groups, preFilters,
			cached = tokenCache[ selector + " " ];

		if ( cached ) {
			return parseOnly ? 0 : cached.slice( 0 );
		}

		soFar = selector;
		groups = [];
		preFilters = Expr.preFilter;

		while ( soFar ) {

			// Comma and first run
			if ( !matched || (match = rcomma.exec( soFar )) ) {
				if ( match ) {
					// Don't consume trailing commas as valid
					soFar = soFar.slice( match[0].length ) || soFar;
				}
				groups.push( (tokens = []) );
			}

			matched = false;

			// Combinators
			if ( (match = rcombinators.exec( soFar )) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					// Cast descendant combinators to space
					type: match[0].replace( rtrim, " " )
				});
				soFar = soFar.slice( matched.length );
			}

			// Filters
			for ( type in Expr.filter ) {
				if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
					(match = preFilters[ type ]( match ))) ) {
					matched = match.shift();
					tokens.push({
						value: matched,
						type: type,
						matches: match
					});
					soFar = soFar.slice( matched.length );
				}
			}

			if ( !matched ) {
				break;
			}
		}

		// Return the length of the invalid excess
		// if we're just parsing
		// Otherwise, throw an error or return tokens
		return parseOnly ?
			soFar.length :
			soFar ?
				Sizzle.error( selector ) :
				// Cache the tokens
				tokenCache( selector, groups ).slice( 0 );
	};

	function toSelector( tokens ) {
		var i = 0,
			len = tokens.length,
			selector = "";
		for ( ; i < len; i++ ) {
			selector += tokens[i].value;
		}
		return selector;
	}

	function addCombinator( matcher, combinator, base ) {
		var dir = combinator.dir,
			checkNonElements = base && dir === "parentNode",
			doneName = done++;

		return combinator.first ?
			// Check against closest ancestor/preceding element
			function( elem, context, xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						return matcher( elem, context, xml );
					}
				}
			} :

			// Check against all ancestor/preceding elements
			function( elem, context, xml ) {
				var oldCache, outerCache,
					newCache = [ dirruns, doneName ];

				// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
				if ( xml ) {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							if ( matcher( elem, context, xml ) ) {
								return true;
							}
						}
					}
				} else {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							outerCache = elem[ expando ] || (elem[ expando ] = {});
							if ( (oldCache = outerCache[ dir ]) &&
								oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

								// Assign to newCache so results back-propagate to previous elements
								return (newCache[ 2 ] = oldCache[ 2 ]);
							} else {
								// Reuse newcache so results back-propagate to previous elements
								outerCache[ dir ] = newCache;

								// A match means we're done; a fail means we have to keep checking
								if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
									return true;
								}
							}
						}
					}
				}
			};
	}

	function elementMatcher( matchers ) {
		return matchers.length > 1 ?
			function( elem, context, xml ) {
				var i = matchers.length;
				while ( i-- ) {
					if ( !matchers[i]( elem, context, xml ) ) {
						return false;
					}
				}
				return true;
			} :
			matchers[0];
	}

	function multipleContexts( selector, contexts, results ) {
		var i = 0,
			len = contexts.length;
		for ( ; i < len; i++ ) {
			Sizzle( selector, contexts[i], results );
		}
		return results;
	}

	function condense( unmatched, map, filter, context, xml ) {
		var elem,
			newUnmatched = [],
			i = 0,
			len = unmatched.length,
			mapped = map != null;

		for ( ; i < len; i++ ) {
			if ( (elem = unmatched[i]) ) {
				if ( !filter || filter( elem, context, xml ) ) {
					newUnmatched.push( elem );
					if ( mapped ) {
						map.push( i );
					}
				}
			}
		}

		return newUnmatched;
	}

	function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
		if ( postFilter && !postFilter[ expando ] ) {
			postFilter = setMatcher( postFilter );
		}
		if ( postFinder && !postFinder[ expando ] ) {
			postFinder = setMatcher( postFinder, postSelector );
		}
		return markFunction(function( seed, results, context, xml ) {
			var temp, i, elem,
				preMap = [],
				postMap = [],
				preexisting = results.length,

				// Get initial elements from seed or context
				elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

				// Prefilter to get matcher input, preserving a map for seed-results synchronization
				matcherIn = preFilter && ( seed || !selector ) ?
					condense( elems, preMap, preFilter, context, xml ) :
					elems,

				matcherOut = matcher ?
					// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
					postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

						// ...intermediate processing is necessary
						[] :

						// ...otherwise use results directly
						results :
					matcherIn;

			// Find primary matches
			if ( matcher ) {
				matcher( matcherIn, matcherOut, context, xml );
			}

			// Apply postFilter
			if ( postFilter ) {
				temp = condense( matcherOut, postMap );
				postFilter( temp, [], context, xml );

				// Un-match failing elements by moving them back to matcherIn
				i = temp.length;
				while ( i-- ) {
					if ( (elem = temp[i]) ) {
						matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
					}
				}
			}

			if ( seed ) {
				if ( postFinder || preFilter ) {
					if ( postFinder ) {
						// Get the final matcherOut by condensing this intermediate into postFinder contexts
						temp = [];
						i = matcherOut.length;
						while ( i-- ) {
							if ( (elem = matcherOut[i]) ) {
								// Restore matcherIn since elem is not yet a final match
								temp.push( (matcherIn[i] = elem) );
							}
						}
						postFinder( null, (matcherOut = []), temp, xml );
					}

					// Move matched elements from seed to results to keep them synchronized
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) &&
							(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

							seed[temp] = !(results[temp] = elem);
						}
					}
				}

			// Add elements to results, through postFinder if defined
			} else {
				matcherOut = condense(
					matcherOut === results ?
						matcherOut.splice( preexisting, matcherOut.length ) :
						matcherOut
				);
				if ( postFinder ) {
					postFinder( null, results, matcherOut, xml );
				} else {
					push.apply( results, matcherOut );
				}
			}
		});
	}

	function matcherFromTokens( tokens ) {
		var checkContext, matcher, j,
			len = tokens.length,
			leadingRelative = Expr.relative[ tokens[0].type ],
			implicitRelative = leadingRelative || Expr.relative[" "],
			i = leadingRelative ? 1 : 0,

			// The foundational matcher ensures that elements are reachable from top-level context(s)
			matchContext = addCombinator( function( elem ) {
				return elem === checkContext;
			}, implicitRelative, true ),
			matchAnyContext = addCombinator( function( elem ) {
				return indexOf( checkContext, elem ) > -1;
			}, implicitRelative, true ),
			matchers = [ function( elem, context, xml ) {
				var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
					(checkContext = context).nodeType ?
						matchContext( elem, context, xml ) :
						matchAnyContext( elem, context, xml ) );
				// Avoid hanging onto element (issue #299)
				checkContext = null;
				return ret;
			} ];

		for ( ; i < len; i++ ) {
			if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
				matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
			} else {
				matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

				// Return special upon seeing a positional matcher
				if ( matcher[ expando ] ) {
					// Find the next relative operator (if any) for proper handling
					j = ++i;
					for ( ; j < len; j++ ) {
						if ( Expr.relative[ tokens[j].type ] ) {
							break;
						}
					}
					return setMatcher(
						i > 1 && elementMatcher( matchers ),
						i > 1 && toSelector(
							// If the preceding token was a descendant combinator, insert an implicit any-element `*`
							tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
						).replace( rtrim, "$1" ),
						matcher,
						i < j && matcherFromTokens( tokens.slice( i, j ) ),
						j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
						j < len && toSelector( tokens )
					);
				}
				matchers.push( matcher );
			}
		}

		return elementMatcher( matchers );
	}

	function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
		var bySet = setMatchers.length > 0,
			byElement = elementMatchers.length > 0,
			superMatcher = function( seed, context, xml, results, outermost ) {
				var elem, j, matcher,
					matchedCount = 0,
					i = "0",
					unmatched = seed && [],
					setMatched = [],
					contextBackup = outermostContext,
					// We must always have either seed elements or outermost context
					elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
					// Use integer dirruns iff this is the outermost matcher
					dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
					len = elems.length;

				if ( outermost ) {
					outermostContext = context !== document && context;
				}

				// Add elements passing elementMatchers directly to results
				// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
				// Support: IE<9, Safari
				// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
				for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
					if ( byElement && elem ) {
						j = 0;
						while ( (matcher = elementMatchers[j++]) ) {
							if ( matcher( elem, context, xml ) ) {
								results.push( elem );
								break;
							}
						}
						if ( outermost ) {
							dirruns = dirrunsUnique;
						}
					}

					// Track unmatched elements for set filters
					if ( bySet ) {
						// They will have gone through all possible matchers
						if ( (elem = !matcher && elem) ) {
							matchedCount--;
						}

						// Lengthen the array for every element, matched or not
						if ( seed ) {
							unmatched.push( elem );
						}
					}
				}

				// Apply set filters to unmatched elements
				matchedCount += i;
				if ( bySet && i !== matchedCount ) {
					j = 0;
					while ( (matcher = setMatchers[j++]) ) {
						matcher( unmatched, setMatched, context, xml );
					}

					if ( seed ) {
						// Reintegrate element matches to eliminate the need for sorting
						if ( matchedCount > 0 ) {
							while ( i-- ) {
								if ( !(unmatched[i] || setMatched[i]) ) {
									setMatched[i] = pop.call( results );
								}
							}
						}

						// Discard index placeholder values to get only actual matches
						setMatched = condense( setMatched );
					}

					// Add matches to results
					push.apply( results, setMatched );

					// Seedless set matches succeeding multiple successful matchers stipulate sorting
					if ( outermost && !seed && setMatched.length > 0 &&
						( matchedCount + setMatchers.length ) > 1 ) {

						Sizzle.uniqueSort( results );
					}
				}

				// Override manipulation of globals by nested matchers
				if ( outermost ) {
					dirruns = dirrunsUnique;
					outermostContext = contextBackup;
				}

				return unmatched;
			};

		return bySet ?
			markFunction( superMatcher ) :
			superMatcher;
	}

	compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
		var i,
			setMatchers = [],
			elementMatchers = [],
			cached = compilerCache[ selector + " " ];

		if ( !cached ) {
			// Generate a function of recursive functions that can be used to check each element
			if ( !match ) {
				match = tokenize( selector );
			}
			i = match.length;
			while ( i-- ) {
				cached = matcherFromTokens( match[i] );
				if ( cached[ expando ] ) {
					setMatchers.push( cached );
				} else {
					elementMatchers.push( cached );
				}
			}

			// Cache the compiled function
			cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

			// Save selector and tokenization
			cached.selector = selector;
		}
		return cached;
	};

	/**
	 * A low-level selection function that works with Sizzle's compiled
	 *  selector functions
	 * @param {String|Function} selector A selector or a pre-compiled
	 *  selector function built with Sizzle.compile
	 * @param {Element} context
	 * @param {Array} [results]
	 * @param {Array} [seed] A set of elements to match against
	 */
	select = Sizzle.select = function( selector, context, results, seed ) {
		var i, tokens, token, type, find,
			compiled = typeof selector === "function" && selector,
			match = !seed && tokenize( (selector = compiled.selector || selector) );

		results = results || [];

		// Try to minimize operations if there is no seed and only one group
		if ( match.length === 1 ) {

			// Take a shortcut and set the context if the root selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					support.getById && context.nodeType === 9 && documentIsHTML &&
					Expr.relative[ tokens[1].type ] ) {

				context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
				if ( !context ) {
					return results;

				// Precompiled matchers will still verify ancestry, so step up a level
				} else if ( compiled ) {
					context = context.parentNode;
				}

				selector = selector.slice( tokens.shift().value.length );
			}

			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];

				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
					)) ) {

						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, seed );
							return results;
						}

						break;
					}
				}
			}
		}

		// Compile and execute a filtering function if one is not provided
		// Provide `match` to avoid retokenization if we modified the selector above
		( compiled || compile( selector, match ) )(
			seed,
			context,
			!documentIsHTML,
			results,
			rsibling.test( selector ) && testContext( context.parentNode ) || context
		);
		return results;
	};

	// One-time assignments

	// Sort stability
	support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

	// Support: Chrome 14-35+
	// Always assume duplicates if they aren't passed to the comparison function
	support.detectDuplicates = !!hasDuplicate;

	// Initialize against the default document
	setDocument();

	// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
	// Detached nodes confoundingly follow *each other*
	support.sortDetached = assert(function( div1 ) {
		// Should return 1, but returns 4 (following)
		return div1.compareDocumentPosition( document.createElement("div") ) & 1;
	});

	// Support: IE<8
	// Prevent attribute/property "interpolation"
	// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
	if ( !assert(function( div ) {
		div.innerHTML = "<a href='#'></a>";
		return div.firstChild.getAttribute("href") === "#" ;
	}) ) {
		addHandle( "type|href|height|width", function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
			}
		});
	}

	// Support: IE<9
	// Use defaultValue in place of getAttribute("value")
	if ( !support.attributes || !assert(function( div ) {
		div.innerHTML = "<input/>";
		div.firstChild.setAttribute( "value", "" );
		return div.firstChild.getAttribute( "value" ) === "";
	}) ) {
		addHandle( "value", function( elem, name, isXML ) {
			if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
				return elem.defaultValue;
			}
		});
	}

	// Support: IE<9
	// Use getAttributeNode to fetch booleans when getAttribute lies
	if ( !assert(function( div ) {
		return div.getAttribute("disabled") == null;
	}) ) {
		addHandle( booleans, function( elem, name, isXML ) {
			var val;
			if ( !isXML ) {
				return elem[ name ] === true ? name.toLowerCase() :
						(val = elem.getAttributeNode( name )) && val.specified ?
						val.value :
					null;
			}
		});
	}

	return Sizzle;

	})( window );



	jQuery.find = Sizzle;
	jQuery.expr = Sizzle.selectors;
	jQuery.expr[":"] = jQuery.expr.pseudos;
	jQuery.unique = Sizzle.uniqueSort;
	jQuery.text = Sizzle.getText;
	jQuery.isXMLDoc = Sizzle.isXML;
	jQuery.contains = Sizzle.contains;



	var rneedsContext = jQuery.expr.match.needsContext;

	var rsingleTag = (/^<(\w+)\s*\/?>(?:<\/\1>|)$/);



	var risSimple = /^.[^:#\[\.,]*$/;

	// Implement the identical functionality for filter and not
	function winnow( elements, qualifier, not ) {
		if ( jQuery.isFunction( qualifier ) ) {
			return jQuery.grep( elements, function( elem, i ) {
				/* jshint -W018 */
				return !!qualifier.call( elem, i, elem ) !== not;
			});

		}

		if ( qualifier.nodeType ) {
			return jQuery.grep( elements, function( elem ) {
				return ( elem === qualifier ) !== not;
			});

		}

		if ( typeof qualifier === "string" ) {
			if ( risSimple.test( qualifier ) ) {
				return jQuery.filter( qualifier, elements, not );
			}

			qualifier = jQuery.filter( qualifier, elements );
		}

		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) >= 0 ) !== not;
		});
	}

	jQuery.filter = function( expr, elems, not ) {
		var elem = elems[ 0 ];

		if ( not ) {
			expr = ":not(" + expr + ")";
		}

		return elems.length === 1 && elem.nodeType === 1 ?
			jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
			jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
				return elem.nodeType === 1;
			}));
	};

	jQuery.fn.extend({
		find: function( selector ) {
			var i,
				len = this.length,
				ret = [],
				self = this;

			if ( typeof selector !== "string" ) {
				return this.pushStack( jQuery( selector ).filter(function() {
					for ( i = 0; i < len; i++ ) {
						if ( jQuery.contains( self[ i ], this ) ) {
							return true;
						}
					}
				}) );
			}

			for ( i = 0; i < len; i++ ) {
				jQuery.find( selector, self[ i ], ret );
			}

			// Needed because $( selector, context ) becomes $( context ).find( selector )
			ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
			ret.selector = this.selector ? this.selector + " " + selector : selector;
			return ret;
		},
		filter: function( selector ) {
			return this.pushStack( winnow(this, selector || [], false) );
		},
		not: function( selector ) {
			return this.pushStack( winnow(this, selector || [], true) );
		},
		is: function( selector ) {
			return !!winnow(
				this,

				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				typeof selector === "string" && rneedsContext.test( selector ) ?
					jQuery( selector ) :
					selector || [],
				false
			).length;
		}
	});


	// Initialize a jQuery object


	// A central reference to the root jQuery(document)
	var rootjQuery,

		// A simple way to check for HTML strings
		// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
		// Strict HTML recognition (#11290: must start with <)
		rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

		init = jQuery.fn.init = function( selector, context ) {
			var match, elem;

			// HANDLE: $(""), $(null), $(undefined), $(false)
			if ( !selector ) {
				return this;
			}

			// Handle HTML strings
			if ( typeof selector === "string" ) {
				if ( selector[0] === "<" && selector[ selector.length - 1 ] === ">" && selector.length >= 3 ) {
					// Assume that strings that start and end with <> are HTML and skip the regex check
					match = [ null, selector, null ];

				} else {
					match = rquickExpr.exec( selector );
				}

				// Match html or make sure no context is specified for #id
				if ( match && (match[1] || !context) ) {

					// HANDLE: $(html) -> $(array)
					if ( match[1] ) {
						context = context instanceof jQuery ? context[0] : context;

						// Option to run scripts is true for back-compat
						// Intentionally let the error be thrown if parseHTML is not present
						jQuery.merge( this, jQuery.parseHTML(
							match[1],
							context && context.nodeType ? context.ownerDocument || context : document,
							true
						) );

						// HANDLE: $(html, props)
						if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
							for ( match in context ) {
								// Properties of context are called as methods if possible
								if ( jQuery.isFunction( this[ match ] ) ) {
									this[ match ]( context[ match ] );

								// ...and otherwise set as attributes
								} else {
									this.attr( match, context[ match ] );
								}
							}
						}

						return this;

					// HANDLE: $(#id)
					} else {
						elem = document.getElementById( match[2] );

						// Support: Blackberry 4.6
						// gEBID returns nodes no longer in the document (#6963)
						if ( elem && elem.parentNode ) {
							// Inject the element directly into the jQuery object
							this.length = 1;
							this[0] = elem;
						}

						this.context = document;
						this.selector = selector;
						return this;
					}

				// HANDLE: $(expr, $(...))
				} else if ( !context || context.jquery ) {
					return ( context || rootjQuery ).find( selector );

				// HANDLE: $(expr, context)
				// (which is just equivalent to: $(context).find(expr)
				} else {
					return this.constructor( context ).find( selector );
				}

			// HANDLE: $(DOMElement)
			} else if ( selector.nodeType ) {
				this.context = this[0] = selector;
				this.length = 1;
				return this;

			// HANDLE: $(function)
			// Shortcut for document ready
			} else if ( jQuery.isFunction( selector ) ) {
				return typeof rootjQuery.ready !== "undefined" ?
					rootjQuery.ready( selector ) :
					// Execute immediately if ready is not present
					selector( jQuery );
			}

			if ( selector.selector !== undefined ) {
				this.selector = selector.selector;
				this.context = selector.context;
			}

			return jQuery.makeArray( selector, this );
		};

	// Give the init function the jQuery prototype for later instantiation
	init.prototype = jQuery.fn;

	// Initialize central reference
	rootjQuery = jQuery( document );


	var rparentsprev = /^(?:parents|prev(?:Until|All))/,
		// Methods guaranteed to produce a unique set when starting from a unique set
		guaranteedUnique = {
			children: true,
			contents: true,
			next: true,
			prev: true
		};

	jQuery.extend({
		dir: function( elem, dir, until ) {
			var matched = [],
				truncate = until !== undefined;

			while ( (elem = elem[ dir ]) && elem.nodeType !== 9 ) {
				if ( elem.nodeType === 1 ) {
					if ( truncate && jQuery( elem ).is( until ) ) {
						break;
					}
					matched.push( elem );
				}
			}
			return matched;
		},

		sibling: function( n, elem ) {
			var matched = [];

			for ( ; n; n = n.nextSibling ) {
				if ( n.nodeType === 1 && n !== elem ) {
					matched.push( n );
				}
			}

			return matched;
		}
	});

	jQuery.fn.extend({
		has: function( target ) {
			var targets = jQuery( target, this ),
				l = targets.length;

			return this.filter(function() {
				var i = 0;
				for ( ; i < l; i++ ) {
					if ( jQuery.contains( this, targets[i] ) ) {
						return true;
					}
				}
			});
		},

		closest: function( selectors, context ) {
			var cur,
				i = 0,
				l = this.length,
				matched = [],
				pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
					jQuery( selectors, context || this.context ) :
					0;

			for ( ; i < l; i++ ) {
				for ( cur = this[i]; cur && cur !== context; cur = cur.parentNode ) {
					// Always skip document fragments
					if ( cur.nodeType < 11 && (pos ?
						pos.index(cur) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector(cur, selectors)) ) {

						matched.push( cur );
						break;
					}
				}
			}

			return this.pushStack( matched.length > 1 ? jQuery.unique( matched ) : matched );
		},

		// Determine the position of an element within the set
		index: function( elem ) {

			// No argument, return index in parent
			if ( !elem ) {
				return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
			}

			// Index in selector
			if ( typeof elem === "string" ) {
				return indexOf.call( jQuery( elem ), this[ 0 ] );
			}

			// Locate the position of the desired element
			return indexOf.call( this,

				// If it receives a jQuery object, the first element is used
				elem.jquery ? elem[ 0 ] : elem
			);
		},

		add: function( selector, context ) {
			return this.pushStack(
				jQuery.unique(
					jQuery.merge( this.get(), jQuery( selector, context ) )
				)
			);
		},

		addBack: function( selector ) {
			return this.add( selector == null ?
				this.prevObject : this.prevObject.filter(selector)
			);
		}
	});

	function sibling( cur, dir ) {
		while ( (cur = cur[dir]) && cur.nodeType !== 1 ) {}
		return cur;
	}

	jQuery.each({
		parent: function( elem ) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents: function( elem ) {
			return jQuery.dir( elem, "parentNode" );
		},
		parentsUntil: function( elem, i, until ) {
			return jQuery.dir( elem, "parentNode", until );
		},
		next: function( elem ) {
			return sibling( elem, "nextSibling" );
		},
		prev: function( elem ) {
			return sibling( elem, "previousSibling" );
		},
		nextAll: function( elem ) {
			return jQuery.dir( elem, "nextSibling" );
		},
		prevAll: function( elem ) {
			return jQuery.dir( elem, "previousSibling" );
		},
		nextUntil: function( elem, i, until ) {
			return jQuery.dir( elem, "nextSibling", until );
		},
		prevUntil: function( elem, i, until ) {
			return jQuery.dir( elem, "previousSibling", until );
		},
		siblings: function( elem ) {
			return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
		},
		children: function( elem ) {
			return jQuery.sibling( elem.firstChild );
		},
		contents: function( elem ) {
			return elem.contentDocument || jQuery.merge( [], elem.childNodes );
		}
	}, function( name, fn ) {
		jQuery.fn[ name ] = function( until, selector ) {
			var matched = jQuery.map( this, fn, until );

			if ( name.slice( -5 ) !== "Until" ) {
				selector = until;
			}

			if ( selector && typeof selector === "string" ) {
				matched = jQuery.filter( selector, matched );
			}

			if ( this.length > 1 ) {
				// Remove duplicates
				if ( !guaranteedUnique[ name ] ) {
					jQuery.unique( matched );
				}

				// Reverse order for parents* and prev-derivatives
				if ( rparentsprev.test( name ) ) {
					matched.reverse();
				}
			}

			return this.pushStack( matched );
		};
	});
	var rnotwhite = (/\S+/g);



	// String to Object options format cache
	var optionsCache = {};

	// Convert String-formatted options into Object-formatted ones and store in cache
	function createOptions( options ) {
		var object = optionsCache[ options ] = {};
		jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
			object[ flag ] = true;
		});
		return object;
	}

	/*
	 * Create a callback list using the following parameters:
	 *
	 *	options: an optional list of space-separated options that will change how
	 *			the callback list behaves or a more traditional option object
	 *
	 * By default a callback list will act like an event callback list and can be
	 * "fired" multiple times.
	 *
	 * Possible options:
	 *
	 *	once:			will ensure the callback list can only be fired once (like a Deferred)
	 *
	 *	memory:			will keep track of previous values and will call any callback added
	 *					after the list has been fired right away with the latest "memorized"
	 *					values (like a Deferred)
	 *
	 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
	 *
	 *	stopOnFalse:	interrupt callings when a callback returns false
	 *
	 */
	jQuery.Callbacks = function( options ) {

		// Convert options from String-formatted to Object-formatted if needed
		// (we check in cache first)
		options = typeof options === "string" ?
			( optionsCache[ options ] || createOptions( options ) ) :
			jQuery.extend( {}, options );

		var // Last fire value (for non-forgettable lists)
			memory,
			// Flag to know if list was already fired
			fired,
			// Flag to know if list is currently firing
			firing,
			// First callback to fire (used internally by add and fireWith)
			firingStart,
			// End of the loop when firing
			firingLength,
			// Index of currently firing callback (modified by remove if needed)
			firingIndex,
			// Actual callback list
			list = [],
			// Stack of fire calls for repeatable lists
			stack = !options.once && [],
			// Fire callbacks
			fire = function( data ) {
				memory = options.memory && data;
				fired = true;
				firingIndex = firingStart || 0;
				firingStart = 0;
				firingLength = list.length;
				firing = true;
				for ( ; list && firingIndex < firingLength; firingIndex++ ) {
					if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
						memory = false; // To prevent further calls using add
						break;
					}
				}
				firing = false;
				if ( list ) {
					if ( stack ) {
						if ( stack.length ) {
							fire( stack.shift() );
						}
					} else if ( memory ) {
						list = [];
					} else {
						self.disable();
					}
				}
			},
			// Actual Callbacks object
			self = {
				// Add a callback or a collection of callbacks to the list
				add: function() {
					if ( list ) {
						// First, we save the current length
						var start = list.length;
						(function add( args ) {
							jQuery.each( args, function( _, arg ) {
								var type = jQuery.type( arg );
								if ( type === "function" ) {
									if ( !options.unique || !self.has( arg ) ) {
										list.push( arg );
									}
								} else if ( arg && arg.length && type !== "string" ) {
									// Inspect recursively
									add( arg );
								}
							});
						})( arguments );
						// Do we need to add the callbacks to the
						// current firing batch?
						if ( firing ) {
							firingLength = list.length;
						// With memory, if we're not firing then
						// we should call right away
						} else if ( memory ) {
							firingStart = start;
							fire( memory );
						}
					}
					return this;
				},
				// Remove a callback from the list
				remove: function() {
					if ( list ) {
						jQuery.each( arguments, function( _, arg ) {
							var index;
							while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
								list.splice( index, 1 );
								// Handle firing indexes
								if ( firing ) {
									if ( index <= firingLength ) {
										firingLength--;
									}
									if ( index <= firingIndex ) {
										firingIndex--;
									}
								}
							}
						});
					}
					return this;
				},
				// Check if a given callback is in the list.
				// If no argument is given, return whether or not list has callbacks attached.
				has: function( fn ) {
					return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );
				},
				// Remove all callbacks from the list
				empty: function() {
					list = [];
					firingLength = 0;
					return this;
				},
				// Have the list do nothing anymore
				disable: function() {
					list = stack = memory = undefined;
					return this;
				},
				// Is it disabled?
				disabled: function() {
					return !list;
				},
				// Lock the list in its current state
				lock: function() {
					stack = undefined;
					if ( !memory ) {
						self.disable();
					}
					return this;
				},
				// Is it locked?
				locked: function() {
					return !stack;
				},
				// Call all callbacks with the given context and arguments
				fireWith: function( context, args ) {
					if ( list && ( !fired || stack ) ) {
						args = args || [];
						args = [ context, args.slice ? args.slice() : args ];
						if ( firing ) {
							stack.push( args );
						} else {
							fire( args );
						}
					}
					return this;
				},
				// Call all the callbacks with the given arguments
				fire: function() {
					self.fireWith( this, arguments );
					return this;
				},
				// To know if the callbacks have already been called at least once
				fired: function() {
					return !!fired;
				}
			};

		return self;
	};


	jQuery.extend({

		Deferred: function( func ) {
			var tuples = [
					// action, add listener, listener list, final state
					[ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
					[ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
					[ "notify", "progress", jQuery.Callbacks("memory") ]
				],
				state = "pending",
				promise = {
					state: function() {
						return state;
					},
					always: function() {
						deferred.done( arguments ).fail( arguments );
						return this;
					},
					then: function( /* fnDone, fnFail, fnProgress */ ) {
						var fns = arguments;
						return jQuery.Deferred(function( newDefer ) {
							jQuery.each( tuples, function( i, tuple ) {
								var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
								// deferred[ done | fail | progress ] for forwarding actions to newDefer
								deferred[ tuple[1] ](function() {
									var returned = fn && fn.apply( this, arguments );
									if ( returned && jQuery.isFunction( returned.promise ) ) {
										returned.promise()
											.done( newDefer.resolve )
											.fail( newDefer.reject )
											.progress( newDefer.notify );
									} else {
										newDefer[ tuple[ 0 ] + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
									}
								});
							});
							fns = null;
						}).promise();
					},
					// Get a promise for this deferred
					// If obj is provided, the promise aspect is added to the object
					promise: function( obj ) {
						return obj != null ? jQuery.extend( obj, promise ) : promise;
					}
				},
				deferred = {};

			// Keep pipe for back-compat
			promise.pipe = promise.then;

			// Add list-specific methods
			jQuery.each( tuples, function( i, tuple ) {
				var list = tuple[ 2 ],
					stateString = tuple[ 3 ];

				// promise[ done | fail | progress ] = list.add
				promise[ tuple[1] ] = list.add;

				// Handle state
				if ( stateString ) {
					list.add(function() {
						// state = [ resolved | rejected ]
						state = stateString;

					// [ reject_list | resolve_list ].disable; progress_list.lock
					}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
				}

				// deferred[ resolve | reject | notify ]
				deferred[ tuple[0] ] = function() {
					deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
					return this;
				};
				deferred[ tuple[0] + "With" ] = list.fireWith;
			});

			// Make the deferred a promise
			promise.promise( deferred );

			// Call given func if any
			if ( func ) {
				func.call( deferred, deferred );
			}

			// All done!
			return deferred;
		},

		// Deferred helper
		when: function( subordinate /* , ..., subordinateN */ ) {
			var i = 0,
				resolveValues = slice.call( arguments ),
				length = resolveValues.length,

				// the count of uncompleted subordinates
				remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

				// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
				deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

				// Update function for both resolve and progress values
				updateFunc = function( i, contexts, values ) {
					return function( value ) {
						contexts[ i ] = this;
						values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
						if ( values === progressValues ) {
							deferred.notifyWith( contexts, values );
						} else if ( !( --remaining ) ) {
							deferred.resolveWith( contexts, values );
						}
					};
				},

				progressValues, progressContexts, resolveContexts;

			// Add listeners to Deferred subordinates; treat others as resolved
			if ( length > 1 ) {
				progressValues = new Array( length );
				progressContexts = new Array( length );
				resolveContexts = new Array( length );
				for ( ; i < length; i++ ) {
					if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
						resolveValues[ i ].promise()
							.done( updateFunc( i, resolveContexts, resolveValues ) )
							.fail( deferred.reject )
							.progress( updateFunc( i, progressContexts, progressValues ) );
					} else {
						--remaining;
					}
				}
			}

			// If we're not waiting on anything, resolve the master
			if ( !remaining ) {
				deferred.resolveWith( resolveContexts, resolveValues );
			}

			return deferred.promise();
		}
	});


	// The deferred used on DOM ready
	var readyList;

	jQuery.fn.ready = function( fn ) {
		// Add the callback
		jQuery.ready.promise().done( fn );

		return this;
	};

	jQuery.extend({
		// Is the DOM ready to be used? Set to true once it occurs.
		isReady: false,

		// A counter to track how many items to wait for before
		// the ready event fires. See #6781
		readyWait: 1,

		// Hold (or release) the ready event
		holdReady: function( hold ) {
			if ( hold ) {
				jQuery.readyWait++;
			} else {
				jQuery.ready( true );
			}
		},

		// Handle when the DOM is ready
		ready: function( wait ) {

			// Abort if there are pending holds or we're already ready
			if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
				return;
			}

			// Remember that the DOM is ready
			jQuery.isReady = true;

			// If a normal DOM Ready event fired, decrement, and wait if need be
			if ( wait !== true && --jQuery.readyWait > 0 ) {
				return;
			}

			// If there are functions bound, to execute
			readyList.resolveWith( document, [ jQuery ] );

			// Trigger any bound ready events
			if ( jQuery.fn.triggerHandler ) {
				jQuery( document ).triggerHandler( "ready" );
				jQuery( document ).off( "ready" );
			}
		}
	});

	/**
	 * The ready event handler and self cleanup method
	 */
	function completed() {
		document.removeEventListener( "DOMContentLoaded", completed, false );
		window.removeEventListener( "load", completed, false );
		jQuery.ready();
	}

	jQuery.ready.promise = function( obj ) {
		if ( !readyList ) {

			readyList = jQuery.Deferred();

			// Catch cases where $(document).ready() is called after the browser event has already occurred.
			// We once tried to use readyState "interactive" here, but it caused issues like the one
			// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
			if ( document.readyState === "complete" ) {
				// Handle it asynchronously to allow scripts the opportunity to delay ready
				setTimeout( jQuery.ready );

			} else {

				// Use the handy event callback
				document.addEventListener( "DOMContentLoaded", completed, false );

				// A fallback to window.onload, that will always work
				window.addEventListener( "load", completed, false );
			}
		}
		return readyList.promise( obj );
	};

	// Kick off the DOM ready check even if the user does not
	jQuery.ready.promise();




	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	var access = jQuery.access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			len = elems.length,
			bulk = key == null;

		// Sets many values
		if ( jQuery.type( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
			}

		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;

			if ( !jQuery.isFunction( value ) ) {
				raw = true;
			}

			if ( bulk ) {
				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;

				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}

			if ( fn ) {
				for ( ; i < len; i++ ) {
					fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
				}
			}
		}

		return chainable ?
			elems :

			// Gets
			bulk ?
				fn.call( elems ) :
				len ? fn( elems[0], key ) : emptyGet;
	};


	/**
	 * Determines whether an object can have data
	 */
	jQuery.acceptData = function( owner ) {
		// Accepts only:
		//  - Node
		//    - Node.ELEMENT_NODE
		//    - Node.DOCUMENT_NODE
		//  - Object
		//    - Any
		/* jshint -W018 */
		return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
	};


	function Data() {
		// Support: Android<4,
		// Old WebKit does not have Object.preventExtensions/freeze method,
		// return new empty object instead with no [[set]] accessor
		Object.defineProperty( this.cache = {}, 0, {
			get: function() {
				return {};
			}
		});

		this.expando = jQuery.expando + Data.uid++;
	}

	Data.uid = 1;
	Data.accepts = jQuery.acceptData;

	Data.prototype = {
		key: function( owner ) {
			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return the key for a frozen object.
			if ( !Data.accepts( owner ) ) {
				return 0;
			}

			var descriptor = {},
				// Check if the owner object already has a cache key
				unlock = owner[ this.expando ];

			// If not, create one
			if ( !unlock ) {
				unlock = Data.uid++;

				// Secure it in a non-enumerable, non-writable property
				try {
					descriptor[ this.expando ] = { value: unlock };
					Object.defineProperties( owner, descriptor );

				// Support: Android<4
				// Fallback to a less secure definition
				} catch ( e ) {
					descriptor[ this.expando ] = unlock;
					jQuery.extend( owner, descriptor );
				}
			}

			// Ensure the cache object
			if ( !this.cache[ unlock ] ) {
				this.cache[ unlock ] = {};
			}

			return unlock;
		},
		set: function( owner, data, value ) {
			var prop,
				// There may be an unlock assigned to this node,
				// if there is no entry for this "owner", create one inline
				// and set the unlock as though an owner entry had always existed
				unlock = this.key( owner ),
				cache = this.cache[ unlock ];

			// Handle: [ owner, key, value ] args
			if ( typeof data === "string" ) {
				cache[ data ] = value;

			// Handle: [ owner, { properties } ] args
			} else {
				// Fresh assignments by object are shallow copied
				if ( jQuery.isEmptyObject( cache ) ) {
					jQuery.extend( this.cache[ unlock ], data );
				// Otherwise, copy the properties one-by-one to the cache object
				} else {
					for ( prop in data ) {
						cache[ prop ] = data[ prop ];
					}
				}
			}
			return cache;
		},
		get: function( owner, key ) {
			// Either a valid cache is found, or will be created.
			// New caches will be created and the unlock returned,
			// allowing direct access to the newly created
			// empty data object. A valid owner object must be provided.
			var cache = this.cache[ this.key( owner ) ];

			return key === undefined ?
				cache : cache[ key ];
		},
		access: function( owner, key, value ) {
			var stored;
			// In cases where either:
			//
			//   1. No key was specified
			//   2. A string key was specified, but no value provided
			//
			// Take the "read" path and allow the get method to determine
			// which value to return, respectively either:
			//
			//   1. The entire cache object
			//   2. The data stored at the key
			//
			if ( key === undefined ||
					((key && typeof key === "string") && value === undefined) ) {

				stored = this.get( owner, key );

				return stored !== undefined ?
					stored : this.get( owner, jQuery.camelCase(key) );
			}

			// [*]When the key is not a string, or both a key and value
			// are specified, set or extend (existing objects) with either:
			//
			//   1. An object of properties
			//   2. A key and value
			//
			this.set( owner, key, value );

			// Since the "set" path can have two possible entry points
			// return the expected data based on which path was taken[*]
			return value !== undefined ? value : key;
		},
		remove: function( owner, key ) {
			var i, name, camel,
				unlock = this.key( owner ),
				cache = this.cache[ unlock ];

			if ( key === undefined ) {
				this.cache[ unlock ] = {};

			} else {
				// Support array or space separated string of keys
				if ( jQuery.isArray( key ) ) {
					// If "name" is an array of keys...
					// When data is initially created, via ("key", "val") signature,
					// keys will be converted to camelCase.
					// Since there is no way to tell _how_ a key was added, remove
					// both plain key and camelCase key. #12786
					// This will only penalize the array argument path.
					name = key.concat( key.map( jQuery.camelCase ) );
				} else {
					camel = jQuery.camelCase( key );
					// Try the string as a key before any manipulation
					if ( key in cache ) {
						name = [ key, camel ];
					} else {
						// If a key with the spaces exists, use it.
						// Otherwise, create an array by matching non-whitespace
						name = camel;
						name = name in cache ?
							[ name ] : ( name.match( rnotwhite ) || [] );
					}
				}

				i = name.length;
				while ( i-- ) {
					delete cache[ name[ i ] ];
				}
			}
		},
		hasData: function( owner ) {
			return !jQuery.isEmptyObject(
				this.cache[ owner[ this.expando ] ] || {}
			);
		},
		discard: function( owner ) {
			if ( owner[ this.expando ] ) {
				delete this.cache[ owner[ this.expando ] ];
			}
		}
	};
	var data_priv = new Data();

	var data_user = new Data();



	//	Implementation Summary
	//
	//	1. Enforce API surface and semantic compatibility with 1.9.x branch
	//	2. Improve the module's maintainability by reducing the storage
	//		paths to a single mechanism.
	//	3. Use the same single mechanism to support "private" and "user" data.
	//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
	//	5. Avoid exposing implementation details on user objects (eg. expando properties)
	//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
		rmultiDash = /([A-Z])/g;

	function dataAttr( elem, key, data ) {
		var name;

		// If nothing was found internally, try to fetch any
		// data from the HTML5 data-* attribute
		if ( data === undefined && elem.nodeType === 1 ) {
			name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();
			data = elem.getAttribute( name );

			if ( typeof data === "string" ) {
				try {
					data = data === "true" ? true :
						data === "false" ? false :
						data === "null" ? null :
						// Only convert to a number if it doesn't change the string
						+data + "" === data ? +data :
						rbrace.test( data ) ? jQuery.parseJSON( data ) :
						data;
				} catch( e ) {}

				// Make sure we set the data so it isn't changed later
				data_user.set( elem, key, data );
			} else {
				data = undefined;
			}
		}
		return data;
	}

	jQuery.extend({
		hasData: function( elem ) {
			return data_user.hasData( elem ) || data_priv.hasData( elem );
		},

		data: function( elem, name, data ) {
			return data_user.access( elem, name, data );
		},

		removeData: function( elem, name ) {
			data_user.remove( elem, name );
		},

		// TODO: Now that all calls to _data and _removeData have been replaced
		// with direct calls to data_priv methods, these can be deprecated.
		_data: function( elem, name, data ) {
			return data_priv.access( elem, name, data );
		},

		_removeData: function( elem, name ) {
			data_priv.remove( elem, name );
		}
	});

	jQuery.fn.extend({
		data: function( key, value ) {
			var i, name, data,
				elem = this[ 0 ],
				attrs = elem && elem.attributes;

			// Gets all values
			if ( key === undefined ) {
				if ( this.length ) {
					data = data_user.get( elem );

					if ( elem.nodeType === 1 && !data_priv.get( elem, "hasDataAttrs" ) ) {
						i = attrs.length;
						while ( i-- ) {

							// Support: IE11+
							// The attrs elements can be null (#14894)
							if ( attrs[ i ] ) {
								name = attrs[ i ].name;
								if ( name.indexOf( "data-" ) === 0 ) {
									name = jQuery.camelCase( name.slice(5) );
									dataAttr( elem, name, data[ name ] );
								}
							}
						}
						data_priv.set( elem, "hasDataAttrs", true );
					}
				}

				return data;
			}

			// Sets multiple values
			if ( typeof key === "object" ) {
				return this.each(function() {
					data_user.set( this, key );
				});
			}

			return access( this, function( value ) {
				var data,
					camelKey = jQuery.camelCase( key );

				// The calling jQuery object (element matches) is not empty
				// (and therefore has an element appears at this[ 0 ]) and the
				// `value` parameter was not undefined. An empty jQuery object
				// will result in `undefined` for elem = this[ 0 ] which will
				// throw an exception if an attempt to read a data cache is made.
				if ( elem && value === undefined ) {
					// Attempt to get data from the cache
					// with the key as-is
					data = data_user.get( elem, key );
					if ( data !== undefined ) {
						return data;
					}

					// Attempt to get data from the cache
					// with the key camelized
					data = data_user.get( elem, camelKey );
					if ( data !== undefined ) {
						return data;
					}

					// Attempt to "discover" the data in
					// HTML5 custom data-* attrs
					data = dataAttr( elem, camelKey, undefined );
					if ( data !== undefined ) {
						return data;
					}

					// We tried really hard, but the data doesn't exist.
					return;
				}

				// Set the data...
				this.each(function() {
					// First, attempt to store a copy or reference of any
					// data that might've been store with a camelCased key.
					var data = data_user.get( this, camelKey );

					// For HTML5 data-* attribute interop, we have to
					// store property names with dashes in a camelCase form.
					// This might not apply to all properties...*
					data_user.set( this, camelKey, value );

					// *... In the case of properties that might _actually_
					// have dashes, we need to also store a copy of that
					// unchanged property.
					if ( key.indexOf("-") !== -1 && data !== undefined ) {
						data_user.set( this, key, value );
					}
				});
			}, null, value, arguments.length > 1, null, true );
		},

		removeData: function( key ) {
			return this.each(function() {
				data_user.remove( this, key );
			});
		}
	});


	jQuery.extend({
		queue: function( elem, type, data ) {
			var queue;

			if ( elem ) {
				type = ( type || "fx" ) + "queue";
				queue = data_priv.get( elem, type );

				// Speed up dequeue by getting out quickly if this is just a lookup
				if ( data ) {
					if ( !queue || jQuery.isArray( data ) ) {
						queue = data_priv.access( elem, type, jQuery.makeArray(data) );
					} else {
						queue.push( data );
					}
				}
				return queue || [];
			}
		},

		dequeue: function( elem, type ) {
			type = type || "fx";

			var queue = jQuery.queue( elem, type ),
				startLength = queue.length,
				fn = queue.shift(),
				hooks = jQuery._queueHooks( elem, type ),
				next = function() {
					jQuery.dequeue( elem, type );
				};

			// If the fx queue is dequeued, always remove the progress sentinel
			if ( fn === "inprogress" ) {
				fn = queue.shift();
				startLength--;
			}

			if ( fn ) {

				// Add a progress sentinel to prevent the fx queue from being
				// automatically dequeued
				if ( type === "fx" ) {
					queue.unshift( "inprogress" );
				}

				// Clear up the last queue stop function
				delete hooks.stop;
				fn.call( elem, next, hooks );
			}

			if ( !startLength && hooks ) {
				hooks.empty.fire();
			}
		},

		// Not public - generate a queueHooks object, or return the current one
		_queueHooks: function( elem, type ) {
			var key = type + "queueHooks";
			return data_priv.get( elem, key ) || data_priv.access( elem, key, {
				empty: jQuery.Callbacks("once memory").add(function() {
					data_priv.remove( elem, [ type + "queue", key ] );
				})
			});
		}
	});

	jQuery.fn.extend({
		queue: function( type, data ) {
			var setter = 2;

			if ( typeof type !== "string" ) {
				data = type;
				type = "fx";
				setter--;
			}

			if ( arguments.length < setter ) {
				return jQuery.queue( this[0], type );
			}

			return data === undefined ?
				this :
				this.each(function() {
					var queue = jQuery.queue( this, type, data );

					// Ensure a hooks for this queue
					jQuery._queueHooks( this, type );

					if ( type === "fx" && queue[0] !== "inprogress" ) {
						jQuery.dequeue( this, type );
					}
				});
		},
		dequeue: function( type ) {
			return this.each(function() {
				jQuery.dequeue( this, type );
			});
		},
		clearQueue: function( type ) {
			return this.queue( type || "fx", [] );
		},
		// Get a promise resolved when queues of a certain type
		// are emptied (fx is the type by default)
		promise: function( type, obj ) {
			var tmp,
				count = 1,
				defer = jQuery.Deferred(),
				elements = this,
				i = this.length,
				resolve = function() {
					if ( !( --count ) ) {
						defer.resolveWith( elements, [ elements ] );
					}
				};

			if ( typeof type !== "string" ) {
				obj = type;
				type = undefined;
			}
			type = type || "fx";

			while ( i-- ) {
				tmp = data_priv.get( elements[ i ], type + "queueHooks" );
				if ( tmp && tmp.empty ) {
					count++;
					tmp.empty.add( resolve );
				}
			}
			resolve();
			return defer.promise( obj );
		}
	});
	var pnum = (/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/).source;

	var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

	var isHidden = function( elem, el ) {
			// isHidden might be called from jQuery#filter function;
			// in that case, element will be second argument
			elem = el || elem;
			return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
		};

	var rcheckableType = (/^(?:checkbox|radio)$/i);



	(function() {
		var fragment = document.createDocumentFragment(),
			div = fragment.appendChild( document.createElement( "div" ) ),
			input = document.createElement( "input" );

		// Support: Safari<=5.1
		// Check state lost if the name is set (#11217)
		// Support: Windows Web Apps (WWA)
		// `name` and `type` must use .setAttribute for WWA (#14901)
		input.setAttribute( "type", "radio" );
		input.setAttribute( "checked", "checked" );
		input.setAttribute( "name", "t" );

		div.appendChild( input );

		// Support: Safari<=5.1, Android<4.2
		// Older WebKit doesn't clone checked state correctly in fragments
		support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

		// Support: IE<=11+
		// Make sure textarea (and checkbox) defaultValue is properly cloned
		div.innerHTML = "<textarea>x</textarea>";
		support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
	})();
	var strundefined = typeof undefined;



	support.focusinBubbles = "onfocusin" in window;


	var
		rkeyEvent = /^key/,
		rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/,
		rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
		rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

	function returnTrue() {
		return true;
	}

	function returnFalse() {
		return false;
	}

	function safeActiveElement() {
		try {
			return document.activeElement;
		} catch ( err ) { }
	}

	/*
	 * Helper functions for managing events -- not part of the public interface.
	 * Props to Dean Edwards' addEvent library for many of the ideas.
	 */
	jQuery.event = {

		global: {},

		add: function( elem, types, handler, data, selector ) {

			var handleObjIn, eventHandle, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = data_priv.get( elem );

			// Don't attach events to noData or text/comment nodes (but allow plain objects)
			if ( !elemData ) {
				return;
			}

			// Caller can pass in an object of custom data in lieu of the handler
			if ( handler.handler ) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}

			// Make sure that the handler has a unique ID, used to find/remove it later
			if ( !handler.guid ) {
				handler.guid = jQuery.guid++;
			}

			// Init the element's event structure and main handler, if this is the first
			if ( !(events = elemData.events) ) {
				events = elemData.events = {};
			}
			if ( !(eventHandle = elemData.handle) ) {
				eventHandle = elemData.handle = function( e ) {
					// Discard the second event of a jQuery.event.trigger() and
					// when an event is called after a page has unloaded
					return typeof jQuery !== strundefined && jQuery.event.triggered !== e.type ?
						jQuery.event.dispatch.apply( elem, arguments ) : undefined;
				};
			}

			// Handle multiple events separated by a space
			types = ( types || "" ).match( rnotwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[t] ) || [];
				type = origType = tmp[1];
				namespaces = ( tmp[2] || "" ).split( "." ).sort();

				// There *must* be a type, no attaching namespace-only handlers
				if ( !type ) {
					continue;
				}

				// If event changes its type, use the special event handlers for the changed type
				special = jQuery.event.special[ type ] || {};

				// If selector defined, determine special event api type, otherwise given type
				type = ( selector ? special.delegateType : special.bindType ) || type;

				// Update special based on newly reset type
				special = jQuery.event.special[ type ] || {};

				// handleObj is passed to all event handlers
				handleObj = jQuery.extend({
					type: type,
					origType: origType,
					data: data,
					handler: handler,
					guid: handler.guid,
					selector: selector,
					needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
					namespace: namespaces.join(".")
				}, handleObjIn );

				// Init the event handler queue if we're the first
				if ( !(handlers = events[ type ]) ) {
					handlers = events[ type ] = [];
					handlers.delegateCount = 0;

					// Only use addEventListener if the special events handler returns false
					if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
						if ( elem.addEventListener ) {
							elem.addEventListener( type, eventHandle, false );
						}
					}
				}

				if ( special.add ) {
					special.add.call( elem, handleObj );

					if ( !handleObj.handler.guid ) {
						handleObj.handler.guid = handler.guid;
					}
				}

				// Add to the element's handler list, delegates in front
				if ( selector ) {
					handlers.splice( handlers.delegateCount++, 0, handleObj );
				} else {
					handlers.push( handleObj );
				}

				// Keep track of which events have ever been used, for event optimization
				jQuery.event.global[ type ] = true;
			}

		},

		// Detach an event or set of events from an element
		remove: function( elem, types, handler, selector, mappedTypes ) {

			var j, origCount, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = data_priv.hasData( elem ) && data_priv.get( elem );

			if ( !elemData || !(events = elemData.events) ) {
				return;
			}

			// Once for each type.namespace in types; type may be omitted
			types = ( types || "" ).match( rnotwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[t] ) || [];
				type = origType = tmp[1];
				namespaces = ( tmp[2] || "" ).split( "." ).sort();

				// Unbind all events (on this namespace, if provided) for the element
				if ( !type ) {
					for ( type in events ) {
						jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
					}
					continue;
				}

				special = jQuery.event.special[ type ] || {};
				type = ( selector ? special.delegateType : special.bindType ) || type;
				handlers = events[ type ] || [];
				tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );

				// Remove matching events
				origCount = j = handlers.length;
				while ( j-- ) {
					handleObj = handlers[ j ];

					if ( ( mappedTypes || origType === handleObj.origType ) &&
						( !handler || handler.guid === handleObj.guid ) &&
						( !tmp || tmp.test( handleObj.namespace ) ) &&
						( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
						handlers.splice( j, 1 );

						if ( handleObj.selector ) {
							handlers.delegateCount--;
						}
						if ( special.remove ) {
							special.remove.call( elem, handleObj );
						}
					}
				}

				// Remove generic event handler if we removed something and no more handlers exist
				// (avoids potential for endless recursion during removal of special event handlers)
				if ( origCount && !handlers.length ) {
					if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
						jQuery.removeEvent( elem, type, elemData.handle );
					}

					delete events[ type ];
				}
			}

			// Remove the expando if it's no longer used
			if ( jQuery.isEmptyObject( events ) ) {
				delete elemData.handle;
				data_priv.remove( elem, "events" );
			}
		},

		trigger: function( event, data, elem, onlyHandlers ) {

			var i, cur, tmp, bubbleType, ontype, handle, special,
				eventPath = [ elem || document ],
				type = hasOwn.call( event, "type" ) ? event.type : event,
				namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];

			cur = tmp = elem = elem || document;

			// Don't do events on text and comment nodes
			if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
				return;
			}

			// focus/blur morphs to focusin/out; ensure we're not firing them right now
			if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
				return;
			}

			if ( type.indexOf(".") >= 0 ) {
				// Namespaced trigger; create a regexp to match event type in handle()
				namespaces = type.split(".");
				type = namespaces.shift();
				namespaces.sort();
			}
			ontype = type.indexOf(":") < 0 && "on" + type;

			// Caller can pass in a jQuery.Event object, Object, or just an event type string
			event = event[ jQuery.expando ] ?
				event :
				new jQuery.Event( type, typeof event === "object" && event );

			// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
			event.isTrigger = onlyHandlers ? 2 : 3;
			event.namespace = namespaces.join(".");
			event.namespace_re = event.namespace ?
				new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
				null;

			// Clean up the event in case it is being reused
			event.result = undefined;
			if ( !event.target ) {
				event.target = elem;
			}

			// Clone any incoming data and prepend the event, creating the handler arg list
			data = data == null ?
				[ event ] :
				jQuery.makeArray( data, [ event ] );

			// Allow special events to draw outside the lines
			special = jQuery.event.special[ type ] || {};
			if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
				return;
			}

			// Determine event propagation path in advance, per W3C events spec (#9951)
			// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
			if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

				bubbleType = special.delegateType || type;
				if ( !rfocusMorph.test( bubbleType + type ) ) {
					cur = cur.parentNode;
				}
				for ( ; cur; cur = cur.parentNode ) {
					eventPath.push( cur );
					tmp = cur;
				}

				// Only add window if we got to document (e.g., not plain obj or detached DOM)
				if ( tmp === (elem.ownerDocument || document) ) {
					eventPath.push( tmp.defaultView || tmp.parentWindow || window );
				}
			}

			// Fire handlers on the event path
			i = 0;
			while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {

				event.type = i > 1 ?
					bubbleType :
					special.bindType || type;

				// jQuery handler
				handle = ( data_priv.get( cur, "events" ) || {} )[ event.type ] && data_priv.get( cur, "handle" );
				if ( handle ) {
					handle.apply( cur, data );
				}

				// Native handler
				handle = ontype && cur[ ontype ];
				if ( handle && handle.apply && jQuery.acceptData( cur ) ) {
					event.result = handle.apply( cur, data );
					if ( event.result === false ) {
						event.preventDefault();
					}
				}
			}
			event.type = type;

			// If nobody prevented the default action, do it now
			if ( !onlyHandlers && !event.isDefaultPrevented() ) {

				if ( (!special._default || special._default.apply( eventPath.pop(), data ) === false) &&
					jQuery.acceptData( elem ) ) {

					// Call a native DOM method on the target with the same name name as the event.
					// Don't do default actions on window, that's where global variables be (#6170)
					if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

						// Don't re-trigger an onFOO event when we call its FOO() method
						tmp = elem[ ontype ];

						if ( tmp ) {
							elem[ ontype ] = null;
						}

						// Prevent re-triggering of the same event, since we already bubbled it above
						jQuery.event.triggered = type;
						elem[ type ]();
						jQuery.event.triggered = undefined;

						if ( tmp ) {
							elem[ ontype ] = tmp;
						}
					}
				}
			}

			return event.result;
		},

		dispatch: function( event ) {

			// Make a writable jQuery.Event from the native event object
			event = jQuery.event.fix( event );

			var i, j, ret, matched, handleObj,
				handlerQueue = [],
				args = slice.call( arguments ),
				handlers = ( data_priv.get( this, "events" ) || {} )[ event.type ] || [],
				special = jQuery.event.special[ event.type ] || {};

			// Use the fix-ed jQuery.Event rather than the (read-only) native event
			args[0] = event;
			event.delegateTarget = this;

			// Call the preDispatch hook for the mapped type, and let it bail if desired
			if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
				return;
			}

			// Determine handlers
			handlerQueue = jQuery.event.handlers.call( this, event, handlers );

			// Run delegates first; they may want to stop propagation beneath us
			i = 0;
			while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
				event.currentTarget = matched.elem;

				j = 0;
				while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {

					// Triggered event must either 1) have no namespace, or 2) have namespace(s)
					// a subset or equal to those in the bound event (both can have no namespace).
					if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {

						event.handleObj = handleObj;
						event.data = handleObj.data;

						ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
								.apply( matched.elem, args );

						if ( ret !== undefined ) {
							if ( (event.result = ret) === false ) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}

			// Call the postDispatch hook for the mapped type
			if ( special.postDispatch ) {
				special.postDispatch.call( this, event );
			}

			return event.result;
		},

		handlers: function( event, handlers ) {
			var i, matches, sel, handleObj,
				handlerQueue = [],
				delegateCount = handlers.delegateCount,
				cur = event.target;

			// Find delegate handlers
			// Black-hole SVG <use> instance trees (#13180)
			// Avoid non-left-click bubbling in Firefox (#3861)
			if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {

				for ( ; cur !== this; cur = cur.parentNode || this ) {

					// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
					if ( cur.disabled !== true || event.type !== "click" ) {
						matches = [];
						for ( i = 0; i < delegateCount; i++ ) {
							handleObj = handlers[ i ];

							// Don't conflict with Object.prototype properties (#13203)
							sel = handleObj.selector + " ";

							if ( matches[ sel ] === undefined ) {
								matches[ sel ] = handleObj.needsContext ?
									jQuery( sel, this ).index( cur ) >= 0 :
									jQuery.find( sel, this, null, [ cur ] ).length;
							}
							if ( matches[ sel ] ) {
								matches.push( handleObj );
							}
						}
						if ( matches.length ) {
							handlerQueue.push({ elem: cur, handlers: matches });
						}
					}
				}
			}

			// Add the remaining (directly-bound) handlers
			if ( delegateCount < handlers.length ) {
				handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
			}

			return handlerQueue;
		},

		// Includes some event props shared by KeyEvent and MouseEvent
		props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

		fixHooks: {},

		keyHooks: {
			props: "char charCode key keyCode".split(" "),
			filter: function( event, original ) {

				// Add which for key events
				if ( event.which == null ) {
					event.which = original.charCode != null ? original.charCode : original.keyCode;
				}

				return event;
			}
		},

		mouseHooks: {
			props: "button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
			filter: function( event, original ) {
				var eventDoc, doc, body,
					button = original.button;

				// Calculate pageX/Y if missing and clientX/Y available
				if ( event.pageX == null && original.clientX != null ) {
					eventDoc = event.target.ownerDocument || document;
					doc = eventDoc.documentElement;
					body = eventDoc.body;

					event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
					event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
				}

				// Add which for click: 1 === left; 2 === middle; 3 === right
				// Note: button is not normalized, so don't use it
				if ( !event.which && button !== undefined ) {
					event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
				}

				return event;
			}
		},

		fix: function( event ) {
			if ( event[ jQuery.expando ] ) {
				return event;
			}

			// Create a writable copy of the event object and normalize some properties
			var i, prop, copy,
				type = event.type,
				originalEvent = event,
				fixHook = this.fixHooks[ type ];

			if ( !fixHook ) {
				this.fixHooks[ type ] = fixHook =
					rmouseEvent.test( type ) ? this.mouseHooks :
					rkeyEvent.test( type ) ? this.keyHooks :
					{};
			}
			copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

			event = new jQuery.Event( originalEvent );

			i = copy.length;
			while ( i-- ) {
				prop = copy[ i ];
				event[ prop ] = originalEvent[ prop ];
			}

			// Support: Cordova 2.5 (WebKit) (#13255)
			// All events should have a target; Cordova deviceready doesn't
			if ( !event.target ) {
				event.target = document;
			}

			// Support: Safari 6.0+, Chrome<28
			// Target should not be a text node (#504, #13143)
			if ( event.target.nodeType === 3 ) {
				event.target = event.target.parentNode;
			}

			return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
		},

		special: {
			load: {
				// Prevent triggered image.load events from bubbling to window.load
				noBubble: true
			},
			focus: {
				// Fire native event if possible so blur/focus sequence is correct
				trigger: function() {
					if ( this !== safeActiveElement() && this.focus ) {
						this.focus();
						return false;
					}
				},
				delegateType: "focusin"
			},
			blur: {
				trigger: function() {
					if ( this === safeActiveElement() && this.blur ) {
						this.blur();
						return false;
					}
				},
				delegateType: "focusout"
			},
			click: {
				// For checkbox, fire native event so checked state will be right
				trigger: function() {
					if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
						this.click();
						return false;
					}
				},

				// For cross-browser consistency, don't fire native .click() on links
				_default: function( event ) {
					return jQuery.nodeName( event.target, "a" );
				}
			},

			beforeunload: {
				postDispatch: function( event ) {

					// Support: Firefox 20+
					// Firefox doesn't alert if the returnValue field is not set.
					if ( event.result !== undefined && event.originalEvent ) {
						event.originalEvent.returnValue = event.result;
					}
				}
			}
		},

		simulate: function( type, elem, event, bubble ) {
			// Piggyback on a donor event to simulate a different one.
			// Fake originalEvent to avoid donor's stopPropagation, but if the
			// simulated event prevents default then we do the same on the donor.
			var e = jQuery.extend(
				new jQuery.Event(),
				event,
				{
					type: type,
					isSimulated: true,
					originalEvent: {}
				}
			);
			if ( bubble ) {
				jQuery.event.trigger( e, null, elem );
			} else {
				jQuery.event.dispatch.call( elem, e );
			}
			if ( e.isDefaultPrevented() ) {
				event.preventDefault();
			}
		}
	};

	jQuery.removeEvent = function( elem, type, handle ) {
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle, false );
		}
	};

	jQuery.Event = function( src, props ) {
		// Allow instantiation without the 'new' keyword
		if ( !(this instanceof jQuery.Event) ) {
			return new jQuery.Event( src, props );
		}

		// Event object
		if ( src && src.type ) {
			this.originalEvent = src;
			this.type = src.type;

			// Events bubbling up the document may have been marked as prevented
			// by a handler lower down the tree; reflect the correct value.
			this.isDefaultPrevented = src.defaultPrevented ||
					src.defaultPrevented === undefined &&
					// Support: Android<4.0
					src.returnValue === false ?
				returnTrue :
				returnFalse;

		// Event type
		} else {
			this.type = src;
		}

		// Put explicitly provided properties onto the event object
		if ( props ) {
			jQuery.extend( this, props );
		}

		// Create a timestamp if incoming event doesn't have one
		this.timeStamp = src && src.timeStamp || jQuery.now();

		// Mark it as fixed
		this[ jQuery.expando ] = true;
	};

	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	jQuery.Event.prototype = {
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse,

		preventDefault: function() {
			var e = this.originalEvent;

			this.isDefaultPrevented = returnTrue;

			if ( e && e.preventDefault ) {
				e.preventDefault();
			}
		},
		stopPropagation: function() {
			var e = this.originalEvent;

			this.isPropagationStopped = returnTrue;

			if ( e && e.stopPropagation ) {
				e.stopPropagation();
			}
		},
		stopImmediatePropagation: function() {
			var e = this.originalEvent;

			this.isImmediatePropagationStopped = returnTrue;

			if ( e && e.stopImmediatePropagation ) {
				e.stopImmediatePropagation();
			}

			this.stopPropagation();
		}
	};

	// Create mouseenter/leave events using mouseover/out and event-time checks
	// Support: Chrome 15+
	jQuery.each({
		mouseenter: "mouseover",
		mouseleave: "mouseout",
		pointerenter: "pointerover",
		pointerleave: "pointerout"
	}, function( orig, fix ) {
		jQuery.event.special[ orig ] = {
			delegateType: fix,
			bindType: fix,

			handle: function( event ) {
				var ret,
					target = this,
					related = event.relatedTarget,
					handleObj = event.handleObj;

				// For mousenter/leave call the handler if related is outside the target.
				// NB: No relatedTarget if the mouse left/entered the browser window
				if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply( this, arguments );
					event.type = fix;
				}
				return ret;
			}
		};
	});

	// Support: Firefox, Chrome, Safari
	// Create "bubbling" focus and blur events
	if ( !support.focusinBubbles ) {
		jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

			// Attach a single capturing handler on the document while someone wants focusin/focusout
			var handler = function( event ) {
					jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
				};

			jQuery.event.special[ fix ] = {
				setup: function() {
					var doc = this.ownerDocument || this,
						attaches = data_priv.access( doc, fix );

					if ( !attaches ) {
						doc.addEventListener( orig, handler, true );
					}
					data_priv.access( doc, fix, ( attaches || 0 ) + 1 );
				},
				teardown: function() {
					var doc = this.ownerDocument || this,
						attaches = data_priv.access( doc, fix ) - 1;

					if ( !attaches ) {
						doc.removeEventListener( orig, handler, true );
						data_priv.remove( doc, fix );

					} else {
						data_priv.access( doc, fix, attaches );
					}
				}
			};
		});
	}

	jQuery.fn.extend({

		on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
			var origFn, type;

			// Types can be a map of types/handlers
			if ( typeof types === "object" ) {
				// ( types-Object, selector, data )
				if ( typeof selector !== "string" ) {
					// ( types-Object, data )
					data = data || selector;
					selector = undefined;
				}
				for ( type in types ) {
					this.on( type, selector, data, types[ type ], one );
				}
				return this;
			}

			if ( data == null && fn == null ) {
				// ( types, fn )
				fn = selector;
				data = selector = undefined;
			} else if ( fn == null ) {
				if ( typeof selector === "string" ) {
					// ( types, selector, fn )
					fn = data;
					data = undefined;
				} else {
					// ( types, data, fn )
					fn = data;
					data = selector;
					selector = undefined;
				}
			}
			if ( fn === false ) {
				fn = returnFalse;
			} else if ( !fn ) {
				return this;
			}

			if ( one === 1 ) {
				origFn = fn;
				fn = function( event ) {
					// Can use an empty set, since event contains the info
					jQuery().off( event );
					return origFn.apply( this, arguments );
				};
				// Use same guid so caller can remove using origFn
				fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
			}
			return this.each( function() {
				jQuery.event.add( this, types, fn, data, selector );
			});
		},
		one: function( types, selector, data, fn ) {
			return this.on( types, selector, data, fn, 1 );
		},
		off: function( types, selector, fn ) {
			var handleObj, type;
			if ( types && types.preventDefault && types.handleObj ) {
				// ( event )  dispatched jQuery.Event
				handleObj = types.handleObj;
				jQuery( types.delegateTarget ).off(
					handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
					handleObj.selector,
					handleObj.handler
				);
				return this;
			}
			if ( typeof types === "object" ) {
				// ( types-object [, selector] )
				for ( type in types ) {
					this.off( type, selector, types[ type ] );
				}
				return this;
			}
			if ( selector === false || typeof selector === "function" ) {
				// ( types [, fn] )
				fn = selector;
				selector = undefined;
			}
			if ( fn === false ) {
				fn = returnFalse;
			}
			return this.each(function() {
				jQuery.event.remove( this, types, fn, selector );
			});
		},

		trigger: function( type, data ) {
			return this.each(function() {
				jQuery.event.trigger( type, data, this );
			});
		},
		triggerHandler: function( type, data ) {
			var elem = this[0];
			if ( elem ) {
				return jQuery.event.trigger( type, data, elem, true );
			}
		}
	});


	var
		rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
		rtagName = /<([\w:]+)/,
		rhtml = /<|&#?\w+;/,
		rnoInnerhtml = /<(?:script|style|link)/i,
		// checked="checked" or checked
		rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
		rscriptType = /^$|\/(?:java|ecma)script/i,
		rscriptTypeMasked = /^true\/(.*)/,
		rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

		// We have to close these tags to support XHTML (#13200)
		wrapMap = {

			// Support: IE9
			option: [ 1, "<select multiple='multiple'>", "</select>" ],

			thead: [ 1, "<table>", "</table>" ],
			col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
			tr: [ 2, "<table><tbody>", "</tbody></table>" ],
			td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

			_default: [ 0, "", "" ]
		};

	// Support: IE9
	wrapMap.optgroup = wrapMap.option;

	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;

	// Support: 1.x compatibility
	// Manipulating tables requires a tbody
	function manipulationTarget( elem, content ) {
		return jQuery.nodeName( elem, "table" ) &&
			jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?

			elem.getElementsByTagName("tbody")[0] ||
				elem.appendChild( elem.ownerDocument.createElement("tbody") ) :
			elem;
	}

	// Replace/restore the type attribute of script elements for safe DOM manipulation
	function disableScript( elem ) {
		elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
		return elem;
	}
	function restoreScript( elem ) {
		var match = rscriptTypeMasked.exec( elem.type );

		if ( match ) {
			elem.type = match[ 1 ];
		} else {
			elem.removeAttribute("type");
		}

		return elem;
	}

	// Mark scripts as having already been evaluated
	function setGlobalEval( elems, refElements ) {
		var i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			data_priv.set(
				elems[ i ], "globalEval", !refElements || data_priv.get( refElements[ i ], "globalEval" )
			);
		}
	}

	function cloneCopyEvent( src, dest ) {
		var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

		if ( dest.nodeType !== 1 ) {
			return;
		}

		// 1. Copy private data: events, handlers, etc.
		if ( data_priv.hasData( src ) ) {
			pdataOld = data_priv.access( src );
			pdataCur = data_priv.set( dest, pdataOld );
			events = pdataOld.events;

			if ( events ) {
				delete pdataCur.handle;
				pdataCur.events = {};

				for ( type in events ) {
					for ( i = 0, l = events[ type ].length; i < l; i++ ) {
						jQuery.event.add( dest, type, events[ type ][ i ] );
					}
				}
			}
		}

		// 2. Copy user data
		if ( data_user.hasData( src ) ) {
			udataOld = data_user.access( src );
			udataCur = jQuery.extend( {}, udataOld );

			data_user.set( dest, udataCur );
		}
	}

	function getAll( context, tag ) {
		var ret = context.getElementsByTagName ? context.getElementsByTagName( tag || "*" ) :
				context.querySelectorAll ? context.querySelectorAll( tag || "*" ) :
				[];

		return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
			jQuery.merge( [ context ], ret ) :
			ret;
	}

	// Fix IE bugs, see support tests
	function fixInput( src, dest ) {
		var nodeName = dest.nodeName.toLowerCase();

		// Fails to persist the checked state of a cloned checkbox or radio button.
		if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
			dest.checked = src.checked;

		// Fails to return the selected option to the default selected state when cloning options
		} else if ( nodeName === "input" || nodeName === "textarea" ) {
			dest.defaultValue = src.defaultValue;
		}
	}

	jQuery.extend({
		clone: function( elem, dataAndEvents, deepDataAndEvents ) {
			var i, l, srcElements, destElements,
				clone = elem.cloneNode( true ),
				inPage = jQuery.contains( elem.ownerDocument, elem );

			// Fix IE cloning issues
			if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
					!jQuery.isXMLDoc( elem ) ) {

				// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
				destElements = getAll( clone );
				srcElements = getAll( elem );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					fixInput( srcElements[ i ], destElements[ i ] );
				}
			}

			// Copy the events from the original to the clone
			if ( dataAndEvents ) {
				if ( deepDataAndEvents ) {
					srcElements = srcElements || getAll( elem );
					destElements = destElements || getAll( clone );

					for ( i = 0, l = srcElements.length; i < l; i++ ) {
						cloneCopyEvent( srcElements[ i ], destElements[ i ] );
					}
				} else {
					cloneCopyEvent( elem, clone );
				}
			}

			// Preserve script evaluation history
			destElements = getAll( clone, "script" );
			if ( destElements.length > 0 ) {
				setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
			}

			// Return the cloned set
			return clone;
		},

		buildFragment: function( elems, context, scripts, selection ) {
			var elem, tmp, tag, wrap, contains, j,
				fragment = context.createDocumentFragment(),
				nodes = [],
				i = 0,
				l = elems.length;

			for ( ; i < l; i++ ) {
				elem = elems[ i ];

				if ( elem || elem === 0 ) {

					// Add nodes directly
					if ( jQuery.type( elem ) === "object" ) {
						// Support: QtWebKit, PhantomJS
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

					// Convert non-html into a text node
					} else if ( !rhtml.test( elem ) ) {
						nodes.push( context.createTextNode( elem ) );

					// Convert html into DOM nodes
					} else {
						tmp = tmp || fragment.appendChild( context.createElement("div") );

						// Deserialize a standard representation
						tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
						wrap = wrapMap[ tag ] || wrapMap._default;
						tmp.innerHTML = wrap[ 1 ] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[ 2 ];

						// Descend through wrappers to the right content
						j = wrap[ 0 ];
						while ( j-- ) {
							tmp = tmp.lastChild;
						}

						// Support: QtWebKit, PhantomJS
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( nodes, tmp.childNodes );

						// Remember the top-level container
						tmp = fragment.firstChild;

						// Ensure the created nodes are orphaned (#12392)
						tmp.textContent = "";
					}
				}
			}

			// Remove wrapper from fragment
			fragment.textContent = "";

			i = 0;
			while ( (elem = nodes[ i++ ]) ) {

				// #4087 - If origin and destination elements are the same, and this is
				// that element, do not do anything
				if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
					continue;
				}

				contains = jQuery.contains( elem.ownerDocument, elem );

				// Append to fragment
				tmp = getAll( fragment.appendChild( elem ), "script" );

				// Preserve script evaluation history
				if ( contains ) {
					setGlobalEval( tmp );
				}

				// Capture executables
				if ( scripts ) {
					j = 0;
					while ( (elem = tmp[ j++ ]) ) {
						if ( rscriptType.test( elem.type || "" ) ) {
							scripts.push( elem );
						}
					}
				}
			}

			return fragment;
		},

		cleanData: function( elems ) {
			var data, elem, type, key,
				special = jQuery.event.special,
				i = 0;

			for ( ; (elem = elems[ i ]) !== undefined; i++ ) {
				if ( jQuery.acceptData( elem ) ) {
					key = elem[ data_priv.expando ];

					if ( key && (data = data_priv.cache[ key ]) ) {
						if ( data.events ) {
							for ( type in data.events ) {
								if ( special[ type ] ) {
									jQuery.event.remove( elem, type );

								// This is a shortcut to avoid jQuery.event.remove's overhead
								} else {
									jQuery.removeEvent( elem, type, data.handle );
								}
							}
						}
						if ( data_priv.cache[ key ] ) {
							// Discard any remaining `private` data
							delete data_priv.cache[ key ];
						}
					}
				}
				// Discard any remaining `user` data
				delete data_user.cache[ elem[ data_user.expando ] ];
			}
		}
	});

	jQuery.fn.extend({
		text: function( value ) {
			return access( this, function( value ) {
				return value === undefined ?
					jQuery.text( this ) :
					this.empty().each(function() {
						if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
							this.textContent = value;
						}
					});
			}, null, value, arguments.length );
		},

		append: function() {
			return this.domManip( arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.appendChild( elem );
				}
			});
		},

		prepend: function() {
			return this.domManip( arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.insertBefore( elem, target.firstChild );
				}
			});
		},

		before: function() {
			return this.domManip( arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this );
				}
			});
		},

		after: function() {
			return this.domManip( arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this.nextSibling );
				}
			});
		},

		remove: function( selector, keepData /* Internal Use Only */ ) {
			var elem,
				elems = selector ? jQuery.filter( selector, this ) : this,
				i = 0;

			for ( ; (elem = elems[i]) != null; i++ ) {
				if ( !keepData && elem.nodeType === 1 ) {
					jQuery.cleanData( getAll( elem ) );
				}

				if ( elem.parentNode ) {
					if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
						setGlobalEval( getAll( elem, "script" ) );
					}
					elem.parentNode.removeChild( elem );
				}
			}

			return this;
		},

		empty: function() {
			var elem,
				i = 0;

			for ( ; (elem = this[i]) != null; i++ ) {
				if ( elem.nodeType === 1 ) {

					// Prevent memory leaks
					jQuery.cleanData( getAll( elem, false ) );

					// Remove any remaining nodes
					elem.textContent = "";
				}
			}

			return this;
		},

		clone: function( dataAndEvents, deepDataAndEvents ) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

			return this.map(function() {
				return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
			});
		},

		html: function( value ) {
			return access( this, function( value ) {
				var elem = this[ 0 ] || {},
					i = 0,
					l = this.length;

				if ( value === undefined && elem.nodeType === 1 ) {
					return elem.innerHTML;
				}

				// See if we can take a shortcut and just use innerHTML
				if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
					!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

					value = value.replace( rxhtmlTag, "<$1></$2>" );

					try {
						for ( ; i < l; i++ ) {
							elem = this[ i ] || {};

							// Remove element nodes and prevent memory leaks
							if ( elem.nodeType === 1 ) {
								jQuery.cleanData( getAll( elem, false ) );
								elem.innerHTML = value;
							}
						}

						elem = 0;

					// If using innerHTML throws an exception, use the fallback method
					} catch( e ) {}
				}

				if ( elem ) {
					this.empty().append( value );
				}
			}, null, value, arguments.length );
		},

		replaceWith: function() {
			var arg = arguments[ 0 ];

			// Make the changes, replacing each context element with the new content
			this.domManip( arguments, function( elem ) {
				arg = this.parentNode;

				jQuery.cleanData( getAll( this ) );

				if ( arg ) {
					arg.replaceChild( elem, this );
				}
			});

			// Force removal if there was no new content (e.g., from empty arguments)
			return arg && (arg.length || arg.nodeType) ? this : this.remove();
		},

		detach: function( selector ) {
			return this.remove( selector, true );
		},

		domManip: function( args, callback ) {

			// Flatten any nested arrays
			args = concat.apply( [], args );

			var fragment, first, scripts, hasScripts, node, doc,
				i = 0,
				l = this.length,
				set = this,
				iNoClone = l - 1,
				value = args[ 0 ],
				isFunction = jQuery.isFunction( value );

			// We can't cloneNode fragments that contain checked, in WebKit
			if ( isFunction ||
					( l > 1 && typeof value === "string" &&
						!support.checkClone && rchecked.test( value ) ) ) {
				return this.each(function( index ) {
					var self = set.eq( index );
					if ( isFunction ) {
						args[ 0 ] = value.call( this, index, self.html() );
					}
					self.domManip( args, callback );
				});
			}

			if ( l ) {
				fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, this );
				first = fragment.firstChild;

				if ( fragment.childNodes.length === 1 ) {
					fragment = first;
				}

				if ( first ) {
					scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
					hasScripts = scripts.length;

					// Use the original fragment for the last item instead of the first because it can end up
					// being emptied incorrectly in certain situations (#8070).
					for ( ; i < l; i++ ) {
						node = fragment;

						if ( i !== iNoClone ) {
							node = jQuery.clone( node, true, true );

							// Keep references to cloned scripts for later restoration
							if ( hasScripts ) {
								// Support: QtWebKit
								// jQuery.merge because push.apply(_, arraylike) throws
								jQuery.merge( scripts, getAll( node, "script" ) );
							}
						}

						callback.call( this[ i ], node, i );
					}

					if ( hasScripts ) {
						doc = scripts[ scripts.length - 1 ].ownerDocument;

						// Reenable scripts
						jQuery.map( scripts, restoreScript );

						// Evaluate executable scripts on first document insertion
						for ( i = 0; i < hasScripts; i++ ) {
							node = scripts[ i ];
							if ( rscriptType.test( node.type || "" ) &&
								!data_priv.access( node, "globalEval" ) && jQuery.contains( doc, node ) ) {

								if ( node.src ) {
									// Optional AJAX dependency, but won't run scripts if not present
									if ( jQuery._evalUrl ) {
										jQuery._evalUrl( node.src );
									}
								} else {
									jQuery.globalEval( node.textContent.replace( rcleanScript, "" ) );
								}
							}
						}
					}
				}
			}

			return this;
		}
	});

	jQuery.each({
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function( name, original ) {
		jQuery.fn[ name ] = function( selector ) {
			var elems,
				ret = [],
				insert = jQuery( selector ),
				last = insert.length - 1,
				i = 0;

			for ( ; i <= last; i++ ) {
				elems = i === last ? this : this.clone( true );
				jQuery( insert[ i ] )[ original ]( elems );

				// Support: QtWebKit
				// .get() because push.apply(_, arraylike) throws
				push.apply( ret, elems.get() );
			}

			return this.pushStack( ret );
		};
	});


	var iframe,
		elemdisplay = {};

	/**
	 * Retrieve the actual display of a element
	 * @param {String} name nodeName of the element
	 * @param {Object} doc Document object
	 */
	// Called only from within defaultDisplay
	function actualDisplay( name, doc ) {
		var style,
			elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

			// getDefaultComputedStyle might be reliably used only on attached element
			display = window.getDefaultComputedStyle && ( style = window.getDefaultComputedStyle( elem[ 0 ] ) ) ?

				// Use of this method is a temporary fix (more like optimization) until something better comes along,
				// since it was removed from specification and supported only in FF
				style.display : jQuery.css( elem[ 0 ], "display" );

		// We don't have any data stored on the element,
		// so use "detach" method as fast way to get rid of the element
		elem.detach();

		return display;
	}

	/**
	 * Try to determine the default display value of an element
	 * @param {String} nodeName
	 */
	function defaultDisplay( nodeName ) {
		var doc = document,
			display = elemdisplay[ nodeName ];

		if ( !display ) {
			display = actualDisplay( nodeName, doc );

			// If the simple way fails, read from inside an iframe
			if ( display === "none" || !display ) {

				// Use the already-created iframe if possible
				iframe = (iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" )).appendTo( doc.documentElement );

				// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
				doc = iframe[ 0 ].contentDocument;

				// Support: IE
				doc.write();
				doc.close();

				display = actualDisplay( nodeName, doc );
				iframe.detach();
			}

			// Store the correct default display
			elemdisplay[ nodeName ] = display;
		}

		return display;
	}
	var rmargin = (/^margin/);

	var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

	var getStyles = function( elem ) {
			// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
			// IE throws on elements created in popups
			// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
			if ( elem.ownerDocument.defaultView.opener ) {
				return elem.ownerDocument.defaultView.getComputedStyle( elem, null );
			}

			return window.getComputedStyle( elem, null );
		};



	function curCSS( elem, name, computed ) {
		var width, minWidth, maxWidth, ret,
			style = elem.style;

		computed = computed || getStyles( elem );

		// Support: IE9
		// getPropertyValue is only needed for .css('filter') (#12537)
		if ( computed ) {
			ret = computed.getPropertyValue( name ) || computed[ name ];
		}

		if ( computed ) {

			if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
				ret = jQuery.style( elem, name );
			}

			// Support: iOS < 6
			// A tribute to the "awesome hack by Dean Edwards"
			// iOS < 6 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
			// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
			if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		return ret !== undefined ?
			// Support: IE
			// IE returns zIndex value as an integer.
			ret + "" :
			ret;
	}


	function addGetHookIf( conditionFn, hookFn ) {
		// Define the hook, we'll check on the first run if it's really needed.
		return {
			get: function() {
				if ( conditionFn() ) {
					// Hook not needed (or it's not possible to use it due
					// to missing dependency), remove it.
					delete this.get;
					return;
				}

				// Hook needed; redefine it so that the support test is not executed again.
				return (this.get = hookFn).apply( this, arguments );
			}
		};
	}


	(function() {
		var pixelPositionVal, boxSizingReliableVal,
			docElem = document.documentElement,
			container = document.createElement( "div" ),
			div = document.createElement( "div" );

		if ( !div.style ) {
			return;
		}

		// Support: IE9-11+
		// Style of cloned element affects source element cloned (#8908)
		div.style.backgroundClip = "content-box";
		div.cloneNode( true ).style.backgroundClip = "";
		support.clearCloneStyle = div.style.backgroundClip === "content-box";

		container.style.cssText = "border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;" +
			"position:absolute";
		container.appendChild( div );

		// Executing both pixelPosition & boxSizingReliable tests require only one layout
		// so they're executed at the same time to save the second computation.
		function computePixelPositionAndBoxSizingReliable() {
			div.style.cssText =
				// Support: Firefox<29, Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;" +
				"box-sizing:border-box;display:block;margin-top:1%;top:1%;" +
				"border:1px;padding:1px;width:4px;position:absolute";
			div.innerHTML = "";
			docElem.appendChild( container );

			var divStyle = window.getComputedStyle( div, null );
			pixelPositionVal = divStyle.top !== "1%";
			boxSizingReliableVal = divStyle.width === "4px";

			docElem.removeChild( container );
		}

		// Support: node.js jsdom
		// Don't assume that getComputedStyle is a property of the global object
		if ( window.getComputedStyle ) {
			jQuery.extend( support, {
				pixelPosition: function() {

					// This test is executed only once but we still do memoizing
					// since we can use the boxSizingReliable pre-computing.
					// No need to check if the test was already performed, though.
					computePixelPositionAndBoxSizingReliable();
					return pixelPositionVal;
				},
				boxSizingReliable: function() {
					if ( boxSizingReliableVal == null ) {
						computePixelPositionAndBoxSizingReliable();
					}
					return boxSizingReliableVal;
				},
				reliableMarginRight: function() {

					// Support: Android 2.3
					// Check if div with explicit width and no margin-right incorrectly
					// gets computed margin-right based on width of container. (#3333)
					// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
					// This support function is only executed once so no memoizing is needed.
					var ret,
						marginDiv = div.appendChild( document.createElement( "div" ) );

					// Reset CSS: box-sizing; display; margin; border; padding
					marginDiv.style.cssText = div.style.cssText =
						// Support: Firefox<29, Android 2.3
						// Vendor-prefix box-sizing
						"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
						"box-sizing:content-box;display:block;margin:0;border:0;padding:0";
					marginDiv.style.marginRight = marginDiv.style.width = "0";
					div.style.width = "1px";
					docElem.appendChild( container );

					ret = !parseFloat( window.getComputedStyle( marginDiv, null ).marginRight );

					docElem.removeChild( container );
					div.removeChild( marginDiv );

					return ret;
				}
			});
		}
	})();


	// A method for quickly swapping in/out CSS properties to get correct calculations.
	jQuery.swap = function( elem, options, callback, args ) {
		var ret, name,
			old = {};

		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		ret = callback.apply( elem, args || [] );

		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}

		return ret;
	};


	var
		// Swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
		// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
		rdisplayswap = /^(none|table(?!-c[ea]).+)/,
		rnumsplit = new RegExp( "^(" + pnum + ")(.*)$", "i" ),
		rrelNum = new RegExp( "^([+-])=(" + pnum + ")", "i" ),

		cssShow = { position: "absolute", visibility: "hidden", display: "block" },
		cssNormalTransform = {
			letterSpacing: "0",
			fontWeight: "400"
		},

		cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];

	// Return a css property mapped to a potentially vendor prefixed property
	function vendorPropName( style, name ) {

		// Shortcut for names that are not vendor prefixed
		if ( name in style ) {
			return name;
		}

		// Check for vendor prefixed names
		var capName = name[0].toUpperCase() + name.slice(1),
			origName = name,
			i = cssPrefixes.length;

		while ( i-- ) {
			name = cssPrefixes[ i ] + capName;
			if ( name in style ) {
				return name;
			}
		}

		return origName;
	}

	function setPositiveNumber( elem, value, subtract ) {
		var matches = rnumsplit.exec( value );
		return matches ?
			// Guard against undefined "subtract", e.g., when used as in cssHooks
			Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
			value;
	}

	function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
		var i = extra === ( isBorderBox ? "border" : "content" ) ?
			// If we already have the right measurement, avoid augmentation
			4 :
			// Otherwise initialize for horizontal or vertical properties
			name === "width" ? 1 : 0,

			val = 0;

		for ( ; i < 4; i += 2 ) {
			// Both box models exclude margin, so add it if we want it
			if ( extra === "margin" ) {
				val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
			}

			if ( isBorderBox ) {
				// border-box includes padding, so remove it if we want content
				if ( extra === "content" ) {
					val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
				}

				// At this point, extra isn't border nor margin, so remove border
				if ( extra !== "margin" ) {
					val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			} else {
				// At this point, extra isn't content, so add padding
				val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

				// At this point, extra isn't content nor padding, so add border
				if ( extra !== "padding" ) {
					val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			}
		}

		return val;
	}

	function getWidthOrHeight( elem, name, extra ) {

		// Start with offset property, which is equivalent to the border-box value
		var valueIsBorderBox = true,
			val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
			styles = getStyles( elem ),
			isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

		// Some non-html elements return undefined for offsetWidth, so check for null/undefined
		// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
		// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
		if ( val <= 0 || val == null ) {
			// Fall back to computed then uncomputed css if necessary
			val = curCSS( elem, name, styles );
			if ( val < 0 || val == null ) {
				val = elem.style[ name ];
			}

			// Computed unit is not pixels. Stop here and return.
			if ( rnumnonpx.test(val) ) {
				return val;
			}

			// Check for style in case a browser which returns unreliable values
			// for getComputedStyle silently falls back to the reliable elem.style
			valueIsBorderBox = isBorderBox &&
				( support.boxSizingReliable() || val === elem.style[ name ] );

			// Normalize "", auto, and prepare for extra
			val = parseFloat( val ) || 0;
		}

		// Use the active box-sizing model to add/subtract irrelevant styles
		return ( val +
			augmentWidthOrHeight(
				elem,
				name,
				extra || ( isBorderBox ? "border" : "content" ),
				valueIsBorderBox,
				styles
			)
		) + "px";
	}

	function showHide( elements, show ) {
		var display, elem, hidden,
			values = [],
			index = 0,
			length = elements.length;

		for ( ; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}

			values[ index ] = data_priv.get( elem, "olddisplay" );
			display = elem.style.display;
			if ( show ) {
				// Reset the inline display of this element to learn if it is
				// being hidden by cascaded rules or not
				if ( !values[ index ] && display === "none" ) {
					elem.style.display = "";
				}

				// Set elements which have been overridden with display: none
				// in a stylesheet to whatever the default browser style is
				// for such an element
				if ( elem.style.display === "" && isHidden( elem ) ) {
					values[ index ] = data_priv.access( elem, "olddisplay", defaultDisplay(elem.nodeName) );
				}
			} else {
				hidden = isHidden( elem );

				if ( display !== "none" || !hidden ) {
					data_priv.set( elem, "olddisplay", hidden ? display : jQuery.css( elem, "display" ) );
				}
			}
		}

		// Set the display of most of the elements in a second loop
		// to avoid the constant reflow
		for ( index = 0; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}
			if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
				elem.style.display = show ? values[ index ] || "" : "none";
			}
		}

		return elements;
	}

	jQuery.extend({

		// Add in style property hooks for overriding the default
		// behavior of getting and setting a style property
		cssHooks: {
			opacity: {
				get: function( elem, computed ) {
					if ( computed ) {

						// We should always get a number back from opacity
						var ret = curCSS( elem, "opacity" );
						return ret === "" ? "1" : ret;
					}
				}
			}
		},

		// Don't automatically add "px" to these possibly-unitless properties
		cssNumber: {
			"columnCount": true,
			"fillOpacity": true,
			"flexGrow": true,
			"flexShrink": true,
			"fontWeight": true,
			"lineHeight": true,
			"opacity": true,
			"order": true,
			"orphans": true,
			"widows": true,
			"zIndex": true,
			"zoom": true
		},

		// Add in properties whose names you wish to fix before
		// setting or getting the value
		cssProps: {
			"float": "cssFloat"
		},

		// Get and set the style property on a DOM Node
		style: function( elem, name, value, extra ) {

			// Don't set styles on text and comment nodes
			if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
				return;
			}

			// Make sure that we're working with the right name
			var ret, type, hooks,
				origName = jQuery.camelCase( name ),
				style = elem.style;

			name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

			// Gets hook for the prefixed version, then unprefixed version
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

			// Check if we're setting a value
			if ( value !== undefined ) {
				type = typeof value;

				// Convert "+=" or "-=" to relative numbers (#7345)
				if ( type === "string" && (ret = rrelNum.exec( value )) ) {
					value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
					// Fixes bug #9237
					type = "number";
				}

				// Make sure that null and NaN values aren't set (#7116)
				if ( value == null || value !== value ) {
					return;
				}

				// If a number, add 'px' to the (except for certain CSS properties)
				if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
					value += "px";
				}

				// Support: IE9-11+
				// background-* props affect original clone's values
				if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
					style[ name ] = "inherit";
				}

				// If a hook was provided, use that value, otherwise just set the specified value
				if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {
					style[ name ] = value;
				}

			} else {
				// If a hook was provided get the non-computed value from there
				if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
					return ret;
				}

				// Otherwise just get the value from the style object
				return style[ name ];
			}
		},

		css: function( elem, name, extra, styles ) {
			var val, num, hooks,
				origName = jQuery.camelCase( name );

			// Make sure that we're working with the right name
			name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

			// Try prefixed name followed by the unprefixed name
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

			// If a hook was provided get the computed value from there
			if ( hooks && "get" in hooks ) {
				val = hooks.get( elem, true, extra );
			}

			// Otherwise, if a way to get the computed value exists, use that
			if ( val === undefined ) {
				val = curCSS( elem, name, styles );
			}

			// Convert "normal" to computed value
			if ( val === "normal" && name in cssNormalTransform ) {
				val = cssNormalTransform[ name ];
			}

			// Make numeric if forced or a qualifier was provided and val looks numeric
			if ( extra === "" || extra ) {
				num = parseFloat( val );
				return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
			}
			return val;
		}
	});

	jQuery.each([ "height", "width" ], function( i, name ) {
		jQuery.cssHooks[ name ] = {
			get: function( elem, computed, extra ) {
				if ( computed ) {

					// Certain elements can have dimension info if we invisibly show them
					// but it must have a current display style that would benefit
					return rdisplayswap.test( jQuery.css( elem, "display" ) ) && elem.offsetWidth === 0 ?
						jQuery.swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, name, extra );
						}) :
						getWidthOrHeight( elem, name, extra );
				}
			},

			set: function( elem, value, extra ) {
				var styles = extra && getStyles( elem );
				return setPositiveNumber( elem, value, extra ?
					augmentWidthOrHeight(
						elem,
						name,
						extra,
						jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
						styles
					) : 0
				);
			}
		};
	});

	// Support: Android 2.3
	jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
		function( elem, computed ) {
			if ( computed ) {
				return jQuery.swap( elem, { "display": "inline-block" },
					curCSS, [ elem, "marginRight" ] );
			}
		}
	);

	// These hooks are used by animate to expand properties
	jQuery.each({
		margin: "",
		padding: "",
		border: "Width"
	}, function( prefix, suffix ) {
		jQuery.cssHooks[ prefix + suffix ] = {
			expand: function( value ) {
				var i = 0,
					expanded = {},

					// Assumes a single number if not a string
					parts = typeof value === "string" ? value.split(" ") : [ value ];

				for ( ; i < 4; i++ ) {
					expanded[ prefix + cssExpand[ i ] + suffix ] =
						parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
				}

				return expanded;
			}
		};

		if ( !rmargin.test( prefix ) ) {
			jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
		}
	});

	jQuery.fn.extend({
		css: function( name, value ) {
			return access( this, function( elem, name, value ) {
				var styles, len,
					map = {},
					i = 0;

				if ( jQuery.isArray( name ) ) {
					styles = getStyles( elem );
					len = name.length;

					for ( ; i < len; i++ ) {
						map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
					}

					return map;
				}

				return value !== undefined ?
					jQuery.style( elem, name, value ) :
					jQuery.css( elem, name );
			}, name, value, arguments.length > 1 );
		},
		show: function() {
			return showHide( this, true );
		},
		hide: function() {
			return showHide( this );
		},
		toggle: function( state ) {
			if ( typeof state === "boolean" ) {
				return state ? this.show() : this.hide();
			}

			return this.each(function() {
				if ( isHidden( this ) ) {
					jQuery( this ).show();
				} else {
					jQuery( this ).hide();
				}
			});
		}
	});


	function Tween( elem, options, prop, end, easing ) {
		return new Tween.prototype.init( elem, options, prop, end, easing );
	}
	jQuery.Tween = Tween;

	Tween.prototype = {
		constructor: Tween,
		init: function( elem, options, prop, end, easing, unit ) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || "swing";
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
		},
		cur: function() {
			var hooks = Tween.propHooks[ this.prop ];

			return hooks && hooks.get ?
				hooks.get( this ) :
				Tween.propHooks._default.get( this );
		},
		run: function( percent ) {
			var eased,
				hooks = Tween.propHooks[ this.prop ];

			if ( this.options.duration ) {
				this.pos = eased = jQuery.easing[ this.easing ](
					percent, this.options.duration * percent, 0, 1, this.options.duration
				);
			} else {
				this.pos = eased = percent;
			}
			this.now = ( this.end - this.start ) * eased + this.start;

			if ( this.options.step ) {
				this.options.step.call( this.elem, this.now, this );
			}

			if ( hooks && hooks.set ) {
				hooks.set( this );
			} else {
				Tween.propHooks._default.set( this );
			}
			return this;
		}
	};

	Tween.prototype.init.prototype = Tween.prototype;

	Tween.propHooks = {
		_default: {
			get: function( tween ) {
				var result;

				if ( tween.elem[ tween.prop ] != null &&
					(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
					return tween.elem[ tween.prop ];
				}

				// Passing an empty string as a 3rd parameter to .css will automatically
				// attempt a parseFloat and fallback to a string if the parse fails.
				// Simple values such as "10px" are parsed to Float;
				// complex values such as "rotate(1rad)" are returned as-is.
				result = jQuery.css( tween.elem, tween.prop, "" );
				// Empty strings, null, undefined and "auto" are converted to 0.
				return !result || result === "auto" ? 0 : result;
			},
			set: function( tween ) {
				// Use step hook for back compat.
				// Use cssHook if its there.
				// Use .style if available and use plain properties where available.
				if ( jQuery.fx.step[ tween.prop ] ) {
					jQuery.fx.step[ tween.prop ]( tween );
				} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
					jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
				} else {
					tween.elem[ tween.prop ] = tween.now;
				}
			}
		}
	};

	// Support: IE9
	// Panic based approach to setting things on disconnected nodes
	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function( tween ) {
			if ( tween.elem.nodeType && tween.elem.parentNode ) {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	};

	jQuery.easing = {
		linear: function( p ) {
			return p;
		},
		swing: function( p ) {
			return 0.5 - Math.cos( p * Math.PI ) / 2;
		}
	};

	jQuery.fx = Tween.prototype.init;

	// Back Compat <1.8 extension point
	jQuery.fx.step = {};




	var
		fxNow, timerId,
		rfxtypes = /^(?:toggle|show|hide)$/,
		rfxnum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" ),
		rrun = /queueHooks$/,
		animationPrefilters = [ defaultPrefilter ],
		tweeners = {
			"*": [ function( prop, value ) {
				var tween = this.createTween( prop, value ),
					target = tween.cur(),
					parts = rfxnum.exec( value ),
					unit = parts && parts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

					// Starting value computation is required for potential unit mismatches
					start = ( jQuery.cssNumber[ prop ] || unit !== "px" && +target ) &&
						rfxnum.exec( jQuery.css( tween.elem, prop ) ),
					scale = 1,
					maxIterations = 20;

				if ( start && start[ 3 ] !== unit ) {
					// Trust units reported by jQuery.css
					unit = unit || start[ 3 ];

					// Make sure we update the tween properties later on
					parts = parts || [];

					// Iteratively approximate from a nonzero starting point
					start = +target || 1;

					do {
						// If previous iteration zeroed out, double until we get *something*.
						// Use string for doubling so we don't accidentally see scale as unchanged below
						scale = scale || ".5";

						// Adjust and apply
						start = start / scale;
						jQuery.style( tween.elem, prop, start + unit );

					// Update scale, tolerating zero or NaN from tween.cur(),
					// break the loop if scale is unchanged or perfect, or if we've just had enough
					} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
				}

				// Update tween properties
				if ( parts ) {
					start = tween.start = +start || +target || 0;
					tween.unit = unit;
					// If a +=/-= token was provided, we're doing a relative animation
					tween.end = parts[ 1 ] ?
						start + ( parts[ 1 ] + 1 ) * parts[ 2 ] :
						+parts[ 2 ];
				}

				return tween;
			} ]
		};

	// Animations created synchronously will run synchronously
	function createFxNow() {
		setTimeout(function() {
			fxNow = undefined;
		});
		return ( fxNow = jQuery.now() );
	}

	// Generate parameters to create a standard animation
	function genFx( type, includeWidth ) {
		var which,
			i = 0,
			attrs = { height: type };

		// If we include width, step value is 1 to do all cssExpand values,
		// otherwise step value is 2 to skip over Left and Right
		includeWidth = includeWidth ? 1 : 0;
		for ( ; i < 4 ; i += 2 - includeWidth ) {
			which = cssExpand[ i ];
			attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
		}

		if ( includeWidth ) {
			attrs.opacity = attrs.width = type;
		}

		return attrs;
	}

	function createTween( value, prop, animation ) {
		var tween,
			collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( (tween = collection[ index ].call( animation, prop, value )) ) {

				// We're done with this property
				return tween;
			}
		}
	}

	function defaultPrefilter( elem, props, opts ) {
		/* jshint validthis: true */
		var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
			anim = this,
			orig = {},
			style = elem.style,
			hidden = elem.nodeType && isHidden( elem ),
			dataShow = data_priv.get( elem, "fxshow" );

		// Handle queue: false promises
		if ( !opts.queue ) {
			hooks = jQuery._queueHooks( elem, "fx" );
			if ( hooks.unqueued == null ) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function() {
					if ( !hooks.unqueued ) {
						oldfire();
					}
				};
			}
			hooks.unqueued++;

			anim.always(function() {
				// Ensure the complete handler is called before this completes
				anim.always(function() {
					hooks.unqueued--;
					if ( !jQuery.queue( elem, "fx" ).length ) {
						hooks.empty.fire();
					}
				});
			});
		}

		// Height/width overflow pass
		if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
			// Make sure that nothing sneaks out
			// Record all 3 overflow attributes because IE9-10 do not
			// change the overflow attribute when overflowX and
			// overflowY are set to the same value
			opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

			// Set display property to inline-block for height/width
			// animations on inline elements that are having width/height animated
			display = jQuery.css( elem, "display" );

			// Test default display if display is currently "none"
			checkDisplay = display === "none" ?
				data_priv.get( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;

			if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {
				style.display = "inline-block";
			}
		}

		if ( opts.overflow ) {
			style.overflow = "hidden";
			anim.always(function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			});
		}

		// show/hide pass
		for ( prop in props ) {
			value = props[ prop ];
			if ( rfxtypes.exec( value ) ) {
				delete props[ prop ];
				toggle = toggle || value === "toggle";
				if ( value === ( hidden ? "hide" : "show" ) ) {

					// If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden
					if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
						hidden = true;
					} else {
						continue;
					}
				}
				orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );

			// Any non-fx value stops us from restoring the original display value
			} else {
				display = undefined;
			}
		}

		if ( !jQuery.isEmptyObject( orig ) ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = data_priv.access( elem, "fxshow", {} );
			}

			// Store state if its toggle - enables .stop().toggle() to "reverse"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}
			if ( hidden ) {
				jQuery( elem ).show();
			} else {
				anim.done(function() {
					jQuery( elem ).hide();
				});
			}
			anim.done(function() {
				var prop;

				data_priv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			});
			for ( prop in orig ) {
				tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

				if ( !( prop in dataShow ) ) {
					dataShow[ prop ] = tween.start;
					if ( hidden ) {
						tween.end = tween.start;
						tween.start = prop === "width" || prop === "height" ? 1 : 0;
					}
				}
			}

		// If this is a noop like .hide().hide(), restore an overwritten display value
		} else if ( (display === "none" ? defaultDisplay( elem.nodeName ) : display) === "inline" ) {
			style.display = display;
		}
	}

	function propFilter( props, specialEasing ) {
		var index, name, easing, value, hooks;

		// camelCase, specialEasing and expand cssHook pass
		for ( index in props ) {
			name = jQuery.camelCase( index );
			easing = specialEasing[ name ];
			value = props[ index ];
			if ( jQuery.isArray( value ) ) {
				easing = value[ 1 ];
				value = props[ index ] = value[ 0 ];
			}

			if ( index !== name ) {
				props[ name ] = value;
				delete props[ index ];
			}

			hooks = jQuery.cssHooks[ name ];
			if ( hooks && "expand" in hooks ) {
				value = hooks.expand( value );
				delete props[ name ];

				// Not quite $.extend, this won't overwrite existing keys.
				// Reusing 'index' because we have the correct "name"
				for ( index in value ) {
					if ( !( index in props ) ) {
						props[ index ] = value[ index ];
						specialEasing[ index ] = easing;
					}
				}
			} else {
				specialEasing[ name ] = easing;
			}
		}
	}

	function Animation( elem, properties, options ) {
		var result,
			stopped,
			index = 0,
			length = animationPrefilters.length,
			deferred = jQuery.Deferred().always( function() {
				// Don't match elem in the :animated selector
				delete tick.elem;
			}),
			tick = function() {
				if ( stopped ) {
					return false;
				}
				var currentTime = fxNow || createFxNow(),
					remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
					// Support: Android 2.3
					// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
					temp = remaining / animation.duration || 0,
					percent = 1 - temp,
					index = 0,
					length = animation.tweens.length;

				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( percent );
				}

				deferred.notifyWith( elem, [ animation, percent, remaining ]);

				if ( percent < 1 && length ) {
					return remaining;
				} else {
					deferred.resolveWith( elem, [ animation ] );
					return false;
				}
			},
			animation = deferred.promise({
				elem: elem,
				props: jQuery.extend( {}, properties ),
				opts: jQuery.extend( true, { specialEasing: {} }, options ),
				originalProperties: properties,
				originalOptions: options,
				startTime: fxNow || createFxNow(),
				duration: options.duration,
				tweens: [],
				createTween: function( prop, end ) {
					var tween = jQuery.Tween( elem, animation.opts, prop, end,
							animation.opts.specialEasing[ prop ] || animation.opts.easing );
					animation.tweens.push( tween );
					return tween;
				},
				stop: function( gotoEnd ) {
					var index = 0,
						// If we are going to the end, we want to run all the tweens
						// otherwise we skip this part
						length = gotoEnd ? animation.tweens.length : 0;
					if ( stopped ) {
						return this;
					}
					stopped = true;
					for ( ; index < length ; index++ ) {
						animation.tweens[ index ].run( 1 );
					}

					// Resolve when we played the last frame; otherwise, reject
					if ( gotoEnd ) {
						deferred.resolveWith( elem, [ animation, gotoEnd ] );
					} else {
						deferred.rejectWith( elem, [ animation, gotoEnd ] );
					}
					return this;
				}
			}),
			props = animation.props;

		propFilter( props, animation.opts.specialEasing );

		for ( ; index < length ; index++ ) {
			result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
			if ( result ) {
				return result;
			}
		}

		jQuery.map( props, createTween, animation );

		if ( jQuery.isFunction( animation.opts.start ) ) {
			animation.opts.start.call( elem, animation );
		}

		jQuery.fx.timer(
			jQuery.extend( tick, {
				elem: elem,
				anim: animation,
				queue: animation.opts.queue
			})
		);

		// attach callbacks from options
		return animation.progress( animation.opts.progress )
			.done( animation.opts.done, animation.opts.complete )
			.fail( animation.opts.fail )
			.always( animation.opts.always );
	}

	jQuery.Animation = jQuery.extend( Animation, {

		tweener: function( props, callback ) {
			if ( jQuery.isFunction( props ) ) {
				callback = props;
				props = [ "*" ];
			} else {
				props = props.split(" ");
			}

			var prop,
				index = 0,
				length = props.length;

			for ( ; index < length ; index++ ) {
				prop = props[ index ];
				tweeners[ prop ] = tweeners[ prop ] || [];
				tweeners[ prop ].unshift( callback );
			}
		},

		prefilter: function( callback, prepend ) {
			if ( prepend ) {
				animationPrefilters.unshift( callback );
			} else {
				animationPrefilters.push( callback );
			}
		}
	});

	jQuery.speed = function( speed, easing, fn ) {
		var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
			complete: fn || !fn && easing ||
				jQuery.isFunction( speed ) && speed,
			duration: speed,
			easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
		};

		opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
			opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

		// Normalize opt.queue - true/undefined/null -> "fx"
		if ( opt.queue == null || opt.queue === true ) {
			opt.queue = "fx";
		}

		// Queueing
		opt.old = opt.complete;

		opt.complete = function() {
			if ( jQuery.isFunction( opt.old ) ) {
				opt.old.call( this );
			}

			if ( opt.queue ) {
				jQuery.dequeue( this, opt.queue );
			}
		};

		return opt;
	};

	jQuery.fn.extend({
		fadeTo: function( speed, to, easing, callback ) {

			// Show any hidden elements after setting opacity to 0
			return this.filter( isHidden ).css( "opacity", 0 ).show()

				// Animate to the value specified
				.end().animate({ opacity: to }, speed, easing, callback );
		},
		animate: function( prop, speed, easing, callback ) {
			var empty = jQuery.isEmptyObject( prop ),
				optall = jQuery.speed( speed, easing, callback ),
				doAnimation = function() {
					// Operate on a copy of prop so per-property easing won't be lost
					var anim = Animation( this, jQuery.extend( {}, prop ), optall );

					// Empty animations, or finishing resolves immediately
					if ( empty || data_priv.get( this, "finish" ) ) {
						anim.stop( true );
					}
				};
				doAnimation.finish = doAnimation;

			return empty || optall.queue === false ?
				this.each( doAnimation ) :
				this.queue( optall.queue, doAnimation );
		},
		stop: function( type, clearQueue, gotoEnd ) {
			var stopQueue = function( hooks ) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop( gotoEnd );
			};

			if ( typeof type !== "string" ) {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if ( clearQueue && type !== false ) {
				this.queue( type || "fx", [] );
			}

			return this.each(function() {
				var dequeue = true,
					index = type != null && type + "queueHooks",
					timers = jQuery.timers,
					data = data_priv.get( this );

				if ( index ) {
					if ( data[ index ] && data[ index ].stop ) {
						stopQueue( data[ index ] );
					}
				} else {
					for ( index in data ) {
						if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
							stopQueue( data[ index ] );
						}
					}
				}

				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
						timers[ index ].anim.stop( gotoEnd );
						dequeue = false;
						timers.splice( index, 1 );
					}
				}

				// Start the next in the queue if the last step wasn't forced.
				// Timers currently will call their complete callbacks, which
				// will dequeue but only if they were gotoEnd.
				if ( dequeue || !gotoEnd ) {
					jQuery.dequeue( this, type );
				}
			});
		},
		finish: function( type ) {
			if ( type !== false ) {
				type = type || "fx";
			}
			return this.each(function() {
				var index,
					data = data_priv.get( this ),
					queue = data[ type + "queue" ],
					hooks = data[ type + "queueHooks" ],
					timers = jQuery.timers,
					length = queue ? queue.length : 0;

				// Enable finishing flag on private data
				data.finish = true;

				// Empty the queue first
				jQuery.queue( this, type, [] );

				if ( hooks && hooks.stop ) {
					hooks.stop.call( this, true );
				}

				// Look for any active animations, and finish them
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
						timers[ index ].anim.stop( true );
						timers.splice( index, 1 );
					}
				}

				// Look for any animations in the old queue and finish them
				for ( index = 0; index < length; index++ ) {
					if ( queue[ index ] && queue[ index ].finish ) {
						queue[ index ].finish.call( this );
					}
				}

				// Turn off finishing flag
				delete data.finish;
			});
		}
	});

	jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
		var cssFn = jQuery.fn[ name ];
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return speed == null || typeof speed === "boolean" ?
				cssFn.apply( this, arguments ) :
				this.animate( genFx( name, true ), speed, easing, callback );
		};
	});

	// Generate shortcuts for custom animations
	jQuery.each({
		slideDown: genFx("show"),
		slideUp: genFx("hide"),
		slideToggle: genFx("toggle"),
		fadeIn: { opacity: "show" },
		fadeOut: { opacity: "hide" },
		fadeToggle: { opacity: "toggle" }
	}, function( name, props ) {
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return this.animate( props, speed, easing, callback );
		};
	});

	jQuery.timers = [];
	jQuery.fx.tick = function() {
		var timer,
			i = 0,
			timers = jQuery.timers;

		fxNow = jQuery.now();

		for ( ; i < timers.length; i++ ) {
			timer = timers[ i ];
			// Checks the timer has not already been removed
			if ( !timer() && timers[ i ] === timer ) {
				timers.splice( i--, 1 );
			}
		}

		if ( !timers.length ) {
			jQuery.fx.stop();
		}
		fxNow = undefined;
	};

	jQuery.fx.timer = function( timer ) {
		jQuery.timers.push( timer );
		if ( timer() ) {
			jQuery.fx.start();
		} else {
			jQuery.timers.pop();
		}
	};

	jQuery.fx.interval = 13;

	jQuery.fx.start = function() {
		if ( !timerId ) {
			timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
		}
	};

	jQuery.fx.stop = function() {
		clearInterval( timerId );
		timerId = null;
	};

	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,
		// Default speed
		_default: 400
	};


	// Based off of the plugin by Clint Helfers, with permission.
	// http://blindsignals.com/index.php/2009/07/jquery-delay/
	jQuery.fn.delay = function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";

		return this.queue( type, function( next, hooks ) {
			var timeout = setTimeout( next, time );
			hooks.stop = function() {
				clearTimeout( timeout );
			};
		});
	};


	(function() {
		var input = document.createElement( "input" ),
			select = document.createElement( "select" ),
			opt = select.appendChild( document.createElement( "option" ) );

		input.type = "checkbox";

		// Support: iOS<=5.1, Android<=4.2+
		// Default value for a checkbox should be "on"
		support.checkOn = input.value !== "";

		// Support: IE<=11+
		// Must access selectedIndex to make default options select
		support.optSelected = opt.selected;

		// Support: Android<=2.3
		// Options inside disabled selects are incorrectly marked as disabled
		select.disabled = true;
		support.optDisabled = !opt.disabled;

		// Support: IE<=11+
		// An input loses its value after becoming a radio
		input = document.createElement( "input" );
		input.value = "t";
		input.type = "radio";
		support.radioValue = input.value === "t";
	})();


	var nodeHook, boolHook,
		attrHandle = jQuery.expr.attrHandle;

	jQuery.fn.extend({
		attr: function( name, value ) {
			return access( this, jQuery.attr, name, value, arguments.length > 1 );
		},

		removeAttr: function( name ) {
			return this.each(function() {
				jQuery.removeAttr( this, name );
			});
		}
	});

	jQuery.extend({
		attr: function( elem, name, value ) {
			var hooks, ret,
				nType = elem.nodeType;

			// don't get/set attributes on text, comment and attribute nodes
			if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}

			// Fallback to prop when attributes are not supported
			if ( typeof elem.getAttribute === strundefined ) {
				return jQuery.prop( elem, name, value );
			}

			// All attributes are lowercase
			// Grab necessary hook if one is defined
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
				name = name.toLowerCase();
				hooks = jQuery.attrHooks[ name ] ||
					( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );
			}

			if ( value !== undefined ) {

				if ( value === null ) {
					jQuery.removeAttr( elem, name );

				} else if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
					return ret;

				} else {
					elem.setAttribute( name, value + "" );
					return value;
				}

			} else if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
				return ret;

			} else {
				ret = jQuery.find.attr( elem, name );

				// Non-existent attributes return null, we normalize to undefined
				return ret == null ?
					undefined :
					ret;
			}
		},

		removeAttr: function( elem, value ) {
			var name, propName,
				i = 0,
				attrNames = value && value.match( rnotwhite );

			if ( attrNames && elem.nodeType === 1 ) {
				while ( (name = attrNames[i++]) ) {
					propName = jQuery.propFix[ name ] || name;

					// Boolean attributes get special treatment (#10870)
					if ( jQuery.expr.match.bool.test( name ) ) {
						// Set corresponding property to false
						elem[ propName ] = false;
					}

					elem.removeAttribute( name );
				}
			}
		},

		attrHooks: {
			type: {
				set: function( elem, value ) {
					if ( !support.radioValue && value === "radio" &&
						jQuery.nodeName( elem, "input" ) ) {
						var val = elem.value;
						elem.setAttribute( "type", value );
						if ( val ) {
							elem.value = val;
						}
						return value;
					}
				}
			}
		}
	});

	// Hooks for boolean attributes
	boolHook = {
		set: function( elem, value, name ) {
			if ( value === false ) {
				// Remove boolean attributes when set to false
				jQuery.removeAttr( elem, name );
			} else {
				elem.setAttribute( name, name );
			}
			return name;
		}
	};
	jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
		var getter = attrHandle[ name ] || jQuery.find.attr;

		attrHandle[ name ] = function( elem, name, isXML ) {
			var ret, handle;
			if ( !isXML ) {
				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[ name ];
				attrHandle[ name ] = ret;
				ret = getter( elem, name, isXML ) != null ?
					name.toLowerCase() :
					null;
				attrHandle[ name ] = handle;
			}
			return ret;
		};
	});




	var rfocusable = /^(?:input|select|textarea|button)$/i;

	jQuery.fn.extend({
		prop: function( name, value ) {
			return access( this, jQuery.prop, name, value, arguments.length > 1 );
		},

		removeProp: function( name ) {
			return this.each(function() {
				delete this[ jQuery.propFix[ name ] || name ];
			});
		}
	});

	jQuery.extend({
		propFix: {
			"for": "htmlFor",
			"class": "className"
		},

		prop: function( elem, name, value ) {
			var ret, hooks, notxml,
				nType = elem.nodeType;

			// Don't get/set properties on text, comment and attribute nodes
			if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}

			notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

			if ( notxml ) {
				// Fix name and attach hooks
				name = jQuery.propFix[ name ] || name;
				hooks = jQuery.propHooks[ name ];
			}

			if ( value !== undefined ) {
				return hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ?
					ret :
					( elem[ name ] = value );

			} else {
				return hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ?
					ret :
					elem[ name ];
			}
		},

		propHooks: {
			tabIndex: {
				get: function( elem ) {
					return elem.hasAttribute( "tabindex" ) || rfocusable.test( elem.nodeName ) || elem.href ?
						elem.tabIndex :
						-1;
				}
			}
		}
	});

	if ( !support.optSelected ) {
		jQuery.propHooks.selected = {
			get: function( elem ) {
				var parent = elem.parentNode;
				if ( parent && parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
				return null;
			}
		};
	}

	jQuery.each([
		"tabIndex",
		"readOnly",
		"maxLength",
		"cellSpacing",
		"cellPadding",
		"rowSpan",
		"colSpan",
		"useMap",
		"frameBorder",
		"contentEditable"
	], function() {
		jQuery.propFix[ this.toLowerCase() ] = this;
	});




	var rclass = /[\t\r\n\f]/g;

	jQuery.fn.extend({
		addClass: function( value ) {
			var classes, elem, cur, clazz, j, finalValue,
				proceed = typeof value === "string" && value,
				i = 0,
				len = this.length;

			if ( jQuery.isFunction( value ) ) {
				return this.each(function( j ) {
					jQuery( this ).addClass( value.call( this, j, this.className ) );
				});
			}

			if ( proceed ) {
				// The disjunction here is for better compressibility (see removeClass)
				classes = ( value || "" ).match( rnotwhite ) || [];

				for ( ; i < len; i++ ) {
					elem = this[ i ];
					cur = elem.nodeType === 1 && ( elem.className ?
						( " " + elem.className + " " ).replace( rclass, " " ) :
						" "
					);

					if ( cur ) {
						j = 0;
						while ( (clazz = classes[j++]) ) {
							if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
								cur += clazz + " ";
							}
						}

						// only assign if different to avoid unneeded rendering.
						finalValue = jQuery.trim( cur );
						if ( elem.className !== finalValue ) {
							elem.className = finalValue;
						}
					}
				}
			}

			return this;
		},

		removeClass: function( value ) {
			var classes, elem, cur, clazz, j, finalValue,
				proceed = arguments.length === 0 || typeof value === "string" && value,
				i = 0,
				len = this.length;

			if ( jQuery.isFunction( value ) ) {
				return this.each(function( j ) {
					jQuery( this ).removeClass( value.call( this, j, this.className ) );
				});
			}
			if ( proceed ) {
				classes = ( value || "" ).match( rnotwhite ) || [];

				for ( ; i < len; i++ ) {
					elem = this[ i ];
					// This expression is here for better compressibility (see addClass)
					cur = elem.nodeType === 1 && ( elem.className ?
						( " " + elem.className + " " ).replace( rclass, " " ) :
						""
					);

					if ( cur ) {
						j = 0;
						while ( (clazz = classes[j++]) ) {
							// Remove *all* instances
							while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
								cur = cur.replace( " " + clazz + " ", " " );
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = value ? jQuery.trim( cur ) : "";
						if ( elem.className !== finalValue ) {
							elem.className = finalValue;
						}
					}
				}
			}

			return this;
		},

		toggleClass: function( value, stateVal ) {
			var type = typeof value;

			if ( typeof stateVal === "boolean" && type === "string" ) {
				return stateVal ? this.addClass( value ) : this.removeClass( value );
			}

			if ( jQuery.isFunction( value ) ) {
				return this.each(function( i ) {
					jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
				});
			}

			return this.each(function() {
				if ( type === "string" ) {
					// Toggle individual class names
					var className,
						i = 0,
						self = jQuery( this ),
						classNames = value.match( rnotwhite ) || [];

					while ( (className = classNames[ i++ ]) ) {
						// Check each className given, space separated list
						if ( self.hasClass( className ) ) {
							self.removeClass( className );
						} else {
							self.addClass( className );
						}
					}

				// Toggle whole class name
				} else if ( type === strundefined || type === "boolean" ) {
					if ( this.className ) {
						// store className if set
						data_priv.set( this, "__className__", this.className );
					}

					// If the element has a class name or if we're passed `false`,
					// then remove the whole classname (if there was one, the above saved it).
					// Otherwise bring back whatever was previously saved (if anything),
					// falling back to the empty string if nothing was stored.
					this.className = this.className || value === false ? "" : data_priv.get( this, "__className__" ) || "";
				}
			});
		},

		hasClass: function( selector ) {
			var className = " " + selector + " ",
				i = 0,
				l = this.length;
			for ( ; i < l; i++ ) {
				if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
					return true;
				}
			}

			return false;
		}
	});




	var rreturn = /\r/g;

	jQuery.fn.extend({
		val: function( value ) {
			var hooks, ret, isFunction,
				elem = this[0];

			if ( !arguments.length ) {
				if ( elem ) {
					hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

					if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
						return ret;
					}

					ret = elem.value;

					return typeof ret === "string" ?
						// Handle most common string cases
						ret.replace(rreturn, "") :
						// Handle cases where value is null/undef or number
						ret == null ? "" : ret;
				}

				return;
			}

			isFunction = jQuery.isFunction( value );

			return this.each(function( i ) {
				var val;

				if ( this.nodeType !== 1 ) {
					return;
				}

				if ( isFunction ) {
					val = value.call( this, i, jQuery( this ).val() );
				} else {
					val = value;
				}

				// Treat null/undefined as ""; convert numbers to string
				if ( val == null ) {
					val = "";

				} else if ( typeof val === "number" ) {
					val += "";

				} else if ( jQuery.isArray( val ) ) {
					val = jQuery.map( val, function( value ) {
						return value == null ? "" : value + "";
					});
				}

				hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

				// If set returns undefined, fall back to normal setting
				if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
					this.value = val;
				}
			});
		}
	});

	jQuery.extend({
		valHooks: {
			option: {
				get: function( elem ) {
					var val = jQuery.find.attr( elem, "value" );
					return val != null ?
						val :
						// Support: IE10-11+
						// option.text throws exceptions (#14686, #14858)
						jQuery.trim( jQuery.text( elem ) );
				}
			},
			select: {
				get: function( elem ) {
					var value, option,
						options = elem.options,
						index = elem.selectedIndex,
						one = elem.type === "select-one" || index < 0,
						values = one ? null : [],
						max = one ? index + 1 : options.length,
						i = index < 0 ?
							max :
							one ? index : 0;

					// Loop through all the selected options
					for ( ; i < max; i++ ) {
						option = options[ i ];

						// IE6-9 doesn't update selected after form reset (#2551)
						if ( ( option.selected || i === index ) &&
								// Don't return options that are disabled or in a disabled optgroup
								( support.optDisabled ? !option.disabled : option.getAttribute( "disabled" ) === null ) &&
								( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

							// Get the specific value for the option
							value = jQuery( option ).val();

							// We don't need an array for one selects
							if ( one ) {
								return value;
							}

							// Multi-Selects return an array
							values.push( value );
						}
					}

					return values;
				},

				set: function( elem, value ) {
					var optionSet, option,
						options = elem.options,
						values = jQuery.makeArray( value ),
						i = options.length;

					while ( i-- ) {
						option = options[ i ];
						if ( (option.selected = jQuery.inArray( option.value, values ) >= 0) ) {
							optionSet = true;
						}
					}

					// Force browsers to behave consistently when non-matching value is set
					if ( !optionSet ) {
						elem.selectedIndex = -1;
					}
					return values;
				}
			}
		}
	});

	// Radios and checkboxes getter/setter
	jQuery.each([ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			set: function( elem, value ) {
				if ( jQuery.isArray( value ) ) {
					return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
				}
			}
		};
		if ( !support.checkOn ) {
			jQuery.valHooks[ this ].get = function( elem ) {
				return elem.getAttribute("value") === null ? "on" : elem.value;
			};
		}
	});




	// Return jQuery for attributes-only inclusion


	jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
		"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
		"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	});

	jQuery.fn.extend({
		hover: function( fnOver, fnOut ) {
			return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
		},

		bind: function( types, data, fn ) {
			return this.on( types, null, data, fn );
		},
		unbind: function( types, fn ) {
			return this.off( types, null, fn );
		},

		delegate: function( selector, types, data, fn ) {
			return this.on( types, selector, data, fn );
		},
		undelegate: function( selector, types, fn ) {
			// ( namespace ) or ( selector, types [, fn] )
			return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
		}
	});


	var nonce = jQuery.now();

	var rquery = (/\?/);



	// Support: Android 2.3
	// Workaround failure to string-cast null input
	jQuery.parseJSON = function( data ) {
		return JSON.parse( data + "" );
	};


	// Cross-browser xml parsing
	jQuery.parseXML = function( data ) {
		var xml, tmp;
		if ( !data || typeof data !== "string" ) {
			return null;
		}

		// Support: IE9
		try {
			tmp = new DOMParser();
			xml = tmp.parseFromString( data, "text/xml" );
		} catch ( e ) {
			xml = undefined;
		}

		if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	};


	var
		rhash = /#.*$/,
		rts = /([?&])_=[^&]*/,
		rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
		// #7653, #8125, #8152: local protocol detection
		rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
		rnoContent = /^(?:GET|HEAD)$/,
		rprotocol = /^\/\//,
		rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,

		/* Prefilters
		 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
		 * 2) These are called:
		 *    - BEFORE asking for a transport
		 *    - AFTER param serialization (s.data is a string if s.processData is true)
		 * 3) key is the dataType
		 * 4) the catchall symbol "*" can be used
		 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
		 */
		prefilters = {},

		/* Transports bindings
		 * 1) key is the dataType
		 * 2) the catchall symbol "*" can be used
		 * 3) selection will start with transport dataType and THEN go to "*" if needed
		 */
		transports = {},

		// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
		allTypes = "*/".concat( "*" ),

		// Document location
		ajaxLocation = window.location.href,

		// Segment location into parts
		ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
	function addToPrefiltersOrTransports( structure ) {

		// dataTypeExpression is optional and defaults to "*"
		return function( dataTypeExpression, func ) {

			if ( typeof dataTypeExpression !== "string" ) {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}

			var dataType,
				i = 0,
				dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

			if ( jQuery.isFunction( func ) ) {
				// For each dataType in the dataTypeExpression
				while ( (dataType = dataTypes[i++]) ) {
					// Prepend if requested
					if ( dataType[0] === "+" ) {
						dataType = dataType.slice( 1 ) || "*";
						(structure[ dataType ] = structure[ dataType ] || []).unshift( func );

					// Otherwise append
					} else {
						(structure[ dataType ] = structure[ dataType ] || []).push( func );
					}
				}
			}
		};
	}

	// Base inspection function for prefilters and transports
	function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

		var inspected = {},
			seekingTransport = ( structure === transports );

		function inspect( dataType ) {
			var selected;
			inspected[ dataType ] = true;
			jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
				var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
				if ( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
					options.dataTypes.unshift( dataTypeOrTransport );
					inspect( dataTypeOrTransport );
					return false;
				} else if ( seekingTransport ) {
					return !( selected = dataTypeOrTransport );
				}
			});
			return selected;
		}

		return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
	}

	// A special extend for ajax options
	// that takes "flat" options (not to be deep extended)
	// Fixes #9887
	function ajaxExtend( target, src ) {
		var key, deep,
			flatOptions = jQuery.ajaxSettings.flatOptions || {};

		for ( key in src ) {
			if ( src[ key ] !== undefined ) {
				( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
			}
		}
		if ( deep ) {
			jQuery.extend( true, target, deep );
		}

		return target;
	}

	/* Handles responses to an ajax request:
	 * - finds the right dataType (mediates between content-type and expected dataType)
	 * - returns the corresponding response
	 */
	function ajaxHandleResponses( s, jqXHR, responses ) {

		var ct, type, finalDataType, firstDataType,
			contents = s.contents,
			dataTypes = s.dataTypes;

		// Remove auto dataType and get content-type in the process
		while ( dataTypes[ 0 ] === "*" ) {
			dataTypes.shift();
			if ( ct === undefined ) {
				ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
			}
		}

		// Check if we're dealing with a known content-type
		if ( ct ) {
			for ( type in contents ) {
				if ( contents[ type ] && contents[ type ].test( ct ) ) {
					dataTypes.unshift( type );
					break;
				}
			}
		}

		// Check to see if we have a response for the expected dataType
		if ( dataTypes[ 0 ] in responses ) {
			finalDataType = dataTypes[ 0 ];
		} else {
			// Try convertible dataTypes
			for ( type in responses ) {
				if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
					finalDataType = type;
					break;
				}
				if ( !firstDataType ) {
					firstDataType = type;
				}
			}
			// Or just use first one
			finalDataType = finalDataType || firstDataType;
		}

		// If we found a dataType
		// We add the dataType to the list if needed
		// and return the corresponding response
		if ( finalDataType ) {
			if ( finalDataType !== dataTypes[ 0 ] ) {
				dataTypes.unshift( finalDataType );
			}
			return responses[ finalDataType ];
		}
	}

	/* Chain conversions given the request and the original response
	 * Also sets the responseXXX fields on the jqXHR instance
	 */
	function ajaxConvert( s, response, jqXHR, isSuccess ) {
		var conv2, current, conv, tmp, prev,
			converters = {},
			// Work with a copy of dataTypes in case we need to modify it for conversion
			dataTypes = s.dataTypes.slice();

		// Create converters map with lowercased keys
		if ( dataTypes[ 1 ] ) {
			for ( conv in s.converters ) {
				converters[ conv.toLowerCase() ] = s.converters[ conv ];
			}
		}

		current = dataTypes.shift();

		// Convert to each sequential dataType
		while ( current ) {

			if ( s.responseFields[ current ] ) {
				jqXHR[ s.responseFields[ current ] ] = response;
			}

			// Apply the dataFilter if provided
			if ( !prev && isSuccess && s.dataFilter ) {
				response = s.dataFilter( response, s.dataType );
			}

			prev = current;
			current = dataTypes.shift();

			if ( current ) {

			// There's only work to do if current dataType is non-auto
				if ( current === "*" ) {

					current = prev;

				// Convert response if prev dataType is non-auto and differs from current
				} else if ( prev !== "*" && prev !== current ) {

					// Seek a direct converter
					conv = converters[ prev + " " + current ] || converters[ "* " + current ];

					// If none found, seek a pair
					if ( !conv ) {
						for ( conv2 in converters ) {

							// If conv2 outputs current
							tmp = conv2.split( " " );
							if ( tmp[ 1 ] === current ) {

								// If prev can be converted to accepted input
								conv = converters[ prev + " " + tmp[ 0 ] ] ||
									converters[ "* " + tmp[ 0 ] ];
								if ( conv ) {
									// Condense equivalence converters
									if ( conv === true ) {
										conv = converters[ conv2 ];

									// Otherwise, insert the intermediate dataType
									} else if ( converters[ conv2 ] !== true ) {
										current = tmp[ 0 ];
										dataTypes.unshift( tmp[ 1 ] );
									}
									break;
								}
							}
						}
					}

					// Apply converter (if not an equivalence)
					if ( conv !== true ) {

						// Unless errors are allowed to bubble, catch and return them
						if ( conv && s[ "throws" ] ) {
							response = conv( response );
						} else {
							try {
								response = conv( response );
							} catch ( e ) {
								return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
							}
						}
					}
				}
			}
		}

		return { state: "success", data: response };
	}

	jQuery.extend({

		// Counter for holding the number of active queries
		active: 0,

		// Last-Modified header cache for next request
		lastModified: {},
		etag: {},

		ajaxSettings: {
			url: ajaxLocation,
			type: "GET",
			isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
			global: true,
			processData: true,
			async: true,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",
			/*
			timeout: 0,
			data: null,
			dataType: null,
			username: null,
			password: null,
			cache: null,
			throws: false,
			traditional: false,
			headers: {},
			*/

			accepts: {
				"*": allTypes,
				text: "text/plain",
				html: "text/html",
				xml: "application/xml, text/xml",
				json: "application/json, text/javascript"
			},

			contents: {
				xml: /xml/,
				html: /html/,
				json: /json/
			},

			responseFields: {
				xml: "responseXML",
				text: "responseText",
				json: "responseJSON"
			},

			// Data converters
			// Keys separate source (or catchall "*") and destination types with a single space
			converters: {

				// Convert anything to text
				"* text": String,

				// Text to html (true = no transformation)
				"text html": true,

				// Evaluate text as a json expression
				"text json": jQuery.parseJSON,

				// Parse text as xml
				"text xml": jQuery.parseXML
			},

			// For options that shouldn't be deep extended:
			// you can add your own custom options here if
			// and when you create one that shouldn't be
			// deep extended (see ajaxExtend)
			flatOptions: {
				url: true,
				context: true
			}
		},

		// Creates a full fledged settings object into target
		// with both ajaxSettings and settings fields.
		// If target is omitted, writes into ajaxSettings.
		ajaxSetup: function( target, settings ) {
			return settings ?

				// Building a settings object
				ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

				// Extending ajaxSettings
				ajaxExtend( jQuery.ajaxSettings, target );
		},

		ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
		ajaxTransport: addToPrefiltersOrTransports( transports ),

		// Main method
		ajax: function( url, options ) {

			// If url is an object, simulate pre-1.5 signature
			if ( typeof url === "object" ) {
				options = url;
				url = undefined;
			}

			// Force options to be an object
			options = options || {};

			var transport,
				// URL without anti-cache param
				cacheURL,
				// Response headers
				responseHeadersString,
				responseHeaders,
				// timeout handle
				timeoutTimer,
				// Cross-domain detection vars
				parts,
				// To know if global events are to be dispatched
				fireGlobals,
				// Loop variable
				i,
				// Create the final options object
				s = jQuery.ajaxSetup( {}, options ),
				// Callbacks context
				callbackContext = s.context || s,
				// Context for global events is callbackContext if it is a DOM node or jQuery collection
				globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,
				// Deferreds
				deferred = jQuery.Deferred(),
				completeDeferred = jQuery.Callbacks("once memory"),
				// Status-dependent callbacks
				statusCode = s.statusCode || {},
				// Headers (they are sent all at once)
				requestHeaders = {},
				requestHeadersNames = {},
				// The jqXHR state
				state = 0,
				// Default abort message
				strAbort = "canceled",
				// Fake xhr
				jqXHR = {
					readyState: 0,

					// Builds headers hashtable if needed
					getResponseHeader: function( key ) {
						var match;
						if ( state === 2 ) {
							if ( !responseHeaders ) {
								responseHeaders = {};
								while ( (match = rheaders.exec( responseHeadersString )) ) {
									responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
								}
							}
							match = responseHeaders[ key.toLowerCase() ];
						}
						return match == null ? null : match;
					},

					// Raw string
					getAllResponseHeaders: function() {
						return state === 2 ? responseHeadersString : null;
					},

					// Caches the header
					setRequestHeader: function( name, value ) {
						var lname = name.toLowerCase();
						if ( !state ) {
							name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
							requestHeaders[ name ] = value;
						}
						return this;
					},

					// Overrides response content-type header
					overrideMimeType: function( type ) {
						if ( !state ) {
							s.mimeType = type;
						}
						return this;
					},

					// Status-dependent callbacks
					statusCode: function( map ) {
						var code;
						if ( map ) {
							if ( state < 2 ) {
								for ( code in map ) {
									// Lazy-add the new callback in a way that preserves old ones
									statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
								}
							} else {
								// Execute the appropriate callbacks
								jqXHR.always( map[ jqXHR.status ] );
							}
						}
						return this;
					},

					// Cancel the request
					abort: function( statusText ) {
						var finalText = statusText || strAbort;
						if ( transport ) {
							transport.abort( finalText );
						}
						done( 0, finalText );
						return this;
					}
				};

			// Attach deferreds
			deferred.promise( jqXHR ).complete = completeDeferred.add;
			jqXHR.success = jqXHR.done;
			jqXHR.error = jqXHR.fail;

			// Remove hash character (#7531: and string promotion)
			// Add protocol if not provided (prefilters might expect it)
			// Handle falsy url in the settings object (#10093: consistency with old signature)
			// We also use the url parameter if available
			s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" )
				.replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

			// Alias method option to type as per ticket #12004
			s.type = options.method || options.type || s.method || s.type;

			// Extract dataTypes list
			s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

			// A cross-domain request is in order when we have a protocol:host:port mismatch
			if ( s.crossDomain == null ) {
				parts = rurl.exec( s.url.toLowerCase() );
				s.crossDomain = !!( parts &&
					( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
						( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
							( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
				);
			}

			// Convert data if not already a string
			if ( s.data && s.processData && typeof s.data !== "string" ) {
				s.data = jQuery.param( s.data, s.traditional );
			}

			// Apply prefilters
			inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

			// If request was aborted inside a prefilter, stop there
			if ( state === 2 ) {
				return jqXHR;
			}

			// We can fire global events as of now if asked to
			// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
			fireGlobals = jQuery.event && s.global;

			// Watch for a new set of requests
			if ( fireGlobals && jQuery.active++ === 0 ) {
				jQuery.event.trigger("ajaxStart");
			}

			// Uppercase the type
			s.type = s.type.toUpperCase();

			// Determine if request has content
			s.hasContent = !rnoContent.test( s.type );

			// Save the URL in case we're toying with the If-Modified-Since
			// and/or If-None-Match header later on
			cacheURL = s.url;

			// More options handling for requests with no content
			if ( !s.hasContent ) {

				// If data is available, append data to url
				if ( s.data ) {
					cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
					// #9682: remove data so that it's not used in an eventual retry
					delete s.data;
				}

				// Add anti-cache in url if needed
				if ( s.cache === false ) {
					s.url = rts.test( cacheURL ) ?

						// If there is already a '_' parameter, set its value
						cacheURL.replace( rts, "$1_=" + nonce++ ) :

						// Otherwise add one to the end
						cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
				}
			}

			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
			if ( s.ifModified ) {
				if ( jQuery.lastModified[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
				}
				if ( jQuery.etag[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
				}
			}

			// Set the correct header, if data is being sent
			if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
				jqXHR.setRequestHeader( "Content-Type", s.contentType );
			}

			// Set the Accepts header for the server, depending on the dataType
			jqXHR.setRequestHeader(
				"Accept",
				s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
					s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
					s.accepts[ "*" ]
			);

			// Check for headers option
			for ( i in s.headers ) {
				jqXHR.setRequestHeader( i, s.headers[ i ] );
			}

			// Allow custom headers/mimetypes and early abort
			if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
				// Abort if not done already and return
				return jqXHR.abort();
			}

			// Aborting is no longer a cancellation
			strAbort = "abort";

			// Install callbacks on deferreds
			for ( i in { success: 1, error: 1, complete: 1 } ) {
				jqXHR[ i ]( s[ i ] );
			}

			// Get transport
			transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

			// If no transport, we auto-abort
			if ( !transport ) {
				done( -1, "No Transport" );
			} else {
				jqXHR.readyState = 1;

				// Send global event
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
				}
				// Timeout
				if ( s.async && s.timeout > 0 ) {
					timeoutTimer = setTimeout(function() {
						jqXHR.abort("timeout");
					}, s.timeout );
				}

				try {
					state = 1;
					transport.send( requestHeaders, done );
				} catch ( e ) {
					// Propagate exception as error if not done
					if ( state < 2 ) {
						done( -1, e );
					// Simply rethrow otherwise
					} else {
						throw e;
					}
				}
			}

			// Callback for when everything is done
			function done( status, nativeStatusText, responses, headers ) {
				var isSuccess, success, error, response, modified,
					statusText = nativeStatusText;

				// Called once
				if ( state === 2 ) {
					return;
				}

				// State is "done" now
				state = 2;

				// Clear timeout if it exists
				if ( timeoutTimer ) {
					clearTimeout( timeoutTimer );
				}

				// Dereference transport for early garbage collection
				// (no matter how long the jqXHR object will be used)
				transport = undefined;

				// Cache response headers
				responseHeadersString = headers || "";

				// Set readyState
				jqXHR.readyState = status > 0 ? 4 : 0;

				// Determine if successful
				isSuccess = status >= 200 && status < 300 || status === 304;

				// Get response data
				if ( responses ) {
					response = ajaxHandleResponses( s, jqXHR, responses );
				}

				// Convert no matter what (that way responseXXX fields are always set)
				response = ajaxConvert( s, response, jqXHR, isSuccess );

				// If successful, handle type chaining
				if ( isSuccess ) {

					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
					if ( s.ifModified ) {
						modified = jqXHR.getResponseHeader("Last-Modified");
						if ( modified ) {
							jQuery.lastModified[ cacheURL ] = modified;
						}
						modified = jqXHR.getResponseHeader("etag");
						if ( modified ) {
							jQuery.etag[ cacheURL ] = modified;
						}
					}

					// if no content
					if ( status === 204 || s.type === "HEAD" ) {
						statusText = "nocontent";

					// if not modified
					} else if ( status === 304 ) {
						statusText = "notmodified";

					// If we have data, let's convert it
					} else {
						statusText = response.state;
						success = response.data;
						error = response.error;
						isSuccess = !error;
					}
				} else {
					// Extract error from statusText and normalize for non-aborts
					error = statusText;
					if ( status || !statusText ) {
						statusText = "error";
						if ( status < 0 ) {
							status = 0;
						}
					}
				}

				// Set data for the fake xhr object
				jqXHR.status = status;
				jqXHR.statusText = ( nativeStatusText || statusText ) + "";

				// Success/Error
				if ( isSuccess ) {
					deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
				} else {
					deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
				}

				// Status-dependent callbacks
				jqXHR.statusCode( statusCode );
				statusCode = undefined;

				if ( fireGlobals ) {
					globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
						[ jqXHR, s, isSuccess ? success : error ] );
				}

				// Complete
				completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
					// Handle the global AJAX counter
					if ( !( --jQuery.active ) ) {
						jQuery.event.trigger("ajaxStop");
					}
				}
			}

			return jqXHR;
		},

		getJSON: function( url, data, callback ) {
			return jQuery.get( url, data, callback, "json" );
		},

		getScript: function( url, callback ) {
			return jQuery.get( url, undefined, callback, "script" );
		}
	});

	jQuery.each( [ "get", "post" ], function( i, method ) {
		jQuery[ method ] = function( url, data, callback, type ) {
			// Shift arguments if data argument was omitted
			if ( jQuery.isFunction( data ) ) {
				type = type || callback;
				callback = data;
				data = undefined;
			}

			return jQuery.ajax({
				url: url,
				type: method,
				dataType: type,
				data: data,
				success: callback
			});
		};
	});


	jQuery._evalUrl = function( url ) {
		return jQuery.ajax({
			url: url,
			type: "GET",
			dataType: "script",
			async: false,
			global: false,
			"throws": true
		});
	};


	jQuery.fn.extend({
		wrapAll: function( html ) {
			var wrap;

			if ( jQuery.isFunction( html ) ) {
				return this.each(function( i ) {
					jQuery( this ).wrapAll( html.call(this, i) );
				});
			}

			if ( this[ 0 ] ) {

				// The elements to wrap the target around
				wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

				if ( this[ 0 ].parentNode ) {
					wrap.insertBefore( this[ 0 ] );
				}

				wrap.map(function() {
					var elem = this;

					while ( elem.firstElementChild ) {
						elem = elem.firstElementChild;
					}

					return elem;
				}).append( this );
			}

			return this;
		},

		wrapInner: function( html ) {
			if ( jQuery.isFunction( html ) ) {
				return this.each(function( i ) {
					jQuery( this ).wrapInner( html.call(this, i) );
				});
			}

			return this.each(function() {
				var self = jQuery( this ),
					contents = self.contents();

				if ( contents.length ) {
					contents.wrapAll( html );

				} else {
					self.append( html );
				}
			});
		},

		wrap: function( html ) {
			var isFunction = jQuery.isFunction( html );

			return this.each(function( i ) {
				jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
			});
		},

		unwrap: function() {
			return this.parent().each(function() {
				if ( !jQuery.nodeName( this, "body" ) ) {
					jQuery( this ).replaceWith( this.childNodes );
				}
			}).end();
		}
	});


	jQuery.expr.filters.hidden = function( elem ) {
		// Support: Opera <= 12.12
		// Opera reports offsetWidths and offsetHeights less than zero on some elements
		return elem.offsetWidth <= 0 && elem.offsetHeight <= 0;
	};
	jQuery.expr.filters.visible = function( elem ) {
		return !jQuery.expr.filters.hidden( elem );
	};




	var r20 = /%20/g,
		rbracket = /\[\]$/,
		rCRLF = /\r?\n/g,
		rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
		rsubmittable = /^(?:input|select|textarea|keygen)/i;

	function buildParams( prefix, obj, traditional, add ) {
		var name;

		if ( jQuery.isArray( obj ) ) {
			// Serialize array item.
			jQuery.each( obj, function( i, v ) {
				if ( traditional || rbracket.test( prefix ) ) {
					// Treat each array item as a scalar.
					add( prefix, v );

				} else {
					// Item is non-scalar (array or object), encode its numeric index.
					buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
				}
			});

		} else if ( !traditional && jQuery.type( obj ) === "object" ) {
			// Serialize object item.
			for ( name in obj ) {
				buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
			}

		} else {
			// Serialize scalar item.
			add( prefix, obj );
		}
	}

	// Serialize an array of form elements or a set of
	// key/values into a query string
	jQuery.param = function( a, traditional ) {
		var prefix,
			s = [],
			add = function( key, value ) {
				// If value is a function, invoke it and return its value
				value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
				s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
			};

		// Set traditional to true for jQuery <= 1.3.2 behavior.
		if ( traditional === undefined ) {
			traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
		}

		// If an array was passed in, assume that it is an array of form elements.
		if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
			// Serialize the form elements
			jQuery.each( a, function() {
				add( this.name, this.value );
			});

		} else {
			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for ( prefix in a ) {
				buildParams( prefix, a[ prefix ], traditional, add );
			}
		}

		// Return the resulting serialization
		return s.join( "&" ).replace( r20, "+" );
	};

	jQuery.fn.extend({
		serialize: function() {
			return jQuery.param( this.serializeArray() );
		},
		serializeArray: function() {
			return this.map(function() {
				// Can add propHook for "elements" to filter or add form elements
				var elements = jQuery.prop( this, "elements" );
				return elements ? jQuery.makeArray( elements ) : this;
			})
			.filter(function() {
				var type = this.type;

				// Use .is( ":disabled" ) so that fieldset[disabled] works
				return this.name && !jQuery( this ).is( ":disabled" ) &&
					rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
					( this.checked || !rcheckableType.test( type ) );
			})
			.map(function( i, elem ) {
				var val = jQuery( this ).val();

				return val == null ?
					null :
					jQuery.isArray( val ) ?
						jQuery.map( val, function( val ) {
							return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
						}) :
						{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
			}).get();
		}
	});


	jQuery.ajaxSettings.xhr = function() {
		try {
			return new XMLHttpRequest();
		} catch( e ) {}
	};

	var xhrId = 0,
		xhrCallbacks = {},
		xhrSuccessStatus = {
			// file protocol always yields status code 0, assume 200
			0: 200,
			// Support: IE9
			// #1450: sometimes IE returns 1223 when it should be 204
			1223: 204
		},
		xhrSupported = jQuery.ajaxSettings.xhr();

	// Support: IE9
	// Open requests must be manually aborted on unload (#5280)
	// See https://support.microsoft.com/kb/2856746 for more info
	if ( window.attachEvent ) {
		window.attachEvent( "onunload", function() {
			for ( var key in xhrCallbacks ) {
				xhrCallbacks[ key ]();
			}
		});
	}

	support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
	support.ajax = xhrSupported = !!xhrSupported;

	jQuery.ajaxTransport(function( options ) {
		var callback;

		// Cross domain only allowed if supported through XMLHttpRequest
		if ( support.cors || xhrSupported && !options.crossDomain ) {
			return {
				send: function( headers, complete ) {
					var i,
						xhr = options.xhr(),
						id = ++xhrId;

					xhr.open( options.type, options.url, options.async, options.username, options.password );

					// Apply custom fields if provided
					if ( options.xhrFields ) {
						for ( i in options.xhrFields ) {
							xhr[ i ] = options.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( options.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( options.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !options.crossDomain && !headers["X-Requested-With"] ) {
						headers["X-Requested-With"] = "XMLHttpRequest";
					}

					// Set headers
					for ( i in headers ) {
						xhr.setRequestHeader( i, headers[ i ] );
					}

					// Callback
					callback = function( type ) {
						return function() {
							if ( callback ) {
								delete xhrCallbacks[ id ];
								callback = xhr.onload = xhr.onerror = null;

								if ( type === "abort" ) {
									xhr.abort();
								} else if ( type === "error" ) {
									complete(
										// file: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								} else {
									complete(
										xhrSuccessStatus[ xhr.status ] || xhr.status,
										xhr.statusText,
										// Support: IE9
										// Accessing binary-data responseText throws an exception
										// (#11426)
										typeof xhr.responseText === "string" ? {
											text: xhr.responseText
										} : undefined,
										xhr.getAllResponseHeaders()
									);
								}
							}
						};
					};

					// Listen to events
					xhr.onload = callback();
					xhr.onerror = callback("error");

					// Create the abort callback
					callback = xhrCallbacks[ id ] = callback("abort");

					try {
						// Do send the request (this may raise an exception)
						xhr.send( options.hasContent && options.data || null );
					} catch ( e ) {
						// #14683: Only rethrow if this hasn't been notified as an error yet
						if ( callback ) {
							throw e;
						}
					}
				},

				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	});




	// Install script dataType
	jQuery.ajaxSetup({
		accepts: {
			script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /(?:java|ecma)script/
		},
		converters: {
			"text script": function( text ) {
				jQuery.globalEval( text );
				return text;
			}
		}
	});

	// Handle cache's special case and crossDomain
	jQuery.ajaxPrefilter( "script", function( s ) {
		if ( s.cache === undefined ) {
			s.cache = false;
		}
		if ( s.crossDomain ) {
			s.type = "GET";
		}
	});

	// Bind script tag hack transport
	jQuery.ajaxTransport( "script", function( s ) {
		// This transport only deals with cross domain requests
		if ( s.crossDomain ) {
			var script, callback;
			return {
				send: function( _, complete ) {
					script = jQuery("<script>").prop({
						async: true,
						charset: s.scriptCharset,
						src: s.url
					}).on(
						"load error",
						callback = function( evt ) {
							script.remove();
							callback = null;
							if ( evt ) {
								complete( evt.type === "error" ? 404 : 200, evt.type );
							}
						}
					);
					document.head.appendChild( script[ 0 ] );
				},
				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	});




	var oldCallbacks = [],
		rjsonp = /(=)\?(?=&|$)|\?\?/;

	// Default jsonp settings
	jQuery.ajaxSetup({
		jsonp: "callback",
		jsonpCallback: function() {
			var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
			this[ callback ] = true;
			return callback;
		}
	});

	// Detect, normalize options and install callbacks for jsonp requests
	jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

		var callbackName, overwritten, responseContainer,
			jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
				"url" :
				typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
			);

		// Handle iff the expected data type is "jsonp" or we have a parameter to set
		if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

			// Get callback name, remembering preexisting value associated with it
			callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
				s.jsonpCallback() :
				s.jsonpCallback;

			// Insert callback into url or form data
			if ( jsonProp ) {
				s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
			} else if ( s.jsonp !== false ) {
				s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
			}

			// Use data converter to retrieve json after script execution
			s.converters["script json"] = function() {
				if ( !responseContainer ) {
					jQuery.error( callbackName + " was not called" );
				}
				return responseContainer[ 0 ];
			};

			// force json dataType
			s.dataTypes[ 0 ] = "json";

			// Install callback
			overwritten = window[ callbackName ];
			window[ callbackName ] = function() {
				responseContainer = arguments;
			};

			// Clean-up function (fires after converters)
			jqXHR.always(function() {
				// Restore preexisting value
				window[ callbackName ] = overwritten;

				// Save back as free
				if ( s[ callbackName ] ) {
					// make sure that re-using the options doesn't screw things around
					s.jsonpCallback = originalSettings.jsonpCallback;

					// save the callback name for future use
					oldCallbacks.push( callbackName );
				}

				// Call if it was a function and we have a response
				if ( responseContainer && jQuery.isFunction( overwritten ) ) {
					overwritten( responseContainer[ 0 ] );
				}

				responseContainer = overwritten = undefined;
			});

			// Delegate to script
			return "script";
		}
	});




	// data: string of html
	// context (optional): If specified, the fragment will be created in this context, defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	jQuery.parseHTML = function( data, context, keepScripts ) {
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}
		context = context || document;

		var parsed = rsingleTag.exec( data ),
			scripts = !keepScripts && [];

		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[1] ) ];
		}

		parsed = jQuery.buildFragment( [ data ], context, scripts );

		if ( scripts && scripts.length ) {
			jQuery( scripts ).remove();
		}

		return jQuery.merge( [], parsed.childNodes );
	};


	// Keep a copy of the old load method
	var _load = jQuery.fn.load;

	/**
	 * Load a url into a page
	 */
	jQuery.fn.load = function( url, params, callback ) {
		if ( typeof url !== "string" && _load ) {
			return _load.apply( this, arguments );
		}

		var selector, type, response,
			self = this,
			off = url.indexOf(" ");

		if ( off >= 0 ) {
			selector = jQuery.trim( url.slice( off ) );
			url = url.slice( 0, off );
		}

		// If it's a function
		if ( jQuery.isFunction( params ) ) {

			// We assume that it's the callback
			callback = params;
			params = undefined;

		// Otherwise, build a param string
		} else if ( params && typeof params === "object" ) {
			type = "POST";
		}

		// If we have elements to modify, make the request
		if ( self.length > 0 ) {
			jQuery.ajax({
				url: url,

				// if "type" variable is undefined, then "GET" method will be used
				type: type,
				dataType: "html",
				data: params
			}).done(function( responseText ) {

				// Save response for use in complete callback
				response = arguments;

				self.html( selector ?

					// If a selector was specified, locate the right elements in a dummy div
					// Exclude scripts to avoid IE 'Permission Denied' errors
					jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :

					// Otherwise use the full result
					responseText );

			}).complete( callback && function( jqXHR, status ) {
				self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
			});
		}

		return this;
	};




	// Attach a bunch of functions for handling common AJAX events
	jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ) {
		jQuery.fn[ type ] = function( fn ) {
			return this.on( type, fn );
		};
	});




	jQuery.expr.filters.animated = function( elem ) {
		return jQuery.grep(jQuery.timers, function( fn ) {
			return elem === fn.elem;
		}).length;
	};




	var docElem = window.document.documentElement;

	/**
	 * Gets a window from an element
	 */
	function getWindow( elem ) {
		return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
	}

	jQuery.offset = {
		setOffset: function( elem, options, i ) {
			var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
				position = jQuery.css( elem, "position" ),
				curElem = jQuery( elem ),
				props = {};

			// Set position first, in-case top/left are set even on static elem
			if ( position === "static" ) {
				elem.style.position = "relative";
			}

			curOffset = curElem.offset();
			curCSSTop = jQuery.css( elem, "top" );
			curCSSLeft = jQuery.css( elem, "left" );
			calculatePosition = ( position === "absolute" || position === "fixed" ) &&
				( curCSSTop + curCSSLeft ).indexOf("auto") > -1;

			// Need to be able to calculate position if either
			// top or left is auto and position is either absolute or fixed
			if ( calculatePosition ) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;

			} else {
				curTop = parseFloat( curCSSTop ) || 0;
				curLeft = parseFloat( curCSSLeft ) || 0;
			}

			if ( jQuery.isFunction( options ) ) {
				options = options.call( elem, i, curOffset );
			}

			if ( options.top != null ) {
				props.top = ( options.top - curOffset.top ) + curTop;
			}
			if ( options.left != null ) {
				props.left = ( options.left - curOffset.left ) + curLeft;
			}

			if ( "using" in options ) {
				options.using.call( elem, props );

			} else {
				curElem.css( props );
			}
		}
	};

	jQuery.fn.extend({
		offset: function( options ) {
			if ( arguments.length ) {
				return options === undefined ?
					this :
					this.each(function( i ) {
						jQuery.offset.setOffset( this, options, i );
					});
			}

			var docElem, win,
				elem = this[ 0 ],
				box = { top: 0, left: 0 },
				doc = elem && elem.ownerDocument;

			if ( !doc ) {
				return;
			}

			docElem = doc.documentElement;

			// Make sure it's not a disconnected DOM node
			if ( !jQuery.contains( docElem, elem ) ) {
				return box;
			}

			// Support: BlackBerry 5, iOS 3 (original iPhone)
			// If we don't have gBCR, just use 0,0 rather than error
			if ( typeof elem.getBoundingClientRect !== strundefined ) {
				box = elem.getBoundingClientRect();
			}
			win = getWindow( doc );
			return {
				top: box.top + win.pageYOffset - docElem.clientTop,
				left: box.left + win.pageXOffset - docElem.clientLeft
			};
		},

		position: function() {
			if ( !this[ 0 ] ) {
				return;
			}

			var offsetParent, offset,
				elem = this[ 0 ],
				parentOffset = { top: 0, left: 0 };

			// Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent
			if ( jQuery.css( elem, "position" ) === "fixed" ) {
				// Assume getBoundingClientRect is there when computed position is fixed
				offset = elem.getBoundingClientRect();

			} else {
				// Get *real* offsetParent
				offsetParent = this.offsetParent();

				// Get correct offsets
				offset = this.offset();
				if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
					parentOffset = offsetParent.offset();
				}

				// Add offsetParent borders
				parentOffset.top += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
			}

			// Subtract parent offsets and element margins
			return {
				top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
				left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
			};
		},

		offsetParent: function() {
			return this.map(function() {
				var offsetParent = this.offsetParent || docElem;

				while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position" ) === "static" ) ) {
					offsetParent = offsetParent.offsetParent;
				}

				return offsetParent || docElem;
			});
		}
	});

	// Create scrollLeft and scrollTop methods
	jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
		var top = "pageYOffset" === prop;

		jQuery.fn[ method ] = function( val ) {
			return access( this, function( elem, method, val ) {
				var win = getWindow( elem );

				if ( val === undefined ) {
					return win ? win[ prop ] : elem[ method ];
				}

				if ( win ) {
					win.scrollTo(
						!top ? val : window.pageXOffset,
						top ? val : window.pageYOffset
					);

				} else {
					elem[ method ] = val;
				}
			}, method, val, arguments.length, null );
		};
	});

	// Support: Safari<7+, Chrome<37+
	// Add the top/left cssHooks using jQuery.fn.position
	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280
	// getComputedStyle returns percent when specified for top/left/bottom/right;
	// rather than make the css module depend on the offset module, just check for it here
	jQuery.each( [ "top", "left" ], function( i, prop ) {
		jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
			function( elem, computed ) {
				if ( computed ) {
					computed = curCSS( elem, prop );
					// If curCSS returns percentage, fallback to offset
					return rnumnonpx.test( computed ) ?
						jQuery( elem ).position()[ prop ] + "px" :
						computed;
				}
			}
		);
	});


	// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
	jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
		jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
			// Margin is only for outerHeight, outerWidth
			jQuery.fn[ funcName ] = function( margin, value ) {
				var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
					extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

				return access( this, function( elem, type, value ) {
					var doc;

					if ( jQuery.isWindow( elem ) ) {
						// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
						// isn't a whole lot we can do. See pull request at this URL for discussion:
						// https://github.com/jquery/jquery/pull/764
						return elem.document.documentElement[ "client" + name ];
					}

					// Get document width or height
					if ( elem.nodeType === 9 ) {
						doc = elem.documentElement;

						// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
						// whichever is greatest
						return Math.max(
							elem.body[ "scroll" + name ], doc[ "scroll" + name ],
							elem.body[ "offset" + name ], doc[ "offset" + name ],
							doc[ "client" + name ]
						);
					}

					return value === undefined ?
						// Get width or height on the element, requesting but not forcing parseFloat
						jQuery.css( elem, type, extra ) :

						// Set width or height on the element
						jQuery.style( elem, type, value, extra );
				}, type, chainable ? margin : undefined, chainable, null );
			};
		});
	});


	// The number of elements contained in the matched element set
	jQuery.fn.size = function() {
		return this.length;
	};

	jQuery.fn.andSelf = jQuery.fn.addBack;




	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.

	// Note that for maximum portability, libraries that are not jQuery should
	// declare themselves as anonymous modules, and avoid setting a global if an
	// AMD loader is present. jQuery is a special case. For more information, see
	// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

	if ( true ) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return jQuery;
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}




	var
		// Map over jQuery in case of overwrite
		_jQuery = window.jQuery,

		// Map over the $ in case of overwrite
		_$ = window.$;

	jQuery.noConflict = function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}

		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	};

	// Expose jQuery and $ identifiers, even in AMD
	// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
	// and CommonJS for browser emulators (#13566)
	if ( typeof noGlobal === strundefined ) {
		window.jQuery = window.$ = jQuery;
	}




	return jQuery;

	}));


/***/ },
/* 360 */,
/* 361 */,
/* 362 */,
/* 363 */,
/* 364 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {//! moment.js
	//! version : 2.10.6
	//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
	//! license : MIT
	//! momentjs.com

	(function (global, factory) {
	     true ? module.exports = factory() :
	    typeof define === 'function' && define.amd ? define(factory) :
	    global.moment = factory()
	}(this, function () { 'use strict';

	    var hookCallback;

	    function utils_hooks__hooks () {
	        return hookCallback.apply(null, arguments);
	    }

	    // This is done to register the method called with moment()
	    // without creating circular dependencies.
	    function setHookCallback (callback) {
	        hookCallback = callback;
	    }

	    function isArray(input) {
	        return Object.prototype.toString.call(input) === '[object Array]';
	    }

	    function isDate(input) {
	        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
	    }

	    function map(arr, fn) {
	        var res = [], i;
	        for (i = 0; i < arr.length; ++i) {
	            res.push(fn(arr[i], i));
	        }
	        return res;
	    }

	    function hasOwnProp(a, b) {
	        return Object.prototype.hasOwnProperty.call(a, b);
	    }

	    function extend(a, b) {
	        for (var i in b) {
	            if (hasOwnProp(b, i)) {
	                a[i] = b[i];
	            }
	        }

	        if (hasOwnProp(b, 'toString')) {
	            a.toString = b.toString;
	        }

	        if (hasOwnProp(b, 'valueOf')) {
	            a.valueOf = b.valueOf;
	        }

	        return a;
	    }

	    function create_utc__createUTC (input, format, locale, strict) {
	        return createLocalOrUTC(input, format, locale, strict, true).utc();
	    }

	    function defaultParsingFlags() {
	        // We need to deep clone this object.
	        return {
	            empty           : false,
	            unusedTokens    : [],
	            unusedInput     : [],
	            overflow        : -2,
	            charsLeftOver   : 0,
	            nullInput       : false,
	            invalidMonth    : null,
	            invalidFormat   : false,
	            userInvalidated : false,
	            iso             : false
	        };
	    }

	    function getParsingFlags(m) {
	        if (m._pf == null) {
	            m._pf = defaultParsingFlags();
	        }
	        return m._pf;
	    }

	    function valid__isValid(m) {
	        if (m._isValid == null) {
	            var flags = getParsingFlags(m);
	            m._isValid = !isNaN(m._d.getTime()) &&
	                flags.overflow < 0 &&
	                !flags.empty &&
	                !flags.invalidMonth &&
	                !flags.invalidWeekday &&
	                !flags.nullInput &&
	                !flags.invalidFormat &&
	                !flags.userInvalidated;

	            if (m._strict) {
	                m._isValid = m._isValid &&
	                    flags.charsLeftOver === 0 &&
	                    flags.unusedTokens.length === 0 &&
	                    flags.bigHour === undefined;
	            }
	        }
	        return m._isValid;
	    }

	    function valid__createInvalid (flags) {
	        var m = create_utc__createUTC(NaN);
	        if (flags != null) {
	            extend(getParsingFlags(m), flags);
	        }
	        else {
	            getParsingFlags(m).userInvalidated = true;
	        }

	        return m;
	    }

	    var momentProperties = utils_hooks__hooks.momentProperties = [];

	    function copyConfig(to, from) {
	        var i, prop, val;

	        if (typeof from._isAMomentObject !== 'undefined') {
	            to._isAMomentObject = from._isAMomentObject;
	        }
	        if (typeof from._i !== 'undefined') {
	            to._i = from._i;
	        }
	        if (typeof from._f !== 'undefined') {
	            to._f = from._f;
	        }
	        if (typeof from._l !== 'undefined') {
	            to._l = from._l;
	        }
	        if (typeof from._strict !== 'undefined') {
	            to._strict = from._strict;
	        }
	        if (typeof from._tzm !== 'undefined') {
	            to._tzm = from._tzm;
	        }
	        if (typeof from._isUTC !== 'undefined') {
	            to._isUTC = from._isUTC;
	        }
	        if (typeof from._offset !== 'undefined') {
	            to._offset = from._offset;
	        }
	        if (typeof from._pf !== 'undefined') {
	            to._pf = getParsingFlags(from);
	        }
	        if (typeof from._locale !== 'undefined') {
	            to._locale = from._locale;
	        }

	        if (momentProperties.length > 0) {
	            for (i in momentProperties) {
	                prop = momentProperties[i];
	                val = from[prop];
	                if (typeof val !== 'undefined') {
	                    to[prop] = val;
	                }
	            }
	        }

	        return to;
	    }

	    var updateInProgress = false;

	    // Moment prototype object
	    function Moment(config) {
	        copyConfig(this, config);
	        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
	        // Prevent infinite loop in case updateOffset creates new moment
	        // objects.
	        if (updateInProgress === false) {
	            updateInProgress = true;
	            utils_hooks__hooks.updateOffset(this);
	            updateInProgress = false;
	        }
	    }

	    function isMoment (obj) {
	        return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
	    }

	    function absFloor (number) {
	        if (number < 0) {
	            return Math.ceil(number);
	        } else {
	            return Math.floor(number);
	        }
	    }

	    function toInt(argumentForCoercion) {
	        var coercedNumber = +argumentForCoercion,
	            value = 0;

	        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
	            value = absFloor(coercedNumber);
	        }

	        return value;
	    }

	    function compareArrays(array1, array2, dontConvert) {
	        var len = Math.min(array1.length, array2.length),
	            lengthDiff = Math.abs(array1.length - array2.length),
	            diffs = 0,
	            i;
	        for (i = 0; i < len; i++) {
	            if ((dontConvert && array1[i] !== array2[i]) ||
	                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
	                diffs++;
	            }
	        }
	        return diffs + lengthDiff;
	    }

	    function Locale() {
	    }

	    var locales = {};
	    var globalLocale;

	    function normalizeLocale(key) {
	        return key ? key.toLowerCase().replace('_', '-') : key;
	    }

	    // pick the locale from the array
	    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
	    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
	    function chooseLocale(names) {
	        var i = 0, j, next, locale, split;

	        while (i < names.length) {
	            split = normalizeLocale(names[i]).split('-');
	            j = split.length;
	            next = normalizeLocale(names[i + 1]);
	            next = next ? next.split('-') : null;
	            while (j > 0) {
	                locale = loadLocale(split.slice(0, j).join('-'));
	                if (locale) {
	                    return locale;
	                }
	                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
	                    //the next array item is better than a shallower substring of this one
	                    break;
	                }
	                j--;
	            }
	            i++;
	        }
	        return null;
	    }

	    function loadLocale(name) {
	        var oldLocale = null;
	        // TODO: Find a better way to register and load all the locales in Node
	        if (!locales[name] && typeof module !== 'undefined' &&
	                module && module.exports) {
	            try {
	                oldLocale = globalLocale._abbr;
	                __webpack_require__(366)("./" + name);
	                // because defineLocale currently also sets the global locale, we
	                // want to undo that for lazy loaded locales
	                locale_locales__getSetGlobalLocale(oldLocale);
	            } catch (e) { }
	        }
	        return locales[name];
	    }

	    // This function will load locale and then set the global locale.  If
	    // no arguments are passed in, it will simply return the current global
	    // locale key.
	    function locale_locales__getSetGlobalLocale (key, values) {
	        var data;
	        if (key) {
	            if (typeof values === 'undefined') {
	                data = locale_locales__getLocale(key);
	            }
	            else {
	                data = defineLocale(key, values);
	            }

	            if (data) {
	                // moment.duration._locale = moment._locale = data;
	                globalLocale = data;
	            }
	        }

	        return globalLocale._abbr;
	    }

	    function defineLocale (name, values) {
	        if (values !== null) {
	            values.abbr = name;
	            locales[name] = locales[name] || new Locale();
	            locales[name].set(values);

	            // backwards compat for now: also set the locale
	            locale_locales__getSetGlobalLocale(name);

	            return locales[name];
	        } else {
	            // useful for testing
	            delete locales[name];
	            return null;
	        }
	    }

	    // returns locale data
	    function locale_locales__getLocale (key) {
	        var locale;

	        if (key && key._locale && key._locale._abbr) {
	            key = key._locale._abbr;
	        }

	        if (!key) {
	            return globalLocale;
	        }

	        if (!isArray(key)) {
	            //short-circuit everything else
	            locale = loadLocale(key);
	            if (locale) {
	                return locale;
	            }
	            key = [key];
	        }

	        return chooseLocale(key);
	    }

	    var aliases = {};

	    function addUnitAlias (unit, shorthand) {
	        var lowerCase = unit.toLowerCase();
	        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
	    }

	    function normalizeUnits(units) {
	        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
	    }

	    function normalizeObjectUnits(inputObject) {
	        var normalizedInput = {},
	            normalizedProp,
	            prop;

	        for (prop in inputObject) {
	            if (hasOwnProp(inputObject, prop)) {
	                normalizedProp = normalizeUnits(prop);
	                if (normalizedProp) {
	                    normalizedInput[normalizedProp] = inputObject[prop];
	                }
	            }
	        }

	        return normalizedInput;
	    }

	    function makeGetSet (unit, keepTime) {
	        return function (value) {
	            if (value != null) {
	                get_set__set(this, unit, value);
	                utils_hooks__hooks.updateOffset(this, keepTime);
	                return this;
	            } else {
	                return get_set__get(this, unit);
	            }
	        };
	    }

	    function get_set__get (mom, unit) {
	        return mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]();
	    }

	    function get_set__set (mom, unit, value) {
	        return mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
	    }

	    // MOMENTS

	    function getSet (units, value) {
	        var unit;
	        if (typeof units === 'object') {
	            for (unit in units) {
	                this.set(unit, units[unit]);
	            }
	        } else {
	            units = normalizeUnits(units);
	            if (typeof this[units] === 'function') {
	                return this[units](value);
	            }
	        }
	        return this;
	    }

	    function zeroFill(number, targetLength, forceSign) {
	        var absNumber = '' + Math.abs(number),
	            zerosToFill = targetLength - absNumber.length,
	            sign = number >= 0;
	        return (sign ? (forceSign ? '+' : '') : '-') +
	            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
	    }

	    var formattingTokens = /(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

	    var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

	    var formatFunctions = {};

	    var formatTokenFunctions = {};

	    // token:    'M'
	    // padded:   ['MM', 2]
	    // ordinal:  'Mo'
	    // callback: function () { this.month() + 1 }
	    function addFormatToken (token, padded, ordinal, callback) {
	        var func = callback;
	        if (typeof callback === 'string') {
	            func = function () {
	                return this[callback]();
	            };
	        }
	        if (token) {
	            formatTokenFunctions[token] = func;
	        }
	        if (padded) {
	            formatTokenFunctions[padded[0]] = function () {
	                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
	            };
	        }
	        if (ordinal) {
	            formatTokenFunctions[ordinal] = function () {
	                return this.localeData().ordinal(func.apply(this, arguments), token);
	            };
	        }
	    }

	    function removeFormattingTokens(input) {
	        if (input.match(/\[[\s\S]/)) {
	            return input.replace(/^\[|\]$/g, '');
	        }
	        return input.replace(/\\/g, '');
	    }

	    function makeFormatFunction(format) {
	        var array = format.match(formattingTokens), i, length;

	        for (i = 0, length = array.length; i < length; i++) {
	            if (formatTokenFunctions[array[i]]) {
	                array[i] = formatTokenFunctions[array[i]];
	            } else {
	                array[i] = removeFormattingTokens(array[i]);
	            }
	        }

	        return function (mom) {
	            var output = '';
	            for (i = 0; i < length; i++) {
	                output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
	            }
	            return output;
	        };
	    }

	    // format date using native date object
	    function formatMoment(m, format) {
	        if (!m.isValid()) {
	            return m.localeData().invalidDate();
	        }

	        format = expandFormat(format, m.localeData());
	        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

	        return formatFunctions[format](m);
	    }

	    function expandFormat(format, locale) {
	        var i = 5;

	        function replaceLongDateFormatTokens(input) {
	            return locale.longDateFormat(input) || input;
	        }

	        localFormattingTokens.lastIndex = 0;
	        while (i >= 0 && localFormattingTokens.test(format)) {
	            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
	            localFormattingTokens.lastIndex = 0;
	            i -= 1;
	        }

	        return format;
	    }

	    var match1         = /\d/;            //       0 - 9
	    var match2         = /\d\d/;          //      00 - 99
	    var match3         = /\d{3}/;         //     000 - 999
	    var match4         = /\d{4}/;         //    0000 - 9999
	    var match6         = /[+-]?\d{6}/;    // -999999 - 999999
	    var match1to2      = /\d\d?/;         //       0 - 99
	    var match1to3      = /\d{1,3}/;       //       0 - 999
	    var match1to4      = /\d{1,4}/;       //       0 - 9999
	    var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999

	    var matchUnsigned  = /\d+/;           //       0 - inf
	    var matchSigned    = /[+-]?\d+/;      //    -inf - inf

	    var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z

	    var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

	    // any word (or two) characters or numbers including two/three word month in arabic.
	    var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;

	    var regexes = {};

	    function isFunction (sth) {
	        // https://github.com/moment/moment/issues/2325
	        return typeof sth === 'function' &&
	            Object.prototype.toString.call(sth) === '[object Function]';
	    }


	    function addRegexToken (token, regex, strictRegex) {
	        regexes[token] = isFunction(regex) ? regex : function (isStrict) {
	            return (isStrict && strictRegex) ? strictRegex : regex;
	        };
	    }

	    function getParseRegexForToken (token, config) {
	        if (!hasOwnProp(regexes, token)) {
	            return new RegExp(unescapeFormat(token));
	        }

	        return regexes[token](config._strict, config._locale);
	    }

	    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
	    function unescapeFormat(s) {
	        return s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
	            return p1 || p2 || p3 || p4;
	        }).replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
	    }

	    var tokens = {};

	    function addParseToken (token, callback) {
	        var i, func = callback;
	        if (typeof token === 'string') {
	            token = [token];
	        }
	        if (typeof callback === 'number') {
	            func = function (input, array) {
	                array[callback] = toInt(input);
	            };
	        }
	        for (i = 0; i < token.length; i++) {
	            tokens[token[i]] = func;
	        }
	    }

	    function addWeekParseToken (token, callback) {
	        addParseToken(token, function (input, array, config, token) {
	            config._w = config._w || {};
	            callback(input, config._w, config, token);
	        });
	    }

	    function addTimeToArrayFromToken(token, input, config) {
	        if (input != null && hasOwnProp(tokens, token)) {
	            tokens[token](input, config._a, config, token);
	        }
	    }

	    var YEAR = 0;
	    var MONTH = 1;
	    var DATE = 2;
	    var HOUR = 3;
	    var MINUTE = 4;
	    var SECOND = 5;
	    var MILLISECOND = 6;

	    function daysInMonth(year, month) {
	        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
	    }

	    // FORMATTING

	    addFormatToken('M', ['MM', 2], 'Mo', function () {
	        return this.month() + 1;
	    });

	    addFormatToken('MMM', 0, 0, function (format) {
	        return this.localeData().monthsShort(this, format);
	    });

	    addFormatToken('MMMM', 0, 0, function (format) {
	        return this.localeData().months(this, format);
	    });

	    // ALIASES

	    addUnitAlias('month', 'M');

	    // PARSING

	    addRegexToken('M',    match1to2);
	    addRegexToken('MM',   match1to2, match2);
	    addRegexToken('MMM',  matchWord);
	    addRegexToken('MMMM', matchWord);

	    addParseToken(['M', 'MM'], function (input, array) {
	        array[MONTH] = toInt(input) - 1;
	    });

	    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
	        var month = config._locale.monthsParse(input, token, config._strict);
	        // if we didn't find a month name, mark the date as invalid.
	        if (month != null) {
	            array[MONTH] = month;
	        } else {
	            getParsingFlags(config).invalidMonth = input;
	        }
	    });

	    // LOCALES

	    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
	    function localeMonths (m) {
	        return this._months[m.month()];
	    }

	    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
	    function localeMonthsShort (m) {
	        return this._monthsShort[m.month()];
	    }

	    function localeMonthsParse (monthName, format, strict) {
	        var i, mom, regex;

	        if (!this._monthsParse) {
	            this._monthsParse = [];
	            this._longMonthsParse = [];
	            this._shortMonthsParse = [];
	        }

	        for (i = 0; i < 12; i++) {
	            // make the regex if we don't have it already
	            mom = create_utc__createUTC([2000, i]);
	            if (strict && !this._longMonthsParse[i]) {
	                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
	                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
	            }
	            if (!strict && !this._monthsParse[i]) {
	                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
	                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
	            }
	            // test the regex
	            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
	                return i;
	            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
	                return i;
	            } else if (!strict && this._monthsParse[i].test(monthName)) {
	                return i;
	            }
	        }
	    }

	    // MOMENTS

	    function setMonth (mom, value) {
	        var dayOfMonth;

	        // TODO: Move this out of here!
	        if (typeof value === 'string') {
	            value = mom.localeData().monthsParse(value);
	            // TODO: Another silent failure?
	            if (typeof value !== 'number') {
	                return mom;
	            }
	        }

	        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
	        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
	        return mom;
	    }

	    function getSetMonth (value) {
	        if (value != null) {
	            setMonth(this, value);
	            utils_hooks__hooks.updateOffset(this, true);
	            return this;
	        } else {
	            return get_set__get(this, 'Month');
	        }
	    }

	    function getDaysInMonth () {
	        return daysInMonth(this.year(), this.month());
	    }

	    function checkOverflow (m) {
	        var overflow;
	        var a = m._a;

	        if (a && getParsingFlags(m).overflow === -2) {
	            overflow =
	                a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
	                a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
	                a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
	                a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
	                a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
	                a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
	                -1;

	            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
	                overflow = DATE;
	            }

	            getParsingFlags(m).overflow = overflow;
	        }

	        return m;
	    }

	    function warn(msg) {
	        if (utils_hooks__hooks.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {
	            console.warn('Deprecation warning: ' + msg);
	        }
	    }

	    function deprecate(msg, fn) {
	        var firstTime = true;

	        return extend(function () {
	            if (firstTime) {
	                warn(msg + '\n' + (new Error()).stack);
	                firstTime = false;
	            }
	            return fn.apply(this, arguments);
	        }, fn);
	    }

	    var deprecations = {};

	    function deprecateSimple(name, msg) {
	        if (!deprecations[name]) {
	            warn(msg);
	            deprecations[name] = true;
	        }
	    }

	    utils_hooks__hooks.suppressDeprecationWarnings = false;

	    var from_string__isoRegex = /^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

	    var isoDates = [
	        ['YYYYYY-MM-DD', /[+-]\d{6}-\d{2}-\d{2}/],
	        ['YYYY-MM-DD', /\d{4}-\d{2}-\d{2}/],
	        ['GGGG-[W]WW-E', /\d{4}-W\d{2}-\d/],
	        ['GGGG-[W]WW', /\d{4}-W\d{2}/],
	        ['YYYY-DDD', /\d{4}-\d{3}/]
	    ];

	    // iso time formats and regexes
	    var isoTimes = [
	        ['HH:mm:ss.SSSS', /(T| )\d\d:\d\d:\d\d\.\d+/],
	        ['HH:mm:ss', /(T| )\d\d:\d\d:\d\d/],
	        ['HH:mm', /(T| )\d\d:\d\d/],
	        ['HH', /(T| )\d\d/]
	    ];

	    var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

	    // date from iso format
	    function configFromISO(config) {
	        var i, l,
	            string = config._i,
	            match = from_string__isoRegex.exec(string);

	        if (match) {
	            getParsingFlags(config).iso = true;
	            for (i = 0, l = isoDates.length; i < l; i++) {
	                if (isoDates[i][1].exec(string)) {
	                    config._f = isoDates[i][0];
	                    break;
	                }
	            }
	            for (i = 0, l = isoTimes.length; i < l; i++) {
	                if (isoTimes[i][1].exec(string)) {
	                    // match[6] should be 'T' or space
	                    config._f += (match[6] || ' ') + isoTimes[i][0];
	                    break;
	                }
	            }
	            if (string.match(matchOffset)) {
	                config._f += 'Z';
	            }
	            configFromStringAndFormat(config);
	        } else {
	            config._isValid = false;
	        }
	    }

	    // date from iso format or fallback
	    function configFromString(config) {
	        var matched = aspNetJsonRegex.exec(config._i);

	        if (matched !== null) {
	            config._d = new Date(+matched[1]);
	            return;
	        }

	        configFromISO(config);
	        if (config._isValid === false) {
	            delete config._isValid;
	            utils_hooks__hooks.createFromInputFallback(config);
	        }
	    }

	    utils_hooks__hooks.createFromInputFallback = deprecate(
	        'moment construction falls back to js Date. This is ' +
	        'discouraged and will be removed in upcoming major ' +
	        'release. Please refer to ' +
	        'https://github.com/moment/moment/issues/1407 for more info.',
	        function (config) {
	            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
	        }
	    );

	    function createDate (y, m, d, h, M, s, ms) {
	        //can't just apply() to create a date:
	        //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
	        var date = new Date(y, m, d, h, M, s, ms);

	        //the date constructor doesn't accept years < 1970
	        if (y < 1970) {
	            date.setFullYear(y);
	        }
	        return date;
	    }

	    function createUTCDate (y) {
	        var date = new Date(Date.UTC.apply(null, arguments));
	        if (y < 1970) {
	            date.setUTCFullYear(y);
	        }
	        return date;
	    }

	    addFormatToken(0, ['YY', 2], 0, function () {
	        return this.year() % 100;
	    });

	    addFormatToken(0, ['YYYY',   4],       0, 'year');
	    addFormatToken(0, ['YYYYY',  5],       0, 'year');
	    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

	    // ALIASES

	    addUnitAlias('year', 'y');

	    // PARSING

	    addRegexToken('Y',      matchSigned);
	    addRegexToken('YY',     match1to2, match2);
	    addRegexToken('YYYY',   match1to4, match4);
	    addRegexToken('YYYYY',  match1to6, match6);
	    addRegexToken('YYYYYY', match1to6, match6);

	    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
	    addParseToken('YYYY', function (input, array) {
	        array[YEAR] = input.length === 2 ? utils_hooks__hooks.parseTwoDigitYear(input) : toInt(input);
	    });
	    addParseToken('YY', function (input, array) {
	        array[YEAR] = utils_hooks__hooks.parseTwoDigitYear(input);
	    });

	    // HELPERS

	    function daysInYear(year) {
	        return isLeapYear(year) ? 366 : 365;
	    }

	    function isLeapYear(year) {
	        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
	    }

	    // HOOKS

	    utils_hooks__hooks.parseTwoDigitYear = function (input) {
	        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
	    };

	    // MOMENTS

	    var getSetYear = makeGetSet('FullYear', false);

	    function getIsLeapYear () {
	        return isLeapYear(this.year());
	    }

	    addFormatToken('w', ['ww', 2], 'wo', 'week');
	    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

	    // ALIASES

	    addUnitAlias('week', 'w');
	    addUnitAlias('isoWeek', 'W');

	    // PARSING

	    addRegexToken('w',  match1to2);
	    addRegexToken('ww', match1to2, match2);
	    addRegexToken('W',  match1to2);
	    addRegexToken('WW', match1to2, match2);

	    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
	        week[token.substr(0, 1)] = toInt(input);
	    });

	    // HELPERS

	    // firstDayOfWeek       0 = sun, 6 = sat
	    //                      the day of the week that starts the week
	    //                      (usually sunday or monday)
	    // firstDayOfWeekOfYear 0 = sun, 6 = sat
	    //                      the first week is the week that contains the first
	    //                      of this day of the week
	    //                      (eg. ISO weeks use thursday (4))
	    function weekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {
	        var end = firstDayOfWeekOfYear - firstDayOfWeek,
	            daysToDayOfWeek = firstDayOfWeekOfYear - mom.day(),
	            adjustedMoment;


	        if (daysToDayOfWeek > end) {
	            daysToDayOfWeek -= 7;
	        }

	        if (daysToDayOfWeek < end - 7) {
	            daysToDayOfWeek += 7;
	        }

	        adjustedMoment = local__createLocal(mom).add(daysToDayOfWeek, 'd');
	        return {
	            week: Math.ceil(adjustedMoment.dayOfYear() / 7),
	            year: adjustedMoment.year()
	        };
	    }

	    // LOCALES

	    function localeWeek (mom) {
	        return weekOfYear(mom, this._week.dow, this._week.doy).week;
	    }

	    var defaultLocaleWeek = {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 6  // The week that contains Jan 1st is the first week of the year.
	    };

	    function localeFirstDayOfWeek () {
	        return this._week.dow;
	    }

	    function localeFirstDayOfYear () {
	        return this._week.doy;
	    }

	    // MOMENTS

	    function getSetWeek (input) {
	        var week = this.localeData().week(this);
	        return input == null ? week : this.add((input - week) * 7, 'd');
	    }

	    function getSetISOWeek (input) {
	        var week = weekOfYear(this, 1, 4).week;
	        return input == null ? week : this.add((input - week) * 7, 'd');
	    }

	    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

	    // ALIASES

	    addUnitAlias('dayOfYear', 'DDD');

	    // PARSING

	    addRegexToken('DDD',  match1to3);
	    addRegexToken('DDDD', match3);
	    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
	        config._dayOfYear = toInt(input);
	    });

	    // HELPERS

	    //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
	    function dayOfYearFromWeeks(year, week, weekday, firstDayOfWeekOfYear, firstDayOfWeek) {
	        var week1Jan = 6 + firstDayOfWeek - firstDayOfWeekOfYear, janX = createUTCDate(year, 0, 1 + week1Jan), d = janX.getUTCDay(), dayOfYear;
	        if (d < firstDayOfWeek) {
	            d += 7;
	        }

	        weekday = weekday != null ? 1 * weekday : firstDayOfWeek;

	        dayOfYear = 1 + week1Jan + 7 * (week - 1) - d + weekday;

	        return {
	            year: dayOfYear > 0 ? year : year - 1,
	            dayOfYear: dayOfYear > 0 ?  dayOfYear : daysInYear(year - 1) + dayOfYear
	        };
	    }

	    // MOMENTS

	    function getSetDayOfYear (input) {
	        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
	        return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
	    }

	    // Pick the first defined of two or three arguments.
	    function defaults(a, b, c) {
	        if (a != null) {
	            return a;
	        }
	        if (b != null) {
	            return b;
	        }
	        return c;
	    }

	    function currentDateArray(config) {
	        var now = new Date();
	        if (config._useUTC) {
	            return [now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate()];
	        }
	        return [now.getFullYear(), now.getMonth(), now.getDate()];
	    }

	    // convert an array to a date.
	    // the array should mirror the parameters below
	    // note: all values past the year are optional and will default to the lowest possible value.
	    // [year, month, day , hour, minute, second, millisecond]
	    function configFromArray (config) {
	        var i, date, input = [], currentDate, yearToUse;

	        if (config._d) {
	            return;
	        }

	        currentDate = currentDateArray(config);

	        //compute day of the year from weeks and weekdays
	        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
	            dayOfYearFromWeekInfo(config);
	        }

	        //if the day of the year is set, figure out what it is
	        if (config._dayOfYear) {
	            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

	            if (config._dayOfYear > daysInYear(yearToUse)) {
	                getParsingFlags(config)._overflowDayOfYear = true;
	            }

	            date = createUTCDate(yearToUse, 0, config._dayOfYear);
	            config._a[MONTH] = date.getUTCMonth();
	            config._a[DATE] = date.getUTCDate();
	        }

	        // Default to current date.
	        // * if no year, month, day of month are given, default to today
	        // * if day of month is given, default month and year
	        // * if month is given, default only year
	        // * if year is given, don't default anything
	        for (i = 0; i < 3 && config._a[i] == null; ++i) {
	            config._a[i] = input[i] = currentDate[i];
	        }

	        // Zero out whatever was not defaulted, including time
	        for (; i < 7; i++) {
	            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
	        }

	        // Check for 24:00:00.000
	        if (config._a[HOUR] === 24 &&
	                config._a[MINUTE] === 0 &&
	                config._a[SECOND] === 0 &&
	                config._a[MILLISECOND] === 0) {
	            config._nextDay = true;
	            config._a[HOUR] = 0;
	        }

	        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
	        // Apply timezone offset from input. The actual utcOffset can be changed
	        // with parseZone.
	        if (config._tzm != null) {
	            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
	        }

	        if (config._nextDay) {
	            config._a[HOUR] = 24;
	        }
	    }

	    function dayOfYearFromWeekInfo(config) {
	        var w, weekYear, week, weekday, dow, doy, temp;

	        w = config._w;
	        if (w.GG != null || w.W != null || w.E != null) {
	            dow = 1;
	            doy = 4;

	            // TODO: We need to take the current isoWeekYear, but that depends on
	            // how we interpret now (local, utc, fixed offset). So create
	            // a now version of current config (take local/utc/offset flags, and
	            // create now).
	            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(local__createLocal(), 1, 4).year);
	            week = defaults(w.W, 1);
	            weekday = defaults(w.E, 1);
	        } else {
	            dow = config._locale._week.dow;
	            doy = config._locale._week.doy;

	            weekYear = defaults(w.gg, config._a[YEAR], weekOfYear(local__createLocal(), dow, doy).year);
	            week = defaults(w.w, 1);

	            if (w.d != null) {
	                // weekday -- low day numbers are considered next week
	                weekday = w.d;
	                if (weekday < dow) {
	                    ++week;
	                }
	            } else if (w.e != null) {
	                // local weekday -- counting starts from begining of week
	                weekday = w.e + dow;
	            } else {
	                // default to begining of week
	                weekday = dow;
	            }
	        }
	        temp = dayOfYearFromWeeks(weekYear, week, weekday, doy, dow);

	        config._a[YEAR] = temp.year;
	        config._dayOfYear = temp.dayOfYear;
	    }

	    utils_hooks__hooks.ISO_8601 = function () {};

	    // date from string and format string
	    function configFromStringAndFormat(config) {
	        // TODO: Move this to another part of the creation flow to prevent circular deps
	        if (config._f === utils_hooks__hooks.ISO_8601) {
	            configFromISO(config);
	            return;
	        }

	        config._a = [];
	        getParsingFlags(config).empty = true;

	        // This array is used to make a Date, either with `new Date` or `Date.UTC`
	        var string = '' + config._i,
	            i, parsedInput, tokens, token, skipped,
	            stringLength = string.length,
	            totalParsedInputLength = 0;

	        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

	        for (i = 0; i < tokens.length; i++) {
	            token = tokens[i];
	            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
	            if (parsedInput) {
	                skipped = string.substr(0, string.indexOf(parsedInput));
	                if (skipped.length > 0) {
	                    getParsingFlags(config).unusedInput.push(skipped);
	                }
	                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
	                totalParsedInputLength += parsedInput.length;
	            }
	            // don't parse if it's not a known token
	            if (formatTokenFunctions[token]) {
	                if (parsedInput) {
	                    getParsingFlags(config).empty = false;
	                }
	                else {
	                    getParsingFlags(config).unusedTokens.push(token);
	                }
	                addTimeToArrayFromToken(token, parsedInput, config);
	            }
	            else if (config._strict && !parsedInput) {
	                getParsingFlags(config).unusedTokens.push(token);
	            }
	        }

	        // add remaining unparsed input length to the string
	        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
	        if (string.length > 0) {
	            getParsingFlags(config).unusedInput.push(string);
	        }

	        // clear _12h flag if hour is <= 12
	        if (getParsingFlags(config).bigHour === true &&
	                config._a[HOUR] <= 12 &&
	                config._a[HOUR] > 0) {
	            getParsingFlags(config).bigHour = undefined;
	        }
	        // handle meridiem
	        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

	        configFromArray(config);
	        checkOverflow(config);
	    }


	    function meridiemFixWrap (locale, hour, meridiem) {
	        var isPm;

	        if (meridiem == null) {
	            // nothing to do
	            return hour;
	        }
	        if (locale.meridiemHour != null) {
	            return locale.meridiemHour(hour, meridiem);
	        } else if (locale.isPM != null) {
	            // Fallback
	            isPm = locale.isPM(meridiem);
	            if (isPm && hour < 12) {
	                hour += 12;
	            }
	            if (!isPm && hour === 12) {
	                hour = 0;
	            }
	            return hour;
	        } else {
	            // this is not supposed to happen
	            return hour;
	        }
	    }

	    function configFromStringAndArray(config) {
	        var tempConfig,
	            bestMoment,

	            scoreToBeat,
	            i,
	            currentScore;

	        if (config._f.length === 0) {
	            getParsingFlags(config).invalidFormat = true;
	            config._d = new Date(NaN);
	            return;
	        }

	        for (i = 0; i < config._f.length; i++) {
	            currentScore = 0;
	            tempConfig = copyConfig({}, config);
	            if (config._useUTC != null) {
	                tempConfig._useUTC = config._useUTC;
	            }
	            tempConfig._f = config._f[i];
	            configFromStringAndFormat(tempConfig);

	            if (!valid__isValid(tempConfig)) {
	                continue;
	            }

	            // if there is any input that was not parsed add a penalty for that format
	            currentScore += getParsingFlags(tempConfig).charsLeftOver;

	            //or tokens
	            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

	            getParsingFlags(tempConfig).score = currentScore;

	            if (scoreToBeat == null || currentScore < scoreToBeat) {
	                scoreToBeat = currentScore;
	                bestMoment = tempConfig;
	            }
	        }

	        extend(config, bestMoment || tempConfig);
	    }

	    function configFromObject(config) {
	        if (config._d) {
	            return;
	        }

	        var i = normalizeObjectUnits(config._i);
	        config._a = [i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond];

	        configFromArray(config);
	    }

	    function createFromConfig (config) {
	        var res = new Moment(checkOverflow(prepareConfig(config)));
	        if (res._nextDay) {
	            // Adding is smart enough around DST
	            res.add(1, 'd');
	            res._nextDay = undefined;
	        }

	        return res;
	    }

	    function prepareConfig (config) {
	        var input = config._i,
	            format = config._f;

	        config._locale = config._locale || locale_locales__getLocale(config._l);

	        if (input === null || (format === undefined && input === '')) {
	            return valid__createInvalid({nullInput: true});
	        }

	        if (typeof input === 'string') {
	            config._i = input = config._locale.preparse(input);
	        }

	        if (isMoment(input)) {
	            return new Moment(checkOverflow(input));
	        } else if (isArray(format)) {
	            configFromStringAndArray(config);
	        } else if (format) {
	            configFromStringAndFormat(config);
	        } else if (isDate(input)) {
	            config._d = input;
	        } else {
	            configFromInput(config);
	        }

	        return config;
	    }

	    function configFromInput(config) {
	        var input = config._i;
	        if (input === undefined) {
	            config._d = new Date();
	        } else if (isDate(input)) {
	            config._d = new Date(+input);
	        } else if (typeof input === 'string') {
	            configFromString(config);
	        } else if (isArray(input)) {
	            config._a = map(input.slice(0), function (obj) {
	                return parseInt(obj, 10);
	            });
	            configFromArray(config);
	        } else if (typeof(input) === 'object') {
	            configFromObject(config);
	        } else if (typeof(input) === 'number') {
	            // from milliseconds
	            config._d = new Date(input);
	        } else {
	            utils_hooks__hooks.createFromInputFallback(config);
	        }
	    }

	    function createLocalOrUTC (input, format, locale, strict, isUTC) {
	        var c = {};

	        if (typeof(locale) === 'boolean') {
	            strict = locale;
	            locale = undefined;
	        }
	        // object construction must be done this way.
	        // https://github.com/moment/moment/issues/1423
	        c._isAMomentObject = true;
	        c._useUTC = c._isUTC = isUTC;
	        c._l = locale;
	        c._i = input;
	        c._f = format;
	        c._strict = strict;

	        return createFromConfig(c);
	    }

	    function local__createLocal (input, format, locale, strict) {
	        return createLocalOrUTC(input, format, locale, strict, false);
	    }

	    var prototypeMin = deprecate(
	         'moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548',
	         function () {
	             var other = local__createLocal.apply(null, arguments);
	             return other < this ? this : other;
	         }
	     );

	    var prototypeMax = deprecate(
	        'moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548',
	        function () {
	            var other = local__createLocal.apply(null, arguments);
	            return other > this ? this : other;
	        }
	    );

	    // Pick a moment m from moments so that m[fn](other) is true for all
	    // other. This relies on the function fn to be transitive.
	    //
	    // moments should either be an array of moment objects or an array, whose
	    // first element is an array of moment objects.
	    function pickBy(fn, moments) {
	        var res, i;
	        if (moments.length === 1 && isArray(moments[0])) {
	            moments = moments[0];
	        }
	        if (!moments.length) {
	            return local__createLocal();
	        }
	        res = moments[0];
	        for (i = 1; i < moments.length; ++i) {
	            if (!moments[i].isValid() || moments[i][fn](res)) {
	                res = moments[i];
	            }
	        }
	        return res;
	    }

	    // TODO: Use [].sort instead?
	    function min () {
	        var args = [].slice.call(arguments, 0);

	        return pickBy('isBefore', args);
	    }

	    function max () {
	        var args = [].slice.call(arguments, 0);

	        return pickBy('isAfter', args);
	    }

	    function Duration (duration) {
	        var normalizedInput = normalizeObjectUnits(duration),
	            years = normalizedInput.year || 0,
	            quarters = normalizedInput.quarter || 0,
	            months = normalizedInput.month || 0,
	            weeks = normalizedInput.week || 0,
	            days = normalizedInput.day || 0,
	            hours = normalizedInput.hour || 0,
	            minutes = normalizedInput.minute || 0,
	            seconds = normalizedInput.second || 0,
	            milliseconds = normalizedInput.millisecond || 0;

	        // representation for dateAddRemove
	        this._milliseconds = +milliseconds +
	            seconds * 1e3 + // 1000
	            minutes * 6e4 + // 1000 * 60
	            hours * 36e5; // 1000 * 60 * 60
	        // Because of dateAddRemove treats 24 hours as different from a
	        // day when working around DST, we need to store them separately
	        this._days = +days +
	            weeks * 7;
	        // It is impossible translate months into days without knowing
	        // which months you are are talking about, so we have to store
	        // it separately.
	        this._months = +months +
	            quarters * 3 +
	            years * 12;

	        this._data = {};

	        this._locale = locale_locales__getLocale();

	        this._bubble();
	    }

	    function isDuration (obj) {
	        return obj instanceof Duration;
	    }

	    function offset (token, separator) {
	        addFormatToken(token, 0, 0, function () {
	            var offset = this.utcOffset();
	            var sign = '+';
	            if (offset < 0) {
	                offset = -offset;
	                sign = '-';
	            }
	            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
	        });
	    }

	    offset('Z', ':');
	    offset('ZZ', '');

	    // PARSING

	    addRegexToken('Z',  matchOffset);
	    addRegexToken('ZZ', matchOffset);
	    addParseToken(['Z', 'ZZ'], function (input, array, config) {
	        config._useUTC = true;
	        config._tzm = offsetFromString(input);
	    });

	    // HELPERS

	    // timezone chunker
	    // '+10:00' > ['10',  '00']
	    // '-1530'  > ['-15', '30']
	    var chunkOffset = /([\+\-]|\d\d)/gi;

	    function offsetFromString(string) {
	        var matches = ((string || '').match(matchOffset) || []);
	        var chunk   = matches[matches.length - 1] || [];
	        var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
	        var minutes = +(parts[1] * 60) + toInt(parts[2]);

	        return parts[0] === '+' ? minutes : -minutes;
	    }

	    // Return a moment from input, that is local/utc/zone equivalent to model.
	    function cloneWithOffset(input, model) {
	        var res, diff;
	        if (model._isUTC) {
	            res = model.clone();
	            diff = (isMoment(input) || isDate(input) ? +input : +local__createLocal(input)) - (+res);
	            // Use low-level api, because this fn is low-level api.
	            res._d.setTime(+res._d + diff);
	            utils_hooks__hooks.updateOffset(res, false);
	            return res;
	        } else {
	            return local__createLocal(input).local();
	        }
	    }

	    function getDateOffset (m) {
	        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
	        // https://github.com/moment/moment/pull/1871
	        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
	    }

	    // HOOKS

	    // This function will be called whenever a moment is mutated.
	    // It is intended to keep the offset in sync with the timezone.
	    utils_hooks__hooks.updateOffset = function () {};

	    // MOMENTS

	    // keepLocalTime = true means only change the timezone, without
	    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
	    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
	    // +0200, so we adjust the time as needed, to be valid.
	    //
	    // Keeping the time actually adds/subtracts (one hour)
	    // from the actual represented time. That is why we call updateOffset
	    // a second time. In case it wants us to change the offset again
	    // _changeInProgress == true case, then we have to adjust, because
	    // there is no such time in the given timezone.
	    function getSetOffset (input, keepLocalTime) {
	        var offset = this._offset || 0,
	            localAdjust;
	        if (input != null) {
	            if (typeof input === 'string') {
	                input = offsetFromString(input);
	            }
	            if (Math.abs(input) < 16) {
	                input = input * 60;
	            }
	            if (!this._isUTC && keepLocalTime) {
	                localAdjust = getDateOffset(this);
	            }
	            this._offset = input;
	            this._isUTC = true;
	            if (localAdjust != null) {
	                this.add(localAdjust, 'm');
	            }
	            if (offset !== input) {
	                if (!keepLocalTime || this._changeInProgress) {
	                    add_subtract__addSubtract(this, create__createDuration(input - offset, 'm'), 1, false);
	                } else if (!this._changeInProgress) {
	                    this._changeInProgress = true;
	                    utils_hooks__hooks.updateOffset(this, true);
	                    this._changeInProgress = null;
	                }
	            }
	            return this;
	        } else {
	            return this._isUTC ? offset : getDateOffset(this);
	        }
	    }

	    function getSetZone (input, keepLocalTime) {
	        if (input != null) {
	            if (typeof input !== 'string') {
	                input = -input;
	            }

	            this.utcOffset(input, keepLocalTime);

	            return this;
	        } else {
	            return -this.utcOffset();
	        }
	    }

	    function setOffsetToUTC (keepLocalTime) {
	        return this.utcOffset(0, keepLocalTime);
	    }

	    function setOffsetToLocal (keepLocalTime) {
	        if (this._isUTC) {
	            this.utcOffset(0, keepLocalTime);
	            this._isUTC = false;

	            if (keepLocalTime) {
	                this.subtract(getDateOffset(this), 'm');
	            }
	        }
	        return this;
	    }

	    function setOffsetToParsedOffset () {
	        if (this._tzm) {
	            this.utcOffset(this._tzm);
	        } else if (typeof this._i === 'string') {
	            this.utcOffset(offsetFromString(this._i));
	        }
	        return this;
	    }

	    function hasAlignedHourOffset (input) {
	        input = input ? local__createLocal(input).utcOffset() : 0;

	        return (this.utcOffset() - input) % 60 === 0;
	    }

	    function isDaylightSavingTime () {
	        return (
	            this.utcOffset() > this.clone().month(0).utcOffset() ||
	            this.utcOffset() > this.clone().month(5).utcOffset()
	        );
	    }

	    function isDaylightSavingTimeShifted () {
	        if (typeof this._isDSTShifted !== 'undefined') {
	            return this._isDSTShifted;
	        }

	        var c = {};

	        copyConfig(c, this);
	        c = prepareConfig(c);

	        if (c._a) {
	            var other = c._isUTC ? create_utc__createUTC(c._a) : local__createLocal(c._a);
	            this._isDSTShifted = this.isValid() &&
	                compareArrays(c._a, other.toArray()) > 0;
	        } else {
	            this._isDSTShifted = false;
	        }

	        return this._isDSTShifted;
	    }

	    function isLocal () {
	        return !this._isUTC;
	    }

	    function isUtcOffset () {
	        return this._isUTC;
	    }

	    function isUtc () {
	        return this._isUTC && this._offset === 0;
	    }

	    var aspNetRegex = /(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/;

	    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
	    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
	    var create__isoRegex = /^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/;

	    function create__createDuration (input, key) {
	        var duration = input,
	            // matching against regexp is expensive, do it on demand
	            match = null,
	            sign,
	            ret,
	            diffRes;

	        if (isDuration(input)) {
	            duration = {
	                ms : input._milliseconds,
	                d  : input._days,
	                M  : input._months
	            };
	        } else if (typeof input === 'number') {
	            duration = {};
	            if (key) {
	                duration[key] = input;
	            } else {
	                duration.milliseconds = input;
	            }
	        } else if (!!(match = aspNetRegex.exec(input))) {
	            sign = (match[1] === '-') ? -1 : 1;
	            duration = {
	                y  : 0,
	                d  : toInt(match[DATE])        * sign,
	                h  : toInt(match[HOUR])        * sign,
	                m  : toInt(match[MINUTE])      * sign,
	                s  : toInt(match[SECOND])      * sign,
	                ms : toInt(match[MILLISECOND]) * sign
	            };
	        } else if (!!(match = create__isoRegex.exec(input))) {
	            sign = (match[1] === '-') ? -1 : 1;
	            duration = {
	                y : parseIso(match[2], sign),
	                M : parseIso(match[3], sign),
	                d : parseIso(match[4], sign),
	                h : parseIso(match[5], sign),
	                m : parseIso(match[6], sign),
	                s : parseIso(match[7], sign),
	                w : parseIso(match[8], sign)
	            };
	        } else if (duration == null) {// checks for null or undefined
	            duration = {};
	        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
	            diffRes = momentsDifference(local__createLocal(duration.from), local__createLocal(duration.to));

	            duration = {};
	            duration.ms = diffRes.milliseconds;
	            duration.M = diffRes.months;
	        }

	        ret = new Duration(duration);

	        if (isDuration(input) && hasOwnProp(input, '_locale')) {
	            ret._locale = input._locale;
	        }

	        return ret;
	    }

	    create__createDuration.fn = Duration.prototype;

	    function parseIso (inp, sign) {
	        // We'd normally use ~~inp for this, but unfortunately it also
	        // converts floats to ints.
	        // inp may be undefined, so careful calling replace on it.
	        var res = inp && parseFloat(inp.replace(',', '.'));
	        // apply sign while we're at it
	        return (isNaN(res) ? 0 : res) * sign;
	    }

	    function positiveMomentsDifference(base, other) {
	        var res = {milliseconds: 0, months: 0};

	        res.months = other.month() - base.month() +
	            (other.year() - base.year()) * 12;
	        if (base.clone().add(res.months, 'M').isAfter(other)) {
	            --res.months;
	        }

	        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

	        return res;
	    }

	    function momentsDifference(base, other) {
	        var res;
	        other = cloneWithOffset(other, base);
	        if (base.isBefore(other)) {
	            res = positiveMomentsDifference(base, other);
	        } else {
	            res = positiveMomentsDifference(other, base);
	            res.milliseconds = -res.milliseconds;
	            res.months = -res.months;
	        }

	        return res;
	    }

	    function createAdder(direction, name) {
	        return function (val, period) {
	            var dur, tmp;
	            //invert the arguments, but complain about it
	            if (period !== null && !isNaN(+period)) {
	                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period).');
	                tmp = val; val = period; period = tmp;
	            }

	            val = typeof val === 'string' ? +val : val;
	            dur = create__createDuration(val, period);
	            add_subtract__addSubtract(this, dur, direction);
	            return this;
	        };
	    }

	    function add_subtract__addSubtract (mom, duration, isAdding, updateOffset) {
	        var milliseconds = duration._milliseconds,
	            days = duration._days,
	            months = duration._months;
	        updateOffset = updateOffset == null ? true : updateOffset;

	        if (milliseconds) {
	            mom._d.setTime(+mom._d + milliseconds * isAdding);
	        }
	        if (days) {
	            get_set__set(mom, 'Date', get_set__get(mom, 'Date') + days * isAdding);
	        }
	        if (months) {
	            setMonth(mom, get_set__get(mom, 'Month') + months * isAdding);
	        }
	        if (updateOffset) {
	            utils_hooks__hooks.updateOffset(mom, days || months);
	        }
	    }

	    var add_subtract__add      = createAdder(1, 'add');
	    var add_subtract__subtract = createAdder(-1, 'subtract');

	    function moment_calendar__calendar (time, formats) {
	        // We want to compare the start of today, vs this.
	        // Getting start-of-today depends on whether we're local/utc/offset or not.
	        var now = time || local__createLocal(),
	            sod = cloneWithOffset(now, this).startOf('day'),
	            diff = this.diff(sod, 'days', true),
	            format = diff < -6 ? 'sameElse' :
	                diff < -1 ? 'lastWeek' :
	                diff < 0 ? 'lastDay' :
	                diff < 1 ? 'sameDay' :
	                diff < 2 ? 'nextDay' :
	                diff < 7 ? 'nextWeek' : 'sameElse';
	        return this.format(formats && formats[format] || this.localeData().calendar(format, this, local__createLocal(now)));
	    }

	    function clone () {
	        return new Moment(this);
	    }

	    function isAfter (input, units) {
	        var inputMs;
	        units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');
	        if (units === 'millisecond') {
	            input = isMoment(input) ? input : local__createLocal(input);
	            return +this > +input;
	        } else {
	            inputMs = isMoment(input) ? +input : +local__createLocal(input);
	            return inputMs < +this.clone().startOf(units);
	        }
	    }

	    function isBefore (input, units) {
	        var inputMs;
	        units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');
	        if (units === 'millisecond') {
	            input = isMoment(input) ? input : local__createLocal(input);
	            return +this < +input;
	        } else {
	            inputMs = isMoment(input) ? +input : +local__createLocal(input);
	            return +this.clone().endOf(units) < inputMs;
	        }
	    }

	    function isBetween (from, to, units) {
	        return this.isAfter(from, units) && this.isBefore(to, units);
	    }

	    function isSame (input, units) {
	        var inputMs;
	        units = normalizeUnits(units || 'millisecond');
	        if (units === 'millisecond') {
	            input = isMoment(input) ? input : local__createLocal(input);
	            return +this === +input;
	        } else {
	            inputMs = +local__createLocal(input);
	            return +(this.clone().startOf(units)) <= inputMs && inputMs <= +(this.clone().endOf(units));
	        }
	    }

	    function diff (input, units, asFloat) {
	        var that = cloneWithOffset(input, this),
	            zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4,
	            delta, output;

	        units = normalizeUnits(units);

	        if (units === 'year' || units === 'month' || units === 'quarter') {
	            output = monthDiff(this, that);
	            if (units === 'quarter') {
	                output = output / 3;
	            } else if (units === 'year') {
	                output = output / 12;
	            }
	        } else {
	            delta = this - that;
	            output = units === 'second' ? delta / 1e3 : // 1000
	                units === 'minute' ? delta / 6e4 : // 1000 * 60
	                units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60
	                units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
	                units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
	                delta;
	        }
	        return asFloat ? output : absFloor(output);
	    }

	    function monthDiff (a, b) {
	        // difference in months
	        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
	            // b is in (anchor - 1 month, anchor + 1 month)
	            anchor = a.clone().add(wholeMonthDiff, 'months'),
	            anchor2, adjust;

	        if (b - anchor < 0) {
	            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
	            // linear across the month
	            adjust = (b - anchor) / (anchor - anchor2);
	        } else {
	            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
	            // linear across the month
	            adjust = (b - anchor) / (anchor2 - anchor);
	        }

	        return -(wholeMonthDiff + adjust);
	    }

	    utils_hooks__hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';

	    function toString () {
	        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
	    }

	    function moment_format__toISOString () {
	        var m = this.clone().utc();
	        if (0 < m.year() && m.year() <= 9999) {
	            if ('function' === typeof Date.prototype.toISOString) {
	                // native implementation is ~50x faster, use it when we can
	                return this.toDate().toISOString();
	            } else {
	                return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
	            }
	        } else {
	            return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
	        }
	    }

	    function format (inputString) {
	        var output = formatMoment(this, inputString || utils_hooks__hooks.defaultFormat);
	        return this.localeData().postformat(output);
	    }

	    function from (time, withoutSuffix) {
	        if (!this.isValid()) {
	            return this.localeData().invalidDate();
	        }
	        return create__createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
	    }

	    function fromNow (withoutSuffix) {
	        return this.from(local__createLocal(), withoutSuffix);
	    }

	    function to (time, withoutSuffix) {
	        if (!this.isValid()) {
	            return this.localeData().invalidDate();
	        }
	        return create__createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
	    }

	    function toNow (withoutSuffix) {
	        return this.to(local__createLocal(), withoutSuffix);
	    }

	    function locale (key) {
	        var newLocaleData;

	        if (key === undefined) {
	            return this._locale._abbr;
	        } else {
	            newLocaleData = locale_locales__getLocale(key);
	            if (newLocaleData != null) {
	                this._locale = newLocaleData;
	            }
	            return this;
	        }
	    }

	    var lang = deprecate(
	        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
	        function (key) {
	            if (key === undefined) {
	                return this.localeData();
	            } else {
	                return this.locale(key);
	            }
	        }
	    );

	    function localeData () {
	        return this._locale;
	    }

	    function startOf (units) {
	        units = normalizeUnits(units);
	        // the following switch intentionally omits break keywords
	        // to utilize falling through the cases.
	        switch (units) {
	        case 'year':
	            this.month(0);
	            /* falls through */
	        case 'quarter':
	        case 'month':
	            this.date(1);
	            /* falls through */
	        case 'week':
	        case 'isoWeek':
	        case 'day':
	            this.hours(0);
	            /* falls through */
	        case 'hour':
	            this.minutes(0);
	            /* falls through */
	        case 'minute':
	            this.seconds(0);
	            /* falls through */
	        case 'second':
	            this.milliseconds(0);
	        }

	        // weeks are a special case
	        if (units === 'week') {
	            this.weekday(0);
	        }
	        if (units === 'isoWeek') {
	            this.isoWeekday(1);
	        }

	        // quarters are also special
	        if (units === 'quarter') {
	            this.month(Math.floor(this.month() / 3) * 3);
	        }

	        return this;
	    }

	    function endOf (units) {
	        units = normalizeUnits(units);
	        if (units === undefined || units === 'millisecond') {
	            return this;
	        }
	        return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
	    }

	    function to_type__valueOf () {
	        return +this._d - ((this._offset || 0) * 60000);
	    }

	    function unix () {
	        return Math.floor(+this / 1000);
	    }

	    function toDate () {
	        return this._offset ? new Date(+this) : this._d;
	    }

	    function toArray () {
	        var m = this;
	        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
	    }

	    function toObject () {
	        var m = this;
	        return {
	            years: m.year(),
	            months: m.month(),
	            date: m.date(),
	            hours: m.hours(),
	            minutes: m.minutes(),
	            seconds: m.seconds(),
	            milliseconds: m.milliseconds()
	        };
	    }

	    function moment_valid__isValid () {
	        return valid__isValid(this);
	    }

	    function parsingFlags () {
	        return extend({}, getParsingFlags(this));
	    }

	    function invalidAt () {
	        return getParsingFlags(this).overflow;
	    }

	    addFormatToken(0, ['gg', 2], 0, function () {
	        return this.weekYear() % 100;
	    });

	    addFormatToken(0, ['GG', 2], 0, function () {
	        return this.isoWeekYear() % 100;
	    });

	    function addWeekYearFormatToken (token, getter) {
	        addFormatToken(0, [token, token.length], 0, getter);
	    }

	    addWeekYearFormatToken('gggg',     'weekYear');
	    addWeekYearFormatToken('ggggg',    'weekYear');
	    addWeekYearFormatToken('GGGG',  'isoWeekYear');
	    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

	    // ALIASES

	    addUnitAlias('weekYear', 'gg');
	    addUnitAlias('isoWeekYear', 'GG');

	    // PARSING

	    addRegexToken('G',      matchSigned);
	    addRegexToken('g',      matchSigned);
	    addRegexToken('GG',     match1to2, match2);
	    addRegexToken('gg',     match1to2, match2);
	    addRegexToken('GGGG',   match1to4, match4);
	    addRegexToken('gggg',   match1to4, match4);
	    addRegexToken('GGGGG',  match1to6, match6);
	    addRegexToken('ggggg',  match1to6, match6);

	    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
	        week[token.substr(0, 2)] = toInt(input);
	    });

	    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
	        week[token] = utils_hooks__hooks.parseTwoDigitYear(input);
	    });

	    // HELPERS

	    function weeksInYear(year, dow, doy) {
	        return weekOfYear(local__createLocal([year, 11, 31 + dow - doy]), dow, doy).week;
	    }

	    // MOMENTS

	    function getSetWeekYear (input) {
	        var year = weekOfYear(this, this.localeData()._week.dow, this.localeData()._week.doy).year;
	        return input == null ? year : this.add((input - year), 'y');
	    }

	    function getSetISOWeekYear (input) {
	        var year = weekOfYear(this, 1, 4).year;
	        return input == null ? year : this.add((input - year), 'y');
	    }

	    function getISOWeeksInYear () {
	        return weeksInYear(this.year(), 1, 4);
	    }

	    function getWeeksInYear () {
	        var weekInfo = this.localeData()._week;
	        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
	    }

	    addFormatToken('Q', 0, 0, 'quarter');

	    // ALIASES

	    addUnitAlias('quarter', 'Q');

	    // PARSING

	    addRegexToken('Q', match1);
	    addParseToken('Q', function (input, array) {
	        array[MONTH] = (toInt(input) - 1) * 3;
	    });

	    // MOMENTS

	    function getSetQuarter (input) {
	        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
	    }

	    addFormatToken('D', ['DD', 2], 'Do', 'date');

	    // ALIASES

	    addUnitAlias('date', 'D');

	    // PARSING

	    addRegexToken('D',  match1to2);
	    addRegexToken('DD', match1to2, match2);
	    addRegexToken('Do', function (isStrict, locale) {
	        return isStrict ? locale._ordinalParse : locale._ordinalParseLenient;
	    });

	    addParseToken(['D', 'DD'], DATE);
	    addParseToken('Do', function (input, array) {
	        array[DATE] = toInt(input.match(match1to2)[0], 10);
	    });

	    // MOMENTS

	    var getSetDayOfMonth = makeGetSet('Date', true);

	    addFormatToken('d', 0, 'do', 'day');

	    addFormatToken('dd', 0, 0, function (format) {
	        return this.localeData().weekdaysMin(this, format);
	    });

	    addFormatToken('ddd', 0, 0, function (format) {
	        return this.localeData().weekdaysShort(this, format);
	    });

	    addFormatToken('dddd', 0, 0, function (format) {
	        return this.localeData().weekdays(this, format);
	    });

	    addFormatToken('e', 0, 0, 'weekday');
	    addFormatToken('E', 0, 0, 'isoWeekday');

	    // ALIASES

	    addUnitAlias('day', 'd');
	    addUnitAlias('weekday', 'e');
	    addUnitAlias('isoWeekday', 'E');

	    // PARSING

	    addRegexToken('d',    match1to2);
	    addRegexToken('e',    match1to2);
	    addRegexToken('E',    match1to2);
	    addRegexToken('dd',   matchWord);
	    addRegexToken('ddd',  matchWord);
	    addRegexToken('dddd', matchWord);

	    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config) {
	        var weekday = config._locale.weekdaysParse(input);
	        // if we didn't get a weekday name, mark the date as invalid
	        if (weekday != null) {
	            week.d = weekday;
	        } else {
	            getParsingFlags(config).invalidWeekday = input;
	        }
	    });

	    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
	        week[token] = toInt(input);
	    });

	    // HELPERS

	    function parseWeekday(input, locale) {
	        if (typeof input !== 'string') {
	            return input;
	        }

	        if (!isNaN(input)) {
	            return parseInt(input, 10);
	        }

	        input = locale.weekdaysParse(input);
	        if (typeof input === 'number') {
	            return input;
	        }

	        return null;
	    }

	    // LOCALES

	    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
	    function localeWeekdays (m) {
	        return this._weekdays[m.day()];
	    }

	    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
	    function localeWeekdaysShort (m) {
	        return this._weekdaysShort[m.day()];
	    }

	    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
	    function localeWeekdaysMin (m) {
	        return this._weekdaysMin[m.day()];
	    }

	    function localeWeekdaysParse (weekdayName) {
	        var i, mom, regex;

	        this._weekdaysParse = this._weekdaysParse || [];

	        for (i = 0; i < 7; i++) {
	            // make the regex if we don't have it already
	            if (!this._weekdaysParse[i]) {
	                mom = local__createLocal([2000, 1]).day(i);
	                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
	                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
	            }
	            // test the regex
	            if (this._weekdaysParse[i].test(weekdayName)) {
	                return i;
	            }
	        }
	    }

	    // MOMENTS

	    function getSetDayOfWeek (input) {
	        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
	        if (input != null) {
	            input = parseWeekday(input, this.localeData());
	            return this.add(input - day, 'd');
	        } else {
	            return day;
	        }
	    }

	    function getSetLocaleDayOfWeek (input) {
	        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
	        return input == null ? weekday : this.add(input - weekday, 'd');
	    }

	    function getSetISODayOfWeek (input) {
	        // behaves the same as moment#day except
	        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
	        // as a setter, sunday should belong to the previous week.
	        return input == null ? this.day() || 7 : this.day(this.day() % 7 ? input : input - 7);
	    }

	    addFormatToken('H', ['HH', 2], 0, 'hour');
	    addFormatToken('h', ['hh', 2], 0, function () {
	        return this.hours() % 12 || 12;
	    });

	    function meridiem (token, lowercase) {
	        addFormatToken(token, 0, 0, function () {
	            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
	        });
	    }

	    meridiem('a', true);
	    meridiem('A', false);

	    // ALIASES

	    addUnitAlias('hour', 'h');

	    // PARSING

	    function matchMeridiem (isStrict, locale) {
	        return locale._meridiemParse;
	    }

	    addRegexToken('a',  matchMeridiem);
	    addRegexToken('A',  matchMeridiem);
	    addRegexToken('H',  match1to2);
	    addRegexToken('h',  match1to2);
	    addRegexToken('HH', match1to2, match2);
	    addRegexToken('hh', match1to2, match2);

	    addParseToken(['H', 'HH'], HOUR);
	    addParseToken(['a', 'A'], function (input, array, config) {
	        config._isPm = config._locale.isPM(input);
	        config._meridiem = input;
	    });
	    addParseToken(['h', 'hh'], function (input, array, config) {
	        array[HOUR] = toInt(input);
	        getParsingFlags(config).bigHour = true;
	    });

	    // LOCALES

	    function localeIsPM (input) {
	        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
	        // Using charAt should be more compatible.
	        return ((input + '').toLowerCase().charAt(0) === 'p');
	    }

	    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
	    function localeMeridiem (hours, minutes, isLower) {
	        if (hours > 11) {
	            return isLower ? 'pm' : 'PM';
	        } else {
	            return isLower ? 'am' : 'AM';
	        }
	    }


	    // MOMENTS

	    // Setting the hour should keep the time, because the user explicitly
	    // specified which hour he wants. So trying to maintain the same hour (in
	    // a new timezone) makes sense. Adding/subtracting hours does not follow
	    // this rule.
	    var getSetHour = makeGetSet('Hours', true);

	    addFormatToken('m', ['mm', 2], 0, 'minute');

	    // ALIASES

	    addUnitAlias('minute', 'm');

	    // PARSING

	    addRegexToken('m',  match1to2);
	    addRegexToken('mm', match1to2, match2);
	    addParseToken(['m', 'mm'], MINUTE);

	    // MOMENTS

	    var getSetMinute = makeGetSet('Minutes', false);

	    addFormatToken('s', ['ss', 2], 0, 'second');

	    // ALIASES

	    addUnitAlias('second', 's');

	    // PARSING

	    addRegexToken('s',  match1to2);
	    addRegexToken('ss', match1to2, match2);
	    addParseToken(['s', 'ss'], SECOND);

	    // MOMENTS

	    var getSetSecond = makeGetSet('Seconds', false);

	    addFormatToken('S', 0, 0, function () {
	        return ~~(this.millisecond() / 100);
	    });

	    addFormatToken(0, ['SS', 2], 0, function () {
	        return ~~(this.millisecond() / 10);
	    });

	    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
	    addFormatToken(0, ['SSSS', 4], 0, function () {
	        return this.millisecond() * 10;
	    });
	    addFormatToken(0, ['SSSSS', 5], 0, function () {
	        return this.millisecond() * 100;
	    });
	    addFormatToken(0, ['SSSSSS', 6], 0, function () {
	        return this.millisecond() * 1000;
	    });
	    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
	        return this.millisecond() * 10000;
	    });
	    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
	        return this.millisecond() * 100000;
	    });
	    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
	        return this.millisecond() * 1000000;
	    });


	    // ALIASES

	    addUnitAlias('millisecond', 'ms');

	    // PARSING

	    addRegexToken('S',    match1to3, match1);
	    addRegexToken('SS',   match1to3, match2);
	    addRegexToken('SSS',  match1to3, match3);

	    var token;
	    for (token = 'SSSS'; token.length <= 9; token += 'S') {
	        addRegexToken(token, matchUnsigned);
	    }

	    function parseMs(input, array) {
	        array[MILLISECOND] = toInt(('0.' + input) * 1000);
	    }

	    for (token = 'S'; token.length <= 9; token += 'S') {
	        addParseToken(token, parseMs);
	    }
	    // MOMENTS

	    var getSetMillisecond = makeGetSet('Milliseconds', false);

	    addFormatToken('z',  0, 0, 'zoneAbbr');
	    addFormatToken('zz', 0, 0, 'zoneName');

	    // MOMENTS

	    function getZoneAbbr () {
	        return this._isUTC ? 'UTC' : '';
	    }

	    function getZoneName () {
	        return this._isUTC ? 'Coordinated Universal Time' : '';
	    }

	    var momentPrototype__proto = Moment.prototype;

	    momentPrototype__proto.add          = add_subtract__add;
	    momentPrototype__proto.calendar     = moment_calendar__calendar;
	    momentPrototype__proto.clone        = clone;
	    momentPrototype__proto.diff         = diff;
	    momentPrototype__proto.endOf        = endOf;
	    momentPrototype__proto.format       = format;
	    momentPrototype__proto.from         = from;
	    momentPrototype__proto.fromNow      = fromNow;
	    momentPrototype__proto.to           = to;
	    momentPrototype__proto.toNow        = toNow;
	    momentPrototype__proto.get          = getSet;
	    momentPrototype__proto.invalidAt    = invalidAt;
	    momentPrototype__proto.isAfter      = isAfter;
	    momentPrototype__proto.isBefore     = isBefore;
	    momentPrototype__proto.isBetween    = isBetween;
	    momentPrototype__proto.isSame       = isSame;
	    momentPrototype__proto.isValid      = moment_valid__isValid;
	    momentPrototype__proto.lang         = lang;
	    momentPrototype__proto.locale       = locale;
	    momentPrototype__proto.localeData   = localeData;
	    momentPrototype__proto.max          = prototypeMax;
	    momentPrototype__proto.min          = prototypeMin;
	    momentPrototype__proto.parsingFlags = parsingFlags;
	    momentPrototype__proto.set          = getSet;
	    momentPrototype__proto.startOf      = startOf;
	    momentPrototype__proto.subtract     = add_subtract__subtract;
	    momentPrototype__proto.toArray      = toArray;
	    momentPrototype__proto.toObject     = toObject;
	    momentPrototype__proto.toDate       = toDate;
	    momentPrototype__proto.toISOString  = moment_format__toISOString;
	    momentPrototype__proto.toJSON       = moment_format__toISOString;
	    momentPrototype__proto.toString     = toString;
	    momentPrototype__proto.unix         = unix;
	    momentPrototype__proto.valueOf      = to_type__valueOf;

	    // Year
	    momentPrototype__proto.year       = getSetYear;
	    momentPrototype__proto.isLeapYear = getIsLeapYear;

	    // Week Year
	    momentPrototype__proto.weekYear    = getSetWeekYear;
	    momentPrototype__proto.isoWeekYear = getSetISOWeekYear;

	    // Quarter
	    momentPrototype__proto.quarter = momentPrototype__proto.quarters = getSetQuarter;

	    // Month
	    momentPrototype__proto.month       = getSetMonth;
	    momentPrototype__proto.daysInMonth = getDaysInMonth;

	    // Week
	    momentPrototype__proto.week           = momentPrototype__proto.weeks        = getSetWeek;
	    momentPrototype__proto.isoWeek        = momentPrototype__proto.isoWeeks     = getSetISOWeek;
	    momentPrototype__proto.weeksInYear    = getWeeksInYear;
	    momentPrototype__proto.isoWeeksInYear = getISOWeeksInYear;

	    // Day
	    momentPrototype__proto.date       = getSetDayOfMonth;
	    momentPrototype__proto.day        = momentPrototype__proto.days             = getSetDayOfWeek;
	    momentPrototype__proto.weekday    = getSetLocaleDayOfWeek;
	    momentPrototype__proto.isoWeekday = getSetISODayOfWeek;
	    momentPrototype__proto.dayOfYear  = getSetDayOfYear;

	    // Hour
	    momentPrototype__proto.hour = momentPrototype__proto.hours = getSetHour;

	    // Minute
	    momentPrototype__proto.minute = momentPrototype__proto.minutes = getSetMinute;

	    // Second
	    momentPrototype__proto.second = momentPrototype__proto.seconds = getSetSecond;

	    // Millisecond
	    momentPrototype__proto.millisecond = momentPrototype__proto.milliseconds = getSetMillisecond;

	    // Offset
	    momentPrototype__proto.utcOffset            = getSetOffset;
	    momentPrototype__proto.utc                  = setOffsetToUTC;
	    momentPrototype__proto.local                = setOffsetToLocal;
	    momentPrototype__proto.parseZone            = setOffsetToParsedOffset;
	    momentPrototype__proto.hasAlignedHourOffset = hasAlignedHourOffset;
	    momentPrototype__proto.isDST                = isDaylightSavingTime;
	    momentPrototype__proto.isDSTShifted         = isDaylightSavingTimeShifted;
	    momentPrototype__proto.isLocal              = isLocal;
	    momentPrototype__proto.isUtcOffset          = isUtcOffset;
	    momentPrototype__proto.isUtc                = isUtc;
	    momentPrototype__proto.isUTC                = isUtc;

	    // Timezone
	    momentPrototype__proto.zoneAbbr = getZoneAbbr;
	    momentPrototype__proto.zoneName = getZoneName;

	    // Deprecations
	    momentPrototype__proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
	    momentPrototype__proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
	    momentPrototype__proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
	    momentPrototype__proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779', getSetZone);

	    var momentPrototype = momentPrototype__proto;

	    function moment__createUnix (input) {
	        return local__createLocal(input * 1000);
	    }

	    function moment__createInZone () {
	        return local__createLocal.apply(null, arguments).parseZone();
	    }

	    var defaultCalendar = {
	        sameDay : '[Today at] LT',
	        nextDay : '[Tomorrow at] LT',
	        nextWeek : 'dddd [at] LT',
	        lastDay : '[Yesterday at] LT',
	        lastWeek : '[Last] dddd [at] LT',
	        sameElse : 'L'
	    };

	    function locale_calendar__calendar (key, mom, now) {
	        var output = this._calendar[key];
	        return typeof output === 'function' ? output.call(mom, now) : output;
	    }

	    var defaultLongDateFormat = {
	        LTS  : 'h:mm:ss A',
	        LT   : 'h:mm A',
	        L    : 'MM/DD/YYYY',
	        LL   : 'MMMM D, YYYY',
	        LLL  : 'MMMM D, YYYY h:mm A',
	        LLLL : 'dddd, MMMM D, YYYY h:mm A'
	    };

	    function longDateFormat (key) {
	        var format = this._longDateFormat[key],
	            formatUpper = this._longDateFormat[key.toUpperCase()];

	        if (format || !formatUpper) {
	            return format;
	        }

	        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
	            return val.slice(1);
	        });

	        return this._longDateFormat[key];
	    }

	    var defaultInvalidDate = 'Invalid date';

	    function invalidDate () {
	        return this._invalidDate;
	    }

	    var defaultOrdinal = '%d';
	    var defaultOrdinalParse = /\d{1,2}/;

	    function ordinal (number) {
	        return this._ordinal.replace('%d', number);
	    }

	    function preParsePostFormat (string) {
	        return string;
	    }

	    var defaultRelativeTime = {
	        future : 'in %s',
	        past   : '%s ago',
	        s  : 'a few seconds',
	        m  : 'a minute',
	        mm : '%d minutes',
	        h  : 'an hour',
	        hh : '%d hours',
	        d  : 'a day',
	        dd : '%d days',
	        M  : 'a month',
	        MM : '%d months',
	        y  : 'a year',
	        yy : '%d years'
	    };

	    function relative__relativeTime (number, withoutSuffix, string, isFuture) {
	        var output = this._relativeTime[string];
	        return (typeof output === 'function') ?
	            output(number, withoutSuffix, string, isFuture) :
	            output.replace(/%d/i, number);
	    }

	    function pastFuture (diff, output) {
	        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
	        return typeof format === 'function' ? format(output) : format.replace(/%s/i, output);
	    }

	    function locale_set__set (config) {
	        var prop, i;
	        for (i in config) {
	            prop = config[i];
	            if (typeof prop === 'function') {
	                this[i] = prop;
	            } else {
	                this['_' + i] = prop;
	            }
	        }
	        // Lenient ordinal parsing accepts just a number in addition to
	        // number + (possibly) stuff coming from _ordinalParseLenient.
	        this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + (/\d{1,2}/).source);
	    }

	    var prototype__proto = Locale.prototype;

	    prototype__proto._calendar       = defaultCalendar;
	    prototype__proto.calendar        = locale_calendar__calendar;
	    prototype__proto._longDateFormat = defaultLongDateFormat;
	    prototype__proto.longDateFormat  = longDateFormat;
	    prototype__proto._invalidDate    = defaultInvalidDate;
	    prototype__proto.invalidDate     = invalidDate;
	    prototype__proto._ordinal        = defaultOrdinal;
	    prototype__proto.ordinal         = ordinal;
	    prototype__proto._ordinalParse   = defaultOrdinalParse;
	    prototype__proto.preparse        = preParsePostFormat;
	    prototype__proto.postformat      = preParsePostFormat;
	    prototype__proto._relativeTime   = defaultRelativeTime;
	    prototype__proto.relativeTime    = relative__relativeTime;
	    prototype__proto.pastFuture      = pastFuture;
	    prototype__proto.set             = locale_set__set;

	    // Month
	    prototype__proto.months       =        localeMonths;
	    prototype__proto._months      = defaultLocaleMonths;
	    prototype__proto.monthsShort  =        localeMonthsShort;
	    prototype__proto._monthsShort = defaultLocaleMonthsShort;
	    prototype__proto.monthsParse  =        localeMonthsParse;

	    // Week
	    prototype__proto.week = localeWeek;
	    prototype__proto._week = defaultLocaleWeek;
	    prototype__proto.firstDayOfYear = localeFirstDayOfYear;
	    prototype__proto.firstDayOfWeek = localeFirstDayOfWeek;

	    // Day of Week
	    prototype__proto.weekdays       =        localeWeekdays;
	    prototype__proto._weekdays      = defaultLocaleWeekdays;
	    prototype__proto.weekdaysMin    =        localeWeekdaysMin;
	    prototype__proto._weekdaysMin   = defaultLocaleWeekdaysMin;
	    prototype__proto.weekdaysShort  =        localeWeekdaysShort;
	    prototype__proto._weekdaysShort = defaultLocaleWeekdaysShort;
	    prototype__proto.weekdaysParse  =        localeWeekdaysParse;

	    // Hours
	    prototype__proto.isPM = localeIsPM;
	    prototype__proto._meridiemParse = defaultLocaleMeridiemParse;
	    prototype__proto.meridiem = localeMeridiem;

	    function lists__get (format, index, field, setter) {
	        var locale = locale_locales__getLocale();
	        var utc = create_utc__createUTC().set(setter, index);
	        return locale[field](utc, format);
	    }

	    function list (format, index, field, count, setter) {
	        if (typeof format === 'number') {
	            index = format;
	            format = undefined;
	        }

	        format = format || '';

	        if (index != null) {
	            return lists__get(format, index, field, setter);
	        }

	        var i;
	        var out = [];
	        for (i = 0; i < count; i++) {
	            out[i] = lists__get(format, i, field, setter);
	        }
	        return out;
	    }

	    function lists__listMonths (format, index) {
	        return list(format, index, 'months', 12, 'month');
	    }

	    function lists__listMonthsShort (format, index) {
	        return list(format, index, 'monthsShort', 12, 'month');
	    }

	    function lists__listWeekdays (format, index) {
	        return list(format, index, 'weekdays', 7, 'day');
	    }

	    function lists__listWeekdaysShort (format, index) {
	        return list(format, index, 'weekdaysShort', 7, 'day');
	    }

	    function lists__listWeekdaysMin (format, index) {
	        return list(format, index, 'weekdaysMin', 7, 'day');
	    }

	    locale_locales__getSetGlobalLocale('en', {
	        ordinalParse: /\d{1,2}(th|st|nd|rd)/,
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (toInt(number % 100 / 10) === 1) ? 'th' :
	                (b === 1) ? 'st' :
	                (b === 2) ? 'nd' :
	                (b === 3) ? 'rd' : 'th';
	            return number + output;
	        }
	    });

	    // Side effect imports
	    utils_hooks__hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', locale_locales__getSetGlobalLocale);
	    utils_hooks__hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', locale_locales__getLocale);

	    var mathAbs = Math.abs;

	    function duration_abs__abs () {
	        var data           = this._data;

	        this._milliseconds = mathAbs(this._milliseconds);
	        this._days         = mathAbs(this._days);
	        this._months       = mathAbs(this._months);

	        data.milliseconds  = mathAbs(data.milliseconds);
	        data.seconds       = mathAbs(data.seconds);
	        data.minutes       = mathAbs(data.minutes);
	        data.hours         = mathAbs(data.hours);
	        data.months        = mathAbs(data.months);
	        data.years         = mathAbs(data.years);

	        return this;
	    }

	    function duration_add_subtract__addSubtract (duration, input, value, direction) {
	        var other = create__createDuration(input, value);

	        duration._milliseconds += direction * other._milliseconds;
	        duration._days         += direction * other._days;
	        duration._months       += direction * other._months;

	        return duration._bubble();
	    }

	    // supports only 2.0-style add(1, 's') or add(duration)
	    function duration_add_subtract__add (input, value) {
	        return duration_add_subtract__addSubtract(this, input, value, 1);
	    }

	    // supports only 2.0-style subtract(1, 's') or subtract(duration)
	    function duration_add_subtract__subtract (input, value) {
	        return duration_add_subtract__addSubtract(this, input, value, -1);
	    }

	    function absCeil (number) {
	        if (number < 0) {
	            return Math.floor(number);
	        } else {
	            return Math.ceil(number);
	        }
	    }

	    function bubble () {
	        var milliseconds = this._milliseconds;
	        var days         = this._days;
	        var months       = this._months;
	        var data         = this._data;
	        var seconds, minutes, hours, years, monthsFromDays;

	        // if we have a mix of positive and negative values, bubble down first
	        // check: https://github.com/moment/moment/issues/2166
	        if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
	                (milliseconds <= 0 && days <= 0 && months <= 0))) {
	            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
	            days = 0;
	            months = 0;
	        }

	        // The following code bubbles up values, see the tests for
	        // examples of what that means.
	        data.milliseconds = milliseconds % 1000;

	        seconds           = absFloor(milliseconds / 1000);
	        data.seconds      = seconds % 60;

	        minutes           = absFloor(seconds / 60);
	        data.minutes      = minutes % 60;

	        hours             = absFloor(minutes / 60);
	        data.hours        = hours % 24;

	        days += absFloor(hours / 24);

	        // convert days to months
	        monthsFromDays = absFloor(daysToMonths(days));
	        months += monthsFromDays;
	        days -= absCeil(monthsToDays(monthsFromDays));

	        // 12 months -> 1 year
	        years = absFloor(months / 12);
	        months %= 12;

	        data.days   = days;
	        data.months = months;
	        data.years  = years;

	        return this;
	    }

	    function daysToMonths (days) {
	        // 400 years have 146097 days (taking into account leap year rules)
	        // 400 years have 12 months === 4800
	        return days * 4800 / 146097;
	    }

	    function monthsToDays (months) {
	        // the reverse of daysToMonths
	        return months * 146097 / 4800;
	    }

	    function as (units) {
	        var days;
	        var months;
	        var milliseconds = this._milliseconds;

	        units = normalizeUnits(units);

	        if (units === 'month' || units === 'year') {
	            days   = this._days   + milliseconds / 864e5;
	            months = this._months + daysToMonths(days);
	            return units === 'month' ? months : months / 12;
	        } else {
	            // handle milliseconds separately because of floating point math errors (issue #1867)
	            days = this._days + Math.round(monthsToDays(this._months));
	            switch (units) {
	                case 'week'   : return days / 7     + milliseconds / 6048e5;
	                case 'day'    : return days         + milliseconds / 864e5;
	                case 'hour'   : return days * 24    + milliseconds / 36e5;
	                case 'minute' : return days * 1440  + milliseconds / 6e4;
	                case 'second' : return days * 86400 + milliseconds / 1000;
	                // Math.floor prevents floating point math errors here
	                case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
	                default: throw new Error('Unknown unit ' + units);
	            }
	        }
	    }

	    // TODO: Use this.as('ms')?
	    function duration_as__valueOf () {
	        return (
	            this._milliseconds +
	            this._days * 864e5 +
	            (this._months % 12) * 2592e6 +
	            toInt(this._months / 12) * 31536e6
	        );
	    }

	    function makeAs (alias) {
	        return function () {
	            return this.as(alias);
	        };
	    }

	    var asMilliseconds = makeAs('ms');
	    var asSeconds      = makeAs('s');
	    var asMinutes      = makeAs('m');
	    var asHours        = makeAs('h');
	    var asDays         = makeAs('d');
	    var asWeeks        = makeAs('w');
	    var asMonths       = makeAs('M');
	    var asYears        = makeAs('y');

	    function duration_get__get (units) {
	        units = normalizeUnits(units);
	        return this[units + 's']();
	    }

	    function makeGetter(name) {
	        return function () {
	            return this._data[name];
	        };
	    }

	    var milliseconds = makeGetter('milliseconds');
	    var seconds      = makeGetter('seconds');
	    var minutes      = makeGetter('minutes');
	    var hours        = makeGetter('hours');
	    var days         = makeGetter('days');
	    var months       = makeGetter('months');
	    var years        = makeGetter('years');

	    function weeks () {
	        return absFloor(this.days() / 7);
	    }

	    var round = Math.round;
	    var thresholds = {
	        s: 45,  // seconds to minute
	        m: 45,  // minutes to hour
	        h: 22,  // hours to day
	        d: 26,  // days to month
	        M: 11   // months to year
	    };

	    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
	    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
	        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
	    }

	    function duration_humanize__relativeTime (posNegDuration, withoutSuffix, locale) {
	        var duration = create__createDuration(posNegDuration).abs();
	        var seconds  = round(duration.as('s'));
	        var minutes  = round(duration.as('m'));
	        var hours    = round(duration.as('h'));
	        var days     = round(duration.as('d'));
	        var months   = round(duration.as('M'));
	        var years    = round(duration.as('y'));

	        var a = seconds < thresholds.s && ['s', seconds]  ||
	                minutes === 1          && ['m']           ||
	                minutes < thresholds.m && ['mm', minutes] ||
	                hours   === 1          && ['h']           ||
	                hours   < thresholds.h && ['hh', hours]   ||
	                days    === 1          && ['d']           ||
	                days    < thresholds.d && ['dd', days]    ||
	                months  === 1          && ['M']           ||
	                months  < thresholds.M && ['MM', months]  ||
	                years   === 1          && ['y']           || ['yy', years];

	        a[2] = withoutSuffix;
	        a[3] = +posNegDuration > 0;
	        a[4] = locale;
	        return substituteTimeAgo.apply(null, a);
	    }

	    // This function allows you to set a threshold for relative time strings
	    function duration_humanize__getSetRelativeTimeThreshold (threshold, limit) {
	        if (thresholds[threshold] === undefined) {
	            return false;
	        }
	        if (limit === undefined) {
	            return thresholds[threshold];
	        }
	        thresholds[threshold] = limit;
	        return true;
	    }

	    function humanize (withSuffix) {
	        var locale = this.localeData();
	        var output = duration_humanize__relativeTime(this, !withSuffix, locale);

	        if (withSuffix) {
	            output = locale.pastFuture(+this, output);
	        }

	        return locale.postformat(output);
	    }

	    var iso_string__abs = Math.abs;

	    function iso_string__toISOString() {
	        // for ISO strings we do not use the normal bubbling rules:
	        //  * milliseconds bubble up until they become hours
	        //  * days do not bubble at all
	        //  * months bubble up until they become years
	        // This is because there is no context-free conversion between hours and days
	        // (think of clock changes)
	        // and also not between days and months (28-31 days per month)
	        var seconds = iso_string__abs(this._milliseconds) / 1000;
	        var days         = iso_string__abs(this._days);
	        var months       = iso_string__abs(this._months);
	        var minutes, hours, years;

	        // 3600 seconds -> 60 minutes -> 1 hour
	        minutes           = absFloor(seconds / 60);
	        hours             = absFloor(minutes / 60);
	        seconds %= 60;
	        minutes %= 60;

	        // 12 months -> 1 year
	        years  = absFloor(months / 12);
	        months %= 12;


	        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
	        var Y = years;
	        var M = months;
	        var D = days;
	        var h = hours;
	        var m = minutes;
	        var s = seconds;
	        var total = this.asSeconds();

	        if (!total) {
	            // this is the same as C#'s (Noda) and python (isodate)...
	            // but not other JS (goog.date)
	            return 'P0D';
	        }

	        return (total < 0 ? '-' : '') +
	            'P' +
	            (Y ? Y + 'Y' : '') +
	            (M ? M + 'M' : '') +
	            (D ? D + 'D' : '') +
	            ((h || m || s) ? 'T' : '') +
	            (h ? h + 'H' : '') +
	            (m ? m + 'M' : '') +
	            (s ? s + 'S' : '');
	    }

	    var duration_prototype__proto = Duration.prototype;

	    duration_prototype__proto.abs            = duration_abs__abs;
	    duration_prototype__proto.add            = duration_add_subtract__add;
	    duration_prototype__proto.subtract       = duration_add_subtract__subtract;
	    duration_prototype__proto.as             = as;
	    duration_prototype__proto.asMilliseconds = asMilliseconds;
	    duration_prototype__proto.asSeconds      = asSeconds;
	    duration_prototype__proto.asMinutes      = asMinutes;
	    duration_prototype__proto.asHours        = asHours;
	    duration_prototype__proto.asDays         = asDays;
	    duration_prototype__proto.asWeeks        = asWeeks;
	    duration_prototype__proto.asMonths       = asMonths;
	    duration_prototype__proto.asYears        = asYears;
	    duration_prototype__proto.valueOf        = duration_as__valueOf;
	    duration_prototype__proto._bubble        = bubble;
	    duration_prototype__proto.get            = duration_get__get;
	    duration_prototype__proto.milliseconds   = milliseconds;
	    duration_prototype__proto.seconds        = seconds;
	    duration_prototype__proto.minutes        = minutes;
	    duration_prototype__proto.hours          = hours;
	    duration_prototype__proto.days           = days;
	    duration_prototype__proto.weeks          = weeks;
	    duration_prototype__proto.months         = months;
	    duration_prototype__proto.years          = years;
	    duration_prototype__proto.humanize       = humanize;
	    duration_prototype__proto.toISOString    = iso_string__toISOString;
	    duration_prototype__proto.toString       = iso_string__toISOString;
	    duration_prototype__proto.toJSON         = iso_string__toISOString;
	    duration_prototype__proto.locale         = locale;
	    duration_prototype__proto.localeData     = localeData;

	    // Deprecations
	    duration_prototype__proto.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', iso_string__toISOString);
	    duration_prototype__proto.lang = lang;

	    // Side effect imports

	    addFormatToken('X', 0, 0, 'unix');
	    addFormatToken('x', 0, 0, 'valueOf');

	    // PARSING

	    addRegexToken('x', matchSigned);
	    addRegexToken('X', matchTimestamp);
	    addParseToken('X', function (input, array, config) {
	        config._d = new Date(parseFloat(input, 10) * 1000);
	    });
	    addParseToken('x', function (input, array, config) {
	        config._d = new Date(toInt(input));
	    });

	    // Side effect imports


	    utils_hooks__hooks.version = '2.10.6';

	    setHookCallback(local__createLocal);

	    utils_hooks__hooks.fn                    = momentPrototype;
	    utils_hooks__hooks.min                   = min;
	    utils_hooks__hooks.max                   = max;
	    utils_hooks__hooks.utc                   = create_utc__createUTC;
	    utils_hooks__hooks.unix                  = moment__createUnix;
	    utils_hooks__hooks.months                = lists__listMonths;
	    utils_hooks__hooks.isDate                = isDate;
	    utils_hooks__hooks.locale                = locale_locales__getSetGlobalLocale;
	    utils_hooks__hooks.invalid               = valid__createInvalid;
	    utils_hooks__hooks.duration              = create__createDuration;
	    utils_hooks__hooks.isMoment              = isMoment;
	    utils_hooks__hooks.weekdays              = lists__listWeekdays;
	    utils_hooks__hooks.parseZone             = moment__createInZone;
	    utils_hooks__hooks.localeData            = locale_locales__getLocale;
	    utils_hooks__hooks.isDuration            = isDuration;
	    utils_hooks__hooks.monthsShort           = lists__listMonthsShort;
	    utils_hooks__hooks.weekdaysMin           = lists__listWeekdaysMin;
	    utils_hooks__hooks.defineLocale          = defineLocale;
	    utils_hooks__hooks.weekdaysShort         = lists__listWeekdaysShort;
	    utils_hooks__hooks.normalizeUnits        = normalizeUnits;
	    utils_hooks__hooks.relativeTimeThreshold = duration_humanize__getSetRelativeTimeThreshold;

	    var _moment = utils_hooks__hooks;

	    return _moment;

	}));
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(365)(module)))

/***/ },
/* 365 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 366 */,
/* 367 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : afrikaans (af)
	//! author : Werner Mollentze : https://github.com/wernerm

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var af = moment.defineLocale('af', {
	        months : 'Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember'.split('_'),
	        monthsShort : 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des'.split('_'),
	        weekdays : 'Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag'.split('_'),
	        weekdaysShort : 'Son_Maa_Din_Woe_Don_Vry_Sat'.split('_'),
	        weekdaysMin : 'So_Ma_Di_Wo_Do_Vr_Sa'.split('_'),
	        meridiemParse: /vm|nm/i,
	        isPM : function (input) {
	            return /^nm$/i.test(input);
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours < 12) {
	                return isLower ? 'vm' : 'VM';
	            } else {
	                return isLower ? 'nm' : 'NM';
	            }
	        },
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[Vandag om] LT',
	            nextDay : '[Môre om] LT',
	            nextWeek : 'dddd [om] LT',
	            lastDay : '[Gister om] LT',
	            lastWeek : '[Laas] dddd [om] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'oor %s',
	            past : '%s gelede',
	            s : '\'n paar sekondes',
	            m : '\'n minuut',
	            mm : '%d minute',
	            h : '\'n uur',
	            hh : '%d ure',
	            d : '\'n dag',
	            dd : '%d dae',
	            M : '\'n maand',
	            MM : '%d maande',
	            y : '\'n jaar',
	            yy : '%d jaar'
	        },
	        ordinalParse: /\d{1,2}(ste|de)/,
	        ordinal : function (number) {
	            return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de'); // Thanks to Joris Röling : https://github.com/jjupiter
	        },
	        week : {
	            dow : 1, // Maandag is die eerste dag van die week.
	            doy : 4  // Die week wat die 4de Januarie bevat is die eerste week van die jaar.
	        }
	    });

	    return af;

	}));

/***/ },
/* 368 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! Locale: Arabic (ar)
	//! Author: Abdel Said: https://github.com/abdelsaid
	//! Changes in months, weekdays: Ahmed Elkhatib
	//! Native plural forms: forabi https://github.com/forabi

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var symbolMap = {
	        '1': '١',
	        '2': '٢',
	        '3': '٣',
	        '4': '٤',
	        '5': '٥',
	        '6': '٦',
	        '7': '٧',
	        '8': '٨',
	        '9': '٩',
	        '0': '٠'
	    }, numberMap = {
	        '١': '1',
	        '٢': '2',
	        '٣': '3',
	        '٤': '4',
	        '٥': '5',
	        '٦': '6',
	        '٧': '7',
	        '٨': '8',
	        '٩': '9',
	        '٠': '0'
	    }, pluralForm = function (n) {
	        return n === 0 ? 0 : n === 1 ? 1 : n === 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5;
	    }, plurals = {
	        s : ['أقل من ثانية', 'ثانية واحدة', ['ثانيتان', 'ثانيتين'], '%d ثوان', '%d ثانية', '%d ثانية'],
	        m : ['أقل من دقيقة', 'دقيقة واحدة', ['دقيقتان', 'دقيقتين'], '%d دقائق', '%d دقيقة', '%d دقيقة'],
	        h : ['أقل من ساعة', 'ساعة واحدة', ['ساعتان', 'ساعتين'], '%d ساعات', '%d ساعة', '%d ساعة'],
	        d : ['أقل من يوم', 'يوم واحد', ['يومان', 'يومين'], '%d أيام', '%d يومًا', '%d يوم'],
	        M : ['أقل من شهر', 'شهر واحد', ['شهران', 'شهرين'], '%d أشهر', '%d شهرا', '%d شهر'],
	        y : ['أقل من عام', 'عام واحد', ['عامان', 'عامين'], '%d أعوام', '%d عامًا', '%d عام']
	    }, pluralize = function (u) {
	        return function (number, withoutSuffix, string, isFuture) {
	            var f = pluralForm(number),
	                str = plurals[u][pluralForm(number)];
	            if (f === 2) {
	                str = str[withoutSuffix ? 0 : 1];
	            }
	            return str.replace(/%d/i, number);
	        };
	    }, months = [
	        'كانون الثاني يناير',
	        'شباط فبراير',
	        'آذار مارس',
	        'نيسان أبريل',
	        'أيار مايو',
	        'حزيران يونيو',
	        'تموز يوليو',
	        'آب أغسطس',
	        'أيلول سبتمبر',
	        'تشرين الأول أكتوبر',
	        'تشرين الثاني نوفمبر',
	        'كانون الأول ديسمبر'
	    ];

	    var ar = moment.defineLocale('ar', {
	        months : months,
	        monthsShort : months,
	        weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	        weekdaysShort : 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
	        weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'D/\u200FM/\u200FYYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        meridiemParse: /ص|م/,
	        isPM : function (input) {
	            return 'م' === input;
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'ص';
	            } else {
	                return 'م';
	            }
	        },
	        calendar : {
	            sameDay: '[اليوم عند الساعة] LT',
	            nextDay: '[غدًا عند الساعة] LT',
	            nextWeek: 'dddd [عند الساعة] LT',
	            lastDay: '[أمس عند الساعة] LT',
	            lastWeek: 'dddd [عند الساعة] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'بعد %s',
	            past : 'منذ %s',
	            s : pluralize('s'),
	            m : pluralize('m'),
	            mm : pluralize('m'),
	            h : pluralize('h'),
	            hh : pluralize('h'),
	            d : pluralize('d'),
	            dd : pluralize('d'),
	            M : pluralize('M'),
	            MM : pluralize('M'),
	            y : pluralize('y'),
	            yy : pluralize('y')
	        },
	        preparse: function (string) {
	            return string.replace(/\u200f/g, '').replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
	                return numberMap[match];
	            }).replace(/،/g, ',');
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            }).replace(/,/g, '،');
	        },
	        week : {
	            dow : 6, // Saturday is the first day of the week.
	            doy : 12  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return ar;

	}));

/***/ },
/* 369 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Moroccan Arabic (ar-ma)
	//! author : ElFadili Yassine : https://github.com/ElFadiliY
	//! author : Abdel Said : https://github.com/abdelsaid

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var ar_ma = moment.defineLocale('ar-ma', {
	        months : 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
	        monthsShort : 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
	        weekdays : 'الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	        weekdaysShort : 'احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
	        weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[اليوم على الساعة] LT',
	            nextDay: '[غدا على الساعة] LT',
	            nextWeek: 'dddd [على الساعة] LT',
	            lastDay: '[أمس على الساعة] LT',
	            lastWeek: 'dddd [على الساعة] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'في %s',
	            past : 'منذ %s',
	            s : 'ثوان',
	            m : 'دقيقة',
	            mm : '%d دقائق',
	            h : 'ساعة',
	            hh : '%d ساعات',
	            d : 'يوم',
	            dd : '%d أيام',
	            M : 'شهر',
	            MM : '%d أشهر',
	            y : 'سنة',
	            yy : '%d سنوات'
	        },
	        week : {
	            dow : 6, // Saturday is the first day of the week.
	            doy : 12  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return ar_ma;

	}));

/***/ },
/* 370 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Arabic Saudi Arabia (ar-sa)
	//! author : Suhail Alkowaileet : https://github.com/xsoh

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var symbolMap = {
	        '1': '١',
	        '2': '٢',
	        '3': '٣',
	        '4': '٤',
	        '5': '٥',
	        '6': '٦',
	        '7': '٧',
	        '8': '٨',
	        '9': '٩',
	        '0': '٠'
	    }, numberMap = {
	        '١': '1',
	        '٢': '2',
	        '٣': '3',
	        '٤': '4',
	        '٥': '5',
	        '٦': '6',
	        '٧': '7',
	        '٨': '8',
	        '٩': '9',
	        '٠': '0'
	    };

	    var ar_sa = moment.defineLocale('ar-sa', {
	        months : 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	        monthsShort : 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	        weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	        weekdaysShort : 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
	        weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        meridiemParse: /ص|م/,
	        isPM : function (input) {
	            return 'م' === input;
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'ص';
	            } else {
	                return 'م';
	            }
	        },
	        calendar : {
	            sameDay: '[اليوم على الساعة] LT',
	            nextDay: '[غدا على الساعة] LT',
	            nextWeek: 'dddd [على الساعة] LT',
	            lastDay: '[أمس على الساعة] LT',
	            lastWeek: 'dddd [على الساعة] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'في %s',
	            past : 'منذ %s',
	            s : 'ثوان',
	            m : 'دقيقة',
	            mm : '%d دقائق',
	            h : 'ساعة',
	            hh : '%d ساعات',
	            d : 'يوم',
	            dd : '%d أيام',
	            M : 'شهر',
	            MM : '%d أشهر',
	            y : 'سنة',
	            yy : '%d سنوات'
	        },
	        preparse: function (string) {
	            return string.replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
	                return numberMap[match];
	            }).replace(/،/g, ',');
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            }).replace(/,/g, '،');
	        },
	        week : {
	            dow : 6, // Saturday is the first day of the week.
	            doy : 12  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return ar_sa;

	}));

/***/ },
/* 371 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale  : Tunisian Arabic (ar-tn)

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var ar_tn = moment.defineLocale('ar-tn', {
	        months: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	        monthsShort: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	        weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
	        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[اليوم على الساعة] LT',
	            nextDay: '[غدا على الساعة] LT',
	            nextWeek: 'dddd [على الساعة] LT',
	            lastDay: '[أمس على الساعة] LT',
	            lastWeek: 'dddd [على الساعة] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'في %s',
	            past: 'منذ %s',
	            s: 'ثوان',
	            m: 'دقيقة',
	            mm: '%d دقائق',
	            h: 'ساعة',
	            hh: '%d ساعات',
	            d: 'يوم',
	            dd: '%d أيام',
	            M: 'شهر',
	            MM: '%d أشهر',
	            y: 'سنة',
	            yy: '%d سنوات'
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return ar_tn;

	}));

/***/ },
/* 372 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : azerbaijani (az)
	//! author : topchiyev : https://github.com/topchiyev

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var suffixes = {
	        1: '-inci',
	        5: '-inci',
	        8: '-inci',
	        70: '-inci',
	        80: '-inci',
	        2: '-nci',
	        7: '-nci',
	        20: '-nci',
	        50: '-nci',
	        3: '-üncü',
	        4: '-üncü',
	        100: '-üncü',
	        6: '-ncı',
	        9: '-uncu',
	        10: '-uncu',
	        30: '-uncu',
	        60: '-ıncı',
	        90: '-ıncı'
	    };

	    var az = moment.defineLocale('az', {
	        months : 'yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr'.split('_'),
	        monthsShort : 'yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek'.split('_'),
	        weekdays : 'Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə'.split('_'),
	        weekdaysShort : 'Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən'.split('_'),
	        weekdaysMin : 'Bz_BE_ÇA_Çə_CA_Cü_Şə'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[bugün saat] LT',
	            nextDay : '[sabah saat] LT',
	            nextWeek : '[gələn həftə] dddd [saat] LT',
	            lastDay : '[dünən] LT',
	            lastWeek : '[keçən həftə] dddd [saat] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s sonra',
	            past : '%s əvvəl',
	            s : 'birneçə saniyyə',
	            m : 'bir dəqiqə',
	            mm : '%d dəqiqə',
	            h : 'bir saat',
	            hh : '%d saat',
	            d : 'bir gün',
	            dd : '%d gün',
	            M : 'bir ay',
	            MM : '%d ay',
	            y : 'bir il',
	            yy : '%d il'
	        },
	        meridiemParse: /gecə|səhər|gündüz|axşam/,
	        isPM : function (input) {
	            return /^(gündüz|axşam)$/.test(input);
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'gecə';
	            } else if (hour < 12) {
	                return 'səhər';
	            } else if (hour < 17) {
	                return 'gündüz';
	            } else {
	                return 'axşam';
	            }
	        },
	        ordinalParse: /\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,
	        ordinal : function (number) {
	            if (number === 0) {  // special case for zero
	                return number + '-ıncı';
	            }
	            var a = number % 10,
	                b = number % 100 - a,
	                c = number >= 100 ? 100 : null;
	            return number + (suffixes[a] || suffixes[b] || suffixes[c]);
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return az;

	}));

/***/ },
/* 373 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : belarusian (be)
	//! author : Dmitry Demidov : https://github.com/demidov91
	//! author: Praleska: http://praleska.pro/
	//! Author : Menelion Elensúle : https://github.com/Oire

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    function plural(word, num) {
	        var forms = word.split('_');
	        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
	    }
	    function relativeTimeWithPlural(number, withoutSuffix, key) {
	        var format = {
	            'mm': withoutSuffix ? 'хвіліна_хвіліны_хвілін' : 'хвіліну_хвіліны_хвілін',
	            'hh': withoutSuffix ? 'гадзіна_гадзіны_гадзін' : 'гадзіну_гадзіны_гадзін',
	            'dd': 'дзень_дні_дзён',
	            'MM': 'месяц_месяцы_месяцаў',
	            'yy': 'год_гады_гадоў'
	        };
	        if (key === 'm') {
	            return withoutSuffix ? 'хвіліна' : 'хвіліну';
	        }
	        else if (key === 'h') {
	            return withoutSuffix ? 'гадзіна' : 'гадзіну';
	        }
	        else {
	            return number + ' ' + plural(format[key], +number);
	        }
	    }
	    function monthsCaseReplace(m, format) {
	        var months = {
	            'nominative': 'студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань'.split('_'),
	            'accusative': 'студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня'.split('_')
	        },
	        nounCase = (/D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/).test(format) ?
	            'accusative' :
	            'nominative';
	        return months[nounCase][m.month()];
	    }
	    function weekdaysCaseReplace(m, format) {
	        var weekdays = {
	            'nominative': 'нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота'.split('_'),
	            'accusative': 'нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу'.split('_')
	        },
	        nounCase = (/\[ ?[Вв] ?(?:мінулую|наступную)? ?\] ?dddd/).test(format) ?
	            'accusative' :
	            'nominative';
	        return weekdays[nounCase][m.day()];
	    }

	    var be = moment.defineLocale('be', {
	        months : monthsCaseReplace,
	        monthsShort : 'студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж'.split('_'),
	        weekdays : weekdaysCaseReplace,
	        weekdaysShort : 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
	        weekdaysMin : 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY г.',
	            LLL : 'D MMMM YYYY г., HH:mm',
	            LLLL : 'dddd, D MMMM YYYY г., HH:mm'
	        },
	        calendar : {
	            sameDay: '[Сёння ў] LT',
	            nextDay: '[Заўтра ў] LT',
	            lastDay: '[Учора ў] LT',
	            nextWeek: function () {
	                return '[У] dddd [ў] LT';
	            },
	            lastWeek: function () {
	                switch (this.day()) {
	                case 0:
	                case 3:
	                case 5:
	                case 6:
	                    return '[У мінулую] dddd [ў] LT';
	                case 1:
	                case 2:
	                case 4:
	                    return '[У мінулы] dddd [ў] LT';
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'праз %s',
	            past : '%s таму',
	            s : 'некалькі секунд',
	            m : relativeTimeWithPlural,
	            mm : relativeTimeWithPlural,
	            h : relativeTimeWithPlural,
	            hh : relativeTimeWithPlural,
	            d : 'дзень',
	            dd : relativeTimeWithPlural,
	            M : 'месяц',
	            MM : relativeTimeWithPlural,
	            y : 'год',
	            yy : relativeTimeWithPlural
	        },
	        meridiemParse: /ночы|раніцы|дня|вечара/,
	        isPM : function (input) {
	            return /^(дня|вечара)$/.test(input);
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'ночы';
	            } else if (hour < 12) {
	                return 'раніцы';
	            } else if (hour < 17) {
	                return 'дня';
	            } else {
	                return 'вечара';
	            }
	        },
	        ordinalParse: /\d{1,2}-(і|ы|га)/,
	        ordinal: function (number, period) {
	            switch (period) {
	            case 'M':
	            case 'd':
	            case 'DDD':
	            case 'w':
	            case 'W':
	                return (number % 10 === 2 || number % 10 === 3) && (number % 100 !== 12 && number % 100 !== 13) ? number + '-і' : number + '-ы';
	            case 'D':
	                return number + '-га';
	            default:
	                return number;
	            }
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return be;

	}));

/***/ },
/* 374 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : bulgarian (bg)
	//! author : Krasen Borisov : https://github.com/kraz

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var bg = moment.defineLocale('bg', {
	        months : 'януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември'.split('_'),
	        monthsShort : 'янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек'.split('_'),
	        weekdays : 'неделя_понеделник_вторник_сряда_четвъртък_петък_събота'.split('_'),
	        weekdaysShort : 'нед_пон_вто_сря_чет_пет_съб'.split('_'),
	        weekdaysMin : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'D.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY H:mm',
	            LLLL : 'dddd, D MMMM YYYY H:mm'
	        },
	        calendar : {
	            sameDay : '[Днес в] LT',
	            nextDay : '[Утре в] LT',
	            nextWeek : 'dddd [в] LT',
	            lastDay : '[Вчера в] LT',
	            lastWeek : function () {
	                switch (this.day()) {
	                case 0:
	                case 3:
	                case 6:
	                    return '[В изминалата] dddd [в] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[В изминалия] dddd [в] LT';
	                }
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'след %s',
	            past : 'преди %s',
	            s : 'няколко секунди',
	            m : 'минута',
	            mm : '%d минути',
	            h : 'час',
	            hh : '%d часа',
	            d : 'ден',
	            dd : '%d дни',
	            M : 'месец',
	            MM : '%d месеца',
	            y : 'година',
	            yy : '%d години'
	        },
	        ordinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
	        ordinal : function (number) {
	            var lastDigit = number % 10,
	                last2Digits = number % 100;
	            if (number === 0) {
	                return number + '-ев';
	            } else if (last2Digits === 0) {
	                return number + '-ен';
	            } else if (last2Digits > 10 && last2Digits < 20) {
	                return number + '-ти';
	            } else if (lastDigit === 1) {
	                return number + '-ви';
	            } else if (lastDigit === 2) {
	                return number + '-ри';
	            } else if (lastDigit === 7 || lastDigit === 8) {
	                return number + '-ми';
	            } else {
	                return number + '-ти';
	            }
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return bg;

	}));

/***/ },
/* 375 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Bengali (bn)
	//! author : Kaushik Gandhi : https://github.com/kaushikgandhi

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var symbolMap = {
	        '1': '১',
	        '2': '২',
	        '3': '৩',
	        '4': '৪',
	        '5': '৫',
	        '6': '৬',
	        '7': '৭',
	        '8': '৮',
	        '9': '৯',
	        '0': '০'
	    },
	    numberMap = {
	        '১': '1',
	        '২': '2',
	        '৩': '3',
	        '৪': '4',
	        '৫': '5',
	        '৬': '6',
	        '৭': '7',
	        '৮': '8',
	        '৯': '9',
	        '০': '0'
	    };

	    var bn = moment.defineLocale('bn', {
	        months : 'জানুয়ারী_ফেবুয়ারী_মার্চ_এপ্রিল_মে_জুন_জুলাই_অগাস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর'.split('_'),
	        monthsShort : 'জানু_ফেব_মার্চ_এপর_মে_জুন_জুল_অগ_সেপ্ট_অক্টো_নভ_ডিসেম্'.split('_'),
	        weekdays : 'রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পত্তিবার_শুক্রুবার_শনিবার'.split('_'),
	        weekdaysShort : 'রবি_সোম_মঙ্গল_বুধ_বৃহস্পত্তি_শুক্রু_শনি'.split('_'),
	        weekdaysMin : 'রব_সম_মঙ্গ_বু_ব্রিহ_শু_শনি'.split('_'),
	        longDateFormat : {
	            LT : 'A h:mm সময়',
	            LTS : 'A h:mm:ss সময়',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY, A h:mm সময়',
	            LLLL : 'dddd, D MMMM YYYY, A h:mm সময়'
	        },
	        calendar : {
	            sameDay : '[আজ] LT',
	            nextDay : '[আগামীকাল] LT',
	            nextWeek : 'dddd, LT',
	            lastDay : '[গতকাল] LT',
	            lastWeek : '[গত] dddd, LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s পরে',
	            past : '%s আগে',
	            s : 'কএক সেকেন্ড',
	            m : 'এক মিনিট',
	            mm : '%d মিনিট',
	            h : 'এক ঘন্টা',
	            hh : '%d ঘন্টা',
	            d : 'এক দিন',
	            dd : '%d দিন',
	            M : 'এক মাস',
	            MM : '%d মাস',
	            y : 'এক বছর',
	            yy : '%d বছর'
	        },
	        preparse: function (string) {
	            return string.replace(/[১২৩৪৫৬৭৮৯০]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        meridiemParse: /রাত|সকাল|দুপুর|বিকেল|রাত/,
	        isPM: function (input) {
	            return /^(দুপুর|বিকেল|রাত)$/.test(input);
	        },
	        //Bengali is a vast language its spoken
	        //in different forms in various parts of the world.
	        //I have just generalized with most common one used
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'রাত';
	            } else if (hour < 10) {
	                return 'সকাল';
	            } else if (hour < 17) {
	                return 'দুপুর';
	            } else if (hour < 20) {
	                return 'বিকেল';
	            } else {
	                return 'রাত';
	            }
	        },
	        week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 6  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return bn;

	}));

/***/ },
/* 376 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : tibetan (bo)
	//! author : Thupten N. Chakrishar : https://github.com/vajradog

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var symbolMap = {
	        '1': '༡',
	        '2': '༢',
	        '3': '༣',
	        '4': '༤',
	        '5': '༥',
	        '6': '༦',
	        '7': '༧',
	        '8': '༨',
	        '9': '༩',
	        '0': '༠'
	    },
	    numberMap = {
	        '༡': '1',
	        '༢': '2',
	        '༣': '3',
	        '༤': '4',
	        '༥': '5',
	        '༦': '6',
	        '༧': '7',
	        '༨': '8',
	        '༩': '9',
	        '༠': '0'
	    };

	    var bo = moment.defineLocale('bo', {
	        months : 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split('_'),
	        monthsShort : 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split('_'),
	        weekdays : 'གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་'.split('_'),
	        weekdaysShort : 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split('_'),
	        weekdaysMin : 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split('_'),
	        longDateFormat : {
	            LT : 'A h:mm',
	            LTS : 'A h:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY, A h:mm',
	            LLLL : 'dddd, D MMMM YYYY, A h:mm'
	        },
	        calendar : {
	            sameDay : '[དི་རིང] LT',
	            nextDay : '[སང་ཉིན] LT',
	            nextWeek : '[བདུན་ཕྲག་རྗེས་མ], LT',
	            lastDay : '[ཁ་སང] LT',
	            lastWeek : '[བདུན་ཕྲག་མཐའ་མ] dddd, LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s ལ་',
	            past : '%s སྔན་ལ',
	            s : 'ལམ་སང',
	            m : 'སྐར་མ་གཅིག',
	            mm : '%d སྐར་མ',
	            h : 'ཆུ་ཚོད་གཅིག',
	            hh : '%d ཆུ་ཚོད',
	            d : 'ཉིན་གཅིག',
	            dd : '%d ཉིན་',
	            M : 'ཟླ་བ་གཅིག',
	            MM : '%d ཟླ་བ',
	            y : 'ལོ་གཅིག',
	            yy : '%d ལོ'
	        },
	        preparse: function (string) {
	            return string.replace(/[༡༢༣༤༥༦༧༨༩༠]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        meridiemParse: /མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,
	        isPM: function (input) {
	            return /^(ཉིན་གུང|དགོང་དག|མཚན་མོ)$/.test(input);
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'མཚན་མོ';
	            } else if (hour < 10) {
	                return 'ཞོགས་ཀས';
	            } else if (hour < 17) {
	                return 'ཉིན་གུང';
	            } else if (hour < 20) {
	                return 'དགོང་དག';
	            } else {
	                return 'མཚན་མོ';
	            }
	        },
	        week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 6  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return bo;

	}));

/***/ },
/* 377 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : breton (br)
	//! author : Jean-Baptiste Le Duigou : https://github.com/jbleduigou

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    function relativeTimeWithMutation(number, withoutSuffix, key) {
	        var format = {
	            'mm': 'munutenn',
	            'MM': 'miz',
	            'dd': 'devezh'
	        };
	        return number + ' ' + mutation(format[key], number);
	    }
	    function specialMutationForYears(number) {
	        switch (lastNumber(number)) {
	        case 1:
	        case 3:
	        case 4:
	        case 5:
	        case 9:
	            return number + ' bloaz';
	        default:
	            return number + ' vloaz';
	        }
	    }
	    function lastNumber(number) {
	        if (number > 9) {
	            return lastNumber(number % 10);
	        }
	        return number;
	    }
	    function mutation(text, number) {
	        if (number === 2) {
	            return softMutation(text);
	        }
	        return text;
	    }
	    function softMutation(text) {
	        var mutationTable = {
	            'm': 'v',
	            'b': 'v',
	            'd': 'z'
	        };
	        if (mutationTable[text.charAt(0)] === undefined) {
	            return text;
	        }
	        return mutationTable[text.charAt(0)] + text.substring(1);
	    }

	    var br = moment.defineLocale('br', {
	        months : 'Genver_C\'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu'.split('_'),
	        monthsShort : 'Gen_C\'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker'.split('_'),
	        weekdays : 'Sul_Lun_Meurzh_Merc\'her_Yaou_Gwener_Sadorn'.split('_'),
	        weekdaysShort : 'Sul_Lun_Meu_Mer_Yao_Gwe_Sad'.split('_'),
	        weekdaysMin : 'Su_Lu_Me_Mer_Ya_Gw_Sa'.split('_'),
	        longDateFormat : {
	            LT : 'h[e]mm A',
	            LTS : 'h[e]mm:ss A',
	            L : 'DD/MM/YYYY',
	            LL : 'D [a viz] MMMM YYYY',
	            LLL : 'D [a viz] MMMM YYYY h[e]mm A',
	            LLLL : 'dddd, D [a viz] MMMM YYYY h[e]mm A'
	        },
	        calendar : {
	            sameDay : '[Hiziv da] LT',
	            nextDay : '[Warc\'hoazh da] LT',
	            nextWeek : 'dddd [da] LT',
	            lastDay : '[Dec\'h da] LT',
	            lastWeek : 'dddd [paset da] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'a-benn %s',
	            past : '%s \'zo',
	            s : 'un nebeud segondennoù',
	            m : 'ur vunutenn',
	            mm : relativeTimeWithMutation,
	            h : 'un eur',
	            hh : '%d eur',
	            d : 'un devezh',
	            dd : relativeTimeWithMutation,
	            M : 'ur miz',
	            MM : relativeTimeWithMutation,
	            y : 'ur bloaz',
	            yy : specialMutationForYears
	        },
	        ordinalParse: /\d{1,2}(añ|vet)/,
	        ordinal : function (number) {
	            var output = (number === 1) ? 'añ' : 'vet';
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return br;

	}));

/***/ },
/* 378 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : bosnian (bs)
	//! author : Nedim Cholich : https://github.com/frontyard
	//! based on (hr) translation by Bojan Marković

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    function translate(number, withoutSuffix, key) {
	        var result = number + ' ';
	        switch (key) {
	        case 'm':
	            return withoutSuffix ? 'jedna minuta' : 'jedne minute';
	        case 'mm':
	            if (number === 1) {
	                result += 'minuta';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'minute';
	            } else {
	                result += 'minuta';
	            }
	            return result;
	        case 'h':
	            return withoutSuffix ? 'jedan sat' : 'jednog sata';
	        case 'hh':
	            if (number === 1) {
	                result += 'sat';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'sata';
	            } else {
	                result += 'sati';
	            }
	            return result;
	        case 'dd':
	            if (number === 1) {
	                result += 'dan';
	            } else {
	                result += 'dana';
	            }
	            return result;
	        case 'MM':
	            if (number === 1) {
	                result += 'mjesec';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'mjeseca';
	            } else {
	                result += 'mjeseci';
	            }
	            return result;
	        case 'yy':
	            if (number === 1) {
	                result += 'godina';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'godine';
	            } else {
	                result += 'godina';
	            }
	            return result;
	        }
	    }

	    var bs = moment.defineLocale('bs', {
	        months : 'januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar'.split('_'),
	        monthsShort : 'jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.'.split('_'),
	        weekdays : 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
	        weekdaysShort : 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
	        weekdaysMin : 'ne_po_ut_sr_če_pe_su'.split('_'),
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'DD. MM. YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY H:mm',
	            LLLL : 'dddd, D. MMMM YYYY H:mm'
	        },
	        calendar : {
	            sameDay  : '[danas u] LT',
	            nextDay  : '[sutra u] LT',
	            nextWeek : function () {
	                switch (this.day()) {
	                case 0:
	                    return '[u] [nedjelju] [u] LT';
	                case 3:
	                    return '[u] [srijedu] [u] LT';
	                case 6:
	                    return '[u] [subotu] [u] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[u] dddd [u] LT';
	                }
	            },
	            lastDay  : '[jučer u] LT',
	            lastWeek : function () {
	                switch (this.day()) {
	                case 0:
	                case 3:
	                    return '[prošlu] dddd [u] LT';
	                case 6:
	                    return '[prošle] [subote] [u] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[prošli] dddd [u] LT';
	                }
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'za %s',
	            past   : 'prije %s',
	            s      : 'par sekundi',
	            m      : translate,
	            mm     : translate,
	            h      : translate,
	            hh     : translate,
	            d      : 'dan',
	            dd     : translate,
	            M      : 'mjesec',
	            MM     : translate,
	            y      : 'godinu',
	            yy     : translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return bs;

	}));

/***/ },
/* 379 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : catalan (ca)
	//! author : Juan G. Hurtado : https://github.com/juanghurtado

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var ca = moment.defineLocale('ca', {
	        months : 'gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre'.split('_'),
	        monthsShort : 'gen._febr._mar._abr._mai._jun._jul._ag._set._oct._nov._des.'.split('_'),
	        weekdays : 'diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte'.split('_'),
	        weekdaysShort : 'dg._dl._dt._dc._dj._dv._ds.'.split('_'),
	        weekdaysMin : 'Dg_Dl_Dt_Dc_Dj_Dv_Ds'.split('_'),
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'LT:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY H:mm',
	            LLLL : 'dddd D MMMM YYYY H:mm'
	        },
	        calendar : {
	            sameDay : function () {
	                return '[avui a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	            },
	            nextDay : function () {
	                return '[demà a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	            },
	            nextWeek : function () {
	                return 'dddd [a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	            },
	            lastDay : function () {
	                return '[ahir a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	            },
	            lastWeek : function () {
	                return '[el] dddd [passat a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'en %s',
	            past : 'fa %s',
	            s : 'uns segons',
	            m : 'un minut',
	            mm : '%d minuts',
	            h : 'una hora',
	            hh : '%d hores',
	            d : 'un dia',
	            dd : '%d dies',
	            M : 'un mes',
	            MM : '%d mesos',
	            y : 'un any',
	            yy : '%d anys'
	        },
	        ordinalParse: /\d{1,2}(r|n|t|è|a)/,
	        ordinal : function (number, period) {
	            var output = (number === 1) ? 'r' :
	                (number === 2) ? 'n' :
	                (number === 3) ? 'r' :
	                (number === 4) ? 't' : 'è';
	            if (period === 'w' || period === 'W') {
	                output = 'a';
	            }
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return ca;

	}));

/***/ },
/* 380 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : czech (cs)
	//! author : petrbela : https://github.com/petrbela

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var months = 'leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec'.split('_'),
	        monthsShort = 'led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro'.split('_');
	    function plural(n) {
	        return (n > 1) && (n < 5) && (~~(n / 10) !== 1);
	    }
	    function translate(number, withoutSuffix, key, isFuture) {
	        var result = number + ' ';
	        switch (key) {
	        case 's':  // a few seconds / in a few seconds / a few seconds ago
	            return (withoutSuffix || isFuture) ? 'pár sekund' : 'pár sekundami';
	        case 'm':  // a minute / in a minute / a minute ago
	            return withoutSuffix ? 'minuta' : (isFuture ? 'minutu' : 'minutou');
	        case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'minuty' : 'minut');
	            } else {
	                return result + 'minutami';
	            }
	            break;
	        case 'h':  // an hour / in an hour / an hour ago
	            return withoutSuffix ? 'hodina' : (isFuture ? 'hodinu' : 'hodinou');
	        case 'hh': // 9 hours / in 9 hours / 9 hours ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'hodiny' : 'hodin');
	            } else {
	                return result + 'hodinami';
	            }
	            break;
	        case 'd':  // a day / in a day / a day ago
	            return (withoutSuffix || isFuture) ? 'den' : 'dnem';
	        case 'dd': // 9 days / in 9 days / 9 days ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'dny' : 'dní');
	            } else {
	                return result + 'dny';
	            }
	            break;
	        case 'M':  // a month / in a month / a month ago
	            return (withoutSuffix || isFuture) ? 'měsíc' : 'měsícem';
	        case 'MM': // 9 months / in 9 months / 9 months ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'měsíce' : 'měsíců');
	            } else {
	                return result + 'měsíci';
	            }
	            break;
	        case 'y':  // a year / in a year / a year ago
	            return (withoutSuffix || isFuture) ? 'rok' : 'rokem';
	        case 'yy': // 9 years / in 9 years / 9 years ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'roky' : 'let');
	            } else {
	                return result + 'lety';
	            }
	            break;
	        }
	    }

	    var cs = moment.defineLocale('cs', {
	        months : months,
	        monthsShort : monthsShort,
	        monthsParse : (function (months, monthsShort) {
	            var i, _monthsParse = [];
	            for (i = 0; i < 12; i++) {
	                // use custom parser to solve problem with July (červenec)
	                _monthsParse[i] = new RegExp('^' + months[i] + '$|^' + monthsShort[i] + '$', 'i');
	            }
	            return _monthsParse;
	        }(months, monthsShort)),
	        weekdays : 'neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota'.split('_'),
	        weekdaysShort : 'ne_po_út_st_čt_pá_so'.split('_'),
	        weekdaysMin : 'ne_po_út_st_čt_pá_so'.split('_'),
	        longDateFormat : {
	            LT: 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY H:mm',
	            LLLL : 'dddd D. MMMM YYYY H:mm'
	        },
	        calendar : {
	            sameDay: '[dnes v] LT',
	            nextDay: '[zítra v] LT',
	            nextWeek: function () {
	                switch (this.day()) {
	                case 0:
	                    return '[v neděli v] LT';
	                case 1:
	                case 2:
	                    return '[v] dddd [v] LT';
	                case 3:
	                    return '[ve středu v] LT';
	                case 4:
	                    return '[ve čtvrtek v] LT';
	                case 5:
	                    return '[v pátek v] LT';
	                case 6:
	                    return '[v sobotu v] LT';
	                }
	            },
	            lastDay: '[včera v] LT',
	            lastWeek: function () {
	                switch (this.day()) {
	                case 0:
	                    return '[minulou neděli v] LT';
	                case 1:
	                case 2:
	                    return '[minulé] dddd [v] LT';
	                case 3:
	                    return '[minulou středu v] LT';
	                case 4:
	                case 5:
	                    return '[minulý] dddd [v] LT';
	                case 6:
	                    return '[minulou sobotu v] LT';
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'za %s',
	            past : 'před %s',
	            s : translate,
	            m : translate,
	            mm : translate,
	            h : translate,
	            hh : translate,
	            d : translate,
	            dd : translate,
	            M : translate,
	            MM : translate,
	            y : translate,
	            yy : translate
	        },
	        ordinalParse : /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return cs;

	}));

/***/ },
/* 381 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : chuvash (cv)
	//! author : Anatoly Mironov : https://github.com/mirontoli

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var cv = moment.defineLocale('cv', {
	        months : 'кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав'.split('_'),
	        monthsShort : 'кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш'.split('_'),
	        weekdays : 'вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун'.split('_'),
	        weekdaysShort : 'выр_тун_ытл_юн_кӗҫ_эрн_шӑм'.split('_'),
	        weekdaysMin : 'вр_тн_ыт_юн_кҫ_эр_шм'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD-MM-YYYY',
	            LL : 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]',
	            LLL : 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm',
	            LLLL : 'dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm'
	        },
	        calendar : {
	            sameDay: '[Паян] LT [сехетре]',
	            nextDay: '[Ыран] LT [сехетре]',
	            lastDay: '[Ӗнер] LT [сехетре]',
	            nextWeek: '[Ҫитес] dddd LT [сехетре]',
	            lastWeek: '[Иртнӗ] dddd LT [сехетре]',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : function (output) {
	                var affix = /сехет$/i.exec(output) ? 'рен' : /ҫул$/i.exec(output) ? 'тан' : 'ран';
	                return output + affix;
	            },
	            past : '%s каялла',
	            s : 'пӗр-ик ҫеккунт',
	            m : 'пӗр минут',
	            mm : '%d минут',
	            h : 'пӗр сехет',
	            hh : '%d сехет',
	            d : 'пӗр кун',
	            dd : '%d кун',
	            M : 'пӗр уйӑх',
	            MM : '%d уйӑх',
	            y : 'пӗр ҫул',
	            yy : '%d ҫул'
	        },
	        ordinalParse: /\d{1,2}-мӗш/,
	        ordinal : '%d-мӗш',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return cv;

	}));

/***/ },
/* 382 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Welsh (cy)
	//! author : Robert Allen

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var cy = moment.defineLocale('cy', {
	        months: 'Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr'.split('_'),
	        monthsShort: 'Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag'.split('_'),
	        weekdays: 'Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn'.split('_'),
	        weekdaysShort: 'Sul_Llun_Maw_Mer_Iau_Gwe_Sad'.split('_'),
	        weekdaysMin: 'Su_Ll_Ma_Me_Ia_Gw_Sa'.split('_'),
	        // time formats are the same as en-gb
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[Heddiw am] LT',
	            nextDay: '[Yfory am] LT',
	            nextWeek: 'dddd [am] LT',
	            lastDay: '[Ddoe am] LT',
	            lastWeek: 'dddd [diwethaf am] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'mewn %s',
	            past: '%s yn ôl',
	            s: 'ychydig eiliadau',
	            m: 'munud',
	            mm: '%d munud',
	            h: 'awr',
	            hh: '%d awr',
	            d: 'diwrnod',
	            dd: '%d diwrnod',
	            M: 'mis',
	            MM: '%d mis',
	            y: 'blwyddyn',
	            yy: '%d flynedd'
	        },
	        ordinalParse: /\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,
	        // traditional ordinal numbers above 31 are not commonly used in colloquial Welsh
	        ordinal: function (number) {
	            var b = number,
	                output = '',
	                lookup = [
	                    '', 'af', 'il', 'ydd', 'ydd', 'ed', 'ed', 'ed', 'fed', 'fed', 'fed', // 1af to 10fed
	                    'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'fed' // 11eg to 20fed
	                ];
	            if (b > 20) {
	                if (b === 40 || b === 50 || b === 60 || b === 80 || b === 100) {
	                    output = 'fed'; // not 30ain, 70ain or 90ain
	                } else {
	                    output = 'ain';
	                }
	            } else if (b > 0) {
	                output = lookup[b];
	            }
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return cy;

	}));

/***/ },
/* 383 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : danish (da)
	//! author : Ulrik Nielsen : https://github.com/mrbase

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var da = moment.defineLocale('da', {
	        months : 'januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december'.split('_'),
	        monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
	        weekdays : 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
	        weekdaysShort : 'søn_man_tir_ons_tor_fre_lør'.split('_'),
	        weekdaysMin : 'sø_ma_ti_on_to_fr_lø'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY HH:mm',
	            LLLL : 'dddd [d.] D. MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[I dag kl.] LT',
	            nextDay : '[I morgen kl.] LT',
	            nextWeek : 'dddd [kl.] LT',
	            lastDay : '[I går kl.] LT',
	            lastWeek : '[sidste] dddd [kl] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'om %s',
	            past : '%s siden',
	            s : 'få sekunder',
	            m : 'et minut',
	            mm : '%d minutter',
	            h : 'en time',
	            hh : '%d timer',
	            d : 'en dag',
	            dd : '%d dage',
	            M : 'en måned',
	            MM : '%d måneder',
	            y : 'et år',
	            yy : '%d år'
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return da;

	}));

/***/ },
/* 384 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : german (de)
	//! author : lluchs : https://github.com/lluchs
	//! author: Menelion Elensúle: https://github.com/Oire

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            'm': ['eine Minute', 'einer Minute'],
	            'h': ['eine Stunde', 'einer Stunde'],
	            'd': ['ein Tag', 'einem Tag'],
	            'dd': [number + ' Tage', number + ' Tagen'],
	            'M': ['ein Monat', 'einem Monat'],
	            'MM': [number + ' Monate', number + ' Monaten'],
	            'y': ['ein Jahr', 'einem Jahr'],
	            'yy': [number + ' Jahre', number + ' Jahren']
	        };
	        return withoutSuffix ? format[key][0] : format[key][1];
	    }

	    var de = moment.defineLocale('de', {
	        months : 'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
	        monthsShort : 'Jan._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
	        weekdays : 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
	        weekdaysShort : 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
	        weekdaysMin : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
	        longDateFormat : {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY HH:mm',
	            LLLL : 'dddd, D. MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[Heute um] LT [Uhr]',
	            sameElse: 'L',
	            nextDay: '[Morgen um] LT [Uhr]',
	            nextWeek: 'dddd [um] LT [Uhr]',
	            lastDay: '[Gestern um] LT [Uhr]',
	            lastWeek: '[letzten] dddd [um] LT [Uhr]'
	        },
	        relativeTime : {
	            future : 'in %s',
	            past : 'vor %s',
	            s : 'ein paar Sekunden',
	            m : processRelativeTime,
	            mm : '%d Minuten',
	            h : processRelativeTime,
	            hh : '%d Stunden',
	            d : processRelativeTime,
	            dd : processRelativeTime,
	            M : processRelativeTime,
	            MM : processRelativeTime,
	            y : processRelativeTime,
	            yy : processRelativeTime
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return de;

	}));

/***/ },
/* 385 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : austrian german (de-at)
	//! author : lluchs : https://github.com/lluchs
	//! author: Menelion Elensúle: https://github.com/Oire
	//! author : Martin Groller : https://github.com/MadMG

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            'm': ['eine Minute', 'einer Minute'],
	            'h': ['eine Stunde', 'einer Stunde'],
	            'd': ['ein Tag', 'einem Tag'],
	            'dd': [number + ' Tage', number + ' Tagen'],
	            'M': ['ein Monat', 'einem Monat'],
	            'MM': [number + ' Monate', number + ' Monaten'],
	            'y': ['ein Jahr', 'einem Jahr'],
	            'yy': [number + ' Jahre', number + ' Jahren']
	        };
	        return withoutSuffix ? format[key][0] : format[key][1];
	    }

	    var de_at = moment.defineLocale('de-at', {
	        months : 'Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
	        monthsShort : 'Jän._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
	        weekdays : 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
	        weekdaysShort : 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
	        weekdaysMin : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
	        longDateFormat : {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY HH:mm',
	            LLLL : 'dddd, D. MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[Heute um] LT [Uhr]',
	            sameElse: 'L',
	            nextDay: '[Morgen um] LT [Uhr]',
	            nextWeek: 'dddd [um] LT [Uhr]',
	            lastDay: '[Gestern um] LT [Uhr]',
	            lastWeek: '[letzten] dddd [um] LT [Uhr]'
	        },
	        relativeTime : {
	            future : 'in %s',
	            past : 'vor %s',
	            s : 'ein paar Sekunden',
	            m : processRelativeTime,
	            mm : '%d Minuten',
	            h : processRelativeTime,
	            hh : '%d Stunden',
	            d : processRelativeTime,
	            dd : processRelativeTime,
	            M : processRelativeTime,
	            MM : processRelativeTime,
	            y : processRelativeTime,
	            yy : processRelativeTime
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return de_at;

	}));

/***/ },
/* 386 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : modern greek (el)
	//! author : Aggelos Karalias : https://github.com/mehiel

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var el = moment.defineLocale('el', {
	        monthsNominativeEl : 'Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος'.split('_'),
	        monthsGenitiveEl : 'Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου'.split('_'),
	        months : function (momentToFormat, format) {
	            if (/D/.test(format.substring(0, format.indexOf('MMMM')))) { // if there is a day number before 'MMMM'
	                return this._monthsGenitiveEl[momentToFormat.month()];
	            } else {
	                return this._monthsNominativeEl[momentToFormat.month()];
	            }
	        },
	        monthsShort : 'Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ'.split('_'),
	        weekdays : 'Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο'.split('_'),
	        weekdaysShort : 'Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ'.split('_'),
	        weekdaysMin : 'Κυ_Δε_Τρ_Τε_Πε_Πα_Σα'.split('_'),
	        meridiem : function (hours, minutes, isLower) {
	            if (hours > 11) {
	                return isLower ? 'μμ' : 'ΜΜ';
	            } else {
	                return isLower ? 'πμ' : 'ΠΜ';
	            }
	        },
	        isPM : function (input) {
	            return ((input + '').toLowerCase()[0] === 'μ');
	        },
	        meridiemParse : /[ΠΜ]\.?Μ?\.?/i,
	        longDateFormat : {
	            LT : 'h:mm A',
	            LTS : 'h:mm:ss A',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY h:mm A',
	            LLLL : 'dddd, D MMMM YYYY h:mm A'
	        },
	        calendarEl : {
	            sameDay : '[Σήμερα {}] LT',
	            nextDay : '[Αύριο {}] LT',
	            nextWeek : 'dddd [{}] LT',
	            lastDay : '[Χθες {}] LT',
	            lastWeek : function () {
	                switch (this.day()) {
	                    case 6:
	                        return '[το προηγούμενο] dddd [{}] LT';
	                    default:
	                        return '[την προηγούμενη] dddd [{}] LT';
	                }
	            },
	            sameElse : 'L'
	        },
	        calendar : function (key, mom) {
	            var output = this._calendarEl[key],
	                hours = mom && mom.hours();
	            if (typeof output === 'function') {
	                output = output.apply(mom);
	            }
	            return output.replace('{}', (hours % 12 === 1 ? 'στη' : 'στις'));
	        },
	        relativeTime : {
	            future : 'σε %s',
	            past : '%s πριν',
	            s : 'λίγα δευτερόλεπτα',
	            m : 'ένα λεπτό',
	            mm : '%d λεπτά',
	            h : 'μία ώρα',
	            hh : '%d ώρες',
	            d : 'μία μέρα',
	            dd : '%d μέρες',
	            M : 'ένας μήνας',
	            MM : '%d μήνες',
	            y : 'ένας χρόνος',
	            yy : '%d χρόνια'
	        },
	        ordinalParse: /\d{1,2}η/,
	        ordinal: '%dη',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4st is the first week of the year.
	        }
	    });

	    return el;

	}));

/***/ },
/* 387 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : australian english (en-au)

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var en_au = moment.defineLocale('en-au', {
	        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        longDateFormat : {
	            LT : 'h:mm A',
	            LTS : 'h:mm:ss A',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY h:mm A',
	            LLLL : 'dddd, D MMMM YYYY h:mm A'
	        },
	        calendar : {
	            sameDay : '[Today at] LT',
	            nextDay : '[Tomorrow at] LT',
	            nextWeek : 'dddd [at] LT',
	            lastDay : '[Yesterday at] LT',
	            lastWeek : '[Last] dddd [at] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'in %s',
	            past : '%s ago',
	            s : 'a few seconds',
	            m : 'a minute',
	            mm : '%d minutes',
	            h : 'an hour',
	            hh : '%d hours',
	            d : 'a day',
	            dd : '%d days',
	            M : 'a month',
	            MM : '%d months',
	            y : 'a year',
	            yy : '%d years'
	        },
	        ordinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (~~(number % 100 / 10) === 1) ? 'th' :
	                (b === 1) ? 'st' :
	                (b === 2) ? 'nd' :
	                (b === 3) ? 'rd' : 'th';
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return en_au;

	}));

/***/ },
/* 388 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : canadian english (en-ca)
	//! author : Jonathan Abourbih : https://github.com/jonbca

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var en_ca = moment.defineLocale('en-ca', {
	        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        longDateFormat : {
	            LT : 'h:mm A',
	            LTS : 'h:mm:ss A',
	            L : 'YYYY-MM-DD',
	            LL : 'D MMMM, YYYY',
	            LLL : 'D MMMM, YYYY h:mm A',
	            LLLL : 'dddd, D MMMM, YYYY h:mm A'
	        },
	        calendar : {
	            sameDay : '[Today at] LT',
	            nextDay : '[Tomorrow at] LT',
	            nextWeek : 'dddd [at] LT',
	            lastDay : '[Yesterday at] LT',
	            lastWeek : '[Last] dddd [at] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'in %s',
	            past : '%s ago',
	            s : 'a few seconds',
	            m : 'a minute',
	            mm : '%d minutes',
	            h : 'an hour',
	            hh : '%d hours',
	            d : 'a day',
	            dd : '%d days',
	            M : 'a month',
	            MM : '%d months',
	            y : 'a year',
	            yy : '%d years'
	        },
	        ordinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (~~(number % 100 / 10) === 1) ? 'th' :
	                (b === 1) ? 'st' :
	                (b === 2) ? 'nd' :
	                (b === 3) ? 'rd' : 'th';
	            return number + output;
	        }
	    });

	    return en_ca;

	}));

/***/ },
/* 389 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : great britain english (en-gb)
	//! author : Chris Gedrim : https://github.com/chrisgedrim

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var en_gb = moment.defineLocale('en-gb', {
	        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[Today at] LT',
	            nextDay : '[Tomorrow at] LT',
	            nextWeek : 'dddd [at] LT',
	            lastDay : '[Yesterday at] LT',
	            lastWeek : '[Last] dddd [at] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'in %s',
	            past : '%s ago',
	            s : 'a few seconds',
	            m : 'a minute',
	            mm : '%d minutes',
	            h : 'an hour',
	            hh : '%d hours',
	            d : 'a day',
	            dd : '%d days',
	            M : 'a month',
	            MM : '%d months',
	            y : 'a year',
	            yy : '%d years'
	        },
	        ordinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (~~(number % 100 / 10) === 1) ? 'th' :
	                (b === 1) ? 'st' :
	                (b === 2) ? 'nd' :
	                (b === 3) ? 'rd' : 'th';
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return en_gb;

	}));

/***/ },
/* 390 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : esperanto (eo)
	//! author : Colin Dean : https://github.com/colindean
	//! komento: Mi estas malcerta se mi korekte traktis akuzativojn en tiu traduko.
	//!          Se ne, bonvolu korekti kaj avizi min por ke mi povas lerni!

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var eo = moment.defineLocale('eo', {
	        months : 'januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro'.split('_'),
	        monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aŭg_sep_okt_nov_dec'.split('_'),
	        weekdays : 'Dimanĉo_Lundo_Mardo_Merkredo_Ĵaŭdo_Vendredo_Sabato'.split('_'),
	        weekdaysShort : 'Dim_Lun_Mard_Merk_Ĵaŭ_Ven_Sab'.split('_'),
	        weekdaysMin : 'Di_Lu_Ma_Me_Ĵa_Ve_Sa'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'YYYY-MM-DD',
	            LL : 'D[-an de] MMMM, YYYY',
	            LLL : 'D[-an de] MMMM, YYYY HH:mm',
	            LLLL : 'dddd, [la] D[-an de] MMMM, YYYY HH:mm'
	        },
	        meridiemParse: /[ap]\.t\.m/i,
	        isPM: function (input) {
	            return input.charAt(0).toLowerCase() === 'p';
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours > 11) {
	                return isLower ? 'p.t.m.' : 'P.T.M.';
	            } else {
	                return isLower ? 'a.t.m.' : 'A.T.M.';
	            }
	        },
	        calendar : {
	            sameDay : '[Hodiaŭ je] LT',
	            nextDay : '[Morgaŭ je] LT',
	            nextWeek : 'dddd [je] LT',
	            lastDay : '[Hieraŭ je] LT',
	            lastWeek : '[pasinta] dddd [je] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'je %s',
	            past : 'antaŭ %s',
	            s : 'sekundoj',
	            m : 'minuto',
	            mm : '%d minutoj',
	            h : 'horo',
	            hh : '%d horoj',
	            d : 'tago',//ne 'diurno', ĉar estas uzita por proksimumo
	            dd : '%d tagoj',
	            M : 'monato',
	            MM : '%d monatoj',
	            y : 'jaro',
	            yy : '%d jaroj'
	        },
	        ordinalParse: /\d{1,2}a/,
	        ordinal : '%da',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return eo;

	}));

/***/ },
/* 391 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : spanish (es)
	//! author : Julio Napurí : https://github.com/julionc

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var monthsShortDot = 'Ene._Feb._Mar._Abr._May._Jun._Jul._Ago._Sep._Oct._Nov._Dic.'.split('_'),
	        monthsShort = 'Ene_Feb_Mar_Abr_May_Jun_Jul_Ago_Sep_Oct_Nov_Dic'.split('_');

	    var es = moment.defineLocale('es', {
	        months : 'Enero_Febrero_Marzo_Abril_Mayo_Junio_Julio_Agosto_Septiembre_Octubre_Noviembre_Diciembre'.split('_'),
	        monthsShort : function (m, format) {
	            if (/-MMM-/.test(format)) {
	                return monthsShort[m.month()];
	            } else {
	                return monthsShortDot[m.month()];
	            }
	        },
	        weekdays : 'Domingo_Lunes_Martes_Miércoles_Jueves_Viernes_Sábado'.split('_'),
	        weekdaysShort : 'Dom._Lun._Mar._Mié._Jue._Vie._Sáb.'.split('_'),
	        weekdaysMin : 'Do_Lu_Ma_Mi_Ju_Vi_Sá'.split('_'),
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D [de] MMMM [de] YYYY',
	            LLL : 'D [de] MMMM [de] YYYY H:mm',
	            LLLL : 'dddd, D [de] MMMM [de] YYYY H:mm'
	        },
	        calendar : {
	            sameDay : function () {
	                return '[hoy a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	            },
	            nextDay : function () {
	                return '[mañana a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	            },
	            nextWeek : function () {
	                return 'dddd [a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	            },
	            lastDay : function () {
	                return '[ayer a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	            },
	            lastWeek : function () {
	                return '[el] dddd [pasado a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'en %s',
	            past : 'hace %s',
	            s : 'unos segundos',
	            m : 'un minuto',
	            mm : '%d minutos',
	            h : 'una hora',
	            hh : '%d horas',
	            d : 'un día',
	            dd : '%d días',
	            M : 'un mes',
	            MM : '%d meses',
	            y : 'un año',
	            yy : '%d años'
	        },
	        ordinalParse : /\d{1,2}º/,
	        ordinal : '%dº',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return es;

	}));

/***/ },
/* 392 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : estonian (et)
	//! author : Henry Kehlmann : https://github.com/madhenry
	//! improvements : Illimar Tambek : https://github.com/ragulka

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            's' : ['mõne sekundi', 'mõni sekund', 'paar sekundit'],
	            'm' : ['ühe minuti', 'üks minut'],
	            'mm': [number + ' minuti', number + ' minutit'],
	            'h' : ['ühe tunni', 'tund aega', 'üks tund'],
	            'hh': [number + ' tunni', number + ' tundi'],
	            'd' : ['ühe päeva', 'üks päev'],
	            'M' : ['kuu aja', 'kuu aega', 'üks kuu'],
	            'MM': [number + ' kuu', number + ' kuud'],
	            'y' : ['ühe aasta', 'aasta', 'üks aasta'],
	            'yy': [number + ' aasta', number + ' aastat']
	        };
	        if (withoutSuffix) {
	            return format[key][2] ? format[key][2] : format[key][1];
	        }
	        return isFuture ? format[key][0] : format[key][1];
	    }

	    var et = moment.defineLocale('et', {
	        months        : 'jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember'.split('_'),
	        monthsShort   : 'jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets'.split('_'),
	        weekdays      : 'pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev'.split('_'),
	        weekdaysShort : 'P_E_T_K_N_R_L'.split('_'),
	        weekdaysMin   : 'P_E_T_K_N_R_L'.split('_'),
	        longDateFormat : {
	            LT   : 'H:mm',
	            LTS : 'H:mm:ss',
	            L    : 'DD.MM.YYYY',
	            LL   : 'D. MMMM YYYY',
	            LLL  : 'D. MMMM YYYY H:mm',
	            LLLL : 'dddd, D. MMMM YYYY H:mm'
	        },
	        calendar : {
	            sameDay  : '[Täna,] LT',
	            nextDay  : '[Homme,] LT',
	            nextWeek : '[Järgmine] dddd LT',
	            lastDay  : '[Eile,] LT',
	            lastWeek : '[Eelmine] dddd LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s pärast',
	            past   : '%s tagasi',
	            s      : processRelativeTime,
	            m      : processRelativeTime,
	            mm     : processRelativeTime,
	            h      : processRelativeTime,
	            hh     : processRelativeTime,
	            d      : processRelativeTime,
	            dd     : '%d päeva',
	            M      : processRelativeTime,
	            MM     : processRelativeTime,
	            y      : processRelativeTime,
	            yy     : processRelativeTime
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return et;

	}));

/***/ },
/* 393 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : euskara (eu)
	//! author : Eneko Illarramendi : https://github.com/eillarra

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var eu = moment.defineLocale('eu', {
	        months : 'urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua'.split('_'),
	        monthsShort : 'urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.'.split('_'),
	        weekdays : 'igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata'.split('_'),
	        weekdaysShort : 'ig._al._ar._az._og._ol._lr.'.split('_'),
	        weekdaysMin : 'ig_al_ar_az_og_ol_lr'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'YYYY-MM-DD',
	            LL : 'YYYY[ko] MMMM[ren] D[a]',
	            LLL : 'YYYY[ko] MMMM[ren] D[a] HH:mm',
	            LLLL : 'dddd, YYYY[ko] MMMM[ren] D[a] HH:mm',
	            l : 'YYYY-M-D',
	            ll : 'YYYY[ko] MMM D[a]',
	            lll : 'YYYY[ko] MMM D[a] HH:mm',
	            llll : 'ddd, YYYY[ko] MMM D[a] HH:mm'
	        },
	        calendar : {
	            sameDay : '[gaur] LT[etan]',
	            nextDay : '[bihar] LT[etan]',
	            nextWeek : 'dddd LT[etan]',
	            lastDay : '[atzo] LT[etan]',
	            lastWeek : '[aurreko] dddd LT[etan]',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s barru',
	            past : 'duela %s',
	            s : 'segundo batzuk',
	            m : 'minutu bat',
	            mm : '%d minutu',
	            h : 'ordu bat',
	            hh : '%d ordu',
	            d : 'egun bat',
	            dd : '%d egun',
	            M : 'hilabete bat',
	            MM : '%d hilabete',
	            y : 'urte bat',
	            yy : '%d urte'
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return eu;

	}));

/***/ },
/* 394 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Persian (fa)
	//! author : Ebrahim Byagowi : https://github.com/ebraminio

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var symbolMap = {
	        '1': '۱',
	        '2': '۲',
	        '3': '۳',
	        '4': '۴',
	        '5': '۵',
	        '6': '۶',
	        '7': '۷',
	        '8': '۸',
	        '9': '۹',
	        '0': '۰'
	    }, numberMap = {
	        '۱': '1',
	        '۲': '2',
	        '۳': '3',
	        '۴': '4',
	        '۵': '5',
	        '۶': '6',
	        '۷': '7',
	        '۸': '8',
	        '۹': '9',
	        '۰': '0'
	    };

	    var fa = moment.defineLocale('fa', {
	        months : 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
	        monthsShort : 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
	        weekdays : 'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split('_'),
	        weekdaysShort : 'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split('_'),
	        weekdaysMin : 'ی_د_س_چ_پ_ج_ش'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        meridiemParse: /قبل از ظهر|بعد از ظهر/,
	        isPM: function (input) {
	            return /بعد از ظهر/.test(input);
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'قبل از ظهر';
	            } else {
	                return 'بعد از ظهر';
	            }
	        },
	        calendar : {
	            sameDay : '[امروز ساعت] LT',
	            nextDay : '[فردا ساعت] LT',
	            nextWeek : 'dddd [ساعت] LT',
	            lastDay : '[دیروز ساعت] LT',
	            lastWeek : 'dddd [پیش] [ساعت] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'در %s',
	            past : '%s پیش',
	            s : 'چندین ثانیه',
	            m : 'یک دقیقه',
	            mm : '%d دقیقه',
	            h : 'یک ساعت',
	            hh : '%d ساعت',
	            d : 'یک روز',
	            dd : '%d روز',
	            M : 'یک ماه',
	            MM : '%d ماه',
	            y : 'یک سال',
	            yy : '%d سال'
	        },
	        preparse: function (string) {
	            return string.replace(/[۰-۹]/g, function (match) {
	                return numberMap[match];
	            }).replace(/،/g, ',');
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            }).replace(/,/g, '،');
	        },
	        ordinalParse: /\d{1,2}م/,
	        ordinal : '%dم',
	        week : {
	            dow : 6, // Saturday is the first day of the week.
	            doy : 12 // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return fa;

	}));

/***/ },
/* 395 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : finnish (fi)
	//! author : Tarmo Aidantausta : https://github.com/bleadof

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var numbersPast = 'nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän'.split(' '),
	        numbersFuture = [
	            'nolla', 'yhden', 'kahden', 'kolmen', 'neljän', 'viiden', 'kuuden',
	            numbersPast[7], numbersPast[8], numbersPast[9]
	        ];
	    function translate(number, withoutSuffix, key, isFuture) {
	        var result = '';
	        switch (key) {
	        case 's':
	            return isFuture ? 'muutaman sekunnin' : 'muutama sekunti';
	        case 'm':
	            return isFuture ? 'minuutin' : 'minuutti';
	        case 'mm':
	            result = isFuture ? 'minuutin' : 'minuuttia';
	            break;
	        case 'h':
	            return isFuture ? 'tunnin' : 'tunti';
	        case 'hh':
	            result = isFuture ? 'tunnin' : 'tuntia';
	            break;
	        case 'd':
	            return isFuture ? 'päivän' : 'päivä';
	        case 'dd':
	            result = isFuture ? 'päivän' : 'päivää';
	            break;
	        case 'M':
	            return isFuture ? 'kuukauden' : 'kuukausi';
	        case 'MM':
	            result = isFuture ? 'kuukauden' : 'kuukautta';
	            break;
	        case 'y':
	            return isFuture ? 'vuoden' : 'vuosi';
	        case 'yy':
	            result = isFuture ? 'vuoden' : 'vuotta';
	            break;
	        }
	        result = verbalNumber(number, isFuture) + ' ' + result;
	        return result;
	    }
	    function verbalNumber(number, isFuture) {
	        return number < 10 ? (isFuture ? numbersFuture[number] : numbersPast[number]) : number;
	    }

	    var fi = moment.defineLocale('fi', {
	        months : 'tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu'.split('_'),
	        monthsShort : 'tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu'.split('_'),
	        weekdays : 'sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai'.split('_'),
	        weekdaysShort : 'su_ma_ti_ke_to_pe_la'.split('_'),
	        weekdaysMin : 'su_ma_ti_ke_to_pe_la'.split('_'),
	        longDateFormat : {
	            LT : 'HH.mm',
	            LTS : 'HH.mm.ss',
	            L : 'DD.MM.YYYY',
	            LL : 'Do MMMM[ta] YYYY',
	            LLL : 'Do MMMM[ta] YYYY, [klo] HH.mm',
	            LLLL : 'dddd, Do MMMM[ta] YYYY, [klo] HH.mm',
	            l : 'D.M.YYYY',
	            ll : 'Do MMM YYYY',
	            lll : 'Do MMM YYYY, [klo] HH.mm',
	            llll : 'ddd, Do MMM YYYY, [klo] HH.mm'
	        },
	        calendar : {
	            sameDay : '[tänään] [klo] LT',
	            nextDay : '[huomenna] [klo] LT',
	            nextWeek : 'dddd [klo] LT',
	            lastDay : '[eilen] [klo] LT',
	            lastWeek : '[viime] dddd[na] [klo] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s päästä',
	            past : '%s sitten',
	            s : translate,
	            m : translate,
	            mm : translate,
	            h : translate,
	            hh : translate,
	            d : translate,
	            dd : translate,
	            M : translate,
	            MM : translate,
	            y : translate,
	            yy : translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return fi;

	}));

/***/ },
/* 396 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : faroese (fo)
	//! author : Ragnar Johannesen : https://github.com/ragnar123

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var fo = moment.defineLocale('fo', {
	        months : 'januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
	        monthsShort : 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
	        weekdays : 'sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur'.split('_'),
	        weekdaysShort : 'sun_mán_týs_mik_hós_frí_ley'.split('_'),
	        weekdaysMin : 'su_má_tý_mi_hó_fr_le'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D. MMMM, YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[Í dag kl.] LT',
	            nextDay : '[Í morgin kl.] LT',
	            nextWeek : 'dddd [kl.] LT',
	            lastDay : '[Í gjár kl.] LT',
	            lastWeek : '[síðstu] dddd [kl] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'um %s',
	            past : '%s síðani',
	            s : 'fá sekund',
	            m : 'ein minutt',
	            mm : '%d minuttir',
	            h : 'ein tími',
	            hh : '%d tímar',
	            d : 'ein dagur',
	            dd : '%d dagar',
	            M : 'ein mánaði',
	            MM : '%d mánaðir',
	            y : 'eitt ár',
	            yy : '%d ár'
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return fo;

	}));

/***/ },
/* 397 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : french (fr)
	//! author : John Fischer : https://github.com/jfroffice

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var fr = moment.defineLocale('fr', {
	        months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
	        monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
	        weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
	        weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
	        weekdaysMin : 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[Aujourd\'hui à] LT',
	            nextDay: '[Demain à] LT',
	            nextWeek: 'dddd [à] LT',
	            lastDay: '[Hier à] LT',
	            lastWeek: 'dddd [dernier à] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'dans %s',
	            past : 'il y a %s',
	            s : 'quelques secondes',
	            m : 'une minute',
	            mm : '%d minutes',
	            h : 'une heure',
	            hh : '%d heures',
	            d : 'un jour',
	            dd : '%d jours',
	            M : 'un mois',
	            MM : '%d mois',
	            y : 'un an',
	            yy : '%d ans'
	        },
	        ordinalParse: /\d{1,2}(er|)/,
	        ordinal : function (number) {
	            return number + (number === 1 ? 'er' : '');
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return fr;

	}));

/***/ },
/* 398 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : canadian french (fr-ca)
	//! author : Jonathan Abourbih : https://github.com/jonbca

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var fr_ca = moment.defineLocale('fr-ca', {
	        months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
	        monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
	        weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
	        weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
	        weekdaysMin : 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'YYYY-MM-DD',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[Aujourd\'hui à] LT',
	            nextDay: '[Demain à] LT',
	            nextWeek: 'dddd [à] LT',
	            lastDay: '[Hier à] LT',
	            lastWeek: 'dddd [dernier à] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'dans %s',
	            past : 'il y a %s',
	            s : 'quelques secondes',
	            m : 'une minute',
	            mm : '%d minutes',
	            h : 'une heure',
	            hh : '%d heures',
	            d : 'un jour',
	            dd : '%d jours',
	            M : 'un mois',
	            MM : '%d mois',
	            y : 'un an',
	            yy : '%d ans'
	        },
	        ordinalParse: /\d{1,2}(er|e)/,
	        ordinal : function (number) {
	            return number + (number === 1 ? 'er' : 'e');
	        }
	    });

	    return fr_ca;

	}));

/***/ },
/* 399 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : frisian (fy)
	//! author : Robin van der Vliet : https://github.com/robin0van0der0v

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var monthsShortWithDots = 'jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.'.split('_'),
	        monthsShortWithoutDots = 'jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_');

	    var fy = moment.defineLocale('fy', {
	        months : 'jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber'.split('_'),
	        monthsShort : function (m, format) {
	            if (/-MMM-/.test(format)) {
	                return monthsShortWithoutDots[m.month()];
	            } else {
	                return monthsShortWithDots[m.month()];
	            }
	        },
	        weekdays : 'snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon'.split('_'),
	        weekdaysShort : 'si._mo._ti._wo._to._fr._so.'.split('_'),
	        weekdaysMin : 'Si_Mo_Ti_Wo_To_Fr_So'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD-MM-YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[hjoed om] LT',
	            nextDay: '[moarn om] LT',
	            nextWeek: 'dddd [om] LT',
	            lastDay: '[juster om] LT',
	            lastWeek: '[ôfrûne] dddd [om] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'oer %s',
	            past : '%s lyn',
	            s : 'in pear sekonden',
	            m : 'ien minút',
	            mm : '%d minuten',
	            h : 'ien oere',
	            hh : '%d oeren',
	            d : 'ien dei',
	            dd : '%d dagen',
	            M : 'ien moanne',
	            MM : '%d moannen',
	            y : 'ien jier',
	            yy : '%d jierren'
	        },
	        ordinalParse: /\d{1,2}(ste|de)/,
	        ordinal : function (number) {
	            return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return fy;

	}));

/***/ },
/* 400 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : galician (gl)
	//! author : Juan G. Hurtado : https://github.com/juanghurtado

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var gl = moment.defineLocale('gl', {
	        months : 'Xaneiro_Febreiro_Marzo_Abril_Maio_Xuño_Xullo_Agosto_Setembro_Outubro_Novembro_Decembro'.split('_'),
	        monthsShort : 'Xan._Feb._Mar._Abr._Mai._Xuñ._Xul._Ago._Set._Out._Nov._Dec.'.split('_'),
	        weekdays : 'Domingo_Luns_Martes_Mércores_Xoves_Venres_Sábado'.split('_'),
	        weekdaysShort : 'Dom._Lun._Mar._Mér._Xov._Ven._Sáb.'.split('_'),
	        weekdaysMin : 'Do_Lu_Ma_Mé_Xo_Ve_Sá'.split('_'),
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY H:mm',
	            LLLL : 'dddd D MMMM YYYY H:mm'
	        },
	        calendar : {
	            sameDay : function () {
	                return '[hoxe ' + ((this.hours() !== 1) ? 'ás' : 'á') + '] LT';
	            },
	            nextDay : function () {
	                return '[mañá ' + ((this.hours() !== 1) ? 'ás' : 'á') + '] LT';
	            },
	            nextWeek : function () {
	                return 'dddd [' + ((this.hours() !== 1) ? 'ás' : 'a') + '] LT';
	            },
	            lastDay : function () {
	                return '[onte ' + ((this.hours() !== 1) ? 'á' : 'a') + '] LT';
	            },
	            lastWeek : function () {
	                return '[o] dddd [pasado ' + ((this.hours() !== 1) ? 'ás' : 'a') + '] LT';
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : function (str) {
	                if (str === 'uns segundos') {
	                    return 'nuns segundos';
	                }
	                return 'en ' + str;
	            },
	            past : 'hai %s',
	            s : 'uns segundos',
	            m : 'un minuto',
	            mm : '%d minutos',
	            h : 'unha hora',
	            hh : '%d horas',
	            d : 'un día',
	            dd : '%d días',
	            M : 'un mes',
	            MM : '%d meses',
	            y : 'un ano',
	            yy : '%d anos'
	        },
	        ordinalParse : /\d{1,2}º/,
	        ordinal : '%dº',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return gl;

	}));

/***/ },
/* 401 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Hebrew (he)
	//! author : Tomer Cohen : https://github.com/tomer
	//! author : Moshe Simantov : https://github.com/DevelopmentIL
	//! author : Tal Ater : https://github.com/TalAter

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var he = moment.defineLocale('he', {
	        months : 'ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר'.split('_'),
	        monthsShort : 'ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳'.split('_'),
	        weekdays : 'ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת'.split('_'),
	        weekdaysShort : 'א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳'.split('_'),
	        weekdaysMin : 'א_ב_ג_ד_ה_ו_ש'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D [ב]MMMM YYYY',
	            LLL : 'D [ב]MMMM YYYY HH:mm',
	            LLLL : 'dddd, D [ב]MMMM YYYY HH:mm',
	            l : 'D/M/YYYY',
	            ll : 'D MMM YYYY',
	            lll : 'D MMM YYYY HH:mm',
	            llll : 'ddd, D MMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[היום ב־]LT',
	            nextDay : '[מחר ב־]LT',
	            nextWeek : 'dddd [בשעה] LT',
	            lastDay : '[אתמול ב־]LT',
	            lastWeek : '[ביום] dddd [האחרון בשעה] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'בעוד %s',
	            past : 'לפני %s',
	            s : 'מספר שניות',
	            m : 'דקה',
	            mm : '%d דקות',
	            h : 'שעה',
	            hh : function (number) {
	                if (number === 2) {
	                    return 'שעתיים';
	                }
	                return number + ' שעות';
	            },
	            d : 'יום',
	            dd : function (number) {
	                if (number === 2) {
	                    return 'יומיים';
	                }
	                return number + ' ימים';
	            },
	            M : 'חודש',
	            MM : function (number) {
	                if (number === 2) {
	                    return 'חודשיים';
	                }
	                return number + ' חודשים';
	            },
	            y : 'שנה',
	            yy : function (number) {
	                if (number === 2) {
	                    return 'שנתיים';
	                } else if (number % 10 === 0 && number !== 10) {
	                    return number + ' שנה';
	                }
	                return number + ' שנים';
	            }
	        }
	    });

	    return he;

	}));

/***/ },
/* 402 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : hindi (hi)
	//! author : Mayank Singhal : https://github.com/mayanksinghal

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var symbolMap = {
	        '1': '१',
	        '2': '२',
	        '3': '३',
	        '4': '४',
	        '5': '५',
	        '6': '६',
	        '7': '७',
	        '8': '८',
	        '9': '९',
	        '0': '०'
	    },
	    numberMap = {
	        '१': '1',
	        '२': '2',
	        '३': '3',
	        '४': '4',
	        '५': '5',
	        '६': '6',
	        '७': '7',
	        '८': '8',
	        '९': '9',
	        '०': '0'
	    };

	    var hi = moment.defineLocale('hi', {
	        months : 'जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर'.split('_'),
	        monthsShort : 'जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.'.split('_'),
	        weekdays : 'रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
	        weekdaysShort : 'रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि'.split('_'),
	        weekdaysMin : 'र_सो_मं_बु_गु_शु_श'.split('_'),
	        longDateFormat : {
	            LT : 'A h:mm बजे',
	            LTS : 'A h:mm:ss बजे',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY, A h:mm बजे',
	            LLLL : 'dddd, D MMMM YYYY, A h:mm बजे'
	        },
	        calendar : {
	            sameDay : '[आज] LT',
	            nextDay : '[कल] LT',
	            nextWeek : 'dddd, LT',
	            lastDay : '[कल] LT',
	            lastWeek : '[पिछले] dddd, LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s में',
	            past : '%s पहले',
	            s : 'कुछ ही क्षण',
	            m : 'एक मिनट',
	            mm : '%d मिनट',
	            h : 'एक घंटा',
	            hh : '%d घंटे',
	            d : 'एक दिन',
	            dd : '%d दिन',
	            M : 'एक महीने',
	            MM : '%d महीने',
	            y : 'एक वर्ष',
	            yy : '%d वर्ष'
	        },
	        preparse: function (string) {
	            return string.replace(/[१२३४५६७८९०]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        // Hindi notation for meridiems are quite fuzzy in practice. While there exists
	        // a rigid notion of a 'Pahar' it is not used as rigidly in modern Hindi.
	        meridiemParse: /रात|सुबह|दोपहर|शाम/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'रात') {
	                return hour < 4 ? hour : hour + 12;
	            } else if (meridiem === 'सुबह') {
	                return hour;
	            } else if (meridiem === 'दोपहर') {
	                return hour >= 10 ? hour : hour + 12;
	            } else if (meridiem === 'शाम') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'रात';
	            } else if (hour < 10) {
	                return 'सुबह';
	            } else if (hour < 17) {
	                return 'दोपहर';
	            } else if (hour < 20) {
	                return 'शाम';
	            } else {
	                return 'रात';
	            }
	        },
	        week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 6  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return hi;

	}));

/***/ },
/* 403 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : hrvatski (hr)
	//! author : Bojan Marković : https://github.com/bmarkovic

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    function translate(number, withoutSuffix, key) {
	        var result = number + ' ';
	        switch (key) {
	        case 'm':
	            return withoutSuffix ? 'jedna minuta' : 'jedne minute';
	        case 'mm':
	            if (number === 1) {
	                result += 'minuta';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'minute';
	            } else {
	                result += 'minuta';
	            }
	            return result;
	        case 'h':
	            return withoutSuffix ? 'jedan sat' : 'jednog sata';
	        case 'hh':
	            if (number === 1) {
	                result += 'sat';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'sata';
	            } else {
	                result += 'sati';
	            }
	            return result;
	        case 'dd':
	            if (number === 1) {
	                result += 'dan';
	            } else {
	                result += 'dana';
	            }
	            return result;
	        case 'MM':
	            if (number === 1) {
	                result += 'mjesec';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'mjeseca';
	            } else {
	                result += 'mjeseci';
	            }
	            return result;
	        case 'yy':
	            if (number === 1) {
	                result += 'godina';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'godine';
	            } else {
	                result += 'godina';
	            }
	            return result;
	        }
	    }

	    var hr = moment.defineLocale('hr', {
	        months : 'siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac'.split('_'),
	        monthsShort : 'sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.'.split('_'),
	        weekdays : 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
	        weekdaysShort : 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
	        weekdaysMin : 'ne_po_ut_sr_če_pe_su'.split('_'),
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'DD. MM. YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY H:mm',
	            LLLL : 'dddd, D. MMMM YYYY H:mm'
	        },
	        calendar : {
	            sameDay  : '[danas u] LT',
	            nextDay  : '[sutra u] LT',
	            nextWeek : function () {
	                switch (this.day()) {
	                case 0:
	                    return '[u] [nedjelju] [u] LT';
	                case 3:
	                    return '[u] [srijedu] [u] LT';
	                case 6:
	                    return '[u] [subotu] [u] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[u] dddd [u] LT';
	                }
	            },
	            lastDay  : '[jučer u] LT',
	            lastWeek : function () {
	                switch (this.day()) {
	                case 0:
	                case 3:
	                    return '[prošlu] dddd [u] LT';
	                case 6:
	                    return '[prošle] [subote] [u] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[prošli] dddd [u] LT';
	                }
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'za %s',
	            past   : 'prije %s',
	            s      : 'par sekundi',
	            m      : translate,
	            mm     : translate,
	            h      : translate,
	            hh     : translate,
	            d      : 'dan',
	            dd     : translate,
	            M      : 'mjesec',
	            MM     : translate,
	            y      : 'godinu',
	            yy     : translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return hr;

	}));

/***/ },
/* 404 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : hungarian (hu)
	//! author : Adam Brunner : https://github.com/adambrunner

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var weekEndings = 'vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton'.split(' ');
	    function translate(number, withoutSuffix, key, isFuture) {
	        var num = number,
	            suffix;
	        switch (key) {
	        case 's':
	            return (isFuture || withoutSuffix) ? 'néhány másodperc' : 'néhány másodperce';
	        case 'm':
	            return 'egy' + (isFuture || withoutSuffix ? ' perc' : ' perce');
	        case 'mm':
	            return num + (isFuture || withoutSuffix ? ' perc' : ' perce');
	        case 'h':
	            return 'egy' + (isFuture || withoutSuffix ? ' óra' : ' órája');
	        case 'hh':
	            return num + (isFuture || withoutSuffix ? ' óra' : ' órája');
	        case 'd':
	            return 'egy' + (isFuture || withoutSuffix ? ' nap' : ' napja');
	        case 'dd':
	            return num + (isFuture || withoutSuffix ? ' nap' : ' napja');
	        case 'M':
	            return 'egy' + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
	        case 'MM':
	            return num + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
	        case 'y':
	            return 'egy' + (isFuture || withoutSuffix ? ' év' : ' éve');
	        case 'yy':
	            return num + (isFuture || withoutSuffix ? ' év' : ' éve');
	        }
	        return '';
	    }
	    function week(isFuture) {
	        return (isFuture ? '' : '[múlt] ') + '[' + weekEndings[this.day()] + '] LT[-kor]';
	    }

	    var hu = moment.defineLocale('hu', {
	        months : 'január_február_március_április_május_június_július_augusztus_szeptember_október_november_december'.split('_'),
	        monthsShort : 'jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec'.split('_'),
	        weekdays : 'vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat'.split('_'),
	        weekdaysShort : 'vas_hét_kedd_sze_csüt_pén_szo'.split('_'),
	        weekdaysMin : 'v_h_k_sze_cs_p_szo'.split('_'),
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'YYYY.MM.DD.',
	            LL : 'YYYY. MMMM D.',
	            LLL : 'YYYY. MMMM D. H:mm',
	            LLLL : 'YYYY. MMMM D., dddd H:mm'
	        },
	        meridiemParse: /de|du/i,
	        isPM: function (input) {
	            return input.charAt(1).toLowerCase() === 'u';
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours < 12) {
	                return isLower === true ? 'de' : 'DE';
	            } else {
	                return isLower === true ? 'du' : 'DU';
	            }
	        },
	        calendar : {
	            sameDay : '[ma] LT[-kor]',
	            nextDay : '[holnap] LT[-kor]',
	            nextWeek : function () {
	                return week.call(this, true);
	            },
	            lastDay : '[tegnap] LT[-kor]',
	            lastWeek : function () {
	                return week.call(this, false);
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s múlva',
	            past : '%s',
	            s : translate,
	            m : translate,
	            mm : translate,
	            h : translate,
	            hh : translate,
	            d : translate,
	            dd : translate,
	            M : translate,
	            MM : translate,
	            y : translate,
	            yy : translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return hu;

	}));

/***/ },
/* 405 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Armenian (hy-am)
	//! author : Armendarabyan : https://github.com/armendarabyan

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    function monthsCaseReplace(m, format) {
	        var months = {
	            'nominative': 'հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր'.split('_'),
	            'accusative': 'հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի'.split('_')
	        },
	        nounCase = (/D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/).test(format) ?
	            'accusative' :
	            'nominative';
	        return months[nounCase][m.month()];
	    }
	    function monthsShortCaseReplace(m, format) {
	        var monthsShort = 'հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ'.split('_');
	        return monthsShort[m.month()];
	    }
	    function weekdaysCaseReplace(m, format) {
	        var weekdays = 'կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ'.split('_');
	        return weekdays[m.day()];
	    }

	    var hy_am = moment.defineLocale('hy-am', {
	        months : monthsCaseReplace,
	        monthsShort : monthsShortCaseReplace,
	        weekdays : weekdaysCaseReplace,
	        weekdaysShort : 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
	        weekdaysMin : 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY թ.',
	            LLL : 'D MMMM YYYY թ., HH:mm',
	            LLLL : 'dddd, D MMMM YYYY թ., HH:mm'
	        },
	        calendar : {
	            sameDay: '[այսօր] LT',
	            nextDay: '[վաղը] LT',
	            lastDay: '[երեկ] LT',
	            nextWeek: function () {
	                return 'dddd [օրը ժամը] LT';
	            },
	            lastWeek: function () {
	                return '[անցած] dddd [օրը ժամը] LT';
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : '%s հետո',
	            past : '%s առաջ',
	            s : 'մի քանի վայրկյան',
	            m : 'րոպե',
	            mm : '%d րոպե',
	            h : 'ժամ',
	            hh : '%d ժամ',
	            d : 'օր',
	            dd : '%d օր',
	            M : 'ամիս',
	            MM : '%d ամիս',
	            y : 'տարի',
	            yy : '%d տարի'
	        },
	        meridiemParse: /գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,
	        isPM: function (input) {
	            return /^(ցերեկվա|երեկոյան)$/.test(input);
	        },
	        meridiem : function (hour) {
	            if (hour < 4) {
	                return 'գիշերվա';
	            } else if (hour < 12) {
	                return 'առավոտվա';
	            } else if (hour < 17) {
	                return 'ցերեկվա';
	            } else {
	                return 'երեկոյան';
	            }
	        },
	        ordinalParse: /\d{1,2}|\d{1,2}-(ին|րդ)/,
	        ordinal: function (number, period) {
	            switch (period) {
	            case 'DDD':
	            case 'w':
	            case 'W':
	            case 'DDDo':
	                if (number === 1) {
	                    return number + '-ին';
	                }
	                return number + '-րդ';
	            default:
	                return number;
	            }
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return hy_am;

	}));

/***/ },
/* 406 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Bahasa Indonesia (id)
	//! author : Mohammad Satrio Utomo : https://github.com/tyok
	//! reference: http://id.wikisource.org/wiki/Pedoman_Umum_Ejaan_Bahasa_Indonesia_yang_Disempurnakan

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var id = moment.defineLocale('id', {
	        months : 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember'.split('_'),
	        monthsShort : 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nov_Des'.split('_'),
	        weekdays : 'Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu'.split('_'),
	        weekdaysShort : 'Min_Sen_Sel_Rab_Kam_Jum_Sab'.split('_'),
	        weekdaysMin : 'Mg_Sn_Sl_Rb_Km_Jm_Sb'.split('_'),
	        longDateFormat : {
	            LT : 'HH.mm',
	            LTS : 'HH.mm.ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY [pukul] HH.mm',
	            LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
	        },
	        meridiemParse: /pagi|siang|sore|malam/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'pagi') {
	                return hour;
	            } else if (meridiem === 'siang') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === 'sore' || meridiem === 'malam') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours < 11) {
	                return 'pagi';
	            } else if (hours < 15) {
	                return 'siang';
	            } else if (hours < 19) {
	                return 'sore';
	            } else {
	                return 'malam';
	            }
	        },
	        calendar : {
	            sameDay : '[Hari ini pukul] LT',
	            nextDay : '[Besok pukul] LT',
	            nextWeek : 'dddd [pukul] LT',
	            lastDay : '[Kemarin pukul] LT',
	            lastWeek : 'dddd [lalu pukul] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'dalam %s',
	            past : '%s yang lalu',
	            s : 'beberapa detik',
	            m : 'semenit',
	            mm : '%d menit',
	            h : 'sejam',
	            hh : '%d jam',
	            d : 'sehari',
	            dd : '%d hari',
	            M : 'sebulan',
	            MM : '%d bulan',
	            y : 'setahun',
	            yy : '%d tahun'
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return id;

	}));

/***/ },
/* 407 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : icelandic (is)
	//! author : Hinrik Örn Sigurðsson : https://github.com/hinrik

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    function plural(n) {
	        if (n % 100 === 11) {
	            return true;
	        } else if (n % 10 === 1) {
	            return false;
	        }
	        return true;
	    }
	    function translate(number, withoutSuffix, key, isFuture) {
	        var result = number + ' ';
	        switch (key) {
	        case 's':
	            return withoutSuffix || isFuture ? 'nokkrar sekúndur' : 'nokkrum sekúndum';
	        case 'm':
	            return withoutSuffix ? 'mínúta' : 'mínútu';
	        case 'mm':
	            if (plural(number)) {
	                return result + (withoutSuffix || isFuture ? 'mínútur' : 'mínútum');
	            } else if (withoutSuffix) {
	                return result + 'mínúta';
	            }
	            return result + 'mínútu';
	        case 'hh':
	            if (plural(number)) {
	                return result + (withoutSuffix || isFuture ? 'klukkustundir' : 'klukkustundum');
	            }
	            return result + 'klukkustund';
	        case 'd':
	            if (withoutSuffix) {
	                return 'dagur';
	            }
	            return isFuture ? 'dag' : 'degi';
	        case 'dd':
	            if (plural(number)) {
	                if (withoutSuffix) {
	                    return result + 'dagar';
	                }
	                return result + (isFuture ? 'daga' : 'dögum');
	            } else if (withoutSuffix) {
	                return result + 'dagur';
	            }
	            return result + (isFuture ? 'dag' : 'degi');
	        case 'M':
	            if (withoutSuffix) {
	                return 'mánuður';
	            }
	            return isFuture ? 'mánuð' : 'mánuði';
	        case 'MM':
	            if (plural(number)) {
	                if (withoutSuffix) {
	                    return result + 'mánuðir';
	                }
	                return result + (isFuture ? 'mánuði' : 'mánuðum');
	            } else if (withoutSuffix) {
	                return result + 'mánuður';
	            }
	            return result + (isFuture ? 'mánuð' : 'mánuði');
	        case 'y':
	            return withoutSuffix || isFuture ? 'ár' : 'ári';
	        case 'yy':
	            if (plural(number)) {
	                return result + (withoutSuffix || isFuture ? 'ár' : 'árum');
	            }
	            return result + (withoutSuffix || isFuture ? 'ár' : 'ári');
	        }
	    }

	    var is = moment.defineLocale('is', {
	        months : 'janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember'.split('_'),
	        monthsShort : 'jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des'.split('_'),
	        weekdays : 'sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur'.split('_'),
	        weekdaysShort : 'sun_mán_þri_mið_fim_fös_lau'.split('_'),
	        weekdaysMin : 'Su_Má_Þr_Mi_Fi_Fö_La'.split('_'),
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY [kl.] H:mm',
	            LLLL : 'dddd, D. MMMM YYYY [kl.] H:mm'
	        },
	        calendar : {
	            sameDay : '[í dag kl.] LT',
	            nextDay : '[á morgun kl.] LT',
	            nextWeek : 'dddd [kl.] LT',
	            lastDay : '[í gær kl.] LT',
	            lastWeek : '[síðasta] dddd [kl.] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'eftir %s',
	            past : 'fyrir %s síðan',
	            s : translate,
	            m : translate,
	            mm : translate,
	            h : 'klukkustund',
	            hh : translate,
	            d : translate,
	            dd : translate,
	            M : translate,
	            MM : translate,
	            y : translate,
	            yy : translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return is;

	}));

/***/ },
/* 408 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : italian (it)
	//! author : Lorenzo : https://github.com/aliem
	//! author: Mattia Larentis: https://github.com/nostalgiaz

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var it = moment.defineLocale('it', {
	        months : 'gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre'.split('_'),
	        monthsShort : 'gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic'.split('_'),
	        weekdays : 'Domenica_Lunedì_Martedì_Mercoledì_Giovedì_Venerdì_Sabato'.split('_'),
	        weekdaysShort : 'Dom_Lun_Mar_Mer_Gio_Ven_Sab'.split('_'),
	        weekdaysMin : 'D_L_Ma_Me_G_V_S'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[Oggi alle] LT',
	            nextDay: '[Domani alle] LT',
	            nextWeek: 'dddd [alle] LT',
	            lastDay: '[Ieri alle] LT',
	            lastWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[la scorsa] dddd [alle] LT';
	                    default:
	                        return '[lo scorso] dddd [alle] LT';
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : function (s) {
	                return ((/^[0-9].+$/).test(s) ? 'tra' : 'in') + ' ' + s;
	            },
	            past : '%s fa',
	            s : 'alcuni secondi',
	            m : 'un minuto',
	            mm : '%d minuti',
	            h : 'un\'ora',
	            hh : '%d ore',
	            d : 'un giorno',
	            dd : '%d giorni',
	            M : 'un mese',
	            MM : '%d mesi',
	            y : 'un anno',
	            yy : '%d anni'
	        },
	        ordinalParse : /\d{1,2}º/,
	        ordinal: '%dº',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return it;

	}));

/***/ },
/* 409 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : japanese (ja)
	//! author : LI Long : https://github.com/baryon

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var ja = moment.defineLocale('ja', {
	        months : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	        monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	        weekdays : '日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日'.split('_'),
	        weekdaysShort : '日_月_火_水_木_金_土'.split('_'),
	        weekdaysMin : '日_月_火_水_木_金_土'.split('_'),
	        longDateFormat : {
	            LT : 'Ah時m分',
	            LTS : 'Ah時m分s秒',
	            L : 'YYYY/MM/DD',
	            LL : 'YYYY年M月D日',
	            LLL : 'YYYY年M月D日Ah時m分',
	            LLLL : 'YYYY年M月D日Ah時m分 dddd'
	        },
	        meridiemParse: /午前|午後/i,
	        isPM : function (input) {
	            return input === '午後';
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 12) {
	                return '午前';
	            } else {
	                return '午後';
	            }
	        },
	        calendar : {
	            sameDay : '[今日] LT',
	            nextDay : '[明日] LT',
	            nextWeek : '[来週]dddd LT',
	            lastDay : '[昨日] LT',
	            lastWeek : '[前週]dddd LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s後',
	            past : '%s前',
	            s : '数秒',
	            m : '1分',
	            mm : '%d分',
	            h : '1時間',
	            hh : '%d時間',
	            d : '1日',
	            dd : '%d日',
	            M : '1ヶ月',
	            MM : '%dヶ月',
	            y : '1年',
	            yy : '%d年'
	        }
	    });

	    return ja;

	}));

/***/ },
/* 410 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Boso Jowo (jv)
	//! author : Rony Lantip : https://github.com/lantip
	//! reference: http://jv.wikipedia.org/wiki/Basa_Jawa

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var jv = moment.defineLocale('jv', {
	        months : 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember'.split('_'),
	        monthsShort : 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des'.split('_'),
	        weekdays : 'Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu'.split('_'),
	        weekdaysShort : 'Min_Sen_Sel_Reb_Kem_Jem_Sep'.split('_'),
	        weekdaysMin : 'Mg_Sn_Sl_Rb_Km_Jm_Sp'.split('_'),
	        longDateFormat : {
	            LT : 'HH.mm',
	            LTS : 'HH.mm.ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY [pukul] HH.mm',
	            LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
	        },
	        meridiemParse: /enjing|siyang|sonten|ndalu/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'enjing') {
	                return hour;
	            } else if (meridiem === 'siyang') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === 'sonten' || meridiem === 'ndalu') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours < 11) {
	                return 'enjing';
	            } else if (hours < 15) {
	                return 'siyang';
	            } else if (hours < 19) {
	                return 'sonten';
	            } else {
	                return 'ndalu';
	            }
	        },
	        calendar : {
	            sameDay : '[Dinten puniko pukul] LT',
	            nextDay : '[Mbenjang pukul] LT',
	            nextWeek : 'dddd [pukul] LT',
	            lastDay : '[Kala wingi pukul] LT',
	            lastWeek : 'dddd [kepengker pukul] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'wonten ing %s',
	            past : '%s ingkang kepengker',
	            s : 'sawetawis detik',
	            m : 'setunggal menit',
	            mm : '%d menit',
	            h : 'setunggal jam',
	            hh : '%d jam',
	            d : 'sedinten',
	            dd : '%d dinten',
	            M : 'sewulan',
	            MM : '%d wulan',
	            y : 'setaun',
	            yy : '%d taun'
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return jv;

	}));

/***/ },
/* 411 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Georgian (ka)
	//! author : Irakli Janiashvili : https://github.com/irakli-janiashvili

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    function monthsCaseReplace(m, format) {
	        var months = {
	            'nominative': 'იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი'.split('_'),
	            'accusative': 'იანვარს_თებერვალს_მარტს_აპრილის_მაისს_ივნისს_ივლისს_აგვისტს_სექტემბერს_ოქტომბერს_ნოემბერს_დეკემბერს'.split('_')
	        },
	        nounCase = (/D[oD] *MMMM?/).test(format) ?
	            'accusative' :
	            'nominative';
	        return months[nounCase][m.month()];
	    }
	    function weekdaysCaseReplace(m, format) {
	        var weekdays = {
	            'nominative': 'კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი'.split('_'),
	            'accusative': 'კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს'.split('_')
	        },
	        nounCase = (/(წინა|შემდეგ)/).test(format) ?
	            'accusative' :
	            'nominative';
	        return weekdays[nounCase][m.day()];
	    }

	    var ka = moment.defineLocale('ka', {
	        months : monthsCaseReplace,
	        monthsShort : 'იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ'.split('_'),
	        weekdays : weekdaysCaseReplace,
	        weekdaysShort : 'კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ'.split('_'),
	        weekdaysMin : 'კვ_ორ_სა_ოთ_ხუ_პა_შა'.split('_'),
	        longDateFormat : {
	            LT : 'h:mm A',
	            LTS : 'h:mm:ss A',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY h:mm A',
	            LLLL : 'dddd, D MMMM YYYY h:mm A'
	        },
	        calendar : {
	            sameDay : '[დღეს] LT[-ზე]',
	            nextDay : '[ხვალ] LT[-ზე]',
	            lastDay : '[გუშინ] LT[-ზე]',
	            nextWeek : '[შემდეგ] dddd LT[-ზე]',
	            lastWeek : '[წინა] dddd LT-ზე',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : function (s) {
	                return (/(წამი|წუთი|საათი|წელი)/).test(s) ?
	                    s.replace(/ი$/, 'ში') :
	                    s + 'ში';
	            },
	            past : function (s) {
	                if ((/(წამი|წუთი|საათი|დღე|თვე)/).test(s)) {
	                    return s.replace(/(ი|ე)$/, 'ის წინ');
	                }
	                if ((/წელი/).test(s)) {
	                    return s.replace(/წელი$/, 'წლის წინ');
	                }
	            },
	            s : 'რამდენიმე წამი',
	            m : 'წუთი',
	            mm : '%d წუთი',
	            h : 'საათი',
	            hh : '%d საათი',
	            d : 'დღე',
	            dd : '%d დღე',
	            M : 'თვე',
	            MM : '%d თვე',
	            y : 'წელი',
	            yy : '%d წელი'
	        },
	        ordinalParse: /0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,
	        ordinal : function (number) {
	            if (number === 0) {
	                return number;
	            }
	            if (number === 1) {
	                return number + '-ლი';
	            }
	            if ((number < 20) || (number <= 100 && (number % 20 === 0)) || (number % 100 === 0)) {
	                return 'მე-' + number;
	            }
	            return number + '-ე';
	        },
	        week : {
	            dow : 1,
	            doy : 7
	        }
	    });

	    return ka;

	}));

/***/ },
/* 412 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : khmer (km)
	//! author : Kruy Vanna : https://github.com/kruyvanna

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var km = moment.defineLocale('km', {
	        months: 'មករា_កុម្ភៈ_មិនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split('_'),
	        monthsShort: 'មករា_កុម្ភៈ_មិនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split('_'),
	        weekdays: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
	        weekdaysShort: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
	        weekdaysMin: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[ថ្ងៃនៈ ម៉ោង] LT',
	            nextDay: '[ស្អែក ម៉ោង] LT',
	            nextWeek: 'dddd [ម៉ោង] LT',
	            lastDay: '[ម្សិលមិញ ម៉ោង] LT',
	            lastWeek: 'dddd [សប្តាហ៍មុន] [ម៉ោង] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: '%sទៀត',
	            past: '%sមុន',
	            s: 'ប៉ុន្មានវិនាទី',
	            m: 'មួយនាទី',
	            mm: '%d នាទី',
	            h: 'មួយម៉ោង',
	            hh: '%d ម៉ោង',
	            d: 'មួយថ្ងៃ',
	            dd: '%d ថ្ងៃ',
	            M: 'មួយខែ',
	            MM: '%d ខែ',
	            y: 'មួយឆ្នាំ',
	            yy: '%d ឆ្នាំ'
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return km;

	}));

/***/ },
/* 413 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : korean (ko)
	//!
	//! authors
	//!
	//! - Kyungwook, Park : https://github.com/kyungw00k
	//! - Jeeeyul Lee <jeeeyul@gmail.com>

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var ko = moment.defineLocale('ko', {
	        months : '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
	        monthsShort : '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
	        weekdays : '일요일_월요일_화요일_수요일_목요일_금요일_토요일'.split('_'),
	        weekdaysShort : '일_월_화_수_목_금_토'.split('_'),
	        weekdaysMin : '일_월_화_수_목_금_토'.split('_'),
	        longDateFormat : {
	            LT : 'A h시 m분',
	            LTS : 'A h시 m분 s초',
	            L : 'YYYY.MM.DD',
	            LL : 'YYYY년 MMMM D일',
	            LLL : 'YYYY년 MMMM D일 A h시 m분',
	            LLLL : 'YYYY년 MMMM D일 dddd A h시 m분'
	        },
	        calendar : {
	            sameDay : '오늘 LT',
	            nextDay : '내일 LT',
	            nextWeek : 'dddd LT',
	            lastDay : '어제 LT',
	            lastWeek : '지난주 dddd LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s 후',
	            past : '%s 전',
	            s : '몇초',
	            ss : '%d초',
	            m : '일분',
	            mm : '%d분',
	            h : '한시간',
	            hh : '%d시간',
	            d : '하루',
	            dd : '%d일',
	            M : '한달',
	            MM : '%d달',
	            y : '일년',
	            yy : '%d년'
	        },
	        ordinalParse : /\d{1,2}일/,
	        ordinal : '%d일',
	        meridiemParse : /오전|오후/,
	        isPM : function (token) {
	            return token === '오후';
	        },
	        meridiem : function (hour, minute, isUpper) {
	            return hour < 12 ? '오전' : '오후';
	        }
	    });

	    return ko;

	}));

/***/ },
/* 414 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Luxembourgish (lb)
	//! author : mweimerskirch : https://github.com/mweimerskirch, David Raison : https://github.com/kwisatz

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            'm': ['eng Minutt', 'enger Minutt'],
	            'h': ['eng Stonn', 'enger Stonn'],
	            'd': ['een Dag', 'engem Dag'],
	            'M': ['ee Mount', 'engem Mount'],
	            'y': ['ee Joer', 'engem Joer']
	        };
	        return withoutSuffix ? format[key][0] : format[key][1];
	    }
	    function processFutureTime(string) {
	        var number = string.substr(0, string.indexOf(' '));
	        if (eifelerRegelAppliesToNumber(number)) {
	            return 'a ' + string;
	        }
	        return 'an ' + string;
	    }
	    function processPastTime(string) {
	        var number = string.substr(0, string.indexOf(' '));
	        if (eifelerRegelAppliesToNumber(number)) {
	            return 'viru ' + string;
	        }
	        return 'virun ' + string;
	    }
	    /**
	     * Returns true if the word before the given number loses the '-n' ending.
	     * e.g. 'an 10 Deeg' but 'a 5 Deeg'
	     *
	     * @param number {integer}
	     * @returns {boolean}
	     */
	    function eifelerRegelAppliesToNumber(number) {
	        number = parseInt(number, 10);
	        if (isNaN(number)) {
	            return false;
	        }
	        if (number < 0) {
	            // Negative Number --> always true
	            return true;
	        } else if (number < 10) {
	            // Only 1 digit
	            if (4 <= number && number <= 7) {
	                return true;
	            }
	            return false;
	        } else if (number < 100) {
	            // 2 digits
	            var lastDigit = number % 10, firstDigit = number / 10;
	            if (lastDigit === 0) {
	                return eifelerRegelAppliesToNumber(firstDigit);
	            }
	            return eifelerRegelAppliesToNumber(lastDigit);
	        } else if (number < 10000) {
	            // 3 or 4 digits --> recursively check first digit
	            while (number >= 10) {
	                number = number / 10;
	            }
	            return eifelerRegelAppliesToNumber(number);
	        } else {
	            // Anything larger than 4 digits: recursively check first n-3 digits
	            number = number / 1000;
	            return eifelerRegelAppliesToNumber(number);
	        }
	    }

	    var lb = moment.defineLocale('lb', {
	        months: 'Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
	        monthsShort: 'Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
	        weekdays: 'Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg'.split('_'),
	        weekdaysShort: 'So._Mé._Dë._Më._Do._Fr._Sa.'.split('_'),
	        weekdaysMin: 'So_Mé_Dë_Më_Do_Fr_Sa'.split('_'),
	        longDateFormat: {
	            LT: 'H:mm [Auer]',
	            LTS: 'H:mm:ss [Auer]',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY H:mm [Auer]',
	            LLLL: 'dddd, D. MMMM YYYY H:mm [Auer]'
	        },
	        calendar: {
	            sameDay: '[Haut um] LT',
	            sameElse: 'L',
	            nextDay: '[Muer um] LT',
	            nextWeek: 'dddd [um] LT',
	            lastDay: '[Gëschter um] LT',
	            lastWeek: function () {
	                // Different date string for 'Dënschdeg' (Tuesday) and 'Donneschdeg' (Thursday) due to phonological rule
	                switch (this.day()) {
	                    case 2:
	                    case 4:
	                        return '[Leschten] dddd [um] LT';
	                    default:
	                        return '[Leschte] dddd [um] LT';
	                }
	            }
	        },
	        relativeTime : {
	            future : processFutureTime,
	            past : processPastTime,
	            s : 'e puer Sekonnen',
	            m : processRelativeTime,
	            mm : '%d Minutten',
	            h : processRelativeTime,
	            hh : '%d Stonnen',
	            d : processRelativeTime,
	            dd : '%d Deeg',
	            M : processRelativeTime,
	            MM : '%d Méint',
	            y : processRelativeTime,
	            yy : '%d Joer'
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return lb;

	}));

/***/ },
/* 415 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Lithuanian (lt)
	//! author : Mindaugas Mozūras : https://github.com/mmozuras

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var units = {
	        'm' : 'minutė_minutės_minutę',
	        'mm': 'minutės_minučių_minutes',
	        'h' : 'valanda_valandos_valandą',
	        'hh': 'valandos_valandų_valandas',
	        'd' : 'diena_dienos_dieną',
	        'dd': 'dienos_dienų_dienas',
	        'M' : 'mėnuo_mėnesio_mėnesį',
	        'MM': 'mėnesiai_mėnesių_mėnesius',
	        'y' : 'metai_metų_metus',
	        'yy': 'metai_metų_metus'
	    },
	    weekDays = 'sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis'.split('_');
	    function translateSeconds(number, withoutSuffix, key, isFuture) {
	        if (withoutSuffix) {
	            return 'kelios sekundės';
	        } else {
	            return isFuture ? 'kelių sekundžių' : 'kelias sekundes';
	        }
	    }
	    function monthsCaseReplace(m, format) {
	        var months = {
	                'nominative': 'sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis'.split('_'),
	                'accusative': 'sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio'.split('_')
	            },
	            nounCase = (/D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/).test(format) ?
	                'accusative' :
	                'nominative';
	        return months[nounCase][m.month()];
	    }
	    function translateSingular(number, withoutSuffix, key, isFuture) {
	        return withoutSuffix ? forms(key)[0] : (isFuture ? forms(key)[1] : forms(key)[2]);
	    }
	    function special(number) {
	        return number % 10 === 0 || (number > 10 && number < 20);
	    }
	    function forms(key) {
	        return units[key].split('_');
	    }
	    function translate(number, withoutSuffix, key, isFuture) {
	        var result = number + ' ';
	        if (number === 1) {
	            return result + translateSingular(number, withoutSuffix, key[0], isFuture);
	        } else if (withoutSuffix) {
	            return result + (special(number) ? forms(key)[1] : forms(key)[0]);
	        } else {
	            if (isFuture) {
	                return result + forms(key)[1];
	            } else {
	                return result + (special(number) ? forms(key)[1] : forms(key)[2]);
	            }
	        }
	    }
	    function relativeWeekDay(moment, format) {
	        var nominative = format.indexOf('dddd HH:mm') === -1,
	            weekDay = weekDays[moment.day()];
	        return nominative ? weekDay : weekDay.substring(0, weekDay.length - 2) + 'į';
	    }

	    var lt = moment.defineLocale('lt', {
	        months : monthsCaseReplace,
	        monthsShort : 'sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd'.split('_'),
	        weekdays : relativeWeekDay,
	        weekdaysShort : 'Sek_Pir_Ant_Tre_Ket_Pen_Šeš'.split('_'),
	        weekdaysMin : 'S_P_A_T_K_Pn_Š'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'YYYY-MM-DD',
	            LL : 'YYYY [m.] MMMM D [d.]',
	            LLL : 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
	            LLLL : 'YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]',
	            l : 'YYYY-MM-DD',
	            ll : 'YYYY [m.] MMMM D [d.]',
	            lll : 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
	            llll : 'YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]'
	        },
	        calendar : {
	            sameDay : '[Šiandien] LT',
	            nextDay : '[Rytoj] LT',
	            nextWeek : 'dddd LT',
	            lastDay : '[Vakar] LT',
	            lastWeek : '[Praėjusį] dddd LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'po %s',
	            past : 'prieš %s',
	            s : translateSeconds,
	            m : translateSingular,
	            mm : translate,
	            h : translateSingular,
	            hh : translate,
	            d : translateSingular,
	            dd : translate,
	            M : translateSingular,
	            MM : translate,
	            y : translateSingular,
	            yy : translate
	        },
	        ordinalParse: /\d{1,2}-oji/,
	        ordinal : function (number) {
	            return number + '-oji';
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return lt;

	}));

/***/ },
/* 416 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : latvian (lv)
	//! author : Kristaps Karlsons : https://github.com/skakri
	//! author : Jānis Elmeris : https://github.com/JanisE

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var units = {
	        'm': 'minūtes_minūtēm_minūte_minūtes'.split('_'),
	        'mm': 'minūtes_minūtēm_minūte_minūtes'.split('_'),
	        'h': 'stundas_stundām_stunda_stundas'.split('_'),
	        'hh': 'stundas_stundām_stunda_stundas'.split('_'),
	        'd': 'dienas_dienām_diena_dienas'.split('_'),
	        'dd': 'dienas_dienām_diena_dienas'.split('_'),
	        'M': 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
	        'MM': 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
	        'y': 'gada_gadiem_gads_gadi'.split('_'),
	        'yy': 'gada_gadiem_gads_gadi'.split('_')
	    };
	    /**
	     * @param withoutSuffix boolean true = a length of time; false = before/after a period of time.
	     */
	    function format(forms, number, withoutSuffix) {
	        if (withoutSuffix) {
	            // E.g. "21 minūte", "3 minūtes".
	            return number % 10 === 1 && number !== 11 ? forms[2] : forms[3];
	        } else {
	            // E.g. "21 minūtes" as in "pēc 21 minūtes".
	            // E.g. "3 minūtēm" as in "pēc 3 minūtēm".
	            return number % 10 === 1 && number !== 11 ? forms[0] : forms[1];
	        }
	    }
	    function relativeTimeWithPlural(number, withoutSuffix, key) {
	        return number + ' ' + format(units[key], number, withoutSuffix);
	    }
	    function relativeTimeWithSingular(number, withoutSuffix, key) {
	        return format(units[key], number, withoutSuffix);
	    }
	    function relativeSeconds(number, withoutSuffix) {
	        return withoutSuffix ? 'dažas sekundes' : 'dažām sekundēm';
	    }

	    var lv = moment.defineLocale('lv', {
	        months : 'janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris'.split('_'),
	        monthsShort : 'jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec'.split('_'),
	        weekdays : 'svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena'.split('_'),
	        weekdaysShort : 'Sv_P_O_T_C_Pk_S'.split('_'),
	        weekdaysMin : 'Sv_P_O_T_C_Pk_S'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY.',
	            LL : 'YYYY. [gada] D. MMMM',
	            LLL : 'YYYY. [gada] D. MMMM, HH:mm',
	            LLLL : 'YYYY. [gada] D. MMMM, dddd, HH:mm'
	        },
	        calendar : {
	            sameDay : '[Šodien pulksten] LT',
	            nextDay : '[Rīt pulksten] LT',
	            nextWeek : 'dddd [pulksten] LT',
	            lastDay : '[Vakar pulksten] LT',
	            lastWeek : '[Pagājušā] dddd [pulksten] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'pēc %s',
	            past : 'pirms %s',
	            s : relativeSeconds,
	            m : relativeTimeWithSingular,
	            mm : relativeTimeWithPlural,
	            h : relativeTimeWithSingular,
	            hh : relativeTimeWithPlural,
	            d : relativeTimeWithSingular,
	            dd : relativeTimeWithPlural,
	            M : relativeTimeWithSingular,
	            MM : relativeTimeWithPlural,
	            y : relativeTimeWithSingular,
	            yy : relativeTimeWithPlural
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return lv;

	}));

/***/ },
/* 417 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Montenegrin (me)
	//! author : Miodrag Nikač <miodrag@restartit.me> : https://github.com/miodragnikac

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var translator = {
	        words: { //Different grammatical cases
	            m: ['jedan minut', 'jednog minuta'],
	            mm: ['minut', 'minuta', 'minuta'],
	            h: ['jedan sat', 'jednog sata'],
	            hh: ['sat', 'sata', 'sati'],
	            dd: ['dan', 'dana', 'dana'],
	            MM: ['mjesec', 'mjeseca', 'mjeseci'],
	            yy: ['godina', 'godine', 'godina']
	        },
	        correctGrammaticalCase: function (number, wordKey) {
	            return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
	        },
	        translate: function (number, withoutSuffix, key) {
	            var wordKey = translator.words[key];
	            if (key.length === 1) {
	                return withoutSuffix ? wordKey[0] : wordKey[1];
	            } else {
	                return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
	            }
	        }
	    };

	    var me = moment.defineLocale('me', {
	        months: ['januar', 'februar', 'mart', 'april', 'maj', 'jun', 'jul', 'avgust', 'septembar', 'oktobar', 'novembar', 'decembar'],
	        monthsShort: ['jan.', 'feb.', 'mar.', 'apr.', 'maj', 'jun', 'jul', 'avg.', 'sep.', 'okt.', 'nov.', 'dec.'],
	        weekdays: ['nedjelja', 'ponedjeljak', 'utorak', 'srijeda', 'četvrtak', 'petak', 'subota'],
	        weekdaysShort: ['ned.', 'pon.', 'uto.', 'sri.', 'čet.', 'pet.', 'sub.'],
	        weekdaysMin: ['ne', 'po', 'ut', 'sr', 'če', 'pe', 'su'],
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS : 'H:mm:ss',
	            L: 'DD. MM. YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY H:mm',
	            LLLL: 'dddd, D. MMMM YYYY H:mm'
	        },
	        calendar: {
	            sameDay: '[danas u] LT',
	            nextDay: '[sjutra u] LT',

	            nextWeek: function () {
	                switch (this.day()) {
	                case 0:
	                    return '[u] [nedjelju] [u] LT';
	                case 3:
	                    return '[u] [srijedu] [u] LT';
	                case 6:
	                    return '[u] [subotu] [u] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[u] dddd [u] LT';
	                }
	            },
	            lastDay  : '[juče u] LT',
	            lastWeek : function () {
	                var lastWeekDays = [
	                    '[prošle] [nedjelje] [u] LT',
	                    '[prošlog] [ponedjeljka] [u] LT',
	                    '[prošlog] [utorka] [u] LT',
	                    '[prošle] [srijede] [u] LT',
	                    '[prošlog] [četvrtka] [u] LT',
	                    '[prošlog] [petka] [u] LT',
	                    '[prošle] [subote] [u] LT'
	                ];
	                return lastWeekDays[this.day()];
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'za %s',
	            past   : 'prije %s',
	            s      : 'nekoliko sekundi',
	            m      : translator.translate,
	            mm     : translator.translate,
	            h      : translator.translate,
	            hh     : translator.translate,
	            d      : 'dan',
	            dd     : translator.translate,
	            M      : 'mjesec',
	            MM     : translator.translate,
	            y      : 'godinu',
	            yy     : translator.translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return me;

	}));

/***/ },
/* 418 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : macedonian (mk)
	//! author : Borislav Mickov : https://github.com/B0k0

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var mk = moment.defineLocale('mk', {
	        months : 'јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември'.split('_'),
	        monthsShort : 'јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек'.split('_'),
	        weekdays : 'недела_понеделник_вторник_среда_четврток_петок_сабота'.split('_'),
	        weekdaysShort : 'нед_пон_вто_сре_чет_пет_саб'.split('_'),
	        weekdaysMin : 'нe_пo_вт_ср_че_пе_сa'.split('_'),
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'D.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY H:mm',
	            LLLL : 'dddd, D MMMM YYYY H:mm'
	        },
	        calendar : {
	            sameDay : '[Денес во] LT',
	            nextDay : '[Утре во] LT',
	            nextWeek : 'dddd [во] LT',
	            lastDay : '[Вчера во] LT',
	            lastWeek : function () {
	                switch (this.day()) {
	                case 0:
	                case 3:
	                case 6:
	                    return '[Во изминатата] dddd [во] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[Во изминатиот] dddd [во] LT';
	                }
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'после %s',
	            past : 'пред %s',
	            s : 'неколку секунди',
	            m : 'минута',
	            mm : '%d минути',
	            h : 'час',
	            hh : '%d часа',
	            d : 'ден',
	            dd : '%d дена',
	            M : 'месец',
	            MM : '%d месеци',
	            y : 'година',
	            yy : '%d години'
	        },
	        ordinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
	        ordinal : function (number) {
	            var lastDigit = number % 10,
	                last2Digits = number % 100;
	            if (number === 0) {
	                return number + '-ев';
	            } else if (last2Digits === 0) {
	                return number + '-ен';
	            } else if (last2Digits > 10 && last2Digits < 20) {
	                return number + '-ти';
	            } else if (lastDigit === 1) {
	                return number + '-ви';
	            } else if (lastDigit === 2) {
	                return number + '-ри';
	            } else if (lastDigit === 7 || lastDigit === 8) {
	                return number + '-ми';
	            } else {
	                return number + '-ти';
	            }
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return mk;

	}));

/***/ },
/* 419 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : malayalam (ml)
	//! author : Floyd Pink : https://github.com/floydpink

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var ml = moment.defineLocale('ml', {
	        months : 'ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ'.split('_'),
	        monthsShort : 'ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.'.split('_'),
	        weekdays : 'ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച'.split('_'),
	        weekdaysShort : 'ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി'.split('_'),
	        weekdaysMin : 'ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ'.split('_'),
	        longDateFormat : {
	            LT : 'A h:mm -നു',
	            LTS : 'A h:mm:ss -നു',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY, A h:mm -നു',
	            LLLL : 'dddd, D MMMM YYYY, A h:mm -നു'
	        },
	        calendar : {
	            sameDay : '[ഇന്ന്] LT',
	            nextDay : '[നാളെ] LT',
	            nextWeek : 'dddd, LT',
	            lastDay : '[ഇന്നലെ] LT',
	            lastWeek : '[കഴിഞ്ഞ] dddd, LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s കഴിഞ്ഞ്',
	            past : '%s മുൻപ്',
	            s : 'അൽപ നിമിഷങ്ങൾ',
	            m : 'ഒരു മിനിറ്റ്',
	            mm : '%d മിനിറ്റ്',
	            h : 'ഒരു മണിക്കൂർ',
	            hh : '%d മണിക്കൂർ',
	            d : 'ഒരു ദിവസം',
	            dd : '%d ദിവസം',
	            M : 'ഒരു മാസം',
	            MM : '%d മാസം',
	            y : 'ഒരു വർഷം',
	            yy : '%d വർഷം'
	        },
	        meridiemParse: /രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,
	        isPM : function (input) {
	            return /^(ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി)$/.test(input);
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'രാത്രി';
	            } else if (hour < 12) {
	                return 'രാവിലെ';
	            } else if (hour < 17) {
	                return 'ഉച്ച കഴിഞ്ഞ്';
	            } else if (hour < 20) {
	                return 'വൈകുന്നേരം';
	            } else {
	                return 'രാത്രി';
	            }
	        }
	    });

	    return ml;

	}));

/***/ },
/* 420 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Marathi (mr)
	//! author : Harshad Kale : https://github.com/kalehv

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var symbolMap = {
	        '1': '१',
	        '2': '२',
	        '3': '३',
	        '4': '४',
	        '5': '५',
	        '6': '६',
	        '7': '७',
	        '8': '८',
	        '9': '९',
	        '0': '०'
	    },
	    numberMap = {
	        '१': '1',
	        '२': '2',
	        '३': '3',
	        '४': '4',
	        '५': '5',
	        '६': '6',
	        '७': '7',
	        '८': '8',
	        '९': '9',
	        '०': '0'
	    };

	    var mr = moment.defineLocale('mr', {
	        months : 'जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर'.split('_'),
	        monthsShort: 'जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.'.split('_'),
	        weekdays : 'रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
	        weekdaysShort : 'रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि'.split('_'),
	        weekdaysMin : 'र_सो_मं_बु_गु_शु_श'.split('_'),
	        longDateFormat : {
	            LT : 'A h:mm वाजता',
	            LTS : 'A h:mm:ss वाजता',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY, A h:mm वाजता',
	            LLLL : 'dddd, D MMMM YYYY, A h:mm वाजता'
	        },
	        calendar : {
	            sameDay : '[आज] LT',
	            nextDay : '[उद्या] LT',
	            nextWeek : 'dddd, LT',
	            lastDay : '[काल] LT',
	            lastWeek: '[मागील] dddd, LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s नंतर',
	            past : '%s पूर्वी',
	            s : 'सेकंद',
	            m: 'एक मिनिट',
	            mm: '%d मिनिटे',
	            h : 'एक तास',
	            hh : '%d तास',
	            d : 'एक दिवस',
	            dd : '%d दिवस',
	            M : 'एक महिना',
	            MM : '%d महिने',
	            y : 'एक वर्ष',
	            yy : '%d वर्षे'
	        },
	        preparse: function (string) {
	            return string.replace(/[१२३४५६७८९०]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        meridiemParse: /रात्री|सकाळी|दुपारी|सायंकाळी/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'रात्री') {
	                return hour < 4 ? hour : hour + 12;
	            } else if (meridiem === 'सकाळी') {
	                return hour;
	            } else if (meridiem === 'दुपारी') {
	                return hour >= 10 ? hour : hour + 12;
	            } else if (meridiem === 'सायंकाळी') {
	                return hour + 12;
	            }
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'रात्री';
	            } else if (hour < 10) {
	                return 'सकाळी';
	            } else if (hour < 17) {
	                return 'दुपारी';
	            } else if (hour < 20) {
	                return 'सायंकाळी';
	            } else {
	                return 'रात्री';
	            }
	        },
	        week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 6  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return mr;

	}));

/***/ },
/* 421 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Bahasa Malaysia (ms-MY)
	//! author : Weldan Jamili : https://github.com/weldan

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var ms = moment.defineLocale('ms', {
	        months : 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),
	        monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
	        weekdays : 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
	        weekdaysShort : 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
	        weekdaysMin : 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
	        longDateFormat : {
	            LT : 'HH.mm',
	            LTS : 'HH.mm.ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY [pukul] HH.mm',
	            LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
	        },
	        meridiemParse: /pagi|tengahari|petang|malam/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'pagi') {
	                return hour;
	            } else if (meridiem === 'tengahari') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === 'petang' || meridiem === 'malam') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours < 11) {
	                return 'pagi';
	            } else if (hours < 15) {
	                return 'tengahari';
	            } else if (hours < 19) {
	                return 'petang';
	            } else {
	                return 'malam';
	            }
	        },
	        calendar : {
	            sameDay : '[Hari ini pukul] LT',
	            nextDay : '[Esok pukul] LT',
	            nextWeek : 'dddd [pukul] LT',
	            lastDay : '[Kelmarin pukul] LT',
	            lastWeek : 'dddd [lepas pukul] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'dalam %s',
	            past : '%s yang lepas',
	            s : 'beberapa saat',
	            m : 'seminit',
	            mm : '%d minit',
	            h : 'sejam',
	            hh : '%d jam',
	            d : 'sehari',
	            dd : '%d hari',
	            M : 'sebulan',
	            MM : '%d bulan',
	            y : 'setahun',
	            yy : '%d tahun'
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return ms;

	}));

/***/ },
/* 422 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Bahasa Malaysia (ms-MY)
	//! author : Weldan Jamili : https://github.com/weldan

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var ms_my = moment.defineLocale('ms-my', {
	        months : 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),
	        monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
	        weekdays : 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
	        weekdaysShort : 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
	        weekdaysMin : 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
	        longDateFormat : {
	            LT : 'HH.mm',
	            LTS : 'HH.mm.ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY [pukul] HH.mm',
	            LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
	        },
	        meridiemParse: /pagi|tengahari|petang|malam/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'pagi') {
	                return hour;
	            } else if (meridiem === 'tengahari') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === 'petang' || meridiem === 'malam') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours < 11) {
	                return 'pagi';
	            } else if (hours < 15) {
	                return 'tengahari';
	            } else if (hours < 19) {
	                return 'petang';
	            } else {
	                return 'malam';
	            }
	        },
	        calendar : {
	            sameDay : '[Hari ini pukul] LT',
	            nextDay : '[Esok pukul] LT',
	            nextWeek : 'dddd [pukul] LT',
	            lastDay : '[Kelmarin pukul] LT',
	            lastWeek : 'dddd [lepas pukul] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'dalam %s',
	            past : '%s yang lepas',
	            s : 'beberapa saat',
	            m : 'seminit',
	            mm : '%d minit',
	            h : 'sejam',
	            hh : '%d jam',
	            d : 'sehari',
	            dd : '%d hari',
	            M : 'sebulan',
	            MM : '%d bulan',
	            y : 'setahun',
	            yy : '%d tahun'
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return ms_my;

	}));

/***/ },
/* 423 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Burmese (my)
	//! author : Squar team, mysquar.com

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var symbolMap = {
	        '1': '၁',
	        '2': '၂',
	        '3': '၃',
	        '4': '၄',
	        '5': '၅',
	        '6': '၆',
	        '7': '၇',
	        '8': '၈',
	        '9': '၉',
	        '0': '၀'
	    }, numberMap = {
	        '၁': '1',
	        '၂': '2',
	        '၃': '3',
	        '၄': '4',
	        '၅': '5',
	        '၆': '6',
	        '၇': '7',
	        '၈': '8',
	        '၉': '9',
	        '၀': '0'
	    };

	    var my = moment.defineLocale('my', {
	        months: 'ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ'.split('_'),
	        monthsShort: 'ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ'.split('_'),
	        weekdays: 'တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ'.split('_'),
	        weekdaysShort: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),
	        weekdaysMin: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),

	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[ယနေ.] LT [မှာ]',
	            nextDay: '[မနက်ဖြန်] LT [မှာ]',
	            nextWeek: 'dddd LT [မှာ]',
	            lastDay: '[မနေ.က] LT [မှာ]',
	            lastWeek: '[ပြီးခဲ့သော] dddd LT [မှာ]',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'လာမည့် %s မှာ',
	            past: 'လွန်ခဲ့သော %s က',
	            s: 'စက္ကန်.အနည်းငယ်',
	            m: 'တစ်မိနစ်',
	            mm: '%d မိနစ်',
	            h: 'တစ်နာရီ',
	            hh: '%d နာရီ',
	            d: 'တစ်ရက်',
	            dd: '%d ရက်',
	            M: 'တစ်လ',
	            MM: '%d လ',
	            y: 'တစ်နှစ်',
	            yy: '%d နှစ်'
	        },
	        preparse: function (string) {
	            return string.replace(/[၁၂၃၄၅၆၇၈၉၀]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return my;

	}));

/***/ },
/* 424 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : norwegian bokmål (nb)
	//! authors : Espen Hovlandsdal : https://github.com/rexxars
	//!           Sigurd Gartmann : https://github.com/sigurdga

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var nb = moment.defineLocale('nb', {
	        months : 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
	        monthsShort : 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
	        weekdays : 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
	        weekdaysShort : 'søn_man_tirs_ons_tors_fre_lør'.split('_'),
	        weekdaysMin : 'sø_ma_ti_on_to_fr_lø'.split('_'),
	        longDateFormat : {
	            LT : 'H.mm',
	            LTS : 'H.mm.ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY [kl.] H.mm',
	            LLLL : 'dddd D. MMMM YYYY [kl.] H.mm'
	        },
	        calendar : {
	            sameDay: '[i dag kl.] LT',
	            nextDay: '[i morgen kl.] LT',
	            nextWeek: 'dddd [kl.] LT',
	            lastDay: '[i går kl.] LT',
	            lastWeek: '[forrige] dddd [kl.] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'om %s',
	            past : 'for %s siden',
	            s : 'noen sekunder',
	            m : 'ett minutt',
	            mm : '%d minutter',
	            h : 'en time',
	            hh : '%d timer',
	            d : 'en dag',
	            dd : '%d dager',
	            M : 'en måned',
	            MM : '%d måneder',
	            y : 'ett år',
	            yy : '%d år'
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return nb;

	}));

/***/ },
/* 425 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : nepali/nepalese
	//! author : suvash : https://github.com/suvash

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var symbolMap = {
	        '1': '१',
	        '2': '२',
	        '3': '३',
	        '4': '४',
	        '5': '५',
	        '6': '६',
	        '7': '७',
	        '8': '८',
	        '9': '९',
	        '0': '०'
	    },
	    numberMap = {
	        '१': '1',
	        '२': '2',
	        '३': '3',
	        '४': '4',
	        '५': '5',
	        '६': '6',
	        '७': '7',
	        '८': '8',
	        '९': '9',
	        '०': '0'
	    };

	    var ne = moment.defineLocale('ne', {
	        months : 'जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर'.split('_'),
	        monthsShort : 'जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.'.split('_'),
	        weekdays : 'आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार'.split('_'),
	        weekdaysShort : 'आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.'.split('_'),
	        weekdaysMin : 'आइ._सो._मङ्_बु._बि._शु._श.'.split('_'),
	        longDateFormat : {
	            LT : 'Aको h:mm बजे',
	            LTS : 'Aको h:mm:ss बजे',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY, Aको h:mm बजे',
	            LLLL : 'dddd, D MMMM YYYY, Aको h:mm बजे'
	        },
	        preparse: function (string) {
	            return string.replace(/[१२३४५६७८९०]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        meridiemParse: /राती|बिहान|दिउँसो|बेलुका|साँझ|राती/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'राती') {
	                return hour < 3 ? hour : hour + 12;
	            } else if (meridiem === 'बिहान') {
	                return hour;
	            } else if (meridiem === 'दिउँसो') {
	                return hour >= 10 ? hour : hour + 12;
	            } else if (meridiem === 'बेलुका' || meridiem === 'साँझ') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 3) {
	                return 'राती';
	            } else if (hour < 10) {
	                return 'बिहान';
	            } else if (hour < 15) {
	                return 'दिउँसो';
	            } else if (hour < 18) {
	                return 'बेलुका';
	            } else if (hour < 20) {
	                return 'साँझ';
	            } else {
	                return 'राती';
	            }
	        },
	        calendar : {
	            sameDay : '[आज] LT',
	            nextDay : '[भोली] LT',
	            nextWeek : '[आउँदो] dddd[,] LT',
	            lastDay : '[हिजो] LT',
	            lastWeek : '[गएको] dddd[,] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%sमा',
	            past : '%s अगाडी',
	            s : 'केही समय',
	            m : 'एक मिनेट',
	            mm : '%d मिनेट',
	            h : 'एक घण्टा',
	            hh : '%d घण्टा',
	            d : 'एक दिन',
	            dd : '%d दिन',
	            M : 'एक महिना',
	            MM : '%d महिना',
	            y : 'एक बर्ष',
	            yy : '%d बर्ष'
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return ne;

	}));

/***/ },
/* 426 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : dutch (nl)
	//! author : Joris Röling : https://github.com/jjupiter

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var monthsShortWithDots = 'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_'),
	        monthsShortWithoutDots = 'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_');

	    var nl = moment.defineLocale('nl', {
	        months : 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split('_'),
	        monthsShort : function (m, format) {
	            if (/-MMM-/.test(format)) {
	                return monthsShortWithoutDots[m.month()];
	            } else {
	                return monthsShortWithDots[m.month()];
	            }
	        },
	        weekdays : 'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),
	        weekdaysShort : 'zo._ma._di._wo._do._vr._za.'.split('_'),
	        weekdaysMin : 'Zo_Ma_Di_Wo_Do_Vr_Za'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD-MM-YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[vandaag om] LT',
	            nextDay: '[morgen om] LT',
	            nextWeek: 'dddd [om] LT',
	            lastDay: '[gisteren om] LT',
	            lastWeek: '[afgelopen] dddd [om] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'over %s',
	            past : '%s geleden',
	            s : 'een paar seconden',
	            m : 'één minuut',
	            mm : '%d minuten',
	            h : 'één uur',
	            hh : '%d uur',
	            d : 'één dag',
	            dd : '%d dagen',
	            M : 'één maand',
	            MM : '%d maanden',
	            y : 'één jaar',
	            yy : '%d jaar'
	        },
	        ordinalParse: /\d{1,2}(ste|de)/,
	        ordinal : function (number) {
	            return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return nl;

	}));

/***/ },
/* 427 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : norwegian nynorsk (nn)
	//! author : https://github.com/mechuwind

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var nn = moment.defineLocale('nn', {
	        months : 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
	        monthsShort : 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
	        weekdays : 'sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag'.split('_'),
	        weekdaysShort : 'sun_mån_tys_ons_tor_fre_lau'.split('_'),
	        weekdaysMin : 'su_må_ty_on_to_fr_lø'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[I dag klokka] LT',
	            nextDay: '[I morgon klokka] LT',
	            nextWeek: 'dddd [klokka] LT',
	            lastDay: '[I går klokka] LT',
	            lastWeek: '[Føregåande] dddd [klokka] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'om %s',
	            past : 'for %s sidan',
	            s : 'nokre sekund',
	            m : 'eit minutt',
	            mm : '%d minutt',
	            h : 'ein time',
	            hh : '%d timar',
	            d : 'ein dag',
	            dd : '%d dagar',
	            M : 'ein månad',
	            MM : '%d månader',
	            y : 'eit år',
	            yy : '%d år'
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return nn;

	}));

/***/ },
/* 428 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : polish (pl)
	//! author : Rafal Hirsz : https://github.com/evoL

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var monthsNominative = 'styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień'.split('_'),
	        monthsSubjective = 'stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia'.split('_');
	    function plural(n) {
	        return (n % 10 < 5) && (n % 10 > 1) && ((~~(n / 10) % 10) !== 1);
	    }
	    function translate(number, withoutSuffix, key) {
	        var result = number + ' ';
	        switch (key) {
	        case 'm':
	            return withoutSuffix ? 'minuta' : 'minutę';
	        case 'mm':
	            return result + (plural(number) ? 'minuty' : 'minut');
	        case 'h':
	            return withoutSuffix  ? 'godzina'  : 'godzinę';
	        case 'hh':
	            return result + (plural(number) ? 'godziny' : 'godzin');
	        case 'MM':
	            return result + (plural(number) ? 'miesiące' : 'miesięcy');
	        case 'yy':
	            return result + (plural(number) ? 'lata' : 'lat');
	        }
	    }

	    var pl = moment.defineLocale('pl', {
	        months : function (momentToFormat, format) {
	            if (format === '') {
	                // Hack: if format empty we know this is used to generate
	                // RegExp by moment. Give then back both valid forms of months
	                // in RegExp ready format.
	                return '(' + monthsSubjective[momentToFormat.month()] + '|' + monthsNominative[momentToFormat.month()] + ')';
	            } else if (/D MMMM/.test(format)) {
	                return monthsSubjective[momentToFormat.month()];
	            } else {
	                return monthsNominative[momentToFormat.month()];
	            }
	        },
	        monthsShort : 'sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru'.split('_'),
	        weekdays : 'niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota'.split('_'),
	        weekdaysShort : 'nie_pon_wt_śr_czw_pt_sb'.split('_'),
	        weekdaysMin : 'N_Pn_Wt_Śr_Cz_Pt_So'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[Dziś o] LT',
	            nextDay: '[Jutro o] LT',
	            nextWeek: '[W] dddd [o] LT',
	            lastDay: '[Wczoraj o] LT',
	            lastWeek: function () {
	                switch (this.day()) {
	                case 0:
	                    return '[W zeszłą niedzielę o] LT';
	                case 3:
	                    return '[W zeszłą środę o] LT';
	                case 6:
	                    return '[W zeszłą sobotę o] LT';
	                default:
	                    return '[W zeszły] dddd [o] LT';
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'za %s',
	            past : '%s temu',
	            s : 'kilka sekund',
	            m : translate,
	            mm : translate,
	            h : translate,
	            hh : translate,
	            d : '1 dzień',
	            dd : '%d dni',
	            M : 'miesiąc',
	            MM : translate,
	            y : 'rok',
	            yy : translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return pl;

	}));

/***/ },
/* 429 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : portuguese (pt)
	//! author : Jefferson : https://github.com/jalex79

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var pt = moment.defineLocale('pt', {
	        months : 'Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro'.split('_'),
	        monthsShort : 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez'.split('_'),
	        weekdays : 'Domingo_Segunda-Feira_Terça-Feira_Quarta-Feira_Quinta-Feira_Sexta-Feira_Sábado'.split('_'),
	        weekdaysShort : 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),
	        weekdaysMin : 'Dom_2ª_3ª_4ª_5ª_6ª_Sáb'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D [de] MMMM [de] YYYY',
	            LLL : 'D [de] MMMM [de] YYYY HH:mm',
	            LLLL : 'dddd, D [de] MMMM [de] YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[Hoje às] LT',
	            nextDay: '[Amanhã às] LT',
	            nextWeek: 'dddd [às] LT',
	            lastDay: '[Ontem às] LT',
	            lastWeek: function () {
	                return (this.day() === 0 || this.day() === 6) ?
	                    '[Último] dddd [às] LT' : // Saturday + Sunday
	                    '[Última] dddd [às] LT'; // Monday - Friday
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'em %s',
	            past : 'há %s',
	            s : 'segundos',
	            m : 'um minuto',
	            mm : '%d minutos',
	            h : 'uma hora',
	            hh : '%d horas',
	            d : 'um dia',
	            dd : '%d dias',
	            M : 'um mês',
	            MM : '%d meses',
	            y : 'um ano',
	            yy : '%d anos'
	        },
	        ordinalParse: /\d{1,2}º/,
	        ordinal : '%dº',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return pt;

	}));

/***/ },
/* 430 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : brazilian portuguese (pt-br)
	//! author : Caio Ribeiro Pereira : https://github.com/caio-ribeiro-pereira

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var pt_br = moment.defineLocale('pt-br', {
	        months : 'Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro'.split('_'),
	        monthsShort : 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez'.split('_'),
	        weekdays : 'Domingo_Segunda-Feira_Terça-Feira_Quarta-Feira_Quinta-Feira_Sexta-Feira_Sábado'.split('_'),
	        weekdaysShort : 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),
	        weekdaysMin : 'Dom_2ª_3ª_4ª_5ª_6ª_Sáb'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D [de] MMMM [de] YYYY',
	            LLL : 'D [de] MMMM [de] YYYY [às] HH:mm',
	            LLLL : 'dddd, D [de] MMMM [de] YYYY [às] HH:mm'
	        },
	        calendar : {
	            sameDay: '[Hoje às] LT',
	            nextDay: '[Amanhã às] LT',
	            nextWeek: 'dddd [às] LT',
	            lastDay: '[Ontem às] LT',
	            lastWeek: function () {
	                return (this.day() === 0 || this.day() === 6) ?
	                    '[Último] dddd [às] LT' : // Saturday + Sunday
	                    '[Última] dddd [às] LT'; // Monday - Friday
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'em %s',
	            past : '%s atrás',
	            s : 'poucos segundos',
	            m : 'um minuto',
	            mm : '%d minutos',
	            h : 'uma hora',
	            hh : '%d horas',
	            d : 'um dia',
	            dd : '%d dias',
	            M : 'um mês',
	            MM : '%d meses',
	            y : 'um ano',
	            yy : '%d anos'
	        },
	        ordinalParse: /\d{1,2}º/,
	        ordinal : '%dº'
	    });

	    return pt_br;

	}));

/***/ },
/* 431 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : romanian (ro)
	//! author : Vlad Gurdiga : https://github.com/gurdiga
	//! author : Valentin Agachi : https://github.com/avaly

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    function relativeTimeWithPlural(number, withoutSuffix, key) {
	        var format = {
	                'mm': 'minute',
	                'hh': 'ore',
	                'dd': 'zile',
	                'MM': 'luni',
	                'yy': 'ani'
	            },
	            separator = ' ';
	        if (number % 100 >= 20 || (number >= 100 && number % 100 === 0)) {
	            separator = ' de ';
	        }
	        return number + separator + format[key];
	    }

	    var ro = moment.defineLocale('ro', {
	        months : 'ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie'.split('_'),
	        monthsShort : 'ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.'.split('_'),
	        weekdays : 'duminică_luni_marți_miercuri_joi_vineri_sâmbătă'.split('_'),
	        weekdaysShort : 'Dum_Lun_Mar_Mie_Joi_Vin_Sâm'.split('_'),
	        weekdaysMin : 'Du_Lu_Ma_Mi_Jo_Vi_Sâ'.split('_'),
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY H:mm',
	            LLLL : 'dddd, D MMMM YYYY H:mm'
	        },
	        calendar : {
	            sameDay: '[azi la] LT',
	            nextDay: '[mâine la] LT',
	            nextWeek: 'dddd [la] LT',
	            lastDay: '[ieri la] LT',
	            lastWeek: '[fosta] dddd [la] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'peste %s',
	            past : '%s în urmă',
	            s : 'câteva secunde',
	            m : 'un minut',
	            mm : relativeTimeWithPlural,
	            h : 'o oră',
	            hh : relativeTimeWithPlural,
	            d : 'o zi',
	            dd : relativeTimeWithPlural,
	            M : 'o lună',
	            MM : relativeTimeWithPlural,
	            y : 'un an',
	            yy : relativeTimeWithPlural
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return ro;

	}));

/***/ },
/* 432 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : russian (ru)
	//! author : Viktorminator : https://github.com/Viktorminator
	//! Author : Menelion Elensúle : https://github.com/Oire

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    function plural(word, num) {
	        var forms = word.split('_');
	        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
	    }
	    function relativeTimeWithPlural(number, withoutSuffix, key) {
	        var format = {
	            'mm': withoutSuffix ? 'минута_минуты_минут' : 'минуту_минуты_минут',
	            'hh': 'час_часа_часов',
	            'dd': 'день_дня_дней',
	            'MM': 'месяц_месяца_месяцев',
	            'yy': 'год_года_лет'
	        };
	        if (key === 'm') {
	            return withoutSuffix ? 'минута' : 'минуту';
	        }
	        else {
	            return number + ' ' + plural(format[key], +number);
	        }
	    }
	    function monthsCaseReplace(m, format) {
	        var months = {
	            'nominative': 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_'),
	            'accusative': 'января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря'.split('_')
	        },
	        nounCase = (/D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/).test(format) ?
	            'accusative' :
	            'nominative';
	        return months[nounCase][m.month()];
	    }
	    function monthsShortCaseReplace(m, format) {
	        var monthsShort = {
	            'nominative': 'янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек'.split('_'),
	            'accusative': 'янв_фев_мар_апр_мая_июня_июля_авг_сен_окт_ноя_дек'.split('_')
	        },
	        nounCase = (/D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/).test(format) ?
	            'accusative' :
	            'nominative';
	        return monthsShort[nounCase][m.month()];
	    }
	    function weekdaysCaseReplace(m, format) {
	        var weekdays = {
	            'nominative': 'воскресенье_понедельник_вторник_среда_четверг_пятница_суббота'.split('_'),
	            'accusative': 'воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу'.split('_')
	        },
	        nounCase = (/\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\] ?dddd/).test(format) ?
	            'accusative' :
	            'nominative';
	        return weekdays[nounCase][m.day()];
	    }

	    var ru = moment.defineLocale('ru', {
	        months : monthsCaseReplace,
	        monthsShort : monthsShortCaseReplace,
	        weekdays : weekdaysCaseReplace,
	        weekdaysShort : 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
	        weekdaysMin : 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
	        monthsParse : [/^янв/i, /^фев/i, /^мар/i, /^апр/i, /^ма[й|я]/i, /^июн/i, /^июл/i, /^авг/i, /^сен/i, /^окт/i, /^ноя/i, /^дек/i],
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY г.',
	            LLL : 'D MMMM YYYY г., HH:mm',
	            LLLL : 'dddd, D MMMM YYYY г., HH:mm'
	        },
	        calendar : {
	            sameDay: '[Сегодня в] LT',
	            nextDay: '[Завтра в] LT',
	            lastDay: '[Вчера в] LT',
	            nextWeek: function () {
	                return this.day() === 2 ? '[Во] dddd [в] LT' : '[В] dddd [в] LT';
	            },
	            lastWeek: function (now) {
	                if (now.week() !== this.week()) {
	                    switch (this.day()) {
	                    case 0:
	                        return '[В прошлое] dddd [в] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                        return '[В прошлый] dddd [в] LT';
	                    case 3:
	                    case 5:
	                    case 6:
	                        return '[В прошлую] dddd [в] LT';
	                    }
	                } else {
	                    if (this.day() === 2) {
	                        return '[Во] dddd [в] LT';
	                    } else {
	                        return '[В] dddd [в] LT';
	                    }
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'через %s',
	            past : '%s назад',
	            s : 'несколько секунд',
	            m : relativeTimeWithPlural,
	            mm : relativeTimeWithPlural,
	            h : 'час',
	            hh : relativeTimeWithPlural,
	            d : 'день',
	            dd : relativeTimeWithPlural,
	            M : 'месяц',
	            MM : relativeTimeWithPlural,
	            y : 'год',
	            yy : relativeTimeWithPlural
	        },
	        meridiemParse: /ночи|утра|дня|вечера/i,
	        isPM : function (input) {
	            return /^(дня|вечера)$/.test(input);
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'ночи';
	            } else if (hour < 12) {
	                return 'утра';
	            } else if (hour < 17) {
	                return 'дня';
	            } else {
	                return 'вечера';
	            }
	        },
	        ordinalParse: /\d{1,2}-(й|го|я)/,
	        ordinal: function (number, period) {
	            switch (period) {
	            case 'M':
	            case 'd':
	            case 'DDD':
	                return number + '-й';
	            case 'D':
	                return number + '-го';
	            case 'w':
	            case 'W':
	                return number + '-я';
	            default:
	                return number;
	            }
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return ru;

	}));

/***/ },
/* 433 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Sinhalese (si)
	//! author : Sampath Sitinamaluwa : https://github.com/sampathsris

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var si = moment.defineLocale('si', {
	        months : 'ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්'.split('_'),
	        monthsShort : 'ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ'.split('_'),
	        weekdays : 'ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා'.split('_'),
	        weekdaysShort : 'ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන'.split('_'),
	        weekdaysMin : 'ඉ_ස_අ_බ_බ්‍ර_සි_සෙ'.split('_'),
	        longDateFormat : {
	            LT : 'a h:mm',
	            LTS : 'a h:mm:ss',
	            L : 'YYYY/MM/DD',
	            LL : 'YYYY MMMM D',
	            LLL : 'YYYY MMMM D, a h:mm',
	            LLLL : 'YYYY MMMM D [වැනි] dddd, a h:mm:ss'
	        },
	        calendar : {
	            sameDay : '[අද] LT[ට]',
	            nextDay : '[හෙට] LT[ට]',
	            nextWeek : 'dddd LT[ට]',
	            lastDay : '[ඊයේ] LT[ට]',
	            lastWeek : '[පසුගිය] dddd LT[ට]',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%sකින්',
	            past : '%sකට පෙර',
	            s : 'තත්පර කිහිපය',
	            m : 'මිනිත්තුව',
	            mm : 'මිනිත්තු %d',
	            h : 'පැය',
	            hh : 'පැය %d',
	            d : 'දිනය',
	            dd : 'දින %d',
	            M : 'මාසය',
	            MM : 'මාස %d',
	            y : 'වසර',
	            yy : 'වසර %d'
	        },
	        ordinalParse: /\d{1,2} වැනි/,
	        ordinal : function (number) {
	            return number + ' වැනි';
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours > 11) {
	                return isLower ? 'ප.ව.' : 'පස් වරු';
	            } else {
	                return isLower ? 'පෙ.ව.' : 'පෙර වරු';
	            }
	        }
	    });

	    return si;

	}));

/***/ },
/* 434 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : slovak (sk)
	//! author : Martin Minka : https://github.com/k2s
	//! based on work of petrbela : https://github.com/petrbela

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var months = 'január_február_marec_apríl_máj_jún_júl_august_september_október_november_december'.split('_'),
	        monthsShort = 'jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec'.split('_');
	    function plural(n) {
	        return (n > 1) && (n < 5);
	    }
	    function translate(number, withoutSuffix, key, isFuture) {
	        var result = number + ' ';
	        switch (key) {
	        case 's':  // a few seconds / in a few seconds / a few seconds ago
	            return (withoutSuffix || isFuture) ? 'pár sekúnd' : 'pár sekundami';
	        case 'm':  // a minute / in a minute / a minute ago
	            return withoutSuffix ? 'minúta' : (isFuture ? 'minútu' : 'minútou');
	        case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'minúty' : 'minút');
	            } else {
	                return result + 'minútami';
	            }
	            break;
	        case 'h':  // an hour / in an hour / an hour ago
	            return withoutSuffix ? 'hodina' : (isFuture ? 'hodinu' : 'hodinou');
	        case 'hh': // 9 hours / in 9 hours / 9 hours ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'hodiny' : 'hodín');
	            } else {
	                return result + 'hodinami';
	            }
	            break;
	        case 'd':  // a day / in a day / a day ago
	            return (withoutSuffix || isFuture) ? 'deň' : 'dňom';
	        case 'dd': // 9 days / in 9 days / 9 days ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'dni' : 'dní');
	            } else {
	                return result + 'dňami';
	            }
	            break;
	        case 'M':  // a month / in a month / a month ago
	            return (withoutSuffix || isFuture) ? 'mesiac' : 'mesiacom';
	        case 'MM': // 9 months / in 9 months / 9 months ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'mesiace' : 'mesiacov');
	            } else {
	                return result + 'mesiacmi';
	            }
	            break;
	        case 'y':  // a year / in a year / a year ago
	            return (withoutSuffix || isFuture) ? 'rok' : 'rokom';
	        case 'yy': // 9 years / in 9 years / 9 years ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'roky' : 'rokov');
	            } else {
	                return result + 'rokmi';
	            }
	            break;
	        }
	    }

	    var sk = moment.defineLocale('sk', {
	        months : months,
	        monthsShort : monthsShort,
	        monthsParse : (function (months, monthsShort) {
	            var i, _monthsParse = [];
	            for (i = 0; i < 12; i++) {
	                // use custom parser to solve problem with July (červenec)
	                _monthsParse[i] = new RegExp('^' + months[i] + '$|^' + monthsShort[i] + '$', 'i');
	            }
	            return _monthsParse;
	        }(months, monthsShort)),
	        weekdays : 'nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota'.split('_'),
	        weekdaysShort : 'ne_po_ut_st_št_pi_so'.split('_'),
	        weekdaysMin : 'ne_po_ut_st_št_pi_so'.split('_'),
	        longDateFormat : {
	            LT: 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY H:mm',
	            LLLL : 'dddd D. MMMM YYYY H:mm'
	        },
	        calendar : {
	            sameDay: '[dnes o] LT',
	            nextDay: '[zajtra o] LT',
	            nextWeek: function () {
	                switch (this.day()) {
	                case 0:
	                    return '[v nedeľu o] LT';
	                case 1:
	                case 2:
	                    return '[v] dddd [o] LT';
	                case 3:
	                    return '[v stredu o] LT';
	                case 4:
	                    return '[vo štvrtok o] LT';
	                case 5:
	                    return '[v piatok o] LT';
	                case 6:
	                    return '[v sobotu o] LT';
	                }
	            },
	            lastDay: '[včera o] LT',
	            lastWeek: function () {
	                switch (this.day()) {
	                case 0:
	                    return '[minulú nedeľu o] LT';
	                case 1:
	                case 2:
	                    return '[minulý] dddd [o] LT';
	                case 3:
	                    return '[minulú stredu o] LT';
	                case 4:
	                case 5:
	                    return '[minulý] dddd [o] LT';
	                case 6:
	                    return '[minulú sobotu o] LT';
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'za %s',
	            past : 'pred %s',
	            s : translate,
	            m : translate,
	            mm : translate,
	            h : translate,
	            hh : translate,
	            d : translate,
	            dd : translate,
	            M : translate,
	            MM : translate,
	            y : translate,
	            yy : translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return sk;

	}));

/***/ },
/* 435 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : slovenian (sl)
	//! author : Robert Sedovšek : https://github.com/sedovsek

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var result = number + ' ';
	        switch (key) {
	        case 's':
	            return withoutSuffix || isFuture ? 'nekaj sekund' : 'nekaj sekundami';
	        case 'm':
	            return withoutSuffix ? 'ena minuta' : 'eno minuto';
	        case 'mm':
	            if (number === 1) {
	                result += withoutSuffix ? 'minuta' : 'minuto';
	            } else if (number === 2) {
	                result += withoutSuffix || isFuture ? 'minuti' : 'minutama';
	            } else if (number < 5) {
	                result += withoutSuffix || isFuture ? 'minute' : 'minutami';
	            } else {
	                result += withoutSuffix || isFuture ? 'minut' : 'minutami';
	            }
	            return result;
	        case 'h':
	            return withoutSuffix ? 'ena ura' : 'eno uro';
	        case 'hh':
	            if (number === 1) {
	                result += withoutSuffix ? 'ura' : 'uro';
	            } else if (number === 2) {
	                result += withoutSuffix || isFuture ? 'uri' : 'urama';
	            } else if (number < 5) {
	                result += withoutSuffix || isFuture ? 'ure' : 'urami';
	            } else {
	                result += withoutSuffix || isFuture ? 'ur' : 'urami';
	            }
	            return result;
	        case 'd':
	            return withoutSuffix || isFuture ? 'en dan' : 'enim dnem';
	        case 'dd':
	            if (number === 1) {
	                result += withoutSuffix || isFuture ? 'dan' : 'dnem';
	            } else if (number === 2) {
	                result += withoutSuffix || isFuture ? 'dni' : 'dnevoma';
	            } else {
	                result += withoutSuffix || isFuture ? 'dni' : 'dnevi';
	            }
	            return result;
	        case 'M':
	            return withoutSuffix || isFuture ? 'en mesec' : 'enim mesecem';
	        case 'MM':
	            if (number === 1) {
	                result += withoutSuffix || isFuture ? 'mesec' : 'mesecem';
	            } else if (number === 2) {
	                result += withoutSuffix || isFuture ? 'meseca' : 'mesecema';
	            } else if (number < 5) {
	                result += withoutSuffix || isFuture ? 'mesece' : 'meseci';
	            } else {
	                result += withoutSuffix || isFuture ? 'mesecev' : 'meseci';
	            }
	            return result;
	        case 'y':
	            return withoutSuffix || isFuture ? 'eno leto' : 'enim letom';
	        case 'yy':
	            if (number === 1) {
	                result += withoutSuffix || isFuture ? 'leto' : 'letom';
	            } else if (number === 2) {
	                result += withoutSuffix || isFuture ? 'leti' : 'letoma';
	            } else if (number < 5) {
	                result += withoutSuffix || isFuture ? 'leta' : 'leti';
	            } else {
	                result += withoutSuffix || isFuture ? 'let' : 'leti';
	            }
	            return result;
	        }
	    }

	    var sl = moment.defineLocale('sl', {
	        months : 'januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december'.split('_'),
	        monthsShort : 'jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.'.split('_'),
	        weekdays : 'nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota'.split('_'),
	        weekdaysShort : 'ned._pon._tor._sre._čet._pet._sob.'.split('_'),
	        weekdaysMin : 'ne_po_to_sr_če_pe_so'.split('_'),
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'DD. MM. YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY H:mm',
	            LLLL : 'dddd, D. MMMM YYYY H:mm'
	        },
	        calendar : {
	            sameDay  : '[danes ob] LT',
	            nextDay  : '[jutri ob] LT',

	            nextWeek : function () {
	                switch (this.day()) {
	                case 0:
	                    return '[v] [nedeljo] [ob] LT';
	                case 3:
	                    return '[v] [sredo] [ob] LT';
	                case 6:
	                    return '[v] [soboto] [ob] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[v] dddd [ob] LT';
	                }
	            },
	            lastDay  : '[včeraj ob] LT',
	            lastWeek : function () {
	                switch (this.day()) {
	                case 0:
	                    return '[prejšnjo] [nedeljo] [ob] LT';
	                case 3:
	                    return '[prejšnjo] [sredo] [ob] LT';
	                case 6:
	                    return '[prejšnjo] [soboto] [ob] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[prejšnji] dddd [ob] LT';
	                }
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'čez %s',
	            past   : 'pred %s',
	            s      : processRelativeTime,
	            m      : processRelativeTime,
	            mm     : processRelativeTime,
	            h      : processRelativeTime,
	            hh     : processRelativeTime,
	            d      : processRelativeTime,
	            dd     : processRelativeTime,
	            M      : processRelativeTime,
	            MM     : processRelativeTime,
	            y      : processRelativeTime,
	            yy     : processRelativeTime
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return sl;

	}));

/***/ },
/* 436 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Albanian (sq)
	//! author : Flakërim Ismani : https://github.com/flakerimi
	//! author: Menelion Elensúle: https://github.com/Oire (tests)
	//! author : Oerd Cukalla : https://github.com/oerd (fixes)

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var sq = moment.defineLocale('sq', {
	        months : 'Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor'.split('_'),
	        monthsShort : 'Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj'.split('_'),
	        weekdays : 'E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë'.split('_'),
	        weekdaysShort : 'Die_Hën_Mar_Mër_Enj_Pre_Sht'.split('_'),
	        weekdaysMin : 'D_H_Ma_Më_E_P_Sh'.split('_'),
	        meridiemParse: /PD|MD/,
	        isPM: function (input) {
	            return input.charAt(0) === 'M';
	        },
	        meridiem : function (hours, minutes, isLower) {
	            return hours < 12 ? 'PD' : 'MD';
	        },
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[Sot në] LT',
	            nextDay : '[Nesër në] LT',
	            nextWeek : 'dddd [në] LT',
	            lastDay : '[Dje në] LT',
	            lastWeek : 'dddd [e kaluar në] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'në %s',
	            past : '%s më parë',
	            s : 'disa sekonda',
	            m : 'një minutë',
	            mm : '%d minuta',
	            h : 'një orë',
	            hh : '%d orë',
	            d : 'një ditë',
	            dd : '%d ditë',
	            M : 'një muaj',
	            MM : '%d muaj',
	            y : 'një vit',
	            yy : '%d vite'
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return sq;

	}));

/***/ },
/* 437 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Serbian-latin (sr)
	//! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var translator = {
	        words: { //Different grammatical cases
	            m: ['jedan minut', 'jedne minute'],
	            mm: ['minut', 'minute', 'minuta'],
	            h: ['jedan sat', 'jednog sata'],
	            hh: ['sat', 'sata', 'sati'],
	            dd: ['dan', 'dana', 'dana'],
	            MM: ['mesec', 'meseca', 'meseci'],
	            yy: ['godina', 'godine', 'godina']
	        },
	        correctGrammaticalCase: function (number, wordKey) {
	            return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
	        },
	        translate: function (number, withoutSuffix, key) {
	            var wordKey = translator.words[key];
	            if (key.length === 1) {
	                return withoutSuffix ? wordKey[0] : wordKey[1];
	            } else {
	                return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
	            }
	        }
	    };

	    var sr = moment.defineLocale('sr', {
	        months: ['januar', 'februar', 'mart', 'april', 'maj', 'jun', 'jul', 'avgust', 'septembar', 'oktobar', 'novembar', 'decembar'],
	        monthsShort: ['jan.', 'feb.', 'mar.', 'apr.', 'maj', 'jun', 'jul', 'avg.', 'sep.', 'okt.', 'nov.', 'dec.'],
	        weekdays: ['nedelja', 'ponedeljak', 'utorak', 'sreda', 'četvrtak', 'petak', 'subota'],
	        weekdaysShort: ['ned.', 'pon.', 'uto.', 'sre.', 'čet.', 'pet.', 'sub.'],
	        weekdaysMin: ['ne', 'po', 'ut', 'sr', 'če', 'pe', 'su'],
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS : 'H:mm:ss',
	            L: 'DD. MM. YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY H:mm',
	            LLLL: 'dddd, D. MMMM YYYY H:mm'
	        },
	        calendar: {
	            sameDay: '[danas u] LT',
	            nextDay: '[sutra u] LT',
	            nextWeek: function () {
	                switch (this.day()) {
	                case 0:
	                    return '[u] [nedelju] [u] LT';
	                case 3:
	                    return '[u] [sredu] [u] LT';
	                case 6:
	                    return '[u] [subotu] [u] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[u] dddd [u] LT';
	                }
	            },
	            lastDay  : '[juče u] LT',
	            lastWeek : function () {
	                var lastWeekDays = [
	                    '[prošle] [nedelje] [u] LT',
	                    '[prošlog] [ponedeljka] [u] LT',
	                    '[prošlog] [utorka] [u] LT',
	                    '[prošle] [srede] [u] LT',
	                    '[prošlog] [četvrtka] [u] LT',
	                    '[prošlog] [petka] [u] LT',
	                    '[prošle] [subote] [u] LT'
	                ];
	                return lastWeekDays[this.day()];
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'za %s',
	            past   : 'pre %s',
	            s      : 'nekoliko sekundi',
	            m      : translator.translate,
	            mm     : translator.translate,
	            h      : translator.translate,
	            hh     : translator.translate,
	            d      : 'dan',
	            dd     : translator.translate,
	            M      : 'mesec',
	            MM     : translator.translate,
	            y      : 'godinu',
	            yy     : translator.translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return sr;

	}));

/***/ },
/* 438 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Serbian-cyrillic (sr-cyrl)
	//! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var translator = {
	        words: { //Different grammatical cases
	            m: ['један минут', 'једне минуте'],
	            mm: ['минут', 'минуте', 'минута'],
	            h: ['један сат', 'једног сата'],
	            hh: ['сат', 'сата', 'сати'],
	            dd: ['дан', 'дана', 'дана'],
	            MM: ['месец', 'месеца', 'месеци'],
	            yy: ['година', 'године', 'година']
	        },
	        correctGrammaticalCase: function (number, wordKey) {
	            return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
	        },
	        translate: function (number, withoutSuffix, key) {
	            var wordKey = translator.words[key];
	            if (key.length === 1) {
	                return withoutSuffix ? wordKey[0] : wordKey[1];
	            } else {
	                return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
	            }
	        }
	    };

	    var sr_cyrl = moment.defineLocale('sr-cyrl', {
	        months: ['јануар', 'фебруар', 'март', 'април', 'мај', 'јун', 'јул', 'август', 'септембар', 'октобар', 'новембар', 'децембар'],
	        monthsShort: ['јан.', 'феб.', 'мар.', 'апр.', 'мај', 'јун', 'јул', 'авг.', 'сеп.', 'окт.', 'нов.', 'дец.'],
	        weekdays: ['недеља', 'понедељак', 'уторак', 'среда', 'четвртак', 'петак', 'субота'],
	        weekdaysShort: ['нед.', 'пон.', 'уто.', 'сре.', 'чет.', 'пет.', 'суб.'],
	        weekdaysMin: ['не', 'по', 'ут', 'ср', 'че', 'пе', 'су'],
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS : 'H:mm:ss',
	            L: 'DD. MM. YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY H:mm',
	            LLLL: 'dddd, D. MMMM YYYY H:mm'
	        },
	        calendar: {
	            sameDay: '[данас у] LT',
	            nextDay: '[сутра у] LT',
	            nextWeek: function () {
	                switch (this.day()) {
	                case 0:
	                    return '[у] [недељу] [у] LT';
	                case 3:
	                    return '[у] [среду] [у] LT';
	                case 6:
	                    return '[у] [суботу] [у] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[у] dddd [у] LT';
	                }
	            },
	            lastDay  : '[јуче у] LT',
	            lastWeek : function () {
	                var lastWeekDays = [
	                    '[прошле] [недеље] [у] LT',
	                    '[прошлог] [понедељка] [у] LT',
	                    '[прошлог] [уторка] [у] LT',
	                    '[прошле] [среде] [у] LT',
	                    '[прошлог] [четвртка] [у] LT',
	                    '[прошлог] [петка] [у] LT',
	                    '[прошле] [суботе] [у] LT'
	                ];
	                return lastWeekDays[this.day()];
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'за %s',
	            past   : 'пре %s',
	            s      : 'неколико секунди',
	            m      : translator.translate,
	            mm     : translator.translate,
	            h      : translator.translate,
	            hh     : translator.translate,
	            d      : 'дан',
	            dd     : translator.translate,
	            M      : 'месец',
	            MM     : translator.translate,
	            y      : 'годину',
	            yy     : translator.translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return sr_cyrl;

	}));

/***/ },
/* 439 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : swedish (sv)
	//! author : Jens Alm : https://github.com/ulmus

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var sv = moment.defineLocale('sv', {
	        months : 'januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december'.split('_'),
	        monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
	        weekdays : 'söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag'.split('_'),
	        weekdaysShort : 'sön_mån_tis_ons_tor_fre_lör'.split('_'),
	        weekdaysMin : 'sö_må_ti_on_to_fr_lö'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'YYYY-MM-DD',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[Idag] LT',
	            nextDay: '[Imorgon] LT',
	            lastDay: '[Igår] LT',
	            nextWeek: '[På] dddd LT',
	            lastWeek: '[I] dddd[s] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'om %s',
	            past : 'för %s sedan',
	            s : 'några sekunder',
	            m : 'en minut',
	            mm : '%d minuter',
	            h : 'en timme',
	            hh : '%d timmar',
	            d : 'en dag',
	            dd : '%d dagar',
	            M : 'en månad',
	            MM : '%d månader',
	            y : 'ett år',
	            yy : '%d år'
	        },
	        ordinalParse: /\d{1,2}(e|a)/,
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (~~(number % 100 / 10) === 1) ? 'e' :
	                (b === 1) ? 'a' :
	                (b === 2) ? 'a' :
	                (b === 3) ? 'e' : 'e';
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return sv;

	}));

/***/ },
/* 440 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : tamil (ta)
	//! author : Arjunkumar Krishnamoorthy : https://github.com/tk120404

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var ta = moment.defineLocale('ta', {
	        months : 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split('_'),
	        monthsShort : 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split('_'),
	        weekdays : 'ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை'.split('_'),
	        weekdaysShort : 'ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி'.split('_'),
	        weekdaysMin : 'ஞா_தி_செ_பு_வி_வெ_ச'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY, HH:mm',
	            LLLL : 'dddd, D MMMM YYYY, HH:mm'
	        },
	        calendar : {
	            sameDay : '[இன்று] LT',
	            nextDay : '[நாளை] LT',
	            nextWeek : 'dddd, LT',
	            lastDay : '[நேற்று] LT',
	            lastWeek : '[கடந்த வாரம்] dddd, LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s இல்',
	            past : '%s முன்',
	            s : 'ஒரு சில விநாடிகள்',
	            m : 'ஒரு நிமிடம்',
	            mm : '%d நிமிடங்கள்',
	            h : 'ஒரு மணி நேரம்',
	            hh : '%d மணி நேரம்',
	            d : 'ஒரு நாள்',
	            dd : '%d நாட்கள்',
	            M : 'ஒரு மாதம்',
	            MM : '%d மாதங்கள்',
	            y : 'ஒரு வருடம்',
	            yy : '%d ஆண்டுகள்'
	        },
	        ordinalParse: /\d{1,2}வது/,
	        ordinal : function (number) {
	            return number + 'வது';
	        },
	        // refer http://ta.wikipedia.org/s/1er1
	        meridiemParse: /யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 2) {
	                return ' யாமம்';
	            } else if (hour < 6) {
	                return ' வைகறை';  // வைகறை
	            } else if (hour < 10) {
	                return ' காலை'; // காலை
	            } else if (hour < 14) {
	                return ' நண்பகல்'; // நண்பகல்
	            } else if (hour < 18) {
	                return ' எற்பாடு'; // எற்பாடு
	            } else if (hour < 22) {
	                return ' மாலை'; // மாலை
	            } else {
	                return ' யாமம்';
	            }
	        },
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'யாமம்') {
	                return hour < 2 ? hour : hour + 12;
	            } else if (meridiem === 'வைகறை' || meridiem === 'காலை') {
	                return hour;
	            } else if (meridiem === 'நண்பகல்') {
	                return hour >= 10 ? hour : hour + 12;
	            } else {
	                return hour + 12;
	            }
	        },
	        week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 6  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return ta;

	}));

/***/ },
/* 441 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : thai (th)
	//! author : Kridsada Thanabulpong : https://github.com/sirn

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var th = moment.defineLocale('th', {
	        months : 'มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม'.split('_'),
	        monthsShort : 'มกรา_กุมภา_มีนา_เมษา_พฤษภา_มิถุนา_กรกฎา_สิงหา_กันยา_ตุลา_พฤศจิกา_ธันวา'.split('_'),
	        weekdays : 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์'.split('_'),
	        weekdaysShort : 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์'.split('_'), // yes, three characters difference
	        weekdaysMin : 'อา._จ._อ._พ._พฤ._ศ._ส.'.split('_'),
	        longDateFormat : {
	            LT : 'H นาฬิกา m นาที',
	            LTS : 'H นาฬิกา m นาที s วินาที',
	            L : 'YYYY/MM/DD',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY เวลา H นาฬิกา m นาที',
	            LLLL : 'วันddddที่ D MMMM YYYY เวลา H นาฬิกา m นาที'
	        },
	        meridiemParse: /ก่อนเที่ยง|หลังเที่ยง/,
	        isPM: function (input) {
	            return input === 'หลังเที่ยง';
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'ก่อนเที่ยง';
	            } else {
	                return 'หลังเที่ยง';
	            }
	        },
	        calendar : {
	            sameDay : '[วันนี้ เวลา] LT',
	            nextDay : '[พรุ่งนี้ เวลา] LT',
	            nextWeek : 'dddd[หน้า เวลา] LT',
	            lastDay : '[เมื่อวานนี้ เวลา] LT',
	            lastWeek : '[วัน]dddd[ที่แล้ว เวลา] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'อีก %s',
	            past : '%sที่แล้ว',
	            s : 'ไม่กี่วินาที',
	            m : '1 นาที',
	            mm : '%d นาที',
	            h : '1 ชั่วโมง',
	            hh : '%d ชั่วโมง',
	            d : '1 วัน',
	            dd : '%d วัน',
	            M : '1 เดือน',
	            MM : '%d เดือน',
	            y : '1 ปี',
	            yy : '%d ปี'
	        }
	    });

	    return th;

	}));

/***/ },
/* 442 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Tagalog/Filipino (tl-ph)
	//! author : Dan Hagman

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var tl_ph = moment.defineLocale('tl-ph', {
	        months : 'Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre'.split('_'),
	        monthsShort : 'Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis'.split('_'),
	        weekdays : 'Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado'.split('_'),
	        weekdaysShort : 'Lin_Lun_Mar_Miy_Huw_Biy_Sab'.split('_'),
	        weekdaysMin : 'Li_Lu_Ma_Mi_Hu_Bi_Sab'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'MM/D/YYYY',
	            LL : 'MMMM D, YYYY',
	            LLL : 'MMMM D, YYYY HH:mm',
	            LLLL : 'dddd, MMMM DD, YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[Ngayon sa] LT',
	            nextDay: '[Bukas sa] LT',
	            nextWeek: 'dddd [sa] LT',
	            lastDay: '[Kahapon sa] LT',
	            lastWeek: 'dddd [huling linggo] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'sa loob ng %s',
	            past : '%s ang nakalipas',
	            s : 'ilang segundo',
	            m : 'isang minuto',
	            mm : '%d minuto',
	            h : 'isang oras',
	            hh : '%d oras',
	            d : 'isang araw',
	            dd : '%d araw',
	            M : 'isang buwan',
	            MM : '%d buwan',
	            y : 'isang taon',
	            yy : '%d taon'
	        },
	        ordinalParse: /\d{1,2}/,
	        ordinal : function (number) {
	            return number;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return tl_ph;

	}));

/***/ },
/* 443 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : turkish (tr)
	//! authors : Erhan Gundogan : https://github.com/erhangundogan,
	//!           Burak Yiğit Kaya: https://github.com/BYK

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var suffixes = {
	        1: '\'inci',
	        5: '\'inci',
	        8: '\'inci',
	        70: '\'inci',
	        80: '\'inci',
	        2: '\'nci',
	        7: '\'nci',
	        20: '\'nci',
	        50: '\'nci',
	        3: '\'üncü',
	        4: '\'üncü',
	        100: '\'üncü',
	        6: '\'ncı',
	        9: '\'uncu',
	        10: '\'uncu',
	        30: '\'uncu',
	        60: '\'ıncı',
	        90: '\'ıncı'
	    };

	    var tr = moment.defineLocale('tr', {
	        months : 'Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık'.split('_'),
	        monthsShort : 'Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara'.split('_'),
	        weekdays : 'Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi'.split('_'),
	        weekdaysShort : 'Paz_Pts_Sal_Çar_Per_Cum_Cts'.split('_'),
	        weekdaysMin : 'Pz_Pt_Sa_Ça_Pe_Cu_Ct'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[bugün saat] LT',
	            nextDay : '[yarın saat] LT',
	            nextWeek : '[haftaya] dddd [saat] LT',
	            lastDay : '[dün] LT',
	            lastWeek : '[geçen hafta] dddd [saat] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s sonra',
	            past : '%s önce',
	            s : 'birkaç saniye',
	            m : 'bir dakika',
	            mm : '%d dakika',
	            h : 'bir saat',
	            hh : '%d saat',
	            d : 'bir gün',
	            dd : '%d gün',
	            M : 'bir ay',
	            MM : '%d ay',
	            y : 'bir yıl',
	            yy : '%d yıl'
	        },
	        ordinalParse: /\d{1,2}'(inci|nci|üncü|ncı|uncu|ıncı)/,
	        ordinal : function (number) {
	            if (number === 0) {  // special case for zero
	                return number + '\'ıncı';
	            }
	            var a = number % 10,
	                b = number % 100 - a,
	                c = number >= 100 ? 100 : null;
	            return number + (suffixes[a] || suffixes[b] || suffixes[c]);
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return tr;

	}));

/***/ },
/* 444 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : talossan (tzl)
	//! author : Robin van der Vliet : https://github.com/robin0van0der0v with the help of Iustì Canun

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';



	    var tzl = moment.defineLocale('tzl', {
	        months : 'Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar'.split('_'),
	        monthsShort : 'Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec'.split('_'),
	        weekdays : 'Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi'.split('_'),
	        weekdaysShort : 'Súl_Lún_Mai_Már_Xhú_Vié_Sát'.split('_'),
	        weekdaysMin : 'Sú_Lú_Ma_Má_Xh_Vi_Sá'.split('_'),
	        longDateFormat : {
	            LT : 'HH.mm',
	            LTS : 'LT.ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM [dallas] YYYY',
	            LLL : 'D. MMMM [dallas] YYYY LT',
	            LLLL : 'dddd, [li] D. MMMM [dallas] YYYY LT'
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours > 11) {
	                return isLower ? 'd\'o' : 'D\'O';
	            } else {
	                return isLower ? 'd\'a' : 'D\'A';
	            }
	        },
	        calendar : {
	            sameDay : '[oxhi à] LT',
	            nextDay : '[demà à] LT',
	            nextWeek : 'dddd [à] LT',
	            lastDay : '[ieiri à] LT',
	            lastWeek : '[sür el] dddd [lasteu à] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'osprei %s',
	            past : 'ja%s',
	            s : processRelativeTime,
	            m : processRelativeTime,
	            mm : processRelativeTime,
	            h : processRelativeTime,
	            hh : processRelativeTime,
	            d : processRelativeTime,
	            dd : processRelativeTime,
	            M : processRelativeTime,
	            MM : processRelativeTime,
	            y : processRelativeTime,
	            yy : processRelativeTime
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            's': ['viensas secunds', '\'iensas secunds'],
	            'm': ['\'n míut', '\'iens míut'],
	            'mm': [number + ' míuts', ' ' + number + ' míuts'],
	            'h': ['\'n þora', '\'iensa þora'],
	            'hh': [number + ' þoras', ' ' + number + ' þoras'],
	            'd': ['\'n ziua', '\'iensa ziua'],
	            'dd': [number + ' ziuas', ' ' + number + ' ziuas'],
	            'M': ['\'n mes', '\'iens mes'],
	            'MM': [number + ' mesen', ' ' + number + ' mesen'],
	            'y': ['\'n ar', '\'iens ar'],
	            'yy': [number + ' ars', ' ' + number + ' ars']
	        };
	        return isFuture ? format[key][0] : (withoutSuffix ? format[key][0] : format[key][1].trim());
	    }

	    return tzl;

	}));

/***/ },
/* 445 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Morocco Central Atlas Tamaziɣt (tzm)
	//! author : Abdel Said : https://github.com/abdelsaid

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var tzm = moment.defineLocale('tzm', {
	        months : 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split('_'),
	        monthsShort : 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split('_'),
	        weekdays : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
	        weekdaysShort : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
	        weekdaysMin : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[ⴰⵙⴷⵅ ⴴ] LT',
	            nextDay: '[ⴰⵙⴽⴰ ⴴ] LT',
	            nextWeek: 'dddd [ⴴ] LT',
	            lastDay: '[ⴰⵚⴰⵏⵜ ⴴ] LT',
	            lastWeek: 'dddd [ⴴ] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s',
	            past : 'ⵢⴰⵏ %s',
	            s : 'ⵉⵎⵉⴽ',
	            m : 'ⵎⵉⵏⵓⴺ',
	            mm : '%d ⵎⵉⵏⵓⴺ',
	            h : 'ⵙⴰⵄⴰ',
	            hh : '%d ⵜⴰⵙⵙⴰⵄⵉⵏ',
	            d : 'ⴰⵙⵙ',
	            dd : '%d oⵙⵙⴰⵏ',
	            M : 'ⴰⵢoⵓⵔ',
	            MM : '%d ⵉⵢⵢⵉⵔⵏ',
	            y : 'ⴰⵙⴳⴰⵙ',
	            yy : '%d ⵉⵙⴳⴰⵙⵏ'
	        },
	        week : {
	            dow : 6, // Saturday is the first day of the week.
	            doy : 12  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return tzm;

	}));

/***/ },
/* 446 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Morocco Central Atlas Tamaziɣt in Latin (tzm-latn)
	//! author : Abdel Said : https://github.com/abdelsaid

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var tzm_latn = moment.defineLocale('tzm-latn', {
	        months : 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split('_'),
	        monthsShort : 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split('_'),
	        weekdays : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
	        weekdaysShort : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
	        weekdaysMin : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[asdkh g] LT',
	            nextDay: '[aska g] LT',
	            nextWeek: 'dddd [g] LT',
	            lastDay: '[assant g] LT',
	            lastWeek: 'dddd [g] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'dadkh s yan %s',
	            past : 'yan %s',
	            s : 'imik',
	            m : 'minuḍ',
	            mm : '%d minuḍ',
	            h : 'saɛa',
	            hh : '%d tassaɛin',
	            d : 'ass',
	            dd : '%d ossan',
	            M : 'ayowr',
	            MM : '%d iyyirn',
	            y : 'asgas',
	            yy : '%d isgasn'
	        },
	        week : {
	            dow : 6, // Saturday is the first day of the week.
	            doy : 12  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return tzm_latn;

	}));

/***/ },
/* 447 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : ukrainian (uk)
	//! author : zemlanin : https://github.com/zemlanin
	//! Author : Menelion Elensúle : https://github.com/Oire

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    function plural(word, num) {
	        var forms = word.split('_');
	        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
	    }
	    function relativeTimeWithPlural(number, withoutSuffix, key) {
	        var format = {
	            'mm': 'хвилина_хвилини_хвилин',
	            'hh': 'година_години_годин',
	            'dd': 'день_дні_днів',
	            'MM': 'місяць_місяці_місяців',
	            'yy': 'рік_роки_років'
	        };
	        if (key === 'm') {
	            return withoutSuffix ? 'хвилина' : 'хвилину';
	        }
	        else if (key === 'h') {
	            return withoutSuffix ? 'година' : 'годину';
	        }
	        else {
	            return number + ' ' + plural(format[key], +number);
	        }
	    }
	    function monthsCaseReplace(m, format) {
	        var months = {
	            'nominative': 'січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень'.split('_'),
	            'accusative': 'січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня'.split('_')
	        },
	        nounCase = (/D[oD]? *MMMM?/).test(format) ?
	            'accusative' :
	            'nominative';
	        return months[nounCase][m.month()];
	    }
	    function weekdaysCaseReplace(m, format) {
	        var weekdays = {
	            'nominative': 'неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота'.split('_'),
	            'accusative': 'неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу'.split('_'),
	            'genitive': 'неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи'.split('_')
	        },
	        nounCase = (/(\[[ВвУу]\]) ?dddd/).test(format) ?
	            'accusative' :
	            ((/\[?(?:минулої|наступної)? ?\] ?dddd/).test(format) ?
	                'genitive' :
	                'nominative');
	        return weekdays[nounCase][m.day()];
	    }
	    function processHoursFunction(str) {
	        return function () {
	            return str + 'о' + (this.hours() === 11 ? 'б' : '') + '] LT';
	        };
	    }

	    var uk = moment.defineLocale('uk', {
	        months : monthsCaseReplace,
	        monthsShort : 'січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд'.split('_'),
	        weekdays : weekdaysCaseReplace,
	        weekdaysShort : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
	        weekdaysMin : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY р.',
	            LLL : 'D MMMM YYYY р., HH:mm',
	            LLLL : 'dddd, D MMMM YYYY р., HH:mm'
	        },
	        calendar : {
	            sameDay: processHoursFunction('[Сьогодні '),
	            nextDay: processHoursFunction('[Завтра '),
	            lastDay: processHoursFunction('[Вчора '),
	            nextWeek: processHoursFunction('[У] dddd ['),
	            lastWeek: function () {
	                switch (this.day()) {
	                case 0:
	                case 3:
	                case 5:
	                case 6:
	                    return processHoursFunction('[Минулої] dddd [').call(this);
	                case 1:
	                case 2:
	                case 4:
	                    return processHoursFunction('[Минулого] dddd [').call(this);
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'за %s',
	            past : '%s тому',
	            s : 'декілька секунд',
	            m : relativeTimeWithPlural,
	            mm : relativeTimeWithPlural,
	            h : 'годину',
	            hh : relativeTimeWithPlural,
	            d : 'день',
	            dd : relativeTimeWithPlural,
	            M : 'місяць',
	            MM : relativeTimeWithPlural,
	            y : 'рік',
	            yy : relativeTimeWithPlural
	        },
	        // M. E.: those two are virtually unused but a user might want to implement them for his/her website for some reason
	        meridiemParse: /ночі|ранку|дня|вечора/,
	        isPM: function (input) {
	            return /^(дня|вечора)$/.test(input);
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'ночі';
	            } else if (hour < 12) {
	                return 'ранку';
	            } else if (hour < 17) {
	                return 'дня';
	            } else {
	                return 'вечора';
	            }
	        },
	        ordinalParse: /\d{1,2}-(й|го)/,
	        ordinal: function (number, period) {
	            switch (period) {
	            case 'M':
	            case 'd':
	            case 'DDD':
	            case 'w':
	            case 'W':
	                return number + '-й';
	            case 'D':
	                return number + '-го';
	            default:
	                return number;
	            }
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return uk;

	}));

/***/ },
/* 448 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : uzbek (uz)
	//! author : Sardor Muminov : https://github.com/muminoff

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var uz = moment.defineLocale('uz', {
	        months : 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_'),
	        monthsShort : 'янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек'.split('_'),
	        weekdays : 'Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба'.split('_'),
	        weekdaysShort : 'Якш_Душ_Сеш_Чор_Пай_Жум_Шан'.split('_'),
	        weekdaysMin : 'Як_Ду_Се_Чо_Па_Жу_Ша'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'D MMMM YYYY, dddd HH:mm'
	        },
	        calendar : {
	            sameDay : '[Бугун соат] LT [да]',
	            nextDay : '[Эртага] LT [да]',
	            nextWeek : 'dddd [куни соат] LT [да]',
	            lastDay : '[Кеча соат] LT [да]',
	            lastWeek : '[Утган] dddd [куни соат] LT [да]',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'Якин %s ичида',
	            past : 'Бир неча %s олдин',
	            s : 'фурсат',
	            m : 'бир дакика',
	            mm : '%d дакика',
	            h : 'бир соат',
	            hh : '%d соат',
	            d : 'бир кун',
	            dd : '%d кун',
	            M : 'бир ой',
	            MM : '%d ой',
	            y : 'бир йил',
	            yy : '%d йил'
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return uz;

	}));

/***/ },
/* 449 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : vietnamese (vi)
	//! author : Bang Nguyen : https://github.com/bangnk

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var vi = moment.defineLocale('vi', {
	        months : 'tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12'.split('_'),
	        monthsShort : 'Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12'.split('_'),
	        weekdays : 'chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy'.split('_'),
	        weekdaysShort : 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
	        weekdaysMin : 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM [năm] YYYY',
	            LLL : 'D MMMM [năm] YYYY HH:mm',
	            LLLL : 'dddd, D MMMM [năm] YYYY HH:mm',
	            l : 'DD/M/YYYY',
	            ll : 'D MMM YYYY',
	            lll : 'D MMM YYYY HH:mm',
	            llll : 'ddd, D MMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[Hôm nay lúc] LT',
	            nextDay: '[Ngày mai lúc] LT',
	            nextWeek: 'dddd [tuần tới lúc] LT',
	            lastDay: '[Hôm qua lúc] LT',
	            lastWeek: 'dddd [tuần rồi lúc] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : '%s tới',
	            past : '%s trước',
	            s : 'vài giây',
	            m : 'một phút',
	            mm : '%d phút',
	            h : 'một giờ',
	            hh : '%d giờ',
	            d : 'một ngày',
	            dd : '%d ngày',
	            M : 'một tháng',
	            MM : '%d tháng',
	            y : 'một năm',
	            yy : '%d năm'
	        },
	        ordinalParse: /\d{1,2}/,
	        ordinal : function (number) {
	            return number;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return vi;

	}));

/***/ },
/* 450 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : chinese (zh-cn)
	//! author : suupic : https://github.com/suupic
	//! author : Zeno Zeng : https://github.com/zenozeng

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var zh_cn = moment.defineLocale('zh-cn', {
	        months : '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
	        monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	        weekdays : '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
	        weekdaysShort : '周日_周一_周二_周三_周四_周五_周六'.split('_'),
	        weekdaysMin : '日_一_二_三_四_五_六'.split('_'),
	        longDateFormat : {
	            LT : 'Ah点mm分',
	            LTS : 'Ah点m分s秒',
	            L : 'YYYY-MM-DD',
	            LL : 'YYYY年MMMD日',
	            LLL : 'YYYY年MMMD日Ah点mm分',
	            LLLL : 'YYYY年MMMD日ddddAh点mm分',
	            l : 'YYYY-MM-DD',
	            ll : 'YYYY年MMMD日',
	            lll : 'YYYY年MMMD日Ah点mm分',
	            llll : 'YYYY年MMMD日ddddAh点mm分'
	        },
	        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === '凌晨' || meridiem === '早上' ||
	                    meridiem === '上午') {
	                return hour;
	            } else if (meridiem === '下午' || meridiem === '晚上') {
	                return hour + 12;
	            } else {
	                // '中午'
	                return hour >= 11 ? hour : hour + 12;
	            }
	        },
	        meridiem : function (hour, minute, isLower) {
	            var hm = hour * 100 + minute;
	            if (hm < 600) {
	                return '凌晨';
	            } else if (hm < 900) {
	                return '早上';
	            } else if (hm < 1130) {
	                return '上午';
	            } else if (hm < 1230) {
	                return '中午';
	            } else if (hm < 1800) {
	                return '下午';
	            } else {
	                return '晚上';
	            }
	        },
	        calendar : {
	            sameDay : function () {
	                return this.minutes() === 0 ? '[今天]Ah[点整]' : '[今天]LT';
	            },
	            nextDay : function () {
	                return this.minutes() === 0 ? '[明天]Ah[点整]' : '[明天]LT';
	            },
	            lastDay : function () {
	                return this.minutes() === 0 ? '[昨天]Ah[点整]' : '[昨天]LT';
	            },
	            nextWeek : function () {
	                var startOfWeek, prefix;
	                startOfWeek = moment().startOf('week');
	                prefix = this.unix() - startOfWeek.unix() >= 7 * 24 * 3600 ? '[下]' : '[本]';
	                return this.minutes() === 0 ? prefix + 'dddAh点整' : prefix + 'dddAh点mm';
	            },
	            lastWeek : function () {
	                var startOfWeek, prefix;
	                startOfWeek = moment().startOf('week');
	                prefix = this.unix() < startOfWeek.unix()  ? '[上]' : '[本]';
	                return this.minutes() === 0 ? prefix + 'dddAh点整' : prefix + 'dddAh点mm';
	            },
	            sameElse : 'LL'
	        },
	        ordinalParse: /\d{1,2}(日|月|周)/,
	        ordinal : function (number, period) {
	            switch (period) {
	            case 'd':
	            case 'D':
	            case 'DDD':
	                return number + '日';
	            case 'M':
	                return number + '月';
	            case 'w':
	            case 'W':
	                return number + '周';
	            default:
	                return number;
	            }
	        },
	        relativeTime : {
	            future : '%s内',
	            past : '%s前',
	            s : '几秒',
	            m : '1 分钟',
	            mm : '%d 分钟',
	            h : '1 小时',
	            hh : '%d 小时',
	            d : '1 天',
	            dd : '%d 天',
	            M : '1 个月',
	            MM : '%d 个月',
	            y : '1 年',
	            yy : '%d 年'
	        },
	        week : {
	            // GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return zh_cn;

	}));

/***/ },
/* 451 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : traditional chinese (zh-tw)
	//! author : Ben : https://github.com/ben-lin

	(function (global, factory) {
	    true ? factory(__webpack_require__(364)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var zh_tw = moment.defineLocale('zh-tw', {
	        months : '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
	        monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	        weekdays : '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
	        weekdaysShort : '週日_週一_週二_週三_週四_週五_週六'.split('_'),
	        weekdaysMin : '日_一_二_三_四_五_六'.split('_'),
	        longDateFormat : {
	            LT : 'Ah點mm分',
	            LTS : 'Ah點m分s秒',
	            L : 'YYYY年MMMD日',
	            LL : 'YYYY年MMMD日',
	            LLL : 'YYYY年MMMD日Ah點mm分',
	            LLLL : 'YYYY年MMMD日ddddAh點mm分',
	            l : 'YYYY年MMMD日',
	            ll : 'YYYY年MMMD日',
	            lll : 'YYYY年MMMD日Ah點mm分',
	            llll : 'YYYY年MMMD日ddddAh點mm分'
	        },
	        meridiemParse: /早上|上午|中午|下午|晚上/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === '早上' || meridiem === '上午') {
	                return hour;
	            } else if (meridiem === '中午') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === '下午' || meridiem === '晚上') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hour, minute, isLower) {
	            var hm = hour * 100 + minute;
	            if (hm < 900) {
	                return '早上';
	            } else if (hm < 1130) {
	                return '上午';
	            } else if (hm < 1230) {
	                return '中午';
	            } else if (hm < 1800) {
	                return '下午';
	            } else {
	                return '晚上';
	            }
	        },
	        calendar : {
	            sameDay : '[今天]LT',
	            nextDay : '[明天]LT',
	            nextWeek : '[下]ddddLT',
	            lastDay : '[昨天]LT',
	            lastWeek : '[上]ddddLT',
	            sameElse : 'L'
	        },
	        ordinalParse: /\d{1,2}(日|月|週)/,
	        ordinal : function (number, period) {
	            switch (period) {
	            case 'd' :
	            case 'D' :
	            case 'DDD' :
	                return number + '日';
	            case 'M' :
	                return number + '月';
	            case 'w' :
	            case 'W' :
	                return number + '週';
	            default :
	                return number;
	            }
	        },
	        relativeTime : {
	            future : '%s內',
	            past : '%s前',
	            s : '幾秒',
	            m : '一分鐘',
	            mm : '%d分鐘',
	            h : '一小時',
	            hh : '%d小時',
	            d : '一天',
	            dd : '%d天',
	            M : '一個月',
	            MM : '%d個月',
	            y : '一年',
	            yy : '%d年'
	        }
	    });

	    return zh_tw;

	}));

/***/ },
/* 452 */,
/* 453 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * ECharts, a javascript interactive chart library.
	 *
	 * Copyright (c) 2015, Baidu Inc.
	 * All rights reserved.
	 *
	 * LICENSE
	 * https://github.com/ecomfe/echarts/blob/master/LICENSE.txt
	 */

	/**
	 * echarts
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	    var ecConfig = __webpack_require__(455);
	    var zrUtil = __webpack_require__(456);
	    var zrEvent = __webpack_require__(458);

	    var self = {};

	    var _canvasSupported = __webpack_require__(460).canvasSupported;
	    var _idBase = new Date() - 0;
	    var _instances = {};    // ECharts实例map索引
	    var DOM_ATTRIBUTE_KEY = '_echarts_instance_';

	    self.version = '2.2.7';
	    self.dependencies = {
	        zrender: '2.1.1'
	    };
	    /**
	     * 入口方法
	     */
	    self.init = function (dom, theme) {
	        var zrender = __webpack_require__(461);
	        if ((zrender.version.replace('.', '') - 0) < (self.dependencies.zrender.replace('.', '') - 0)) {
	            console.error(
	                'ZRender ' + zrender.version
	                + ' is too old for ECharts ' + self.version
	                + '. Current version need ZRender '
	                + self.dependencies.zrender + '+'
	            );
	        }

	        dom = dom instanceof Array ? dom[0] : dom;

	        // dom与echarts实例映射索引
	        var key = dom.getAttribute(DOM_ATTRIBUTE_KEY);
	        if (!key) {
	            key = _idBase++;
	            dom.setAttribute(DOM_ATTRIBUTE_KEY, key);
	        }

	        if (_instances[key]) {
	            // 同一个dom上多次init，自动释放已有实例
	            _instances[key].dispose();
	        }
	        _instances[key] = new Echarts(dom);
	        _instances[key].id = key;
	        _instances[key].canvasSupported = _canvasSupported;
	        _instances[key].setTheme(theme);

	        return _instances[key];
	    };

	    /**
	     * 通过id获得ECharts实例，id可在实例化后读取
	     */
	    self.getInstanceById = function (key) {
	        return _instances[key];
	    };

	    /**
	     * 消息中心
	     */
	    function MessageCenter() {
	        zrEvent.Dispatcher.call(this);
	    }
	    zrUtil.merge(MessageCenter.prototype, zrEvent.Dispatcher.prototype, true);

	    /**
	     * 基于zrender实现Echarts接口层
	     * @param {HtmlElement} dom 必要
	     */
	    function Echarts(dom) {
	        // Fxxk IE11 for breaking initialization without a warrant;
	        // Just set something to let it be!
	        // by kener 2015-01-09
	        dom.innerHTML = '';
	        this._themeConfig = {}; // zrUtil.clone(ecConfig);

	        this.dom = dom;
	        // this._zr;
	        // this._option;                    // curOption clone
	        // this._optionRestore;             // for restore;
	        // this._island;
	        // this._toolbox;
	        // this._timeline;
	        // this._refreshInside;             // 内部刷新标志位

	        this._connected = false;
	        this._status = {                    // 用于图表间通信
	            dragIn: false,
	            dragOut: false,
	            needRefresh: false
	        };
	        this._curEventType = false;         // 破循环信号灯
	        this._chartList = [];               // 图表实例

	        this._messageCenter = new MessageCenter();

	        this._messageCenterOutSide = new MessageCenter();    // Echarts层的外部消息中心，做Echarts层的消息转发

	        // resize方法经常被绑定到window.resize上，闭包一个this
	        this.resize = this.resize();

	        // 初始化::构造函数
	        this._init();
	    }

	    /**
	     * ZRender EVENT
	     *
	     * @inner
	     * @const
	     * @type {Object}
	     */
	    var ZR_EVENT = __webpack_require__(463).EVENT;

	    /**
	     * 要绑定监听的zrender事件列表
	     *
	     * @const
	     * @inner
	     * @type {Array}
	     */
	    var ZR_EVENT_LISTENS = [
	        'CLICK', 'DBLCLICK', 'MOUSEOVER', 'MOUSEOUT',
	        'DRAGSTART', 'DRAGEND', 'DRAGENTER', 'DRAGOVER', 'DRAGLEAVE', 'DROP'
	    ];

	    /**
	     * 对echarts的实例中的chartList属性成员，逐个进行方法调用，遍历顺序为逆序
	     * 由于在事件触发的默认行为处理中，多次用到相同逻辑，所以抽象了该方法
	     * 由于所有的调用场景里，最多只有两个参数，基于性能和体积考虑，这里就不使用call或者apply了
	     *
	     * @inner
	     * @param {ECharts} ecInstance ECharts实例
	     * @param {string} methodName 要调用的方法名
	     * @param {*} arg0 调用参数1
	     * @param {*} arg1 调用参数2
	     * @param {*} arg2 调用参数3
	     */
	    function callChartListMethodReverse(ecInstance, methodName, arg0, arg1, arg2) {
	        var chartList = ecInstance._chartList;
	        var len = chartList.length;

	        while (len--) {
	            var chart = chartList[len];
	            if (typeof chart[methodName] === 'function') {
	                chart[methodName](arg0, arg1, arg2);
	            }
	        }
	    }

	    Echarts.prototype = {
	        /**
	         * 初始化::构造函数
	         */
	        _init: function () {
	            var self = this;
	            var _zr = __webpack_require__(461).init(this.dom);
	            this._zr = _zr;

	            // wrap: n,e,d,t for name event data this
	            this._messageCenter.dispatch = function(type, event, eventPackage, that) {
	                eventPackage = eventPackage || {};
	                eventPackage.type = type;
	                eventPackage.event = event;

	                self._messageCenter.dispatchWithContext(type, eventPackage, that);
	                self._messageCenterOutSide.dispatchWithContext(type, eventPackage, that);

	                // 如下注掉的代码，@see: https://github.com/ecomfe/echarts-discuss/issues/3
	                // if (type != 'HOVER' && type != 'MOUSEOUT') {    // 频繁事件直接抛出
	                //     setTimeout(function(){
	                //         self._messageCenterOutSide.dispatchWithContext(
	                //             type, eventPackage, that
	                //         );
	                //     },50);
	                // }
	                // else {
	                //     self._messageCenterOutSide.dispatchWithContext(
	                //         type, eventPackage, that
	                //     );
	                // }
	            };

	            this._onevent = function(param){
	                return self.__onevent(param);
	            };
	            for (var e in ecConfig.EVENT) {
	                if (e != 'CLICK' && e != 'DBLCLICK'
	                    && e != 'HOVER' && e != 'MOUSEOUT' && e != 'MAP_ROAM'
	                ) {
	                    this._messageCenter.bind(ecConfig.EVENT[e], this._onevent, this);
	                }
	            }


	            var eventBehaviors = {};
	            this._onzrevent = function (param) {
	                return self[eventBehaviors[ param.type ]](param);
	            };

	            // 挂载关心的事件
	            for (var i = 0, len = ZR_EVENT_LISTENS.length; i < len; i++) {
	                var eventName = ZR_EVENT_LISTENS[i];
	                var eventValue = ZR_EVENT[eventName];
	                eventBehaviors[eventValue] = '_on' + eventName.toLowerCase();
	                _zr.on(eventValue, this._onzrevent);
	            }

	            this.chart = {};            // 图表索引
	            this.component = {};        // 组件索引

	            // 内置图表
	            // 孤岛
	            var Island = __webpack_require__(484);
	            this._island = new Island(this._themeConfig, this._messageCenter, _zr, {}, this);
	            this.chart.island = this._island;

	            // 内置通用组件
	            // 工具箱
	            var Toolbox = __webpack_require__(514);
	            this._toolbox = new Toolbox(this._themeConfig, this._messageCenter, _zr, {}, this);
	            this.component.toolbox = this._toolbox;

	            var componentLibrary = __webpack_require__(516);
	            componentLibrary.define('title', __webpack_require__(517));
	            componentLibrary.define('tooltip', __webpack_require__(518));
	            componentLibrary.define('legend', __webpack_require__(520));

	            if (_zr.getWidth() === 0 || _zr.getHeight() === 0) {
	                console.error('Dom’s width & height should be ready before init.');
	            }
	        },

	        /**
	         * ECharts事件处理中心
	         */
	        __onevent: function (param){
	            param.__echartsId = param.__echartsId || this.id;

	            // 来自其他联动图表的事件
	            var fromMyself = (param.__echartsId === this.id);

	            if (!this._curEventType) {
	                this._curEventType = param.type;
	            }

	            switch (param.type) {
	                case ecConfig.EVENT.LEGEND_SELECTED :
	                    this._onlegendSelected(param);
	                    break;
	                case ecConfig.EVENT.DATA_ZOOM :
	                    if (!fromMyself) {
	                        var dz = this.component.dataZoom;
	                        if (dz) {
	                            dz.silence(true);
	                            dz.absoluteZoom(param.zoom);
	                            dz.silence(false);
	                        }
	                    }
	                    this._ondataZoom(param);
	                    break;
	                case ecConfig.EVENT.DATA_RANGE :
	                    fromMyself && this._ondataRange(param);
	                    break;
	                case ecConfig.EVENT.MAGIC_TYPE_CHANGED :
	                    if (!fromMyself) {
	                        var tb = this.component.toolbox;
	                        if (tb) {
	                            tb.silence(true);
	                            tb.setMagicType(param.magicType);
	                            tb.silence(false);
	                        }
	                    }
	                    this._onmagicTypeChanged(param);
	                    break;
	                case ecConfig.EVENT.DATA_VIEW_CHANGED :
	                    fromMyself && this._ondataViewChanged(param);
	                    break;
	                case ecConfig.EVENT.TOOLTIP_HOVER :
	                    fromMyself && this._tooltipHover(param);
	                    break;
	                case ecConfig.EVENT.RESTORE :
	                    this._onrestore();
	                    break;
	                case ecConfig.EVENT.REFRESH :
	                    fromMyself && this._onrefresh(param);
	                    break;
	                // 鼠标同步
	                case ecConfig.EVENT.TOOLTIP_IN_GRID :
	                case ecConfig.EVENT.TOOLTIP_OUT_GRID :
	                    if (!fromMyself) {
	                        // 只处理来自外部的鼠标同步
	                        var grid = this.component.grid;
	                        if (grid) {
	                            this._zr.trigger(
	                                'mousemove',
	                                {
	                                    connectTrigger: true,
	                                    zrenderX: grid.getX() + param.x * grid.getWidth(),
	                                    zrenderY: grid.getY() + param.y * grid.getHeight()
	                                }
	                            );
	                        }
	                    }
	                    else if (this._connected) {
	                        // 来自自己，并且存在多图联动，空间坐标映射修改参数分发
	                        var grid = this.component.grid;
	                        if (grid) {
	                            param.x = (param.event.zrenderX - grid.getX()) / grid.getWidth();
	                            param.y = (param.event.zrenderY - grid.getY()) / grid.getHeight();
	                        }
	                    }
	                    break;
	                /*
	                case ecConfig.EVENT.RESIZE :
	                case ecConfig.EVENT.DATA_CHANGED :
	                case ecConfig.EVENT.PIE_SELECTED :
	                case ecConfig.EVENT.MAP_SELECTED :
	                    break;
	                */
	            }

	            // 多图联动，只做自己的一级事件分发，避免级联事件循环
	            if (this._connected && fromMyself && this._curEventType === param.type) {
	                for (var c in this._connected) {
	                    this._connected[c].connectedEventHandler(param);
	                }
	                // 分发完毕后复位
	                this._curEventType = null;
	            }

	            if (!fromMyself || (!this._connected && fromMyself)) {  // 处理了完联动事件复位
	                this._curEventType = null;
	            }
	        },

	        /**
	         * 点击事件，响应zrender事件，包装后分发到Echarts层
	         */
	        _onclick: function (param) {
	            callChartListMethodReverse(this, 'onclick', param);

	            if (param.target) {
	                var ecData = this._eventPackage(param.target);
	                if (ecData && ecData.seriesIndex != null) {
	                    this._messageCenter.dispatch(
	                        ecConfig.EVENT.CLICK,
	                        param.event,
	                        ecData,
	                        this
	                    );
	                }
	            }
	        },

	        /**
	         * 双击事件，响应zrender事件，包装后分发到Echarts层
	         */
	        _ondblclick: function (param) {
	            callChartListMethodReverse(this, 'ondblclick', param);

	            if (param.target) {
	                var ecData = this._eventPackage(param.target);
	                if (ecData && ecData.seriesIndex != null) {
	                    this._messageCenter.dispatch(
	                        ecConfig.EVENT.DBLCLICK,
	                        param.event,
	                        ecData,
	                        this
	                    );
	                }
	            }
	        },

	        /**
	         * 鼠标移入事件，响应zrender事件，包装后分发到Echarts层
	         */
	        _onmouseover: function (param) {
	            if (param.target) {
	                var ecData = this._eventPackage(param.target);
	                if (ecData && ecData.seriesIndex != null) {
	                    this._messageCenter.dispatch(
	                        ecConfig.EVENT.HOVER,
	                        param.event,
	                        ecData,
	                        this
	                    );
	                }
	            }
	        },

	        /**
	         * 鼠标移出事件，响应zrender事件，包装后分发到Echarts层
	         */
	        _onmouseout: function (param) {
	            if (param.target) {
	                var ecData = this._eventPackage(param.target);
	                if (ecData && ecData.seriesIndex != null) {
	                    this._messageCenter.dispatch(
	                        ecConfig.EVENT.MOUSEOUT,
	                        param.event,
	                        ecData,
	                        this
	                    );
	                }
	            }
	        },

	        /**
	         * dragstart回调，可计算特性实现
	         */
	        _ondragstart: function (param) {
	            // 复位用于图表间通信拖拽标识
	            this._status = {
	                dragIn: false,
	                dragOut: false,
	                needRefresh: false
	            };

	            callChartListMethodReverse(this, 'ondragstart', param);
	        },

	        /**
	         * dragging回调，可计算特性实现
	         */
	        _ondragenter: function (param) {
	            callChartListMethodReverse(this, 'ondragenter', param);
	        },

	        /**
	         * dragstart回调，可计算特性实现
	         */
	        _ondragover: function (param) {
	            callChartListMethodReverse(this, 'ondragover', param);
	        },

	        /**
	         * dragstart回调，可计算特性实现
	         */
	        _ondragleave: function (param) {
	            callChartListMethodReverse(this, 'ondragleave', param);
	        },

	        /**
	         * dragstart回调，可计算特性实现
	         */
	        _ondrop: function (param) {
	            callChartListMethodReverse(this, 'ondrop', param, this._status);
	            this._island.ondrop(param, this._status);
	        },

	        /**
	         * dragdone回调 ，可计算特性实现
	         */
	        _ondragend: function (param) {
	            callChartListMethodReverse(this, 'ondragend', param, this._status);

	            this._timeline && this._timeline.ondragend(param, this._status);
	            this._island.ondragend(param, this._status);

	            // 发生过重计算
	            if (this._status.needRefresh) {
	                this._syncBackupData(this._option);

	                var messageCenter = this._messageCenter;
	                messageCenter.dispatch(
	                    ecConfig.EVENT.DATA_CHANGED,
	                    param.event,
	                    this._eventPackage(param.target),
	                    this
	                );
	                messageCenter.dispatch(ecConfig.EVENT.REFRESH, null, null, this);
	            }
	        },

	        /**
	         * 图例选择响应
	         */
	        _onlegendSelected: function (param) {
	            // 用于图表间通信
	            this._status.needRefresh = false;
	            callChartListMethodReverse(this, 'onlegendSelected', param, this._status);

	            if (this._status.needRefresh) {
	                this._messageCenter.dispatch(ecConfig.EVENT.REFRESH, null, null, this);
	            }
	        },

	        /**
	         * 数据区域缩放响应
	         */
	        _ondataZoom: function (param) {
	            // 用于图表间通信
	            this._status.needRefresh = false;
	            callChartListMethodReverse(this, 'ondataZoom', param, this._status);

	            if (this._status.needRefresh) {
	                this._messageCenter.dispatch(ecConfig.EVENT.REFRESH, null, null, this);
	            }
	        },

	        /**
	         * 值域漫游响应
	         */
	        _ondataRange: function (param) {
	            this._clearEffect();
	            // 用于图表间通信
	            this._status.needRefresh = false;
	            callChartListMethodReverse(this, 'ondataRange', param, this._status);

	            // 没有相互影响，直接刷新即可
	            if (this._status.needRefresh) {
	                this._zr.refreshNextFrame();
	            }
	        },

	        /**
	         * 动态类型切换响应
	         */
	        _onmagicTypeChanged: function () {
	            this._clearEffect();
	            this._render(this._toolbox.getMagicOption());
	        },

	        /**
	         * 数据视图修改响应
	         */
	        _ondataViewChanged: function (param) {
	            this._syncBackupData(param.option);
	            this._messageCenter.dispatch(
	                ecConfig.EVENT.DATA_CHANGED,
	                null,
	                param,
	                this
	            );
	            this._messageCenter.dispatch(ecConfig.EVENT.REFRESH, null, null, this);
	        },

	        /**
	         * tooltip与图表间通信
	         */
	        _tooltipHover: function (param) {
	            var tipShape = [];
	            callChartListMethodReverse(this, 'ontooltipHover', param, tipShape);
	        },

	        /**
	         * 还原
	         */
	        _onrestore: function () {
	            this.restore();
	        },

	        /**
	         * 刷新
	         */
	        _onrefresh: function (param) {
	            this._refreshInside = true;
	            this.refresh(param);
	            this._refreshInside = false;
	        },

	        /**
	         * 数据修改后的反向同步dataZoom持有的备份数据
	         */
	        _syncBackupData: function (curOption) {
	            this.component.dataZoom && this.component.dataZoom.syncBackupData(curOption);
	        },

	        /**
	         * 打包Echarts层的事件附件
	         */
	        _eventPackage: function (target) {
	            if (target) {
	                var ecData = __webpack_require__(503);

	                var seriesIndex = ecData.get(target, 'seriesIndex');
	                var dataIndex = ecData.get(target, 'dataIndex');

	                dataIndex = seriesIndex != -1 && this.component.dataZoom
	                            ? this.component.dataZoom.getRealDataIndex(
	                                seriesIndex,
	                                dataIndex
	                              )
	                            : dataIndex;
	                return {
	                    seriesIndex: seriesIndex,
	                    seriesName: (ecData.get(target, 'series') || {}).name,
	                    dataIndex: dataIndex,
	                    data: ecData.get(target, 'data'),
	                    name: ecData.get(target, 'name'),
	                    value: ecData.get(target, 'value'),
	                    special: ecData.get(target, 'special')
	                };
	            }
	            return;
	        },

	        _noDataCheck: function(magicOption) {
	            var series = magicOption.series;

	            for (var i = 0, l = series.length; i < l; i++) {
	                if (series[i].type == ecConfig.CHART_TYPE_MAP
	                    || (series[i].data && series[i].data.length > 0)
	                    || (series[i].markPoint && series[i].markPoint.data && series[i].markPoint.data.length > 0)
	                    || (series[i].markLine && series[i].markLine.data && series[i].markLine.data.length > 0)
	                    || (series[i].nodes && series[i].nodes.length > 0)
	                    || (series[i].links && series[i].links.length > 0)
	                    || (series[i].matrix && series[i].matrix.length > 0)
	                    || (series[i].eventList && series[i].eventList.length > 0)
	                ) {
	                    return false;   // 存在任意数据则为非空数据
	                }
	            }
	            var loadOption = (this._option && this._option.noDataLoadingOption)
	                || this._themeConfig.noDataLoadingOption
	                || ecConfig.noDataLoadingOption
	                || {
	                    text: (this._option && this._option.noDataText)
	                          || this._themeConfig.noDataText
	                          || ecConfig.noDataText,
	                    effect: (this._option && this._option.noDataEffect)
	                            || this._themeConfig.noDataEffect
	                            || ecConfig.noDataEffect
	                };
	            // 空数据
	            this.clear();
	            this.showLoading(loadOption);
	            return true;
	        },

	        /**
	         * 图表渲染
	         */
	        _render: function (magicOption) {
	            this._mergeGlobalConifg(magicOption);

	            if (this._noDataCheck(magicOption)) {
	                return;
	            }

	            var bgColor = magicOption.backgroundColor;
	            if (bgColor) {
	                if (!_canvasSupported
	                    && bgColor.indexOf('rgba') != -1
	                ) {
	                    // IE6~8对RGBA的处理，filter会带来其他颜色的影响
	                    var cList = bgColor.split(',');
	                    this.dom.style.filter = 'alpha(opacity=' +
	                        cList[3].substring(0, cList[3].lastIndexOf(')')) * 100
	                        + ')';
	                    cList.length = 3;
	                    cList[0] = cList[0].replace('a', '');
	                    this.dom.style.backgroundColor = cList.join(',') + ')';
	                }
	                else {
	                    this.dom.style.backgroundColor = bgColor;
	                }
	            }

	            this._zr.clearAnimation();
	            this._chartList = [];

	            var chartLibrary = __webpack_require__(454);
	            var componentLibrary = __webpack_require__(516);

	            if (magicOption.xAxis || magicOption.yAxis) {
	                magicOption.grid = magicOption.grid || {};
	                magicOption.dataZoom = magicOption.dataZoom || {};
	            }

	            var componentList = [
	                'title', 'legend', 'tooltip', 'dataRange', 'roamController',
	                'grid', 'dataZoom', 'xAxis', 'yAxis', 'polar'
	            ];

	            var ComponentClass;
	            var componentType;
	            var component;
	            for (var i = 0, l = componentList.length; i < l; i++) {
	                componentType = componentList[i];
	                component = this.component[componentType];

	                if (magicOption[componentType]) {
	                    if (component) {
	                        component.refresh && component.refresh(magicOption);
	                    }
	                    else {
	                        ComponentClass = componentLibrary.get(
	                            /^[xy]Axis$/.test(componentType) ? 'axis' : componentType
	                        );
	                        component = new ComponentClass(
	                            this._themeConfig, this._messageCenter, this._zr,
	                            magicOption, this, componentType
	                        );
	                        this.component[componentType] = component;
	                    }
	                    this._chartList.push(component);
	                }
	                else if (component) {
	                    component.dispose();
	                    this.component[componentType] = null;
	                    delete this.component[componentType];
	                }
	            }

	            var ChartClass;
	            var chartType;
	            var chart;
	            var chartMap = {};      // 记录已经初始化的图表
	            for (var i = 0, l = magicOption.series.length; i < l; i++) {
	                chartType = magicOption.series[i].type;
	                if (!chartType) {
	                    console.error('series[' + i + '] chart type has not been defined.');
	                    continue;
	                }

	                if (!chartMap[chartType]) {
	                    chartMap[chartType] = true;
	                    ChartClass = chartLibrary.get(chartType);
	                    if (ChartClass) {
	                        if (this.chart[chartType]) {
	                            chart = this.chart[chartType];
	                            chart.refresh(magicOption);
	                        }
	                        else {
	                            chart = new ChartClass(
	                                this._themeConfig, this._messageCenter, this._zr,
	                                magicOption, this
	                            );
	                        }
	                        this._chartList.push(chart);
	                        this.chart[chartType] = chart;
	                    }
	                    else {
	                        console.error(chartType + ' has not been required.');
	                    }
	                }
	            }

	            // 已有实例但新option不带这类图表的实例释放
	            for (chartType in this.chart) {
	                if (chartType != ecConfig.CHART_TYPE_ISLAND  && !chartMap[chartType]) {
	                    this.chart[chartType].dispose();
	                    this.chart[chartType] = null;
	                    delete this.chart[chartType];
	                }
	            }

	            this.component.grid && this.component.grid.refixAxisShape(this.component);

	            this._island.refresh(magicOption);
	            this._toolbox.refresh(magicOption);

	            magicOption.animation && !magicOption.renderAsImage
	                ? this._zr.refresh()
	                : this._zr.render();

	            var imgId = 'IMG' + this.id;
	            var img = document.getElementById(imgId);
	            if (magicOption.renderAsImage && _canvasSupported) {
	                // IE8- 不支持图片渲染形式
	                if (img) {
	                    // 已经渲染过则更新显示
	                    img.src = this.getDataURL(magicOption.renderAsImage);
	                }
	                else {
	                    // 没有渲染过插入img dom
	                    img = this.getImage(magicOption.renderAsImage);
	                    img.id = imgId;
	                    img.style.position = 'absolute';
	                    img.style.left = 0;
	                    img.style.top = 0;
	                    this.dom.firstChild.appendChild(img);
	                }
	                this.un();
	                this._zr.un();
	                this._disposeChartList();
	                this._zr.clear();
	            }
	            else if (img) {
	                // 删除可能存在的img
	                img.parentNode.removeChild(img);
	            }
	            img = null;

	            this._option = magicOption;
	        },

	        /**
	         * 还原
	         */
	        restore: function () {
	            this._clearEffect();
	            this._option = zrUtil.clone(this._optionRestore);
	            this._disposeChartList();
	            this._island.clear();
	            this._toolbox.reset(this._option, true);
	            this._render(this._option);
	        },

	        /**
	         * 刷新
	         * @param {Object=} param，可选参数，用于附带option，内部同步用，外部不建议带入数据修改，无法同步
	         */
	        refresh: function (param) {
	            this._clearEffect();
	            param = param || {};
	            var magicOption = param.option;

	            // 外部调用的refresh且有option带入
	            if (!this._refreshInside && magicOption) {
	                // 做简单的差异合并去同步内部持有的数据克隆，不建议带入数据
	                // 开启数据区域缩放、拖拽重计算、数据视图可编辑模式情况下，当用户产生了数据变化后无法同步
	                // 如有带入option存在数据变化，请重新setOption
	                magicOption = this.getOption();
	                zrUtil.merge(magicOption, param.option, true);
	                zrUtil.merge(this._optionRestore, param.option, true);
	                this._toolbox.reset(magicOption);
	            }

	            this._island.refresh(magicOption);
	            this._toolbox.refresh(magicOption);

	            // 停止动画
	            this._zr.clearAnimation();
	            // 先来后到，安顺序刷新各种图表，图表内部refresh优化检查magicOption，无需更新则不更新~
	            for (var i = 0, l = this._chartList.length; i < l; i++) {
	                this._chartList[i].refresh && this._chartList[i].refresh(magicOption);
	            }
	            this.component.grid && this.component.grid.refixAxisShape(this.component);
	            this._zr.refresh();
	        },

	        /**
	         * 释放图表实例
	         */
	        _disposeChartList: function () {
	            this._clearEffect();

	            // 停止动画
	            this._zr.clearAnimation();

	            var len = this._chartList.length;
	            while (len--) {
	                var chart = this._chartList[len];

	                if (chart) {
	                    var chartType = chart.type;
	                    this.chart[chartType] && delete this.chart[chartType];
	                    this.component[chartType] && delete this.component[chartType];
	                    chart.dispose && chart.dispose();
	                }
	            }

	            this._chartList = [];
	        },

	        /**
	         * 非图表全局属性merge~~
	         */
	        _mergeGlobalConifg: function (magicOption) {
	            var mergeList = [
	                // 背景颜色
	                'backgroundColor',

	                // 拖拽重计算相关
	                'calculable', 'calculableColor', 'calculableHolderColor',

	                // 孤岛显示连接符
	                'nameConnector', 'valueConnector',

	                // 动画相关
	                'animation', 'animationThreshold',
	                'animationDuration', 'animationDurationUpdate',
	                'animationEasing', 'addDataAnimation',

	                // 默认标志图形类型列表
	                'symbolList',

	                // 降低图表内元素拖拽敏感度，单位ms，不建议外部干预
	                'DRAG_ENABLE_TIME'
	            ];

	            var len = mergeList.length;
	            while (len--) {
	                var mergeItem = mergeList[len];
	                if (magicOption[mergeItem] == null) {
	                    magicOption[mergeItem] = this._themeConfig[mergeItem] != null
	                        ? this._themeConfig[mergeItem]
	                        : ecConfig[mergeItem];
	                }
	            }

	            // 数值系列的颜色列表，不传则采用内置颜色，可配数组，借用zrender实例注入，会有冲突风险，先这样
	            var themeColor = magicOption.color;
	            if (!(themeColor && themeColor.length)) {
	                themeColor = this._themeConfig.color || ecConfig.color;
	            }

	            this._zr.getColor = function (idx) {
	                var zrColor = __webpack_require__(475);
	                return zrColor.getColor(idx, themeColor);
	            };

	            if (!_canvasSupported) {
	                // 不支持Canvas的强制关闭动画
	                magicOption.animation = false;
	                magicOption.addDataAnimation = false;
	            }
	        },

	        /**
	         * 万能接口，配置图表实例任何可配置选项，多次调用时option选项做merge处理
	         * @param {Object} option
	         * @param {boolean=} notMerge 多次调用时option选项是默认是合并（merge）的，
	         *                   如果不需求，可以通过notMerger参数为true阻止与上次option的合并
	         */
	        setOption: function (option, notMerge) {
	            if (!option.timeline) {
	                return this._setOption(option, notMerge);
	            }
	            else {
	                return this._setTimelineOption(option);
	            }
	        },

	        /**
	         * 万能接口，配置图表实例任何可配置选项，多次调用时option选项做merge处理
	         * @param {Object} option
	         * @param {boolean=} notMerge 多次调用时option选项是默认是合并（merge）的，
	         *                   如果不需求，可以通过notMerger参数为true阻止与上次option的合并
	         * @param {boolean=} 默认false。keepTimeLine 表示从timeline组件调用而来，
	         *                   表示当前行为是timeline的数据切换，保持timeline，
	         *                   反之销毁timeline。 详见Issue #1601
	         */
	        _setOption: function (option, notMerge, keepTimeLine) {
	            if (!notMerge && this._option) {
	                this._option = zrUtil.merge(
	                    this.getOption(),
	                    zrUtil.clone(option),
	                    true
	                );
	            }
	            else {
	                this._option = zrUtil.clone(option);
	                !keepTimeLine && this._timeline && this._timeline.dispose();
	            }

	            this._optionRestore = zrUtil.clone(this._option);

	            if (!this._option.series || this._option.series.length === 0) {
	                this._zr.clear();
	                return;
	            }

	            if (this.component.dataZoom                         // 存在dataZoom控件
	                && (this._option.dataZoom                       // 并且新option也存在
	                    || (this._option.toolbox
	                        && this._option.toolbox.feature
	                        && this._option.toolbox.feature.dataZoom
	                        && this._option.toolbox.feature.dataZoom.show
	                    )
	                )
	            ) {
	                // dataZoom同步数据
	                this.component.dataZoom.syncOption(this._option);
	            }
	            this._toolbox.reset(this._option);
	            this._render(this._option);
	            return this;
	        },

	        /**
	         * 返回内部持有的当前显示option克隆
	         */
	        getOption: function () {
	            var magicOption = zrUtil.clone(this._option);

	            var self = this;
	            function restoreOption(prop) {
	                var restoreSource = self._optionRestore[prop];

	                if (restoreSource) {
	                    if (restoreSource instanceof Array) {
	                        var len = restoreSource.length;
	                        while (len--) {
	                            magicOption[prop][len].data = zrUtil.clone(
	                                restoreSource[len].data
	                            );
	                        }
	                    }
	                    else {
	                        magicOption[prop].data = zrUtil.clone(restoreSource.data);
	                    }
	                }
	            }

	            // 横轴数据还原
	            restoreOption('xAxis');

	            // 纵轴数据还原
	            restoreOption('yAxis');

	            // 系列数据还原
	            restoreOption('series');

	            return magicOption;
	        },

	        /**
	         * 数据设置快捷接口
	         * @param {Array} series
	         * @param {boolean=} notMerge 多次调用时option选项是默认是合并（merge）的，
	         *                   如果不需求，可以通过notMerger参数为true阻止与上次option的合并。
	         */
	        setSeries: function (series, notMerge) {
	            if (!notMerge) {
	                this.setOption({series: series});
	            }
	            else {
	                this._option.series = series;
	                this.setOption(this._option, notMerge);
	            }
	            return this;
	        },

	        /**
	         * 返回内部持有的当前显示series克隆
	         */
	        getSeries: function () {
	            return this.getOption().series;
	        },

	        /**
	         * timelineOption接口，配置图表实例任何可配置选项
	         * @param {Object} option
	         */
	        _setTimelineOption: function(option) {
	            this._timeline && this._timeline.dispose();
	            var Timeline = __webpack_require__(524);
	            var timeline = new Timeline(
	                this._themeConfig, this._messageCenter, this._zr, option, this
	            );
	            this._timeline = timeline;
	            this.component.timeline = this._timeline;

	            return this;
	        },

	        /**
	         * 动态数据添加
	         * 形参为单组数据参数，多组时为数据，内容同[seriesIdx, data, isShift, additionData]
	         * @param {number} seriesIdx 系列索引
	         * @param {number | Object} data 增加数据
	         * @param {boolean=} isHead 是否队头加入，默认，不指定或false时为队尾插入
	         * @param {boolean=} dataGrow 是否增长数据队列长度，默认，不指定或false时移出目标数组对位数据
	         * @param {string=} additionData 是否增加类目轴(饼图为图例)数据，附加操作同isHead和dataGrow
	         */
	        addData: function (seriesIdx, data, isHead, dataGrow, additionData) {
	            var params = seriesIdx instanceof Array
	                ? seriesIdx
	                : [[seriesIdx, data, isHead, dataGrow, additionData]];

	            //this._optionRestore 和 magicOption 都要同步
	            var magicOption = this.getOption();
	            var optionRestore = this._optionRestore;
	            var self = this;
	            for (var i = 0, l = params.length; i < l; i++) {
	                seriesIdx = params[i][0];
	                data = params[i][1];
	                isHead = params[i][2];
	                dataGrow = params[i][3];
	                additionData = params[i][4];

	                var seriesItem = optionRestore.series[seriesIdx];
	                var inMethod = isHead ? 'unshift' : 'push';
	                var outMethod = isHead ? 'pop' : 'shift';
	                if (seriesItem) {
	                    var seriesItemData = seriesItem.data;
	                    var mSeriesItemData = magicOption.series[seriesIdx].data;

	                    seriesItemData[inMethod](data);
	                    mSeriesItemData[inMethod](data);
	                    if (!dataGrow) {
	                        seriesItemData[outMethod]();
	                        data = mSeriesItemData[outMethod]();
	                    }

	                    if (additionData != null) {
	                        var legend;
	                        var legendData;

	                        if (seriesItem.type === ecConfig.CHART_TYPE_PIE
	                            && (legend = optionRestore.legend)
	                            && (legendData = legend.data)
	                        ) {
	                            var mLegendData = magicOption.legend.data;
	                            legendData[inMethod](additionData);
	                            mLegendData[inMethod](additionData);

	                            if (!dataGrow) {
	                                var legendDataIdx = zrUtil.indexOf(legendData, data.name);
	                                legendDataIdx != -1 && legendData.splice(legendDataIdx, 1);

	                                legendDataIdx = zrUtil.indexOf(mLegendData, data.name);
	                                legendDataIdx != -1 && mLegendData.splice(legendDataIdx, 1);
	                            }
	                        }
	                        else if (optionRestore.xAxis != null && optionRestore.yAxis != null) {
	                            // x轴类目
	                            var axisData;
	                            var mAxisData;
	                            var axisIdx = seriesItem.xAxisIndex || 0;

	                            if (optionRestore.xAxis[axisIdx].type == null
	                                || optionRestore.xAxis[axisIdx].type === 'category'
	                            ) {
	                                axisData = optionRestore.xAxis[axisIdx].data;
	                                mAxisData = magicOption.xAxis[axisIdx].data;

	                                axisData[inMethod](additionData);
	                                mAxisData[inMethod](additionData);
	                                if (!dataGrow) {
	                                    axisData[outMethod]();
	                                    mAxisData[outMethod]();
	                                }
	                            }

	                            // y轴类目
	                            axisIdx = seriesItem.yAxisIndex || 0;
	                            if (optionRestore.yAxis[axisIdx].type === 'category') {
	                                axisData = optionRestore.yAxis[axisIdx].data;
	                                mAxisData = magicOption.yAxis[axisIdx].data;

	                                axisData[inMethod](additionData);
	                                mAxisData[inMethod](additionData);
	                                if (!dataGrow) {
	                                    axisData[outMethod]();
	                                    mAxisData[outMethod]();
	                                }
	                            }
	                        }
	                    }

	                    // 同步图表内状态，动画需要
	                    this._option.series[seriesIdx].data = magicOption.series[seriesIdx].data;
	                }
	            }

	            this._zr.clearAnimation();
	            var chartList = this._chartList;
	            var chartAnimationCount = 0;
	            var chartAnimationDone = function () {
	                chartAnimationCount--;
	                if (chartAnimationCount === 0) {
	                    animationDone();
	                }
	            };
	            for (var i = 0, l = chartList.length; i < l; i++) {
	                if (magicOption.addDataAnimation && chartList[i].addDataAnimation) {
	                    chartAnimationCount++;
	                    chartList[i].addDataAnimation(params, chartAnimationDone);
	                }
	            }

	            // dataZoom同步数据
	            this.component.dataZoom && this.component.dataZoom.syncOption(magicOption);

	            this._option = magicOption;
	            function animationDone() {
	                if (!self._zr) {
	                    return; // 已经被释放
	                }
	                self._zr.clearAnimation();
	                for (var i = 0, l = chartList.length; i < l; i++) {
	                    // 有addData动画就去掉过渡动画
	                    chartList[i].motionlessOnce =
	                        magicOption.addDataAnimation && chartList[i].addDataAnimation;
	                }
	                self._messageCenter.dispatch(
	                    ecConfig.EVENT.REFRESH,
	                    null,
	                    {option: magicOption},
	                    self
	                );
	            }

	            if (!magicOption.addDataAnimation) {
	                setTimeout(animationDone, 0);
	            }
	            return this;
	        },

	        /**
	         * 动态[标注 | 标线]添加
	         * @param {number} seriesIdx 系列索引
	         * @param {Object} markData [标注 | 标线]对象，支持多个
	         */
	        addMarkPoint: function (seriesIdx, markData) {
	            return this._addMark(seriesIdx, markData, 'markPoint');
	        },

	        addMarkLine: function (seriesIdx, markData) {
	            return this._addMark(seriesIdx, markData, 'markLine');
	        },

	        _addMark: function (seriesIdx, markData, markType) {
	            var series = this._option.series;
	            var seriesItem;

	            if (series && (seriesItem = series[seriesIdx])) {
	                var seriesR = this._optionRestore.series;
	                var seriesRItem = seriesR[seriesIdx];
	                var markOpt = seriesItem[markType];
	                var markOptR = seriesRItem[markType];

	                markOpt = seriesItem[markType] = markOpt || {data: []};
	                markOptR = seriesRItem[markType] = markOptR || {data: []};

	                for (var key in markData) {
	                    if (key === 'data') {
	                        // 数据concat
	                        markOpt.data = markOpt.data.concat(markData.data);
	                        markOptR.data = markOptR.data.concat(markData.data);
	                    }
	                    else if (typeof markData[key] != 'object' || markOpt[key] == null) {
	                        // 简单类型或新值直接赋值
	                        markOpt[key] = markOptR[key] = markData[key];
	                    }
	                    else {
	                        // 非数据的复杂对象merge
	                        zrUtil.merge(markOpt[key], markData[key], true);
	                        zrUtil.merge(markOptR[key], markData[key], true);
	                    }
	                }

	                var chart = this.chart[seriesItem.type];
	                chart && chart.addMark(seriesIdx, markData, markType);
	            }

	            return this;
	        },

	        /**
	         * 动态[标注 | 标线]删除
	         * @param {number} seriesIdx 系列索引
	         * @param {string} markName [标注 | 标线]名称
	         */
	        delMarkPoint: function (seriesIdx, markName) {
	            return this._delMark(seriesIdx, markName, 'markPoint');
	        },

	        delMarkLine: function (seriesIdx, markName) {
	            return this._delMark(seriesIdx, markName, 'markLine');
	        },

	        _delMark: function (seriesIdx, markName, markType) {
	            var series = this._option.series;
	            var seriesItem;
	            var mark;
	            var dataArray;

	            if (!(
	                    series
	                    && (seriesItem = series[seriesIdx])
	                    && (mark = seriesItem[markType])
	                    && (dataArray = mark.data)
	                )
	            ) {
	                return this;
	            }

	            markName = markName.split(' > ');
	            var targetIndex = -1;

	            for (var i = 0, l = dataArray.length; i < l; i++) {
	                var dataItem = dataArray[i];
	                if (dataItem instanceof Array) {
	                    if (dataItem[0].name === markName[0]
	                        && dataItem[1].name === markName[1]
	                    ) {
	                        targetIndex = i;
	                        break;
	                    }
	                }
	                else if (dataItem.name === markName[0]) {
	                    targetIndex = i;
	                    break;
	                }
	            }

	            if (targetIndex > -1) {
	                dataArray.splice(targetIndex, 1);
	                this._optionRestore.series[seriesIdx][markType].data.splice(targetIndex, 1);

	                var chart = this.chart[seriesItem.type];
	                chart && chart.delMark(seriesIdx, markName.join(' > '), markType);
	            }

	            return this;
	        },

	        /**
	         * 获取当前dom
	         */
	        getDom: function () {
	            return this.dom;
	        },

	        /**
	         * 获取当前zrender实例，可用于添加额为的shape和深度控制
	         */
	        getZrender: function () {
	            return this._zr;
	        },

	        /**
	         * 获取Base64图片dataURL
	         * @param {string} imgType 图片类型，支持png|jpeg，默认为png
	         * @return imgDataURL
	         */
	        getDataURL: function (imgType) {
	            if (!_canvasSupported) {
	                return '';
	            }

	            if (this._chartList.length === 0) {
	                // 渲染为图片
	                var imgId = 'IMG' + this.id;
	                var img = document.getElementById(imgId);
	                if (img) {
	                    return img.src;
	                }
	            }

	            // 清除可能存在的tooltip元素
	            var tooltip = this.component.tooltip;
	            tooltip && tooltip.hideTip();

	            switch (imgType) {
	                case 'jpeg':
	                    break;
	                default:
	                    imgType = 'png';
	            }

	            var bgColor = this._option.backgroundColor;
	            if (bgColor && bgColor.replace(' ','') === 'rgba(0,0,0,0)') {
	                bgColor = '#fff';
	            }

	            return this._zr.toDataURL('image/' + imgType, bgColor);
	        },

	        /**
	         * 获取img
	         * @param {string} imgType 图片类型，支持png|jpeg，默认为png
	         * @return img dom
	         */
	        getImage: function (imgType) {
	            var title = this._optionRestore.title;
	            var imgDom = document.createElement('img');
	            imgDom.src = this.getDataURL(imgType);
	            imgDom.title = (title && title.text) || 'ECharts';
	            return imgDom;
	        },

	        /**
	         * 获取多图联动的Base64图片dataURL
	         * @param {string} imgType 图片类型，支持png|jpeg，默认为png
	         * @return imgDataURL
	         */
	        getConnectedDataURL: function (imgType) {
	            if (!this.isConnected()) {
	                return this.getDataURL(imgType);
	            }

	            var tempDom = this.dom;
	            var imgList = {
	                'self': {
	                    img: this.getDataURL(imgType),
	                    left: tempDom.offsetLeft,
	                    top: tempDom.offsetTop,
	                    right: tempDom.offsetLeft + tempDom.offsetWidth,
	                    bottom: tempDom.offsetTop + tempDom.offsetHeight
	                }
	            };

	            var minLeft = imgList.self.left;
	            var minTop = imgList.self.top;
	            var maxRight = imgList.self.right;
	            var maxBottom = imgList.self.bottom;

	            for (var c in this._connected) {
	                tempDom = this._connected[c].getDom();
	                imgList[c] = {
	                    img: this._connected[c].getDataURL(imgType),
	                    left: tempDom.offsetLeft,
	                    top: tempDom.offsetTop,
	                    right: tempDom.offsetLeft + tempDom.offsetWidth,
	                    bottom: tempDom.offsetTop + tempDom.offsetHeight
	                };

	                minLeft = Math.min(minLeft, imgList[c].left);
	                minTop = Math.min(minTop, imgList[c].top);
	                maxRight = Math.max(maxRight, imgList[c].right);
	                maxBottom = Math.max(maxBottom, imgList[c].bottom);
	            }

	            var zrDom = document.createElement('div');
	            zrDom.style.position = 'absolute';
	            zrDom.style.left = '-4000px';
	            zrDom.style.width = (maxRight - minLeft) + 'px';
	            zrDom.style.height = (maxBottom - minTop) + 'px';
	            document.body.appendChild(zrDom);

	            var zrImg = __webpack_require__(461).init(zrDom);

	            var ImageShape = __webpack_require__(478);
	            for (var c in imgList) {
	                zrImg.addShape(new ImageShape({
	                    style: {
	                        x: imgList[c].left - minLeft,
	                        y: imgList[c].top - minTop,
	                        image: imgList[c].img
	                    }
	                }));
	            }

	            zrImg.render();
	            var bgColor = this._option.backgroundColor;
	            if (bgColor && bgColor.replace(/ /g, '') === 'rgba(0,0,0,0)') {
	                bgColor = '#fff';
	            }

	            var image = zrImg.toDataURL('image/png', bgColor);

	            setTimeout(function () {
	                zrImg.dispose();
	                zrDom.parentNode.removeChild(zrDom);
	                zrDom = null;
	            }, 100);

	            return image;
	        },

	        /**
	         * 获取多图联动的img
	         * @param {string} imgType 图片类型，支持png|jpeg，默认为png
	         * @return img dom
	         */
	        getConnectedImage: function (imgType) {
	            var title = this._optionRestore.title;
	            var imgDom = document.createElement('img');
	            imgDom.src = this.getConnectedDataURL(imgType);
	            imgDom.title = (title && title.text) || 'ECharts';
	            return imgDom;
	        },

	        /**
	         * 外部接口绑定事件
	         * @param {Object} eventName 事件名称
	         * @param {Object} eventListener 事件响应函数
	         */
	        on: function (eventName, eventListener) {
	            this._messageCenterOutSide.bind(eventName, eventListener, this);
	            return this;
	        },

	        /**
	         * 外部接口解除事件绑定
	         * @param {Object} eventName 事件名称
	         * @param {Object} eventListener 事件响应函数
	         */
	        un: function (eventName, eventListener) {
	            this._messageCenterOutSide.unbind(eventName, eventListener);
	            return this;
	        },

	        /**
	         * 多图联动
	         * @param connectTarget{ECharts | Array <ECharts>} connectTarget 联动目标
	         */
	        connect: function (connectTarget) {
	            if (!connectTarget) {
	                return this;
	            }

	            if (!this._connected) {
	                this._connected = {};
	            }

	            if (connectTarget instanceof Array) {
	                for (var i = 0, l = connectTarget.length; i < l; i++) {
	                    this._connected[connectTarget[i].id] = connectTarget[i];
	                }
	            }
	            else {
	                this._connected[connectTarget.id] = connectTarget;
	            }

	            return this;
	        },

	        /**
	         * 解除多图联动
	         * @param connectTarget{ECharts | Array <ECharts>} connectTarget 解除联动目标
	         */
	        disConnect: function (connectTarget) {
	            if (!connectTarget || !this._connected) {
	                return this;
	            }

	            if (connectTarget instanceof Array) {
	                for (var i = 0, l = connectTarget.length; i < l; i++) {
	                    delete this._connected[connectTarget[i].id];
	                }
	            }
	            else {
	                delete this._connected[connectTarget.id];
	            }

	            for (var k in this._connected) {
	                return k, this; // 非空
	            }

	            // 空，转为标志位
	            this._connected = false;
	            return this;
	        },

	        /**
	         * 联动事件响应
	         */
	        connectedEventHandler: function (param) {
	            if (param.__echartsId != this.id) {
	                // 来自其他联动图表的事件
	                this._onevent(param);
	            }
	        },

	        /**
	         * 是否存在多图联动
	         */
	        isConnected: function () {
	            return !!this._connected;
	        },

	        /**
	         * 显示loading过渡
	         * @param {Object} loadingOption
	         */
	        showLoading: function (loadingOption) {
	            var effectList = {
	                bar: __webpack_require__(526),
	                bubble: __webpack_require__(527),
	                dynamicLine: __webpack_require__(528),
	                ring: __webpack_require__(529),
	                spin: __webpack_require__(531),
	                whirling: __webpack_require__(532)
	            };
	            this._toolbox.hideDataView();

	            loadingOption = loadingOption || {};

	            var textStyle = loadingOption.textStyle || {};
	            loadingOption.textStyle = textStyle;

	            var finalTextStyle = zrUtil.merge(
	                zrUtil.merge(
	                    zrUtil.clone(textStyle),
	                    this._themeConfig.textStyle
	                ),
	                ecConfig.textStyle
	            );

	            textStyle.textFont = finalTextStyle.fontStyle + ' '
	                                 + finalTextStyle.fontWeight + ' '
	                                 + finalTextStyle.fontSize + 'px '
	                                 + finalTextStyle.fontFamily;

	            textStyle.text = loadingOption.text
	                             || (this._option && this._option.loadingText)
	                             || this._themeConfig.loadingText
	                             || ecConfig.loadingText;

	            if (loadingOption.x != null) {
	                textStyle.x = loadingOption.x;
	            }
	            if (loadingOption.y != null) {
	                textStyle.y = loadingOption.y;
	            }

	            loadingOption.effectOption = loadingOption.effectOption || {};
	            loadingOption.effectOption.textStyle = textStyle;

	            var Effect = loadingOption.effect;
	            if (typeof Effect === 'string' || Effect == null) {
	                Effect =  effectList[
	                              loadingOption.effect
	                              || (this._option && this._option.loadingEffect)
	                              || this._themeConfig.loadingEffect
	                              || ecConfig.loadingEffect
	                          ]
	                          || effectList.spin;
	            }
	            this._zr.showLoading(new Effect(loadingOption.effectOption));
	            return this;
	        },

	        /**
	         * 隐藏loading过渡
	         */
	        hideLoading: function () {
	            this._zr.hideLoading();
	            return this;
	        },

	        /**
	         * 主题设置
	         */
	        setTheme: function (theme) {
	            if (theme) {
	               if (typeof theme === 'string') {
	                    // 默认主题
	                    switch (theme) {
	                        case 'macarons':
	                            theme = __webpack_require__(533);
	                            break;
	                        case 'infographic':
	                            theme = __webpack_require__(534);
	                            break;
	                        default:
	                            theme = {}; // require('./theme/default');
	                    }
	                }
	                else {
	                    theme = theme || {};
	                }

	                // // 复位默认配置
	                // // this._themeConfig会被别的对象引用持有
	                // // 所以不能改成this._themeConfig = {};
	                // for (var key in this._themeConfig) {
	                //     delete this._themeConfig[key];
	                // }
	                // for (var key in ecConfig) {
	                //     this._themeConfig[key] = zrUtil.clone(ecConfig[key]);
	                // }

	                // // 颜色数组随theme，不merge
	                // theme.color && (this._themeConfig.color = []);

	                // // 默认标志图形类型列表，不merge
	                // theme.symbolList && (this._themeConfig.symbolList = []);

	                // // 应用新主题
	                // zrUtil.merge(this._themeConfig, zrUtil.clone(theme), true);
	                this._themeConfig = theme;
	            }

	            if (!_canvasSupported) {   // IE8-
	                var textStyle = this._themeConfig.textStyle;
	                textStyle && textStyle.fontFamily && textStyle.fontFamily2
	                    && (textStyle.fontFamily = textStyle.fontFamily2);

	                textStyle = ecConfig.textStyle;
	                textStyle.fontFamily = textStyle.fontFamily2;
	            }

	            this._timeline && this._timeline.setTheme(true);
	            this._optionRestore && this.restore();
	        },

	        /**
	         * 视图区域大小变化更新，不默认绑定，供使用方按需调用
	         */
	        resize: function () {
	            var self = this;
	            return function(){
	                self._clearEffect();
	                self._zr.resize();
	                if (self._option && self._option.renderAsImage && _canvasSupported) {
	                    // 渲染为图片重走render模式
	                    self._render(self._option);
	                    return self;
	                }
	                // 停止动画
	                self._zr.clearAnimation();
	                self._island.resize();
	                self._toolbox.resize();
	                self._timeline && self._timeline.resize();
	                // 先来后到，不能仅刷新自己，也不能在上一个循环中刷新，如坐标系数据改变会影响其他图表的大小
	                // 所以安顺序刷新各种图表，图表内部refresh优化无需更新则不更新~
	                for (var i = 0, l = self._chartList.length; i < l; i++) {
	                    self._chartList[i].resize && self._chartList[i].resize();
	                }
	                self.component.grid && self.component.grid.refixAxisShape(self.component);
	                self._zr.refresh();
	                self._messageCenter.dispatch(ecConfig.EVENT.RESIZE, null, null, self);
	                return self;
	            };
	        },

	        _clearEffect: function() {
	            this._zr.modLayer(ecConfig.EFFECT_ZLEVEL, { motionBlur: false });
	            this._zr.painter.clearLayer(ecConfig.EFFECT_ZLEVEL);
	        },

	        /**
	         * 清除已渲染内容 ，clear后echarts实例可用
	         */
	        clear: function () {
	            this._disposeChartList();
	            this._zr.clear();
	            this._option = {};
	            this._optionRestore = {};
	            this.dom.style.backgroundColor = null;
	            return this;
	        },

	        /**
	         * 释放，dispose后echarts实例不可用
	         */
	        dispose: function () {
	            var key = this.dom.getAttribute(DOM_ATTRIBUTE_KEY);
	            key && delete _instances[key];

	            this._island.dispose();
	            this._toolbox.dispose();
	            this._timeline && this._timeline.dispose();
	            this._messageCenter.unbind();
	            this.clear();
	            this._zr.dispose();
	            this._zr = null;
	        }
	    };

	    return self;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 454 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * echart图表库
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (/*require*/) {     //chart
	    var self = {};

	    var _chartLibrary = {};         //echart图表库

	    /**
	     * 定义图形实现
	     * @param {Object} name
	     * @param {Object} clazz 图形实现
	     */
	    self.define = function (name, clazz) {
	        _chartLibrary[name] = clazz;
	        return self;
	    };

	    /**
	     * 获取图形实现
	     * @param {Object} name
	     */
	    self.get = function (name) {
	        return _chartLibrary[name];
	    };

	    return self;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 455 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * echarts默认配置项
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	    // 请原谅我这样写，这显然可以直接返回个对象，但那样的话outline就显示不出来了~~
	    var config = {
	        // 图表类型
	        CHART_TYPE_LINE: 'line',
	        CHART_TYPE_BAR: 'bar',
	        CHART_TYPE_SCATTER: 'scatter',
	        CHART_TYPE_PIE: 'pie',
	        CHART_TYPE_RADAR: 'radar',
	        CHART_TYPE_VENN: 'venn',
	        CHART_TYPE_TREEMAP: 'treemap',
	        CHART_TYPE_TREE: 'tree',
	        CHART_TYPE_MAP: 'map',
	        CHART_TYPE_K: 'k',
	        CHART_TYPE_ISLAND: 'island',
	        CHART_TYPE_FORCE: 'force',
	        CHART_TYPE_CHORD: 'chord',
	        CHART_TYPE_GAUGE: 'gauge',
	        CHART_TYPE_FUNNEL: 'funnel',
	        CHART_TYPE_EVENTRIVER: 'eventRiver',
	        CHART_TYPE_WORDCLOUD: 'wordCloud',
	        CHART_TYPE_HEATMAP: 'heatmap',

	        // 组件类型
	        COMPONENT_TYPE_TITLE: 'title',
	        COMPONENT_TYPE_LEGEND: 'legend',
	        COMPONENT_TYPE_DATARANGE: 'dataRange',
	        COMPONENT_TYPE_DATAVIEW: 'dataView',
	        COMPONENT_TYPE_DATAZOOM: 'dataZoom',
	        COMPONENT_TYPE_TOOLBOX: 'toolbox',
	        COMPONENT_TYPE_TOOLTIP: 'tooltip',
	        COMPONENT_TYPE_GRID: 'grid',
	        COMPONENT_TYPE_AXIS: 'axis',
	        COMPONENT_TYPE_POLAR: 'polar',
	        COMPONENT_TYPE_X_AXIS: 'xAxis',
	        COMPONENT_TYPE_Y_AXIS: 'yAxis',
	        COMPONENT_TYPE_AXIS_CATEGORY: 'categoryAxis',
	        COMPONENT_TYPE_AXIS_VALUE: 'valueAxis',
	        COMPONENT_TYPE_TIMELINE: 'timeline',
	        COMPONENT_TYPE_ROAMCONTROLLER: 'roamController',

	        // 全图默认背景
	        backgroundColor: 'rgba(0,0,0,0)',
	        
	        // 默认色板
	        color: ['#ff7f50','#87cefa','#da70d6','#32cd32','#6495ed',
	                '#ff69b4','#ba55d3','#cd5c5c','#ffa500','#40e0d0',
	                '#1e90ff','#ff6347','#7b68ee','#00fa9a','#ffd700',
	                '#6699FF','#ff6666','#3cb371','#b8860b','#30e0e0'],

	        markPoint: {
	            clickable: true,
	            symbol: 'pin',         // 标注类型
	            symbolSize: 10,        // 标注大小，半宽（半径）参数，当图形为方向或菱形则总宽度为symbolSize * 2
	            // symbolRotate: null, // 标注旋转控制
	            large: false,
	            effect: {
	                show: false,
	                loop: true,
	                period: 15,             // 运动周期，无单位，值越大越慢
	                type: 'scale',          // 可用为 scale | bounce
	                scaleSize: 2,           // 放大倍数，以markPoint点size为基准
	                bounceDistance: 10     // 跳动距离，单位px
	                // color: 'gold',
	                // shadowColor: 'rgba(255,215,0,0.8)',
	                // shadowBlur: 0          // 炫光模糊
	            },
	            itemStyle: {
	                normal: {
	                    // color: 各异，
	                    // borderColor: 各异,        // 标注边线颜色，优先于color 
	                    borderWidth: 2,             // 标注边线线宽，单位px，默认为1
	                    label: {
	                        show: true,
	                        // 标签文本格式器，同Tooltip.formatter，不支持回调
	                        // formatter: null,
	                        position: 'inside'      // 可选为'left'|'right'|'top'|'bottom'
	                        // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE
	                    }
	                },
	                emphasis: {
	                    // color: 各异
	                    label: {
	                        show: true
	                        // 标签文本格式器，同Tooltip.formatter，不支持回调
	                        // formatter: null,
	                        // position: 'inside'  // 'left'|'right'|'top'|'bottom'
	                        // textStyle: null     // 默认使用全局文本样式，详见TEXTSTYLE
	                    }
	                }
	            }
	        },
	        
	        markLine: {
	            clickable: true,
	            // 标线起始和结束的symbol介绍类型，如果都一样，可以直接传string
	            symbol: ['circle', 'arrow'],
	            // 标线起始和结束的symbol大小，半宽（半径）参数，当图形为方向或菱形则总宽度为symbolSize * 2
	            symbolSize: [2, 4],
	            // 标线起始和结束的symbol旋转控制
	            //symbolRotate: null,
	            //smooth: false,
	            smoothness: 0.2,    // 平滑度
	            precision: 2,
	            effect: {
	                show: false,
	                loop: true,
	                period: 15,                     // 运动周期，无单位，值越大越慢
	                scaleSize: 2                    // 放大倍数，以markLine线lineWidth为基准
	                // color: 'gold',
	                // shadowColor: 'rgba(255,215,0,0.8)',
	                // shadowBlur: lineWidth * 2    // 炫光模糊，默认等于scaleSize计算所得
	            },
	            // 边捆绑
	            bundling: {
	                enable: false,
	                // [0, 90]
	                maxTurningAngle: 45
	            },
	            itemStyle: {
	                normal: {
	                    // color: 各异,               // 标线主色，线色，symbol主色
	                    // borderColor: 随color,     // 标线symbol边框颜色，优先于color 
	                    borderWidth: 1.5,           // 标线symbol边框线宽，单位px，默认为2
	                    label: {
	                        show: true,
	                        // 标签文本格式器，同Tooltip.formatter，不支持回调
	                        // formatter: null,
	                        // 可选为 'start'|'end'|'left'|'right'|'top'|'bottom'
	                        position: 'end'
	                        // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE
	                    },
	                    lineStyle: {
	                        // color: 随borderColor, // 主色，线色，优先级高于borderColor和color
	                        // width: 随borderWidth, // 优先于borderWidth
	                        type: 'dashed'
	                        // shadowColor: 'rgba(0,0,0,0)', //默认透明
	                        // shadowBlur: 0,
	                        // shadowOffsetX: 0,
	                        // shadowOffsetY: 0
	                    }
	                },
	                emphasis: {
	                    // color: 各异
	                    label: {
	                        show: false
	                        // 标签文本格式器，同Tooltip.formatter，不支持回调
	                        // formatter: null,
	                        // position: 'inside' // 'left'|'right'|'top'|'bottom'
	                        // textStyle: null    // 默认使用全局文本样式，详见TEXTSTYLE
	                    },
	                    lineStyle: {}
	                }
	            }
	        },

	        // 主题，主题
	        textStyle: {
	            decoration: 'none',
	            fontFamily: 'Arial, Verdana, sans-serif',
	            fontFamily2: '微软雅黑',    // IE8- 字体模糊并且，不支持不同字体混排，额外指定一份
	            fontSize: 12,
	            fontStyle: 'normal',
	            fontWeight: 'normal'
	        },

	        EVENT: {
	            // -------全局通用
	            REFRESH: 'refresh',
	            RESTORE: 'restore',
	            RESIZE: 'resize',
	            CLICK: 'click',
	            DBLCLICK: 'dblclick',
	            HOVER: 'hover',
	            MOUSEOUT: 'mouseout',
	            //MOUSEWHEEL: 'mousewheel',
	            // -------业务交互逻辑
	            DATA_CHANGED: 'dataChanged',
	            DATA_ZOOM: 'dataZoom',
	            DATA_RANGE: 'dataRange',
	            DATA_RANGE_SELECTED: 'dataRangeSelected',
	            DATA_RANGE_HOVERLINK: 'dataRangeHoverLink',
	            LEGEND_SELECTED: 'legendSelected',
	            LEGEND_HOVERLINK: 'legendHoverLink',
	            MAP_SELECTED: 'mapSelected',
	            PIE_SELECTED: 'pieSelected',
	            MAGIC_TYPE_CHANGED: 'magicTypeChanged',
	            DATA_VIEW_CHANGED: 'dataViewChanged',
	            TIMELINE_CHANGED: 'timelineChanged',
	            MAP_ROAM: 'mapRoam',
	            FORCE_LAYOUT_END: 'forceLayoutEnd',
	            // -------内部通信
	            TOOLTIP_HOVER: 'tooltipHover',
	            TOOLTIP_IN_GRID: 'tooltipInGrid',
	            TOOLTIP_OUT_GRID: 'tooltipOutGrid',
	            ROAMCONTROLLER: 'roamController'
	        },
	        DRAG_ENABLE_TIME: 120,   // 降低图表内元素拖拽敏感度，单位ms，不建议外部干预
	        EFFECT_ZLEVEL : 10,       // 特效动画zlevel
	        effectBlendAlpha: 0.95,
	        // 主题，默认标志图形类型列表
	        symbolList: [
	          'circle', 'rectangle', 'triangle', 'diamond',
	          'emptyCircle', 'emptyRectangle', 'emptyTriangle', 'emptyDiamond'
	        ],
	        loadingEffect: 'spin',
	        loadingText: '数据读取中...',
	        noDataEffect: 'bubble',
	        noDataText: '暂无数据',
	        // noDataLoadingOption: null,
	        // 可计算特性配置，孤岛，提示颜色
	        calculable: false,                      // 默认关闭可计算特性
	        calculableColor: 'rgba(255,165,0,0.6)', // 拖拽提示边框颜色
	        calculableHolderColor: '#ccc',          // 可计算占位提示颜色
	        nameConnector: ' & ',
	        valueConnector: ': ',
	        animation: true,                // 过渡动画是否开启
	        addDataAnimation: true,         // 动态数据接口是否开启动画效果
	        animationThreshold: 2000,       // 动画元素阀值，产生的图形原素超过2000不出动画
	        animationDuration: 2000,        // 过渡动画参数：进入
	        animationDurationUpdate: 500,   // 过渡动画参数：更新
	        animationEasing: 'ExponentialOut'    //BounceOut
	    };

	    return config;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 456 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * @module zrender/tool/util
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *         Yi Shen(https://github.com/pissang)
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function(require) {

	        var ArrayProto = Array.prototype;
	        var nativeForEach = ArrayProto.forEach;
	        var nativeMap = ArrayProto.map;
	        var nativeFilter = ArrayProto.filter;

	        // 用于处理merge时无法遍历Date等对象的问题
	        var BUILTIN_OBJECT = {
	            '[object Function]': 1,
	            '[object RegExp]': 1,
	            '[object Date]': 1,
	            '[object Error]': 1,
	            '[object CanvasGradient]': 1
	        };

	        var objToString = Object.prototype.toString;

	        function isDom(obj) {
	            return obj && obj.nodeType === 1
	                   && typeof(obj.nodeName) == 'string';
	        }

	        /**
	         * 对一个object进行深度拷贝
	         * @memberOf module:zrender/tool/util
	         * @param {*} source 需要进行拷贝的对象
	         * @return {*} 拷贝后的新对象
	         */
	        function clone(source) {
	            if (typeof source == 'object' && source !== null) {
	                var result = source;
	                if (source instanceof Array) {
	                    result = [];
	                    for (var i = 0, len = source.length; i < len; i++) {
	                        result[i] = clone(source[i]);
	                    }
	                }
	                else if (
	                    !BUILTIN_OBJECT[objToString.call(source)]
	                    // 是否为 dom 对象
	                    && !isDom(source)
	                ) {
	                    result = {};
	                    for (var key in source) {
	                        if (source.hasOwnProperty(key)) {
	                            result[key] = clone(source[key]);
	                        }
	                    }
	                }

	                return result;
	            }

	            return source;
	        }

	        function mergeItem(target, source, key, overwrite) {
	            if (source.hasOwnProperty(key)) {
	                var targetProp = target[key];
	                if (typeof targetProp == 'object'
	                    && !BUILTIN_OBJECT[objToString.call(targetProp)]
	                    // 是否为 dom 对象
	                    && !isDom(targetProp)
	                ) {
	                    // 如果需要递归覆盖，就递归调用merge
	                    merge(
	                        target[key],
	                        source[key],
	                        overwrite
	                    );
	                }
	                else if (overwrite || !(key in target)) {
	                    // 否则只处理overwrite为true，或者在目标对象中没有此属性的情况
	                    target[key] = source[key];
	                }
	            }
	        }

	        /**
	         * 合并源对象的属性到目标对象
	         * @memberOf module:zrender/tool/util
	         * @param {*} target 目标对象
	         * @param {*} source 源对象
	         * @param {boolean} overwrite 是否覆盖
	         */
	        function merge(target, source, overwrite) {
	            for (var i in source) {
	                mergeItem(target, source, i, overwrite);
	            }
	            
	            return target;
	        }

	        var _ctx;

	        function getContext() {
	            if (!_ctx) {
	                __webpack_require__(457);
	                /* jshint ignore:start */
	                if (window['G_vmlCanvasManager']) {
	                    var _div = document.createElement('div');
	                    _div.style.position = 'absolute';
	                    _div.style.top = '-1000px';
	                    document.body.appendChild(_div);

	                    _ctx = G_vmlCanvasManager.initElement(_div)
	                               .getContext('2d');
	                }
	                else {
	                    _ctx = document.createElement('canvas').getContext('2d');
	                }
	                /* jshint ignore:end */
	            }
	            return _ctx;
	        }

	        /**
	         * @memberOf module:zrender/tool/util
	         * @param {Array} array
	         * @param {*} value
	         */
	        function indexOf(array, value) {
	            if (array.indexOf) {
	                return array.indexOf(value);
	            }
	            for (var i = 0, len = array.length; i < len; i++) {
	                if (array[i] === value) {
	                    return i;
	                }
	            }
	            return -1;
	        }

	        /**
	         * 构造类继承关系
	         * @memberOf module:zrender/tool/util
	         * @param {Function} clazz 源类
	         * @param {Function} baseClazz 基类
	         */
	        function inherits(clazz, baseClazz) {
	            var clazzPrototype = clazz.prototype;
	            function F() {}
	            F.prototype = baseClazz.prototype;
	            clazz.prototype = new F();

	            for (var prop in clazzPrototype) {
	                clazz.prototype[prop] = clazzPrototype[prop];
	            }
	            clazz.constructor = clazz;
	        }

	        /**
	         * 数组或对象遍历
	         * @memberOf module:zrender/tool/util
	         * @param {Object|Array} obj
	         * @param {Function} cb
	         * @param {*} [context]
	         */
	        function each(obj, cb, context) {
	            if (!(obj && cb)) {
	                return;
	            }
	            if (obj.forEach && obj.forEach === nativeForEach) {
	                obj.forEach(cb, context);
	            }
	            else if (obj.length === +obj.length) {
	                for (var i = 0, len = obj.length; i < len; i++) {
	                    cb.call(context, obj[i], i, obj);
	                }
	            }
	            else {
	                for (var key in obj) {
	                    if (obj.hasOwnProperty(key)) {
	                        cb.call(context, obj[key], key, obj);
	                    }
	                }
	            }
	        }

	        /**
	         * 数组映射
	         * @memberOf module:zrender/tool/util
	         * @param {Array} obj
	         * @param {Function} cb
	         * @param {*} [context]
	         * @return {Array}
	         */
	        function map(obj, cb, context) {
	            if (!(obj && cb)) {
	                return;
	            }
	            if (obj.map && obj.map === nativeMap) {
	                return obj.map(cb, context);
	            }
	            else {
	                var result = [];
	                for (var i = 0, len = obj.length; i < len; i++) {
	                    result.push(cb.call(context, obj[i], i, obj));
	                }
	                return result;
	            }
	        }

	        /**
	         * 数组过滤
	         * @memberOf module:zrender/tool/util
	         * @param {Array} obj
	         * @param {Function} cb
	         * @param {*} [context]
	         * @return {Array}
	         */
	        function filter(obj, cb, context) {
	            if (!(obj && cb)) {
	                return;
	            }
	            if (obj.filter && obj.filter === nativeFilter) {
	                return obj.filter(cb, context);
	            }
	            else {
	                var result = [];
	                for (var i = 0, len = obj.length; i < len; i++) {
	                    if (cb.call(context, obj[i], i, obj)) {
	                        result.push(obj[i]);
	                    }
	                }
	                return result;
	            }
	        }

	        function bind(func, context) {
	            
	            return function () {
	                func.apply(context, arguments);
	            }
	        }

	        return {
	            inherits: inherits,
	            clone: clone,
	            merge: merge,
	            getContext: getContext,
	            indexOf: indexOf,
	            each: each,
	            map: map,
	            filter: filter,
	            bind: bind
	        };
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 457 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;// Copyright 2006 Google Inc.
	//
	// Licensed under the Apache License, Version 2.0 (the "License");
	// you may not use this file except in compliance with the License.
	// You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.


	// Known Issues:
	//
	// * Patterns only support repeat.
	// * Radial gradient are not implemented. The VML version of these look very
	//   different from the canvas one.
	// * Clipping paths are not implemented.
	// * Coordsize. The width and height attribute have higher priority than the
	//   width and height style values which isn't correct.
	// * Painting mode isn't implemented.
	// * Canvas width/height should is using content-box by default. IE in
	//   Quirks mode will draw the canvas using border-box. Either change your
	//   doctype to HTML5
	//   (http://www.whatwg.org/specs/web-apps/current-work/#the-doctype)
	//   or use Box Sizing Behavior from WebFX
	//   (http://webfx.eae.net/dhtml/boxsizing/boxsizing.html)
	// * Non uniform scaling does not correctly scale strokes.
	// * Optimize. There is always room for speed improvements.

	// AMD by kener.linfeng@gmail.com
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function(require) {

	// Only add this code if we do not already have a canvas implementation
	if (!document.createElement('canvas').getContext) {

	(function() {

	  // alias some functions to make (compiled) code shorter
	  var m = Math;
	  var mr = m.round;
	  var ms = m.sin;
	  var mc = m.cos;
	  var abs = m.abs;
	  var sqrt = m.sqrt;

	  // this is used for sub pixel precision
	  var Z = 10;
	  var Z2 = Z / 2;

	  var IE_VERSION = +navigator.userAgent.match(/MSIE ([\d.]+)?/)[1];

	  /**
	   * This funtion is assigned to the <canvas> elements as element.getContext().
	   * @this {HTMLElement}
	   * @return {CanvasRenderingContext2D_}
	   */
	  function getContext() {
	    return this.context_ ||
	        (this.context_ = new CanvasRenderingContext2D_(this));
	  }

	  var slice = Array.prototype.slice;

	  /**
	   * Binds a function to an object. The returned function will always use the
	   * passed in {@code obj} as {@code this}.
	   *
	   * Example:
	   *
	   *   g = bind(f, obj, a, b)
	   *   g(c, d) // will do f.call(obj, a, b, c, d)
	   *
	   * @param {Function} f The function to bind the object to
	   * @param {Object} obj The object that should act as this when the function
	   *     is called
	   * @param {*} var_args Rest arguments that will be used as the initial
	   *     arguments when the function is called
	   * @return {Function} A new function that has bound this
	   */
	  function bind(f, obj, var_args) {
	    var a = slice.call(arguments, 2);
	    return function() {
	      return f.apply(obj, a.concat(slice.call(arguments)));
	    };
	  }

	  function encodeHtmlAttribute(s) {
	    return String(s).replace(/&/g, '&amp;').replace(/"/g, '&quot;');
	  }

	  function addNamespace(doc, prefix, urn) {
	    if (!doc.namespaces[prefix]) {
	      doc.namespaces.add(prefix, urn, '#default#VML');
	    }
	  }

	  function addNamespacesAndStylesheet(doc) {
	    addNamespace(doc, 'g_vml_', 'urn:schemas-microsoft-com:vml');
	    addNamespace(doc, 'g_o_', 'urn:schemas-microsoft-com:office:office');

	    // Setup default CSS.  Only add one style sheet per document
	    if (!doc.styleSheets['ex_canvas_']) {
	      var ss = doc.createStyleSheet();
	      ss.owningElement.id = 'ex_canvas_';
	      ss.cssText = 'canvas{display:inline-block;overflow:hidden;' +
	          // default size is 300x150 in Gecko and Opera
	          'text-align:left;width:300px;height:150px}';
	    }
	  }

	  // Add namespaces and stylesheet at startup.
	  addNamespacesAndStylesheet(document);

	  var G_vmlCanvasManager_ = {
	    init: function(opt_doc) {
	      var doc = opt_doc || document;
	      // Create a dummy element so that IE will allow canvas elements to be
	      // recognized.
	      doc.createElement('canvas');
	      doc.attachEvent('onreadystatechange', bind(this.init_, this, doc));
	    },

	    init_: function(doc) {
	      // find all canvas elements
	      var els = doc.getElementsByTagName('canvas');
	      for (var i = 0; i < els.length; i++) {
	        this.initElement(els[i]);
	      }
	    },

	    /**
	     * Public initializes a canvas element so that it can be used as canvas
	     * element from now on. This is called automatically before the page is
	     * loaded but if you are creating elements using createElement you need to
	     * make sure this is called on the element.
	     * @param {HTMLElement} el The canvas element to initialize.
	     * @return {HTMLElement} the element that was created.
	     */
	    initElement: function(el) {
	      if (!el.getContext) {
	        el.getContext = getContext;

	        // Add namespaces and stylesheet to document of the element.
	        addNamespacesAndStylesheet(el.ownerDocument);

	        // Remove fallback content. There is no way to hide text nodes so we
	        // just remove all childNodes. We could hide all elements and remove
	        // text nodes but who really cares about the fallback content.
	        el.innerHTML = '';

	        // do not use inline function because that will leak memory
	        el.attachEvent('onpropertychange', onPropertyChange);
	        el.attachEvent('onresize', onResize);

	        var attrs = el.attributes;
	        if (attrs.width && attrs.width.specified) {
	          // TODO: use runtimeStyle and coordsize
	          // el.getContext().setWidth_(attrs.width.nodeValue);
	          el.style.width = attrs.width.nodeValue + 'px';
	        } else {
	          el.width = el.clientWidth;
	        }
	        if (attrs.height && attrs.height.specified) {
	          // TODO: use runtimeStyle and coordsize
	          // el.getContext().setHeight_(attrs.height.nodeValue);
	          el.style.height = attrs.height.nodeValue + 'px';
	        } else {
	          el.height = el.clientHeight;
	        }
	        //el.getContext().setCoordsize_()
	      }
	      return el;
	    }
	  };

	  function onPropertyChange(e) {
	    var el = e.srcElement;

	    switch (e.propertyName) {
	      case 'width':
	        el.getContext().clearRect();
	        el.style.width = el.attributes.width.nodeValue + 'px';
	        // In IE8 this does not trigger onresize.
	        el.firstChild.style.width =  el.clientWidth + 'px';
	        break;
	      case 'height':
	        el.getContext().clearRect();
	        el.style.height = el.attributes.height.nodeValue + 'px';
	        el.firstChild.style.height = el.clientHeight + 'px';
	        break;
	    }
	  }

	  function onResize(e) {
	    var el = e.srcElement;
	    if (el.firstChild) {
	      el.firstChild.style.width =  el.clientWidth + 'px';
	      el.firstChild.style.height = el.clientHeight + 'px';
	    }
	  }

	  G_vmlCanvasManager_.init();

	  // precompute "00" to "FF"
	  var decToHex = [];
	  for (var i = 0; i < 16; i++) {
	    for (var j = 0; j < 16; j++) {
	      decToHex[i * 16 + j] = i.toString(16) + j.toString(16);
	    }
	  }

	  function createMatrixIdentity() {
	    return [
	      [1, 0, 0],
	      [0, 1, 0],
	      [0, 0, 1]
	    ];
	  }

	  function matrixMultiply(m1, m2) {
	    var result = createMatrixIdentity();

	    for (var x = 0; x < 3; x++) {
	      for (var y = 0; y < 3; y++) {
	        var sum = 0;

	        for (var z = 0; z < 3; z++) {
	          sum += m1[x][z] * m2[z][y];
	        }

	        result[x][y] = sum;
	      }
	    }
	    return result;
	  }

	  function copyState(o1, o2) {
	    o2.fillStyle     = o1.fillStyle;
	    o2.lineCap       = o1.lineCap;
	    o2.lineJoin      = o1.lineJoin;
	    o2.lineWidth     = o1.lineWidth;
	    o2.miterLimit    = o1.miterLimit;
	    o2.shadowBlur    = o1.shadowBlur;
	    o2.shadowColor   = o1.shadowColor;
	    o2.shadowOffsetX = o1.shadowOffsetX;
	    o2.shadowOffsetY = o1.shadowOffsetY;
	    o2.strokeStyle   = o1.strokeStyle;
	    o2.globalAlpha   = o1.globalAlpha;
	    o2.font          = o1.font;
	    o2.textAlign     = o1.textAlign;
	    o2.textBaseline  = o1.textBaseline;
	    o2.scaleX_    = o1.scaleX_;
	    o2.scaleY_    = o1.scaleY_;
	    o2.lineScale_    = o1.lineScale_;
	  }

	  var colorData = {
	    aliceblue: '#F0F8FF',
	    antiquewhite: '#FAEBD7',
	    aquamarine: '#7FFFD4',
	    azure: '#F0FFFF',
	    beige: '#F5F5DC',
	    bisque: '#FFE4C4',
	    black: '#000000',
	    blanchedalmond: '#FFEBCD',
	    blueviolet: '#8A2BE2',
	    brown: '#A52A2A',
	    burlywood: '#DEB887',
	    cadetblue: '#5F9EA0',
	    chartreuse: '#7FFF00',
	    chocolate: '#D2691E',
	    coral: '#FF7F50',
	    cornflowerblue: '#6495ED',
	    cornsilk: '#FFF8DC',
	    crimson: '#DC143C',
	    cyan: '#00FFFF',
	    darkblue: '#00008B',
	    darkcyan: '#008B8B',
	    darkgoldenrod: '#B8860B',
	    darkgray: '#A9A9A9',
	    darkgreen: '#006400',
	    darkgrey: '#A9A9A9',
	    darkkhaki: '#BDB76B',
	    darkmagenta: '#8B008B',
	    darkolivegreen: '#556B2F',
	    darkorange: '#FF8C00',
	    darkorchid: '#9932CC',
	    darkred: '#8B0000',
	    darksalmon: '#E9967A',
	    darkseagreen: '#8FBC8F',
	    darkslateblue: '#483D8B',
	    darkslategray: '#2F4F4F',
	    darkslategrey: '#2F4F4F',
	    darkturquoise: '#00CED1',
	    darkviolet: '#9400D3',
	    deeppink: '#FF1493',
	    deepskyblue: '#00BFFF',
	    dimgray: '#696969',
	    dimgrey: '#696969',
	    dodgerblue: '#1E90FF',
	    firebrick: '#B22222',
	    floralwhite: '#FFFAF0',
	    forestgreen: '#228B22',
	    gainsboro: '#DCDCDC',
	    ghostwhite: '#F8F8FF',
	    gold: '#FFD700',
	    goldenrod: '#DAA520',
	    grey: '#808080',
	    greenyellow: '#ADFF2F',
	    honeydew: '#F0FFF0',
	    hotpink: '#FF69B4',
	    indianred: '#CD5C5C',
	    indigo: '#4B0082',
	    ivory: '#FFFFF0',
	    khaki: '#F0E68C',
	    lavender: '#E6E6FA',
	    lavenderblush: '#FFF0F5',
	    lawngreen: '#7CFC00',
	    lemonchiffon: '#FFFACD',
	    lightblue: '#ADD8E6',
	    lightcoral: '#F08080',
	    lightcyan: '#E0FFFF',
	    lightgoldenrodyellow: '#FAFAD2',
	    lightgreen: '#90EE90',
	    lightgrey: '#D3D3D3',
	    lightpink: '#FFB6C1',
	    lightsalmon: '#FFA07A',
	    lightseagreen: '#20B2AA',
	    lightskyblue: '#87CEFA',
	    lightslategray: '#778899',
	    lightslategrey: '#778899',
	    lightsteelblue: '#B0C4DE',
	    lightyellow: '#FFFFE0',
	    limegreen: '#32CD32',
	    linen: '#FAF0E6',
	    magenta: '#FF00FF',
	    mediumaquamarine: '#66CDAA',
	    mediumblue: '#0000CD',
	    mediumorchid: '#BA55D3',
	    mediumpurple: '#9370DB',
	    mediumseagreen: '#3CB371',
	    mediumslateblue: '#7B68EE',
	    mediumspringgreen: '#00FA9A',
	    mediumturquoise: '#48D1CC',
	    mediumvioletred: '#C71585',
	    midnightblue: '#191970',
	    mintcream: '#F5FFFA',
	    mistyrose: '#FFE4E1',
	    moccasin: '#FFE4B5',
	    navajowhite: '#FFDEAD',
	    oldlace: '#FDF5E6',
	    olivedrab: '#6B8E23',
	    orange: '#FFA500',
	    orangered: '#FF4500',
	    orchid: '#DA70D6',
	    palegoldenrod: '#EEE8AA',
	    palegreen: '#98FB98',
	    paleturquoise: '#AFEEEE',
	    palevioletred: '#DB7093',
	    papayawhip: '#FFEFD5',
	    peachpuff: '#FFDAB9',
	    peru: '#CD853F',
	    pink: '#FFC0CB',
	    plum: '#DDA0DD',
	    powderblue: '#B0E0E6',
	    rosybrown: '#BC8F8F',
	    royalblue: '#4169E1',
	    saddlebrown: '#8B4513',
	    salmon: '#FA8072',
	    sandybrown: '#F4A460',
	    seagreen: '#2E8B57',
	    seashell: '#FFF5EE',
	    sienna: '#A0522D',
	    skyblue: '#87CEEB',
	    slateblue: '#6A5ACD',
	    slategray: '#708090',
	    slategrey: '#708090',
	    snow: '#FFFAFA',
	    springgreen: '#00FF7F',
	    steelblue: '#4682B4',
	    tan: '#D2B48C',
	    thistle: '#D8BFD8',
	    tomato: '#FF6347',
	    turquoise: '#40E0D0',
	    violet: '#EE82EE',
	    wheat: '#F5DEB3',
	    whitesmoke: '#F5F5F5',
	    yellowgreen: '#9ACD32'
	  };


	  function getRgbHslContent(styleString) {
	    var start = styleString.indexOf('(', 3);
	    var end = styleString.indexOf(')', start + 1);
	    var parts = styleString.substring(start + 1, end).split(',');
	    // add alpha if needed
	    if (parts.length != 4 || styleString.charAt(3) != 'a') {
	      parts[3] = 1;
	    }
	    return parts;
	  }

	  function percent(s) {
	    return parseFloat(s) / 100;
	  }

	  function clamp(v, min, max) {
	    return Math.min(max, Math.max(min, v));
	  }

	  function hslToRgb(parts){
	    var r, g, b, h, s, l;
	    h = parseFloat(parts[0]) / 360 % 360;
	    if (h < 0)
	      h++;
	    s = clamp(percent(parts[1]), 0, 1);
	    l = clamp(percent(parts[2]), 0, 1);
	    if (s == 0) {
	      r = g = b = l; // achromatic
	    } else {
	      var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
	      var p = 2 * l - q;
	      r = hueToRgb(p, q, h + 1 / 3);
	      g = hueToRgb(p, q, h);
	      b = hueToRgb(p, q, h - 1 / 3);
	    }

	    return '#' + decToHex[Math.floor(r * 255)] +
	        decToHex[Math.floor(g * 255)] +
	        decToHex[Math.floor(b * 255)];
	  }

	  function hueToRgb(m1, m2, h) {
	    if (h < 0)
	      h++;
	    if (h > 1)
	      h--;

	    if (6 * h < 1)
	      return m1 + (m2 - m1) * 6 * h;
	    else if (2 * h < 1)
	      return m2;
	    else if (3 * h < 2)
	      return m1 + (m2 - m1) * (2 / 3 - h) * 6;
	    else
	      return m1;
	  }

	  var processStyleCache = {};

	  function processStyle(styleString) {
	    if (styleString in processStyleCache) {
	      return processStyleCache[styleString];
	    }

	    var str, alpha = 1;

	    styleString = String(styleString);
	    if (styleString.charAt(0) == '#') {
	      str = styleString;
	    } else if (/^rgb/.test(styleString)) {
	      var parts = getRgbHslContent(styleString);
	      var str = '#', n;
	      for (var i = 0; i < 3; i++) {
	        if (parts[i].indexOf('%') != -1) {
	          n = Math.floor(percent(parts[i]) * 255);
	        } else {
	          n = +parts[i];
	        }
	        str += decToHex[clamp(n, 0, 255)];
	      }
	      alpha = +parts[3];
	    } else if (/^hsl/.test(styleString)) {
	      var parts = getRgbHslContent(styleString);
	      str = hslToRgb(parts);
	      alpha = parts[3];
	    } else {
	      str = colorData[styleString] || styleString;
	    }
	    return processStyleCache[styleString] = {color: str, alpha: alpha};
	  }

	  var DEFAULT_STYLE = {
	    style: 'normal',
	    variant: 'normal',
	    weight: 'normal',
	    size: 12,           //10
	    family: '微软雅黑'     //'sans-serif'
	  };

	  // Internal text style cache
	  var fontStyleCache = {};

	  function processFontStyle(styleString) {
	    if (fontStyleCache[styleString]) {
	      return fontStyleCache[styleString];
	    }

	    var el = document.createElement('div');
	    var style = el.style;
	    var fontFamily;
	    try {
	      style.font = styleString;
	      fontFamily = style.fontFamily.split(',')[0];
	    } catch (ex) {
	      // Ignore failures to set to invalid font.
	    }

	    return fontStyleCache[styleString] = {
	      style: style.fontStyle || DEFAULT_STYLE.style,
	      variant: style.fontVariant || DEFAULT_STYLE.variant,
	      weight: style.fontWeight || DEFAULT_STYLE.weight,
	      size: style.fontSize || DEFAULT_STYLE.size,
	      family: fontFamily || DEFAULT_STYLE.family
	    };
	  }

	  function getComputedStyle(style, element) {
	    var computedStyle = {};

	    for (var p in style) {
	      computedStyle[p] = style[p];
	    }

	    // Compute the size
	    var canvasFontSize = parseFloat(element.currentStyle.fontSize),
	        fontSize = parseFloat(style.size);

	    if (typeof style.size == 'number') {
	      computedStyle.size = style.size;
	    } else if (style.size.indexOf('px') != -1) {
	      computedStyle.size = fontSize;
	    } else if (style.size.indexOf('em') != -1) {
	      computedStyle.size = canvasFontSize * fontSize;
	    } else if(style.size.indexOf('%') != -1) {
	      computedStyle.size = (canvasFontSize / 100) * fontSize;
	    } else if (style.size.indexOf('pt') != -1) {
	      computedStyle.size = fontSize / .75;
	    } else {
	      computedStyle.size = canvasFontSize;
	    }

	    // Different scaling between normal text and VML text. This was found using
	    // trial and error to get the same size as non VML text.
	    //computedStyle.size *= 0.981;

	    return computedStyle;
	  }

	  function buildStyle(style) {
	    return style.style + ' ' + style.variant + ' ' + style.weight + ' ' +
	        style.size + "px '" + style.family + "'";
	  }

	  var lineCapMap = {
	    'butt': 'flat',
	    'round': 'round'
	  };

	  function processLineCap(lineCap) {
	    return lineCapMap[lineCap] || 'square';
	  }

	  /**
	   * This class implements CanvasRenderingContext2D interface as described by
	   * the WHATWG.
	   * @param {HTMLElement} canvasElement The element that the 2D context should
	   * be associated with
	   */
	  function CanvasRenderingContext2D_(canvasElement) {
	    this.m_ = createMatrixIdentity();

	    this.mStack_ = [];
	    this.aStack_ = [];
	    this.currentPath_ = [];

	    // Canvas context properties
	    this.strokeStyle = '#000';
	    this.fillStyle = '#000';

	    this.lineWidth = 1;
	    this.lineJoin = 'miter';
	    this.lineCap = 'butt';
	    this.miterLimit = Z * 1;
	    this.globalAlpha = 1;
	    // this.font = '10px sans-serif';
	    this.font = '12px 微软雅黑';        // 决定还是改这吧，影响代价最小
	    this.textAlign = 'left';
	    this.textBaseline = 'alphabetic';
	    this.canvas = canvasElement;

	    var cssText = 'width:' + canvasElement.clientWidth + 'px;height:' +
	        canvasElement.clientHeight + 'px;overflow:hidden;position:absolute';
	    var el = canvasElement.ownerDocument.createElement('div');
	    el.style.cssText = cssText;
	    canvasElement.appendChild(el);

	    var overlayEl = el.cloneNode(false);
	    // Use a non transparent background.
	    overlayEl.style.backgroundColor = '#fff'; //red, I don't know why, it work!
	    overlayEl.style.filter = 'alpha(opacity=0)';
	    canvasElement.appendChild(overlayEl);

	    this.element_ = el;
	    this.scaleX_ = 1;
	    this.scaleY_ = 1;
	    this.lineScale_ = 1;
	  }

	  var contextPrototype = CanvasRenderingContext2D_.prototype;
	  contextPrototype.clearRect = function() {
	    if (this.textMeasureEl_) {
	      this.textMeasureEl_.removeNode(true);
	      this.textMeasureEl_ = null;
	    }
	    this.element_.innerHTML = '';
	  };

	  contextPrototype.beginPath = function() {
	    // TODO: Branch current matrix so that save/restore has no effect
	    //       as per safari docs.
	    this.currentPath_ = [];
	  };

	  contextPrototype.moveTo = function(aX, aY) {
	    var p = getCoords(this, aX, aY);
	    this.currentPath_.push({type: 'moveTo', x: p.x, y: p.y});
	    this.currentX_ = p.x;
	    this.currentY_ = p.y;
	  };

	  contextPrototype.lineTo = function(aX, aY) {
	    var p = getCoords(this, aX, aY);
	    this.currentPath_.push({type: 'lineTo', x: p.x, y: p.y});

	    this.currentX_ = p.x;
	    this.currentY_ = p.y;
	  };

	  contextPrototype.bezierCurveTo = function(aCP1x, aCP1y,
	                                            aCP2x, aCP2y,
	                                            aX, aY) {
	    var p = getCoords(this, aX, aY);
	    var cp1 = getCoords(this, aCP1x, aCP1y);
	    var cp2 = getCoords(this, aCP2x, aCP2y);
	    bezierCurveTo(this, cp1, cp2, p);
	  };

	  // Helper function that takes the already fixed cordinates.
	  function bezierCurveTo(self, cp1, cp2, p) {
	    self.currentPath_.push({
	      type: 'bezierCurveTo',
	      cp1x: cp1.x,
	      cp1y: cp1.y,
	      cp2x: cp2.x,
	      cp2y: cp2.y,
	      x: p.x,
	      y: p.y
	    });
	    self.currentX_ = p.x;
	    self.currentY_ = p.y;
	  }

	  contextPrototype.quadraticCurveTo = function(aCPx, aCPy, aX, aY) {
	    // the following is lifted almost directly from
	    // http://developer.mozilla.org/en/docs/Canvas_tutorial:Drawing_shapes

	    var cp = getCoords(this, aCPx, aCPy);
	    var p = getCoords(this, aX, aY);

	    var cp1 = {
	      x: this.currentX_ + 2.0 / 3.0 * (cp.x - this.currentX_),
	      y: this.currentY_ + 2.0 / 3.0 * (cp.y - this.currentY_)
	    };
	    var cp2 = {
	      x: cp1.x + (p.x - this.currentX_) / 3.0,
	      y: cp1.y + (p.y - this.currentY_) / 3.0
	    };

	    bezierCurveTo(this, cp1, cp2, p);
	  };

	  contextPrototype.arc = function(aX, aY, aRadius,
	                                  aStartAngle, aEndAngle, aClockwise) {
	    aRadius *= Z;
	    var arcType = aClockwise ? 'at' : 'wa';

	    var xStart = aX + mc(aStartAngle) * aRadius - Z2;
	    var yStart = aY + ms(aStartAngle) * aRadius - Z2;

	    var xEnd = aX + mc(aEndAngle) * aRadius - Z2;
	    var yEnd = aY + ms(aEndAngle) * aRadius - Z2;

	    // IE won't render arches drawn counter clockwise if xStart == xEnd.
	    if (xStart == xEnd && !aClockwise) {
	      xStart += 0.125; // Offset xStart by 1/80 of a pixel. Use something
	                       // that can be represented in binary
	    }

	    var p = getCoords(this, aX, aY);
	    var pStart = getCoords(this, xStart, yStart);
	    var pEnd = getCoords(this, xEnd, yEnd);

	    this.currentPath_.push({type: arcType,
	                           x: p.x,
	                           y: p.y,
	                           radius: aRadius,
	                           xStart: pStart.x,
	                           yStart: pStart.y,
	                           xEnd: pEnd.x,
	                           yEnd: pEnd.y});

	  };

	  contextPrototype.rect = function(aX, aY, aWidth, aHeight) {
	    this.moveTo(aX, aY);
	    this.lineTo(aX + aWidth, aY);
	    this.lineTo(aX + aWidth, aY + aHeight);
	    this.lineTo(aX, aY + aHeight);
	    this.closePath();
	  };

	  contextPrototype.strokeRect = function(aX, aY, aWidth, aHeight) {
	    var oldPath = this.currentPath_;
	    this.beginPath();

	    this.moveTo(aX, aY);
	    this.lineTo(aX + aWidth, aY);
	    this.lineTo(aX + aWidth, aY + aHeight);
	    this.lineTo(aX, aY + aHeight);
	    this.closePath();
	    this.stroke();

	    this.currentPath_ = oldPath;
	  };

	  contextPrototype.fillRect = function(aX, aY, aWidth, aHeight) {
	    var oldPath = this.currentPath_;
	    this.beginPath();

	    this.moveTo(aX, aY);
	    this.lineTo(aX + aWidth, aY);
	    this.lineTo(aX + aWidth, aY + aHeight);
	    this.lineTo(aX, aY + aHeight);
	    this.closePath();
	    this.fill();

	    this.currentPath_ = oldPath;
	  };

	  contextPrototype.createLinearGradient = function(aX0, aY0, aX1, aY1) {
	    var gradient = new CanvasGradient_('gradient');
	    gradient.x0_ = aX0;
	    gradient.y0_ = aY0;
	    gradient.x1_ = aX1;
	    gradient.y1_ = aY1;
	    return gradient;
	  };

	  contextPrototype.createRadialGradient = function(aX0, aY0, aR0,
	                                                   aX1, aY1, aR1) {
	    var gradient = new CanvasGradient_('gradientradial');
	    gradient.x0_ = aX0;
	    gradient.y0_ = aY0;
	    gradient.r0_ = aR0;
	    gradient.x1_ = aX1;
	    gradient.y1_ = aY1;
	    gradient.r1_ = aR1;
	    return gradient;
	  };

	  contextPrototype.drawImage = function(image, var_args) {
	    var dx, dy, dw, dh, sx, sy, sw, sh;

	    // to find the original width we overide the width and height
	    var oldRuntimeWidth = image.runtimeStyle.width;
	    var oldRuntimeHeight = image.runtimeStyle.height;
	    image.runtimeStyle.width = 'auto';
	    image.runtimeStyle.height = 'auto';

	    // get the original size
	    var w = image.width;
	    var h = image.height;

	    // and remove overides
	    image.runtimeStyle.width = oldRuntimeWidth;
	    image.runtimeStyle.height = oldRuntimeHeight;

	    if (arguments.length == 3) {
	      dx = arguments[1];
	      dy = arguments[2];
	      sx = sy = 0;
	      sw = dw = w;
	      sh = dh = h;
	    } else if (arguments.length == 5) {
	      dx = arguments[1];
	      dy = arguments[2];
	      dw = arguments[3];
	      dh = arguments[4];
	      sx = sy = 0;
	      sw = w;
	      sh = h;
	    } else if (arguments.length == 9) {
	      sx = arguments[1];
	      sy = arguments[2];
	      sw = arguments[3];
	      sh = arguments[4];
	      dx = arguments[5];
	      dy = arguments[6];
	      dw = arguments[7];
	      dh = arguments[8];
	    } else {
	      throw Error('Invalid number of arguments');
	    }

	    var d = getCoords(this, dx, dy);

	    var w2 = sw / 2;
	    var h2 = sh / 2;

	    var vmlStr = [];

	    var W = 10;
	    var H = 10;

	    var scaleX = scaleY = 1;

	    // For some reason that I've now forgotten, using divs didn't work
	    vmlStr.push(' <g_vml_:group',
	                ' coordsize="', Z * W, ',', Z * H, '"',
	                ' coordorigin="0,0"' ,
	                ' style="width:', W, 'px;height:', H, 'px;position:absolute;');

	    // If filters are necessary (rotation exists), create them
	    // filters are bog-slow, so only create them if abbsolutely necessary
	    // The following check doesn't account for skews (which don't exist
	    // in the canvas spec (yet) anyway.

	    if (this.m_[0][0] != 1 || this.m_[0][1] ||
	        this.m_[1][1] != 1 || this.m_[1][0]) {
	      var filter = [];

	     var scaleX = this.scaleX_;
	     var scaleY = this.scaleY_;
	      // Note the 12/21 reversal
	      filter.push('M11=', this.m_[0][0] / scaleX, ',',
	                  'M12=', this.m_[1][0] / scaleY, ',',
	                  'M21=', this.m_[0][1] / scaleX, ',',
	                  'M22=', this.m_[1][1] / scaleY, ',',
	                  'Dx=', mr(d.x / Z), ',',
	                  'Dy=', mr(d.y / Z), '');

	      // Bounding box calculation (need to minimize displayed area so that
	      // filters don't waste time on unused pixels.
	      var max = d;
	      var c2 = getCoords(this, dx + dw, dy);
	      var c3 = getCoords(this, dx, dy + dh);
	      var c4 = getCoords(this, dx + dw, dy + dh);

	      max.x = m.max(max.x, c2.x, c3.x, c4.x);
	      max.y = m.max(max.y, c2.y, c3.y, c4.y);

	      vmlStr.push('padding:0 ', mr(max.x / Z), 'px ', mr(max.y / Z),
	                  'px 0;filter:progid:DXImageTransform.Microsoft.Matrix(',
	                  filter.join(''), ", SizingMethod='clip');");

	    } else {
	      vmlStr.push('top:', mr(d.y / Z), 'px;left:', mr(d.x / Z), 'px;');
	    }

	    vmlStr.push(' ">');

	    // Draw a special cropping div if needed
	    if (sx || sy) {
	      // Apply scales to width and height
	      vmlStr.push('<div style="overflow: hidden; width:', Math.ceil((dw + sx * dw / sw) * scaleX), 'px;',
	                  ' height:', Math.ceil((dh + sy * dh / sh) * scaleY), 'px;',
	                  ' filter:progid:DxImageTransform.Microsoft.Matrix(Dx=',
	                  -sx * dw / sw * scaleX, ',Dy=', -sy * dh / sh * scaleY, ');">');
	    }


	    // Apply scales to width and height
	    vmlStr.push('<div style="width:', Math.round(scaleX * w * dw / sw), 'px;',
	                ' height:', Math.round(scaleY * h * dh / sh), 'px;',
	                ' filter:');

	    // If there is a globalAlpha, apply it to image
	    if(this.globalAlpha < 1) {
	      vmlStr.push(' progid:DXImageTransform.Microsoft.Alpha(opacity=' + (this.globalAlpha * 100) + ')');
	    }

	    vmlStr.push(' progid:DXImageTransform.Microsoft.AlphaImageLoader(src=', image.src, ',sizingMethod=scale)">');

	    // Close the crop div if necessary
	    if (sx || sy) vmlStr.push('</div>');

	    vmlStr.push('</div></div>');

	    this.element_.insertAdjacentHTML('BeforeEnd', vmlStr.join(''));
	  };

	  contextPrototype.stroke = function(aFill) {
	    var lineStr = [];
	    var lineOpen = false;

	    var W = 10;
	    var H = 10;

	    lineStr.push('<g_vml_:shape',
	                 ' filled="', !!aFill, '"',
	                 ' style="position:absolute;width:', W, 'px;height:', H, 'px;"',
	                 ' coordorigin="0,0"',
	                 ' coordsize="', Z * W, ',', Z * H, '"',
	                 ' stroked="', !aFill, '"',
	                 ' path="');

	    var newSeq = false;
	    var min = {x: null, y: null};
	    var max = {x: null, y: null};

	    for (var i = 0; i < this.currentPath_.length; i++) {
	      var p = this.currentPath_[i];
	      var c;

	      switch (p.type) {
	        case 'moveTo':
	          c = p;
	          lineStr.push(' m ', mr(p.x), ',', mr(p.y));
	          break;
	        case 'lineTo':
	          lineStr.push(' l ', mr(p.x), ',', mr(p.y));
	          break;
	        case 'close':
	          lineStr.push(' x ');
	          p = null;
	          break;
	        case 'bezierCurveTo':
	          lineStr.push(' c ',
	                       mr(p.cp1x), ',', mr(p.cp1y), ',',
	                       mr(p.cp2x), ',', mr(p.cp2y), ',',
	                       mr(p.x), ',', mr(p.y));
	          break;
	        case 'at':
	        case 'wa':
	          lineStr.push(' ', p.type, ' ',
	                       mr(p.x - this.scaleX_ * p.radius), ',',
	                       mr(p.y - this.scaleY_ * p.radius), ' ',
	                       mr(p.x + this.scaleX_ * p.radius), ',',
	                       mr(p.y + this.scaleY_ * p.radius), ' ',
	                       mr(p.xStart), ',', mr(p.yStart), ' ',
	                       mr(p.xEnd), ',', mr(p.yEnd));
	          break;
	      }


	      // TODO: Following is broken for curves due to
	      //       move to proper paths.

	      // Figure out dimensions so we can do gradient fills
	      // properly
	      if (p) {
	        if (min.x == null || p.x < min.x) {
	          min.x = p.x;
	        }
	        if (max.x == null || p.x > max.x) {
	          max.x = p.x;
	        }
	        if (min.y == null || p.y < min.y) {
	          min.y = p.y;
	        }
	        if (max.y == null || p.y > max.y) {
	          max.y = p.y;
	        }
	      }
	    }
	    lineStr.push(' ">');

	    if (!aFill) {
	      appendStroke(this, lineStr);
	    } else {
	      appendFill(this, lineStr, min, max);
	    }

	    lineStr.push('</g_vml_:shape>');

	    this.element_.insertAdjacentHTML('beforeEnd', lineStr.join(''));
	  };

	  function appendStroke(ctx, lineStr) {
	    var a = processStyle(ctx.strokeStyle);
	    var color = a.color;
	    var opacity = a.alpha * ctx.globalAlpha;
	    var lineWidth = ctx.lineScale_ * ctx.lineWidth;

	    // VML cannot correctly render a line if the width is less than 1px.
	    // In that case, we dilute the color to make the line look thinner.
	    if (lineWidth < 1) {
	      opacity *= lineWidth;
	    }

	    lineStr.push(
	      '<g_vml_:stroke',
	      ' opacity="', opacity, '"',
	      ' joinstyle="', ctx.lineJoin, '"',
	      ' miterlimit="', ctx.miterLimit, '"',
	      ' endcap="', processLineCap(ctx.lineCap), '"',
	      ' weight="', lineWidth, 'px"',
	      ' color="', color, '" />'
	    );
	  }

	  function appendFill(ctx, lineStr, min, max) {
	    var fillStyle = ctx.fillStyle;
	    var arcScaleX = ctx.scaleX_;
	    var arcScaleY = ctx.scaleY_;
	    var width = max.x - min.x;
	    var height = max.y - min.y;
	    if (fillStyle instanceof CanvasGradient_) {
	      // TODO: Gradients transformed with the transformation matrix.
	      var angle = 0;
	      var focus = {x: 0, y: 0};

	      // additional offset
	      var shift = 0;
	      // scale factor for offset
	      var expansion = 1;

	      if (fillStyle.type_ == 'gradient') {
	        var x0 = fillStyle.x0_ / arcScaleX;
	        var y0 = fillStyle.y0_ / arcScaleY;
	        var x1 = fillStyle.x1_ / arcScaleX;
	        var y1 = fillStyle.y1_ / arcScaleY;
	        var p0 = getCoords(ctx, x0, y0);
	        var p1 = getCoords(ctx, x1, y1);
	        var dx = p1.x - p0.x;
	        var dy = p1.y - p0.y;
	        angle = Math.atan2(dx, dy) * 180 / Math.PI;

	        // The angle should be a non-negative number.
	        if (angle < 0) {
	          angle += 360;
	        }

	        // Very small angles produce an unexpected result because they are
	        // converted to a scientific notation string.
	        if (angle < 1e-6) {
	          angle = 0;
	        }
	      } else {
	        var p0 = getCoords(ctx, fillStyle.x0_, fillStyle.y0_);
	        focus = {
	          x: (p0.x - min.x) / width,
	          y: (p0.y - min.y) / height
	        };

	        width  /= arcScaleX * Z;
	        height /= arcScaleY * Z;
	        var dimension = m.max(width, height);
	        shift = 2 * fillStyle.r0_ / dimension;
	        expansion = 2 * fillStyle.r1_ / dimension - shift;
	      }

	      // We need to sort the color stops in ascending order by offset,
	      // otherwise IE won't interpret it correctly.
	      var stops = fillStyle.colors_;
	      stops.sort(function(cs1, cs2) {
	        return cs1.offset - cs2.offset;
	      });

	      var length = stops.length;
	      var color1 = stops[0].color;
	      var color2 = stops[length - 1].color;
	      var opacity1 = stops[0].alpha * ctx.globalAlpha;
	      var opacity2 = stops[length - 1].alpha * ctx.globalAlpha;

	      var colors = [];
	      for (var i = 0; i < length; i++) {
	        var stop = stops[i];
	        colors.push(stop.offset * expansion + shift + ' ' + stop.color);
	      }

	      // When colors attribute is used, the meanings of opacity and o:opacity2
	      // are reversed.
	      lineStr.push('<g_vml_:fill type="', fillStyle.type_, '"',
	                   ' method="none" focus="100%"',
	                   ' color="', color1, '"',
	                   ' color2="', color2, '"',
	                   ' colors="', colors.join(','), '"',
	                   ' opacity="', opacity2, '"',
	                   ' g_o_:opacity2="', opacity1, '"',
	                   ' angle="', angle, '"',
	                   ' focusposition="', focus.x, ',', focus.y, '" />');
	    } else if (fillStyle instanceof CanvasPattern_) {
	      if (width && height) {
	        var deltaLeft = -min.x;
	        var deltaTop = -min.y;
	        lineStr.push('<g_vml_:fill',
	                     ' position="',
	                     deltaLeft / width * arcScaleX * arcScaleX, ',',
	                     deltaTop / height * arcScaleY * arcScaleY, '"',
	                     ' type="tile"',
	                     // TODO: Figure out the correct size to fit the scale.
	                     //' size="', w, 'px ', h, 'px"',
	                     ' src="', fillStyle.src_, '" />');
	       }
	    } else {
	      var a = processStyle(ctx.fillStyle);
	      var color = a.color;
	      var opacity = a.alpha * ctx.globalAlpha;
	      lineStr.push('<g_vml_:fill color="', color, '" opacity="', opacity,
	                   '" />');
	    }
	  }

	  contextPrototype.fill = function() {
	    this.stroke(true);
	  };

	  contextPrototype.closePath = function() {
	    this.currentPath_.push({type: 'close'});
	  };

	  function getCoords(ctx, aX, aY) {
	    var m = ctx.m_;
	    return {
	      x: Z * (aX * m[0][0] + aY * m[1][0] + m[2][0]) - Z2,
	      y: Z * (aX * m[0][1] + aY * m[1][1] + m[2][1]) - Z2
	    };
	  };

	  contextPrototype.save = function() {
	    var o = {};
	    copyState(this, o);
	    this.aStack_.push(o);
	    this.mStack_.push(this.m_);
	    this.m_ = matrixMultiply(createMatrixIdentity(), this.m_);
	  };

	  contextPrototype.restore = function() {
	    if (this.aStack_.length) {
	      copyState(this.aStack_.pop(), this);
	      this.m_ = this.mStack_.pop();
	    }
	  };

	  function matrixIsFinite(m) {
	    return isFinite(m[0][0]) && isFinite(m[0][1]) &&
	        isFinite(m[1][0]) && isFinite(m[1][1]) &&
	        isFinite(m[2][0]) && isFinite(m[2][1]);
	  }

	  function setM(ctx, m, updateLineScale) {
	    if (!matrixIsFinite(m)) {
	      return;
	    }
	    ctx.m_ = m;

	    ctx.scaleX_ = Math.sqrt(m[0][0] * m[0][0] + m[0][1] * m[0][1]);
	    ctx.scaleY_ = Math.sqrt(m[1][0] * m[1][0] + m[1][1] * m[1][1]);

	    if (updateLineScale) {
	      // Get the line scale.
	      // Determinant of this.m_ means how much the area is enlarged by the
	      // transformation. So its square root can be used as a scale factor
	      // for width.
	      var det = m[0][0] * m[1][1] - m[0][1] * m[1][0];
	      ctx.lineScale_ = sqrt(abs(det));
	    }
	  }

	  contextPrototype.translate = function(aX, aY) {
	    var m1 = [
	      [1,  0,  0],
	      [0,  1,  0],
	      [aX, aY, 1]
	    ];

	    setM(this, matrixMultiply(m1, this.m_), false);
	  };

	  contextPrototype.rotate = function(aRot) {
	    var c = mc(aRot);
	    var s = ms(aRot);

	    var m1 = [
	      [c,  s, 0],
	      [-s, c, 0],
	      [0,  0, 1]
	    ];

	    setM(this, matrixMultiply(m1, this.m_), false);
	  };

	  contextPrototype.scale = function(aX, aY) {
	    var m1 = [
	      [aX, 0,  0],
	      [0,  aY, 0],
	      [0,  0,  1]
	    ];

	    setM(this, matrixMultiply(m1, this.m_), true);
	  };

	  contextPrototype.transform = function(m11, m12, m21, m22, dx, dy) {
	    var m1 = [
	      [m11, m12, 0],
	      [m21, m22, 0],
	      [dx,  dy,  1]
	    ];

	    setM(this, matrixMultiply(m1, this.m_), true);

	  };

	  contextPrototype.setTransform = function(m11, m12, m21, m22, dx, dy) {
	    var m = [
	      [m11, m12, 0],
	      [m21, m22, 0],
	      [dx,  dy,  1]
	    ];

	    setM(this, m, true);
	  };

	  /**
	   * The text drawing function.
	   * The maxWidth argument isn't taken in account, since no browser supports
	   * it yet.
	   */
	  contextPrototype.drawText_ = function(text, x, y, maxWidth, stroke) {
	    var m = this.m_,
	        delta = 1000,
	        left = 0,
	        right = delta,
	        offset = {x: 0, y: 0},
	        lineStr = [];

	    var fontStyle = getComputedStyle(processFontStyle(this.font),
	                                     this.element_);

	    var fontStyleString = buildStyle(fontStyle);

	    var elementStyle = this.element_.currentStyle;
	    var textAlign = this.textAlign.toLowerCase();
	    switch (textAlign) {
	      case 'left':
	      case 'center':
	      case 'right':
	        break;
	      case 'end':
	        textAlign = elementStyle.direction == 'ltr' ? 'right' : 'left';
	        break;
	      case 'start':
	        textAlign = elementStyle.direction == 'rtl' ? 'right' : 'left';
	        break;
	      default:
	        textAlign = 'left';
	    }

	    // 1.75 is an arbitrary number, as there is no info about the text baseline
	    switch (this.textBaseline) {
	      case 'hanging':
	      case 'top':
	        offset.y = fontStyle.size / 1.75;
	        break;
	      case 'middle':
	        break;
	      default:
	      case null:
	      case 'alphabetic':
	      case 'ideographic':
	      case 'bottom':
	        offset.y = -fontStyle.size / 2.25;
	        break;
	    }

	    switch(textAlign) {
	      case 'right':
	        left = delta;
	        right = 0.05;
	        break;
	      case 'center':
	        left = right = delta / 2;
	        break;
	    }

	    var d = getCoords(this, x + offset.x, y + offset.y);

	    lineStr.push('<g_vml_:line from="', -left ,' 0" to="', right ,' 0.05" ',
	                 ' coordsize="100 100" coordorigin="0 0"',
	                 ' filled="', !stroke, '" stroked="', !!stroke,
	                 '" style="position:absolute;width:1px;height:1px;">');

	    if (stroke) {
	      appendStroke(this, lineStr);
	    } else {
	      // TODO: Fix the min and max params.
	      appendFill(this, lineStr, {x: -left, y: 0},
	                 {x: right, y: fontStyle.size});
	    }

	    var skewM = m[0][0].toFixed(3) + ',' + m[1][0].toFixed(3) + ',' +
	                m[0][1].toFixed(3) + ',' + m[1][1].toFixed(3) + ',0,0';

	    var skewOffset = mr(d.x / Z) + ',' + mr(d.y / Z);

	    lineStr.push('<g_vml_:skew on="t" matrix="', skewM ,'" ',
	                 ' offset="', skewOffset, '" origin="', left ,' 0" />',
	                 '<g_vml_:path textpathok="true" />',
	                 '<g_vml_:textpath on="true" string="',
	                 encodeHtmlAttribute(text),
	                 '" style="v-text-align:', textAlign,
	                 ';font:', encodeHtmlAttribute(fontStyleString),
	                 '" /></g_vml_:line>');

	    this.element_.insertAdjacentHTML('beforeEnd', lineStr.join(''));
	  };

	  contextPrototype.fillText = function(text, x, y, maxWidth) {
	    this.drawText_(text, x, y, maxWidth, false);
	  };

	  contextPrototype.strokeText = function(text, x, y, maxWidth) {
	    this.drawText_(text, x, y, maxWidth, true);
	  };

	  contextPrototype.measureText = function(text) {
	    if (!this.textMeasureEl_) {
	      var s = '<span style="position:absolute;' +
	          'top:-20000px;left:0;padding:0;margin:0;border:none;' +
	          'white-space:pre;"></span>';
	      this.element_.insertAdjacentHTML('beforeEnd', s);
	      this.textMeasureEl_ = this.element_.lastChild;
	    }
	    var doc = this.element_.ownerDocument;
	    this.textMeasureEl_.innerHTML = '';
	    try {
	        this.textMeasureEl_.style.font = this.font;
	    } catch (ex) {
	        // Ignore failures to set to invalid font.
	    }

	    // Don't use innerHTML or innerText because they allow markup/whitespace.
	    this.textMeasureEl_.appendChild(doc.createTextNode(text));
	    return {width: this.textMeasureEl_.offsetWidth};
	  };

	  /******** STUBS ********/
	  contextPrototype.clip = function() {
	    // TODO: Implement
	  };

	  contextPrototype.arcTo = function() {
	    // TODO: Implement
	  };

	  contextPrototype.createPattern = function(image, repetition) {
	    return new CanvasPattern_(image, repetition);
	  };

	  // Gradient / Pattern Stubs
	  function CanvasGradient_(aType) {
	    this.type_ = aType;
	    this.x0_ = 0;
	    this.y0_ = 0;
	    this.r0_ = 0;
	    this.x1_ = 0;
	    this.y1_ = 0;
	    this.r1_ = 0;
	    this.colors_ = [];
	  }

	  CanvasGradient_.prototype.addColorStop = function(aOffset, aColor) {
	    aColor = processStyle(aColor);
	    this.colors_.push({offset: aOffset,
	                       color: aColor.color,
	                       alpha: aColor.alpha});
	  };

	  function CanvasPattern_(image, repetition) {
	    assertImageIsValid(image);
	    switch (repetition) {
	      case 'repeat':
	      case null:
	      case '':
	        this.repetition_ = 'repeat';
	        break
	      case 'repeat-x':
	      case 'repeat-y':
	      case 'no-repeat':
	        this.repetition_ = repetition;
	        break;
	      default:
	        throwException('SYNTAX_ERR');
	    }

	    this.src_ = image.src;
	    this.width_ = image.width;
	    this.height_ = image.height;
	  }

	  function throwException(s) {
	    throw new DOMException_(s);
	  }

	  function assertImageIsValid(img) {
	    if (!img || img.nodeType != 1 || img.tagName != 'IMG') {
	      throwException('TYPE_MISMATCH_ERR');
	    }
	    if (img.readyState != 'complete') {
	      throwException('INVALID_STATE_ERR');
	    }
	  }

	  function DOMException_(s) {
	    this.code = this[s];
	    this.message = s +': DOM Exception ' + this.code;
	  }
	  var p = DOMException_.prototype = new Error;
	  p.INDEX_SIZE_ERR = 1;
	  p.DOMSTRING_SIZE_ERR = 2;
	  p.HIERARCHY_REQUEST_ERR = 3;
	  p.WRONG_DOCUMENT_ERR = 4;
	  p.INVALID_CHARACTER_ERR = 5;
	  p.NO_DATA_ALLOWED_ERR = 6;
	  p.NO_MODIFICATION_ALLOWED_ERR = 7;
	  p.NOT_FOUND_ERR = 8;
	  p.NOT_SUPPORTED_ERR = 9;
	  p.INUSE_ATTRIBUTE_ERR = 10;
	  p.INVALID_STATE_ERR = 11;
	  p.SYNTAX_ERR = 12;
	  p.INVALID_MODIFICATION_ERR = 13;
	  p.NAMESPACE_ERR = 14;
	  p.INVALID_ACCESS_ERR = 15;
	  p.VALIDATION_ERR = 16;
	  p.TYPE_MISMATCH_ERR = 17;

	  // set up externs
	  G_vmlCanvasManager = G_vmlCanvasManager_;
	  CanvasRenderingContext2D = CanvasRenderingContext2D_;
	  CanvasGradient = CanvasGradient_;
	  CanvasPattern = CanvasPattern_;
	  DOMException = DOMException_;
	})();

	} // if
	else { // make the canvas test simple by kener.linfeng@gmail.com
	    G_vmlCanvasManager = void 0;
	}
	return G_vmlCanvasManager;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // define


/***/ },
/* 458 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * 事件辅助类
	 * @module zrender/tool/event
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function(require) {

	        'use strict';

	        var Eventful = __webpack_require__(459);

	        /**
	        * 提取鼠标（手指）x坐标
	        * @memberOf module:zrender/tool/event
	        * @param  {Event} e 事件.
	        * @return {number} 鼠标（手指）x坐标.
	        */
	        function getX(e) {
	            return typeof e.zrenderX != 'undefined' && e.zrenderX
	                   || typeof e.offsetX != 'undefined' && e.offsetX
	                   || typeof e.layerX != 'undefined' && e.layerX
	                   || typeof e.clientX != 'undefined' && e.clientX;
	        }

	        /**
	        * 提取鼠标y坐标
	        * @memberOf module:zrender/tool/event
	        * @param  {Event} e 事件.
	        * @return {number} 鼠标（手指）y坐标.
	        */
	        function getY(e) {
	            return typeof e.zrenderY != 'undefined' && e.zrenderY
	                   || typeof e.offsetY != 'undefined' && e.offsetY
	                   || typeof e.layerY != 'undefined' && e.layerY
	                   || typeof e.clientY != 'undefined' && e.clientY;
	        }

	        /**
	        * 提取鼠标滚轮变化
	        * @memberOf module:zrender/tool/event
	        * @param  {Event} e 事件.
	        * @return {number} 滚轮变化，正值说明滚轮是向上滚动，如果是负值说明滚轮是向下滚动
	        */
	        function getDelta(e) {
	            return typeof e.zrenderDelta != 'undefined' && e.zrenderDelta
	                   || typeof e.wheelDelta != 'undefined' && e.wheelDelta
	                   || typeof e.detail != 'undefined' && -e.detail;
	        }

	        /**
	         * 停止冒泡和阻止默认行为
	         * @memberOf module:zrender/tool/event
	         * @method
	         * @param {Event} e : event对象
	         */
	        var stop = typeof window.addEventListener === 'function'
	            ? function (e) {
	                e.preventDefault();
	                e.stopPropagation();
	                e.cancelBubble = true;
	            }
	            : function (e) {
	                e.returnValue = false;
	                e.cancelBubble = true;
	            };
	        
	        return {
	            getX : getX,
	            getY : getY,
	            getDelta : getDelta,
	            stop : stop,
	            // 做向上兼容
	            Dispatcher : Eventful
	        };
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 459 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * 事件扩展
	 * @module zrender/mixin/Eventful
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *         pissang (https://www.github.com/pissang)
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {

	    /**
	     * 事件分发器
	     * @alias module:zrender/mixin/Eventful
	     * @constructor
	     */
	    var Eventful = function () {
	        this._handlers = {};
	    };
	    /**
	     * 单次触发绑定，dispatch后销毁
	     * 
	     * @param {string} event 事件名
	     * @param {Function} handler 响应函数
	     * @param {Object} context
	     */
	    Eventful.prototype.one = function (event, handler, context) {
	        var _h = this._handlers;

	        if (!handler || !event) {
	            return this;
	        }

	        if (!_h[event]) {
	            _h[event] = [];
	        }

	        _h[event].push({
	            h : handler,
	            one : true,
	            ctx: context || this
	        });

	        return this;
	    };

	    /**
	     * 绑定事件
	     * @param {string} event 事件名
	     * @param {Function} handler 事件处理函数
	     * @param {Object} [context]
	     */
	    Eventful.prototype.bind = function (event, handler, context) {
	        var _h = this._handlers;

	        if (!handler || !event) {
	            return this;
	        }

	        if (!_h[event]) {
	            _h[event] = [];
	        }

	        _h[event].push({
	            h : handler,
	            one : false,
	            ctx: context || this
	        });

	        return this;
	    };

	    /**
	     * 解绑事件
	     * @param {string} event 事件名
	     * @param {Function} [handler] 事件处理函数
	     */
	    Eventful.prototype.unbind = function (event, handler) {
	        var _h = this._handlers;

	        if (!event) {
	            this._handlers = {};
	            return this;
	        }

	        if (handler) {
	            if (_h[event]) {
	                var newList = [];
	                for (var i = 0, l = _h[event].length; i < l; i++) {
	                    if (_h[event][i]['h'] != handler) {
	                        newList.push(_h[event][i]);
	                    }
	                }
	                _h[event] = newList;
	            }

	            if (_h[event] && _h[event].length === 0) {
	                delete _h[event];
	            }
	        }
	        else {
	            delete _h[event];
	        }

	        return this;
	    };

	    /**
	     * 事件分发
	     * 
	     * @param {string} type 事件类型
	     */
	    Eventful.prototype.dispatch = function (type) {
	        if (this._handlers[type]) {
	            var args = arguments;
	            var argLen = args.length;

	            if (argLen > 3) {
	                args = Array.prototype.slice.call(args, 1);
	            }
	            
	            var _h = this._handlers[type];
	            var len = _h.length;
	            for (var i = 0; i < len;) {
	                // Optimize advise from backbone
	                switch (argLen) {
	                    case 1:
	                        _h[i]['h'].call(_h[i]['ctx']);
	                        break;
	                    case 2:
	                        _h[i]['h'].call(_h[i]['ctx'], args[1]);
	                        break;
	                    case 3:
	                        _h[i]['h'].call(_h[i]['ctx'], args[1], args[2]);
	                        break;
	                    default:
	                        // have more than 2 given arguments
	                        _h[i]['h'].apply(_h[i]['ctx'], args);
	                        break;
	                }
	                
	                if (_h[i]['one']) {
	                    _h.splice(i, 1);
	                    len--;
	                }
	                else {
	                    i++;
	                }
	            }
	        }

	        return this;
	    };

	    /**
	     * 带有context的事件分发, 最后一个参数是事件回调的context
	     * @param {string} type 事件类型
	     */
	    Eventful.prototype.dispatchWithContext = function (type) {
	        if (this._handlers[type]) {
	            var args = arguments;
	            var argLen = args.length;

	            if (argLen > 4) {
	                args = Array.prototype.slice.call(args, 1, args.length - 1);
	            }
	            var ctx = args[args.length - 1];

	            var _h = this._handlers[type];
	            var len = _h.length;
	            for (var i = 0; i < len;) {
	                // Optimize advise from backbone
	                switch (argLen) {
	                    case 1:
	                        _h[i]['h'].call(ctx);
	                        break;
	                    case 2:
	                        _h[i]['h'].call(ctx, args[1]);
	                        break;
	                    case 3:
	                        _h[i]['h'].call(ctx, args[1], args[2]);
	                        break;
	                    default:
	                        // have more than 2 given arguments
	                        _h[i]['h'].apply(ctx, args);
	                        break;
	                }
	                
	                if (_h[i]['one']) {
	                    _h.splice(i, 1);
	                    len--;
	                }
	                else {
	                    i++;
	                }
	            }
	        }

	        return this;
	    };

	    // 对象可以通过 onxxxx 绑定事件
	    /**
	     * @event module:zrender/mixin/Eventful#onclick
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#onmouseover
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#onmouseout
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#onmousemove
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#onmousewheel
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#onmousedown
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#onmouseup
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#ondragstart
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#ondragend
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#ondragenter
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#ondragleave
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#ondragover
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#ondrop
	     * @type {Function}
	     * @default null
	     */
	    
	    return Eventful;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 460 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * echarts设备环境识别
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author firede[firede@firede.us]
	 * @desc thanks zepto.
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	    // Zepto.js
	    // (c) 2010-2013 Thomas Fuchs
	    // Zepto.js may be freely distributed under the MIT license.

	    function detect(ua) {
	        var os = this.os = {};
	        var browser = this.browser = {};
	        var webkit = ua.match(/Web[kK]it[\/]{0,1}([\d.]+)/);
	        var android = ua.match(/(Android);?[\s\/]+([\d.]+)?/);
	        var ipad = ua.match(/(iPad).*OS\s([\d_]+)/);
	        var ipod = ua.match(/(iPod)(.*OS\s([\d_]+))?/);
	        var iphone = !ipad && ua.match(/(iPhone\sOS)\s([\d_]+)/);
	        var webos = ua.match(/(webOS|hpwOS)[\s\/]([\d.]+)/);
	        var touchpad = webos && ua.match(/TouchPad/);
	        var kindle = ua.match(/Kindle\/([\d.]+)/);
	        var silk = ua.match(/Silk\/([\d._]+)/);
	        var blackberry = ua.match(/(BlackBerry).*Version\/([\d.]+)/);
	        var bb10 = ua.match(/(BB10).*Version\/([\d.]+)/);
	        var rimtabletos = ua.match(/(RIM\sTablet\sOS)\s([\d.]+)/);
	        var playbook = ua.match(/PlayBook/);
	        var chrome = ua.match(/Chrome\/([\d.]+)/) || ua.match(/CriOS\/([\d.]+)/);
	        var firefox = ua.match(/Firefox\/([\d.]+)/);
	        var ie = ua.match(/MSIE ([\d.]+)/);
	        var safari = webkit && ua.match(/Mobile\//) && !chrome;
	        var webview = ua.match(/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/) && !chrome;
	        var ie = ua.match(/MSIE\s([\d.]+)/);

	        // Todo: clean this up with a better OS/browser seperation:
	        // - discern (more) between multiple browsers on android
	        // - decide if kindle fire in silk mode is android or not
	        // - Firefox on Android doesn't specify the Android version
	        // - possibly devide in os, device and browser hashes

	        if (browser.webkit = !!webkit) browser.version = webkit[1];

	        if (android) os.android = true, os.version = android[2];
	        if (iphone && !ipod) os.ios = os.iphone = true, os.version = iphone[2].replace(/_/g, '.');
	        if (ipad) os.ios = os.ipad = true, os.version = ipad[2].replace(/_/g, '.');
	        if (ipod) os.ios = os.ipod = true, os.version = ipod[3] ? ipod[3].replace(/_/g, '.') : null;
	        if (webos) os.webos = true, os.version = webos[2];
	        if (touchpad) os.touchpad = true;
	        if (blackberry) os.blackberry = true, os.version = blackberry[2];
	        if (bb10) os.bb10 = true, os.version = bb10[2];
	        if (rimtabletos) os.rimtabletos = true, os.version = rimtabletos[2];
	        if (playbook) browser.playbook = true;
	        if (kindle) os.kindle = true, os.version = kindle[1];
	        if (silk) browser.silk = true, browser.version = silk[1];
	        if (!silk && os.android && ua.match(/Kindle Fire/)) browser.silk = true;
	        if (chrome) browser.chrome = true, browser.version = chrome[1];
	        if (firefox) browser.firefox = true, browser.version = firefox[1];
	        if (ie) browser.ie = true, browser.version = ie[1];
	        if (safari && (ua.match(/Safari/) || !!os.ios)) browser.safari = true;
	        if (webview) browser.webview = true;
	        if (ie) browser.ie = true, browser.version = ie[1];

	        os.tablet = !!(ipad || playbook || (android && !ua.match(/Mobile/)) ||
	            (firefox && ua.match(/Tablet/)) || (ie && !ua.match(/Phone/) && ua.match(/Touch/)));
	        os.phone  = !!(!os.tablet && !os.ipod && (android || iphone || webos || blackberry || bb10 ||
	            (chrome && ua.match(/Android/)) || (chrome && ua.match(/CriOS\/([\d.]+)/)) ||
	            (firefox && ua.match(/Mobile/)) || (ie && ua.match(/Touch/))));

	        return {
	            browser: browser,
	            os: os,
	            // 原生canvas支持，改极端点了
	            // canvasSupported : !(browser.ie && parseFloat(browser.version) < 9)
	            canvasSupported : document.createElement('canvas').getContext ? true : false
	        };
	    }

	    return detect(navigator.userAgent);
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 461 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * ZRender, a high performance canvas library.
	 *  
	 * Copyright (c) 2013, Baidu Inc.
	 * All rights reserved.
	 * 
	 * LICENSE
	 * https://github.com/ecomfe/zrender/blob/master/LICENSE.txt
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function(require) {
	        /*
	         * HTML5 Canvas for Internet Explorer!
	         * Modern browsers like Firefox, Safari, Chrome and Opera support
	         * the HTML5 canvas tag to allow 2D command-based drawing.
	         * ExplorerCanvas brings the same functionality to Internet Explorer.
	         * To use, web developers only need to include a single script tag
	         * in their existing web pages.
	         *
	         * https://code.google.com/p/explorercanvas/
	         * http://explorercanvas.googlecode.com/svn/trunk/excanvas.js
	         */
	        // 核心代码会生成一个全局变量 G_vmlCanvasManager，模块改造后借用于快速判断canvas支持
	        __webpack_require__(457);

	        var util = __webpack_require__(456);
	        var log = __webpack_require__(462);
	        var guid = __webpack_require__(464);

	        var Handler = __webpack_require__(465);
	        var Painter = __webpack_require__(468);
	        var Storage = __webpack_require__(479);
	        var Animation = __webpack_require__(481);

	        var _instances = {};    // ZRender实例map索引

	        /**
	         * @exports zrender
	         * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	         *         pissang (https://www.github.com/pissang)
	         */
	        var zrender = {};
	        /**
	         * @type {string}
	         */
	        zrender.version = '2.1.1';

	        /**
	         * 创建zrender实例
	         *
	         * @param {HTMLElement} dom 绘图容器
	         * @return {module:zrender/ZRender} ZRender实例
	         */
	        // 不让外部直接new ZRender实例，为啥？
	        // 不为啥，提供全局可控同时减少全局污染和降低命名冲突的风险！
	        zrender.init = function(dom) {
	            var zr = new ZRender(guid(), dom);
	            _instances[zr.id] = zr;
	            return zr;
	        };

	        /**
	         * zrender实例销毁
	         * @param {module:zrender/ZRender} zr ZRender对象，不传则销毁全部
	         */
	        // 在_instances里的索引也会删除了
	        // 管生就得管死，可以通过zrender.dispose(zr)销毁指定ZRender实例
	        // 当然也可以直接zr.dispose()自己销毁
	        zrender.dispose = function (zr) {
	            if (zr) {
	                zr.dispose();
	            }
	            else {
	                for (var key in _instances) {
	                    _instances[key].dispose();
	                }
	                _instances = {};
	            }

	            return zrender;
	        };

	        /**
	         * 获取zrender实例
	         * @param {string} id ZRender对象索引
	         * @return {module:zrender/ZRender}
	         */
	        zrender.getInstance = function (id) {
	            return _instances[id];
	        };

	        /**
	         * 删除zrender实例，ZRender实例dispose时会调用，
	         * 删除后getInstance则返回undefined
	         * ps: 仅是删除，删除的实例不代表已经dispose了~~
	         *     这是一个摆脱全局zrender.dispose()自动销毁的后门，
	         *     take care of yourself~
	         *
	         * @param {string} id ZRender对象索引
	         */
	        zrender.delInstance = function (id) {
	            delete _instances[id];
	            return zrender;
	        };

	        function getFrameCallback(zrInstance) {
	            return function () {
	                if (zrInstance._needsRefreshNextFrame) {
	                    zrInstance.refresh();
	                }
	            };
	        }

	        /**
	         * @module zrender/ZRender
	         */
	        /**
	         * ZRender接口类，对外可用的所有接口都在这里
	         * 非get接口统一返回支持链式调用
	         *
	         * @constructor
	         * @alias module:zrender/ZRender
	         * @param {string} id 唯一标识
	         * @param {HTMLElement} dom dom对象，不帮你做document.getElementById
	         * @return {ZRender} ZRender实例
	         */
	        var ZRender = function(id, dom) {
	            /**
	             * 实例 id
	             * @type {string}
	             */
	            this.id = id;
	            this.env = __webpack_require__(460);

	            this.storage = new Storage();
	            this.painter = new Painter(dom, this.storage);
	            this.handler = new Handler(dom, this.storage, this.painter);

	            /**
	             * @type {module:zrender/animation/Animation}
	             */
	            this.animation = new Animation({
	                stage: {
	                    update: getFrameCallback(this)
	                }
	            });
	            this.animation.start();

	            var self = this;
	            this.painter.refreshNextFrame = function () {
	                self.refreshNextFrame();
	            };

	            this._needsRefreshNextFrame = false;

	            // 修改 storage.delFromMap, 每次删除元素之前删除动画
	            // FIXME 有点ugly
	            var self = this;
	            var storage = this.storage;
	            var oldDelFromMap = storage.delFromMap;
	            storage.delFromMap = function (elId) {
	                var el = storage.get(elId);
	                self.stopAnimation(el);
	                oldDelFromMap.call(storage, elId);
	            };
	        };

	        /**
	         * 获取实例唯一标识
	         * @return {string}
	         */
	        ZRender.prototype.getId = function () {
	            return this.id;
	        };

	        /**
	         * 添加图形形状到根节点
	         * @deprecated Use {@link module:zrender/ZRender.prototype.addElement} instead
	         * @param {module:zrender/shape/Base} shape 形状对象，可用属性全集，详见各shape
	         */
	        ZRender.prototype.addShape = function (shape) {
	            this.addElement(shape);
	            return this;
	        };

	        /**
	         * 添加组到根节点
	         * @deprecated Use {@link module:zrender/ZRender.prototype.addElement} instead
	         * @param {module:zrender/Group} group
	         */
	        ZRender.prototype.addGroup = function(group) {
	            this.addElement(group);
	            return this;
	        };

	        /**
	         * 从根节点删除图形形状
	         * @deprecated Use {@link module:zrender/ZRender.prototype.delElement} instead
	         * @param {string} shapeId 形状对象唯一标识
	         */
	        ZRender.prototype.delShape = function (shapeId) {
	            this.delElement(shapeId);
	            return this;
	        };

	        /**
	         * 从根节点删除组
	         * @deprecated Use {@link module:zrender/ZRender.prototype.delElement} instead
	         * @param {string} groupId
	         */
	        ZRender.prototype.delGroup = function (groupId) {
	            this.delElement(groupId);
	            return this;
	        };

	        /**
	         * 修改图形形状
	         * @deprecated Use {@link module:zrender/ZRender.prototype.modElement} instead
	         * @param {string} shapeId 形状对象唯一标识
	         * @param {Object} shape 形状对象
	         */
	        ZRender.prototype.modShape = function (shapeId, shape) {
	            this.modElement(shapeId, shape);
	            return this;
	        };

	        /**
	         * 修改组
	         * @deprecated Use {@link module:zrender/ZRender.prototype.modElement} instead
	         * @param {string} groupId
	         * @param {Object} group
	         */
	        ZRender.prototype.modGroup = function (groupId, group) {
	            this.modElement(groupId, group);
	            return this;
	        };

	        /**
	         * 添加元素
	         * @param  {string|module:zrender/Group|module:zrender/shape/Base} el
	         */
	        ZRender.prototype.addElement = function (el) {
	            this.storage.addRoot(el);
	            this._needsRefreshNextFrame = true;
	            return this;
	        };

	        /**
	         * 删除元素
	         * @param  {string|module:zrender/Group|module:zrender/shape/Base} el
	         */
	        ZRender.prototype.delElement = function (el) {
	            this.storage.delRoot(el);
	            this._needsRefreshNextFrame = true;
	            return this;
	        };

	        /**
	         * 修改元素, 主要标记图形或者组需要在下一帧刷新。
	         * 第二个参数为需要覆盖到元素上的参数，不建议使用。
	         *
	         * @example
	         *     el.style.color = 'red';
	         *     el.position = [10, 10];
	         *     zr.modElement(el);
	         * @param  {string|module:zrender/Group|module:zrender/shape/Base} el
	         * @param {Object} [params]
	         */
	        ZRender.prototype.modElement = function (el, params) {
	            this.storage.mod(el, params);
	            this._needsRefreshNextFrame = true;
	            return this;
	        };

	        /**
	         * 修改指定zlevel的绘制配置项
	         * 
	         * @param {string} zLevel
	         * @param {Object} config 配置对象
	         * @param {string} [config.clearColor=0] 每次清空画布的颜色
	         * @param {string} [config.motionBlur=false] 是否开启动态模糊
	         * @param {number} [config.lastFrameAlpha=0.7]
	         *                 在开启动态模糊的时候使用，与上一帧混合的alpha值，值越大尾迹越明显
	         * @param {Array.<number>} [config.position] 层的平移
	         * @param {Array.<number>} [config.rotation] 层的旋转
	         * @param {Array.<number>} [config.scale] 层的缩放
	         * @param {boolean} [config.zoomable=false] 层是否支持鼠标缩放操作
	         * @param {boolean} [config.panable=false] 层是否支持鼠标平移操作
	         */
	        ZRender.prototype.modLayer = function (zLevel, config) {
	            this.painter.modLayer(zLevel, config);
	            this._needsRefreshNextFrame = true;
	            return this;
	        };

	        /**
	         * 添加额外高亮层显示，仅提供添加方法，每次刷新后高亮层图形均被清空
	         * 
	         * @param {Object} shape 形状对象
	         */
	        ZRender.prototype.addHoverShape = function (shape) {
	            this.storage.addHover(shape);
	            return this;
	        };

	        /**
	         * 渲染
	         * 
	         * @param {Function} callback  渲染结束后回调函数
	         */
	        ZRender.prototype.render = function (callback) {
	            this.painter.render(callback);
	            this._needsRefreshNextFrame = false;
	            return this;
	        };

	        /**
	         * 视图更新
	         * 
	         * @param {Function} callback  视图更新后回调函数
	         */
	        ZRender.prototype.refresh = function (callback) {
	            this.painter.refresh(callback);
	            this._needsRefreshNextFrame = false;
	            return this;
	        };

	        /**
	         * 标记视图在浏览器下一帧需要绘制
	         */
	        ZRender.prototype.refreshNextFrame = function() {
	            this._needsRefreshNextFrame = true;
	            return this;
	        };
	        
	        /**
	         * 绘制高亮层
	         * @param {Function} callback  视图更新后回调函数
	         */
	        ZRender.prototype.refreshHover = function (callback) {
	            this.painter.refreshHover(callback);
	            return this;
	        };

	        /**
	         * 视图更新
	         * 
	         * @param {Array.<module:zrender/shape/Base>} shapeList 需要更新的图形列表
	         * @param {Function} callback  视图更新后回调函数
	         */
	        ZRender.prototype.refreshShapes = function (shapeList, callback) {
	            this.painter.refreshShapes(shapeList, callback);
	            return this;
	        };

	        /**
	         * 调整视图大小
	         */
	        ZRender.prototype.resize = function() {
	            this.painter.resize();
	            return this;
	        };

	        /**
	         * 动画
	         * 
	         * @param {string|module:zrender/Group|module:zrender/shape/Base} el 动画对象
	         * @param {string} path 需要添加动画的属性获取路径，可以通过a.b.c来获取深层的属性
	         * @param {boolean} [loop] 动画是否循环
	         * @return {module:zrender/animation/Animation~Animator}
	         * @example:
	         *     zr.animate(circle.id, 'style', false)
	         *         .when(1000, {x: 10} )
	         *         .done(function(){ // Animation done })
	         *         .start()
	         */
	        ZRender.prototype.animate = function (el, path, loop) {
	            var self = this;

	            if (typeof(el) === 'string') {
	                el = this.storage.get(el);
	            }
	            if (el) {
	                var target;
	                if (path) {
	                    var pathSplitted = path.split('.');
	                    var prop = el;
	                    for (var i = 0, l = pathSplitted.length; i < l; i++) {
	                        if (!prop) {
	                            continue;
	                        }
	                        prop = prop[pathSplitted[i]];
	                    }
	                    if (prop) {
	                        target = prop;
	                    }
	                }
	                else {
	                    target = el;
	                }

	                if (!target) {
	                    log(
	                        'Property "'
	                        + path
	                        + '" is not existed in element '
	                        + el.id
	                    );
	                    return;
	                }

	                if (el.__animators == null) {
	                    // 正在进行的动画记数
	                    el.__animators = [];
	                }
	                var animators = el.__animators;

	                var animator = this.animation.animate(target, { loop: loop })
	                    .during(function () {
	                        self.modShape(el);
	                    })
	                    .done(function () {
	                        var idx = util.indexOf(el.__animators, animator);
	                        if (idx >= 0) {
	                            animators.splice(idx, 1);
	                        }
	                    });
	                animators.push(animator);

	                return animator;
	            }
	            else {
	                log('Element not existed');
	            }
	        };

	        /**
	         * 停止动画对象的动画
	         * @param  {string|module:zrender/Group|module:zrender/shape/Base} el
	         */
	        ZRender.prototype.stopAnimation = function (el) {
	            if (el.__animators) {
	                var animators = el.__animators;
	                var len = animators.length;
	                for (var i = 0; i < len; i++) {
	                    animators[i].stop();
	                }
	                animators.length = 0;
	            }
	            return this;
	        };

	        /**
	         * 停止所有动画
	         */
	        ZRender.prototype.clearAnimation = function () {
	            this.animation.clear();
	            return this;
	        };

	        /**
	         * loading显示
	         * 
	         * @param {Object=} loadingEffect loading效果对象
	         */
	        ZRender.prototype.showLoading = function (loadingEffect) {
	            this.painter.showLoading(loadingEffect);
	            return this;
	        };

	        /**
	         * loading结束
	         */
	        ZRender.prototype.hideLoading = function () {
	            this.painter.hideLoading();
	            return this;
	        };

	        /**
	         * 获取视图宽度
	         */
	        ZRender.prototype.getWidth = function() {
	            return this.painter.getWidth();
	        };

	        /**
	         * 获取视图高度
	         */
	        ZRender.prototype.getHeight = function() {
	            return this.painter.getHeight();
	        };

	        /**
	         * 图像导出
	         * @param {string} type
	         * @param {string} [backgroundColor='#fff'] 背景色
	         * @return {string} 图片的Base64 url
	         */
	        ZRender.prototype.toDataURL = function(type, backgroundColor, args) {
	            return this.painter.toDataURL(type, backgroundColor, args);
	        };

	        /**
	         * 将常规shape转成image shape
	         * @param {module:zrender/shape/Base} e
	         * @param {number} width
	         * @param {number} height
	         */
	        ZRender.prototype.shapeToImage = function(e, width, height) {
	            var id = guid();
	            return this.painter.shapeToImage(id, e, width, height);
	        };

	        /**
	         * 事件绑定
	         * 
	         * @param {string} eventName 事件名称
	         * @param {Function} eventHandler 响应函数
	         * @param {Object} [context] 响应函数
	         */
	        ZRender.prototype.on = function(eventName, eventHandler, context) {
	            this.handler.on(eventName, eventHandler, context);
	            return this;
	        };

	        /**
	         * 事件解绑定，参数为空则解绑所有自定义事件
	         * 
	         * @param {string} eventName 事件名称
	         * @param {Function} eventHandler 响应函数
	         */
	        ZRender.prototype.un = function(eventName, eventHandler) {
	            this.handler.un(eventName, eventHandler);
	            return this;
	        };
	        
	        /**
	         * 事件触发
	         * 
	         * @param {string} eventName 事件名称，resize，hover，drag，etc
	         * @param {event=} event event dom事件对象
	         */
	        ZRender.prototype.trigger = function (eventName, event) {
	            this.handler.trigger(eventName, event);
	            return this;
	        };
	        

	        /**
	         * 清除当前ZRender下所有类图的数据和显示，clear后MVC和已绑定事件均还存在在，ZRender可用
	         */
	        ZRender.prototype.clear = function () {
	            this.storage.delRoot();
	            this.painter.clear();
	            return this;
	        };

	        /**
	         * 释放当前ZR实例（删除包括dom，数据、显示和事件绑定），dispose后ZR不可用
	         */
	        ZRender.prototype.dispose = function () {
	            this.animation.stop();
	            
	            this.clear();
	            this.storage.dispose();
	            this.painter.dispose();
	            this.handler.dispose();

	            this.animation = 
	            this.storage = 
	            this.painter = 
	            this.handler = null;

	            // 释放后告诉全局删除对自己的索引，没想到啥好方法
	            zrender.delInstance(this.id);
	        };

	        return zrender;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 462 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	        var config = __webpack_require__(463);

	        /**
	         * @exports zrender/tool/log
	         * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	         */
	        return function() {
	            if (config.debugMode === 0) {
	                return;
	            }
	            else if (config.debugMode == 1) {
	                for (var k in arguments) {
	                    throw new Error(arguments[k]);
	                }
	            }
	            else if (config.debugMode > 1) {
	                for (var k in arguments) {
	                    console.log(arguments[k]);
	                }
	            }
	        };

	        /* for debug
	        return function(mes) {
	            document.getElementById('wrong-message').innerHTML =
	                mes + ' ' + (new Date() - 0)
	                + '<br/>' 
	                + document.getElementById('wrong-message').innerHTML;
	        };
	        */
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 463 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	    /**
	     * config默认配置项
	     * @exports zrender/config
	     * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	     */
	    var config = {
	        /**
	         * @namespace module:zrender/config.EVENT
	         */
	        EVENT : {
	            /**
	             * 窗口大小变化
	             * @type {string}
	             */
	            RESIZE : 'resize',
	            /**
	             * 鼠标按钮被（手指）按下，事件对象是：目标图形元素或空
	             * @type {string}
	             */
	            CLICK : 'click',
	            /**
	             * 双击事件
	             * @type {string}
	             */
	            DBLCLICK : 'dblclick',
	            /**
	             * 鼠标滚轮变化，事件对象是：目标图形元素或空
	             * @type {string}
	             */
	            MOUSEWHEEL : 'mousewheel',
	            /**
	             * 鼠标（手指）被移动，事件对象是：目标图形元素或空
	             * @type {string}
	             */
	            MOUSEMOVE : 'mousemove',
	            /**
	             * 鼠标移到某图形元素之上，事件对象是：目标图形元素
	             * @type {string}
	             */
	            MOUSEOVER : 'mouseover',
	            /**
	             * 鼠标从某图形元素移开，事件对象是：目标图形元素
	             * @type {string}
	             */
	            MOUSEOUT : 'mouseout',
	            /**
	             * 鼠标按钮（手指）被按下，事件对象是：目标图形元素或空
	             * @type {string}
	             */
	            MOUSEDOWN : 'mousedown',
	            /**
	             * 鼠标按键（手指）被松开，事件对象是：目标图形元素或空
	             * @type {string}
	             */
	            MOUSEUP : 'mouseup',
	            /**
	             * 全局离开，MOUSEOUT触发比较频繁，一次离开优化绑定
	             * @type {string}
	             */
	            GLOBALOUT : 'globalout',    // 

	            // 一次成功元素拖拽的行为事件过程是：
	            // dragstart > dragenter > dragover [> dragleave] > drop > dragend
	            /**
	             * 开始拖拽时触发，事件对象是：被拖拽图形元素
	             * @type {string}
	             */
	            DRAGSTART : 'dragstart',
	            /**
	             * 拖拽完毕时触发（在drop之后触发），事件对象是：被拖拽图形元素
	             * @type {string}
	             */
	            DRAGEND : 'dragend',
	            /**
	             * 拖拽图形元素进入目标图形元素时触发，事件对象是：目标图形元素
	             * @type {string}
	             */
	            DRAGENTER : 'dragenter',
	            /**
	             * 拖拽图形元素在目标图形元素上移动时触发，事件对象是：目标图形元素
	             * @type {string}
	             */
	            DRAGOVER : 'dragover',
	            /**
	             * 拖拽图形元素离开目标图形元素时触发，事件对象是：目标图形元素
	             * @type {string}
	             */
	            DRAGLEAVE : 'dragleave',
	            /**
	             * 拖拽图形元素放在目标图形元素内时触发，事件对象是：目标图形元素
	             * @type {string}
	             */
	            DROP : 'drop',
	            /**
	             * touch end - start < delay is click
	             * @type {number}
	             */
	            touchClickDelay : 300
	        },

	        elementClassName: 'zr-element',

	        // 是否异常捕获
	        catchBrushException: false,

	        /**
	         * debug日志选项：catchBrushException为true下有效
	         * 0 : 不生成debug数据，发布用
	         * 1 : 异常抛出，调试用
	         * 2 : 控制台输出，调试用
	         */
	        debugMode: 0,

	        // retina 屏幕优化
	        devicePixelRatio: Math.max(window.devicePixelRatio || 1, 1)
	    };
	    return config;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));



/***/ },
/* 464 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * zrender: 生成唯一id
	 *
	 * @author errorrik (errorrik@gmail.com)
	 */

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	        var idStart = 0x0907;

	        return function () {
	            return 'zrender__' + (idStart++);
	        };
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 465 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * Handler控制模块
	 * @module zrender/Handler
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *         errorrik (errorrik@gmail.com)
	 *
	 */
	// TODO mouseover 只触发一次
	// 目前的高亮因为每次都需要 addHover 所以不能只是开始的时候触发一次
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {

	        'use strict';

	        var config = __webpack_require__(463);
	        var env = __webpack_require__(460);
	        var eventTool = __webpack_require__(458);
	        var util = __webpack_require__(456);
	        var vec2 = __webpack_require__(466);
	        var mat2d = __webpack_require__(467);
	        var EVENT = config.EVENT;

	        var Eventful = __webpack_require__(459);

	        var domHandlerNames = [
	            'resize', 'click', 'dblclick',
	            'mousewheel', 'mousemove', 'mouseout', 'mouseup', 'mousedown',
	            'touchstart', 'touchend', 'touchmove'
	        ];

	        var isZRenderElement = function (event) {
	            // 暂时忽略 IE8-
	            if (window.G_vmlCanvasManager) {
	                return true;
	            }

	            event = event || window.event;

	            // 进入对象优先~
	            var target = event.toElement
	                          || event.relatedTarget
	                          || event.srcElement
	                          || event.target;

	            return target && target.className.match(config.elementClassName)
	        };

	        var domHandlers = {
	            /**
	             * 窗口大小改变响应函数
	             * @inner
	             * @param {Event} event
	             */
	            resize: function (event) {
	                event = event || window.event;
	                this._lastHover = null;
	                this._isMouseDown = 0;
	                
	                // 分发config.EVENT.RESIZE事件，global
	                this.dispatch(EVENT.RESIZE, event);
	            },

	            /**
	             * 点击响应函数
	             * @inner
	             * @param {Event} event
	             */
	            click: function (event, manually) {
	                if (! isZRenderElement(event) && ! manually) {
	                    return;
	                }

	                event = this._zrenderEventFixed(event);

	                // 分发config.EVENT.CLICK事件
	                var _lastHover = this._lastHover;
	                if ((_lastHover && _lastHover.clickable)
	                    || !_lastHover
	                ) {

	                    // 判断没有发生拖拽才触发click事件
	                    if (this._clickThreshold < 5) {
	                        this._dispatchAgency(_lastHover, EVENT.CLICK, event);
	                    }
	                }

	                this._mousemoveHandler(event);
	            },
	            
	            /**
	             * 双击响应函数
	             * @inner
	             * @param {Event} event
	             */
	            dblclick: function (event, manually) {
	                if (! isZRenderElement(event) && ! manually) {
	                    return;
	                }

	                event = event || window.event;
	                event = this._zrenderEventFixed(event);

	                // 分发config.EVENT.DBLCLICK事件
	                var _lastHover = this._lastHover;
	                if ((_lastHover && _lastHover.clickable)
	                    || !_lastHover
	                ) {

	                    // 判断没有发生拖拽才触发dblclick事件
	                    if (this._clickThreshold < 5) {
	                        this._dispatchAgency(_lastHover, EVENT.DBLCLICK, event);
	                    }
	                }

	                this._mousemoveHandler(event);
	            },
	            

	            /**
	             * 鼠标滚轮响应函数
	             * @inner
	             * @param {Event} event
	             */
	            mousewheel: function (event, manually) {
	                if (! isZRenderElement(event) && ! manually) {
	                    return;
	                }

	                event = this._zrenderEventFixed(event);

	                // http://www.sitepoint.com/html5-javascript-mouse-wheel/
	                // https://developer.mozilla.org/en-US/docs/DOM/DOM_event_reference/mousewheel
	                var delta = event.wheelDelta // Webkit
	                            || -event.detail; // Firefox
	                var scale = delta > 0 ? 1.1 : 1 / 1.1;

	                var needsRefresh = false;

	                var mouseX = this._mouseX;
	                var mouseY = this._mouseY;
	                this.painter.eachBuildinLayer(function (layer) {
	                    var pos = layer.position;
	                    if (layer.zoomable) {
	                        layer.__zoom = layer.__zoom || 1;
	                        var newZoom = layer.__zoom;
	                        newZoom *= scale;
	                        newZoom = Math.max(
	                            Math.min(layer.maxZoom, newZoom),
	                            layer.minZoom
	                        );
	                        scale = newZoom / layer.__zoom;
	                        layer.__zoom = newZoom;
	                        // Keep the mouse center when scaling
	                        pos[0] -= (mouseX - pos[0]) * (scale - 1);
	                        pos[1] -= (mouseY - pos[1]) * (scale - 1);
	                        layer.scale[0] *= scale;
	                        layer.scale[1] *= scale;
	                        layer.dirty = true;
	                        needsRefresh = true;

	                        // Prevent browser default scroll action 
	                        eventTool.stop(event);
	                    }
	                });
	                if (needsRefresh) {
	                    this.painter.refresh();
	                }

	                // 分发config.EVENT.MOUSEWHEEL事件
	                this._dispatchAgency(this._lastHover, EVENT.MOUSEWHEEL, event);
	                this._mousemoveHandler(event);
	            },

	            /**
	             * 鼠标（手指）移动响应函数
	             * @inner
	             * @param {Event} event
	             */
	            mousemove: function (event, manually) {
	                if (! isZRenderElement(event) && ! manually) {
	                    return;
	                }

	                if (this.painter.isLoading()) {
	                    return;
	                }

	                event = this._zrenderEventFixed(event);
	                this._lastX = this._mouseX;
	                this._lastY = this._mouseY;
	                this._mouseX = eventTool.getX(event);
	                this._mouseY = eventTool.getY(event);
	                var dx = this._mouseX - this._lastX;
	                var dy = this._mouseY - this._lastY;

	                // 可能出现config.EVENT.DRAGSTART事件
	                // 避免手抖点击误认为拖拽
	                // if (this._mouseX - this._lastX > 1 || this._mouseY - this._lastY > 1) {
	                this._processDragStart(event);
	                // }
	                this._hasfound = 0;
	                this._event = event;

	                this._iterateAndFindHover();

	                // 找到的在迭代函数里做了处理，没找到得在迭代完后处理
	                if (!this._hasfound) {
	                    // 过滤首次拖拽产生的mouseout和dragLeave
	                    if (!this._draggingTarget
	                        || (this._lastHover && this._lastHover != this._draggingTarget)
	                    ) {
	                        // 可能出现config.EVENT.MOUSEOUT事件
	                        this._processOutShape(event);

	                        // 可能出现config.EVENT.DRAGLEAVE事件
	                        this._processDragLeave(event);
	                    }

	                    this._lastHover = null;
	                    this.storage.delHover();
	                    this.painter.clearHover();
	                }

	                // set cursor for root element
	                var cursor = 'default';

	                // 如果存在拖拽中元素，被拖拽的图形元素最后addHover
	                if (this._draggingTarget) {
	                    this.storage.drift(this._draggingTarget.id, dx, dy);
	                    this._draggingTarget.modSelf();
	                    this.storage.addHover(this._draggingTarget);

	                    // 拖拽不触发click事件
	                    this._clickThreshold++;
	                }
	                else if (this._isMouseDown) {
	                    var needsRefresh = false;
	                    // Layer dragging
	                    this.painter.eachBuildinLayer(function (layer) {
	                        if (layer.panable) {
	                            // PENDING
	                            cursor = 'move';
	                            // Keep the mouse center when scaling
	                            layer.position[0] += dx;
	                            layer.position[1] += dy;
	                            needsRefresh = true;
	                            layer.dirty = true;
	                        }
	                    });
	                    if (needsRefresh) {
	                        this.painter.refresh();
	                    }
	                }

	                if (this._draggingTarget || (this._hasfound && this._lastHover.draggable)) {
	                    cursor = 'move';
	                }
	                else if (this._hasfound && this._lastHover.clickable) {
	                    cursor = 'pointer';
	                }
	                this.root.style.cursor = cursor;

	                // 分发config.EVENT.MOUSEMOVE事件
	                this._dispatchAgency(this._lastHover, EVENT.MOUSEMOVE, event);

	                if (this._draggingTarget || this._hasfound || this.storage.hasHoverShape()) {
	                    this.painter.refreshHover();
	                }
	            },

	            /**
	             * 鼠标（手指）离开响应函数
	             * @inner
	             * @param {Event} event
	             */
	            mouseout: function (event, manually) {
	                if (! isZRenderElement(event) && ! manually) {
	                    return;
	                }

	                event = this._zrenderEventFixed(event);

	                var element = event.toElement || event.relatedTarget;
	                if (element != this.root) {
	                    while (element && element.nodeType != 9) {
	                        // 忽略包含在root中的dom引起的mouseOut
	                        if (element == this.root) {
	                            this._mousemoveHandler(event);
	                            return;
	                        }

	                        element = element.parentNode;
	                    }
	                }

	                event.zrenderX = this._lastX;
	                event.zrenderY = this._lastY;
	                this.root.style.cursor = 'default';
	                this._isMouseDown = 0;

	                this._processOutShape(event);
	                this._processDrop(event);
	                this._processDragEnd(event);
	                if (!this.painter.isLoading()) {
	                    this.painter.refreshHover();
	                }
	                
	                this.dispatch(EVENT.GLOBALOUT, event);
	            },

	            /**
	             * 鼠标（手指）按下响应函数
	             * @inner
	             * @param {Event} event
	             */
	            mousedown: function (event, manually) {
	                if (! isZRenderElement(event) && ! manually) {
	                    return;
	                }

	                // 重置 clickThreshold
	                this._clickThreshold = 0;

	                if (this._lastDownButton == 2) {
	                    this._lastDownButton = event.button;
	                    this._mouseDownTarget = null;
	                    // 仅作为关闭右键菜单使用
	                    return;
	                }

	                this._lastMouseDownMoment = new Date();
	                event = this._zrenderEventFixed(event);
	                this._isMouseDown = 1;

	                // 分发config.EVENT.MOUSEDOWN事件
	                this._mouseDownTarget = this._lastHover;
	                this._dispatchAgency(this._lastHover, EVENT.MOUSEDOWN, event);
	                this._lastDownButton = event.button;
	            },

	            /**
	             * 鼠标（手指）抬起响应函数
	             * @inner
	             * @param {Event} event
	             */
	            mouseup: function (event, manually) {
	                if (! isZRenderElement(event) && ! manually) {
	                    return;
	                }

	                event = this._zrenderEventFixed(event);
	                this.root.style.cursor = 'default';
	                this._isMouseDown = 0;
	                this._mouseDownTarget = null;

	                // 分发config.EVENT.MOUSEUP事件
	                this._dispatchAgency(this._lastHover, EVENT.MOUSEUP, event);
	                this._processDrop(event);
	                this._processDragEnd(event);
	            },

	            /**
	             * Touch开始响应函数
	             * @inner
	             * @param {Event} event
	             */
	            touchstart: function (event, manually) {
	                if (! isZRenderElement(event) && ! manually) {
	                    return;
	                }

	                // eventTool.stop(event);// 阻止浏览器默认事件，重要
	                event = this._zrenderEventFixed(event, true);
	                this._lastTouchMoment = new Date();

	                // 平板补充一次findHover
	                this._mobileFindFixed(event);
	                this._mousedownHandler(event);
	            },

	            /**
	             * Touch移动响应函数
	             * @inner
	             * @param {Event} event
	             */
	            touchmove: function (event, manually) {
	                if (! isZRenderElement(event) && ! manually) {
	                    return;
	                }

	                event = this._zrenderEventFixed(event, true);
	                this._mousemoveHandler(event);
	                if (this._isDragging) {
	                    eventTool.stop(event);// 阻止浏览器默认事件，重要
	                }
	            },

	            /**
	             * Touch结束响应函数
	             * @inner
	             * @param {Event} event
	             */
	            touchend: function (event, manually) {
	                if (! isZRenderElement(event) && ! manually) {
	                    return;
	                }

	                // eventTool.stop(event);// 阻止浏览器默认事件，重要
	                event = this._zrenderEventFixed(event, true);
	                this._mouseupHandler(event);
	                
	                var now = new Date();
	                if (now - this._lastTouchMoment < EVENT.touchClickDelay) {
	                    this._mobileFindFixed(event);
	                    this._clickHandler(event);
	                    if (now - this._lastClickMoment < EVENT.touchClickDelay / 2) {
	                        this._dblclickHandler(event);
	                        if (this._lastHover && this._lastHover.clickable) {
	                            eventTool.stop(event);// 阻止浏览器默认事件，重要
	                        }
	                    }
	                    this._lastClickMoment = now;
	                }
	                this.painter.clearHover();
	            }
	        };

	        /**
	         * bind一个参数的function
	         * 
	         * @inner
	         * @param {Function} handler 要bind的function
	         * @param {Object} context 运行时this环境
	         * @return {Function}
	         */
	        // function bind1Arg(handler, context) {
	        //     return function (e) {
	        //         return handler.call(context, e);
	        //     };
	        // }
	        function bind2Arg(handler, context) {
	            return function (arg1, arg2) {
	                return handler.call(context, arg1, arg2);
	            };
	        }

	        function bind3Arg(handler, context) {
	            return function (arg1, arg2, arg3) {
	                return handler.call(context, arg1, arg2, arg3);
	            };
	        }
	        /**
	         * 为控制类实例初始化dom 事件处理函数
	         * 
	         * @inner
	         * @param {module:zrender/Handler} instance 控制类实例
	         */
	        function initDomHandler(instance) {
	            var len = domHandlerNames.length;
	            while (len--) {
	                var name = domHandlerNames[len];
	                instance['_' + name + 'Handler'] = bind2Arg(domHandlers[name], instance);
	            }
	        }

	        /**
	         * @alias module:zrender/Handler
	         * @constructor
	         * @extends module:zrender/mixin/Eventful
	         * @param {HTMLElement} root 绘图区域
	         * @param {module:zrender/Storage} storage Storage实例
	         * @param {module:zrender/Painter} painter Painter实例
	         */
	        var Handler = function(root, storage, painter) {
	            // 添加事件分发器特性
	            Eventful.call(this);

	            this.root = root;
	            this.storage = storage;
	            this.painter = painter;

	            // 各种事件标识的私有变量
	            // this._hasfound = false;              //是否找到hover图形元素
	            // this._lastHover = null;              //最后一个hover图形元素
	            // this._mouseDownTarget = null;
	            // this._draggingTarget = null;         //当前被拖拽的图形元素
	            // this._isMouseDown = false;
	            // this._isDragging = false;
	            // this._lastMouseDownMoment;
	            // this._lastTouchMoment;
	            // this._lastDownButton;

	            this._lastX = 
	            this._lastY = 
	            this._mouseX = 
	            this._mouseY = 0;

	            this._findHover = bind3Arg(findHover, this);
	            this._domHover = painter.getDomHover();
	            initDomHandler(this);

	            // 初始化，事件绑定，支持的所有事件都由如下原生事件计算得来
	            if (window.addEventListener) {
	                window.addEventListener('resize', this._resizeHandler);
	                
	                if (env.os.tablet || env.os.phone) {
	                    // mobile支持
	                    root.addEventListener('touchstart', this._touchstartHandler);
	                    root.addEventListener('touchmove', this._touchmoveHandler);
	                    root.addEventListener('touchend', this._touchendHandler);
	                }
	                else {
	                    // mobile的click/move/up/down自己模拟
	                    root.addEventListener('click', this._clickHandler);
	                    root.addEventListener('dblclick', this._dblclickHandler);
	                    root.addEventListener('mousewheel', this._mousewheelHandler);
	                    root.addEventListener('mousemove', this._mousemoveHandler);
	                    root.addEventListener('mousedown', this._mousedownHandler);
	                    root.addEventListener('mouseup', this._mouseupHandler);
	                } 
	                root.addEventListener('DOMMouseScroll', this._mousewheelHandler);
	                root.addEventListener('mouseout', this._mouseoutHandler);
	            }
	            else {
	                window.attachEvent('onresize', this._resizeHandler);

	                root.attachEvent('onclick', this._clickHandler);
	                //root.attachEvent('ondblclick ', this._dblclickHandler);
	                root.ondblclick = this._dblclickHandler;
	                root.attachEvent('onmousewheel', this._mousewheelHandler);
	                root.attachEvent('onmousemove', this._mousemoveHandler);
	                root.attachEvent('onmouseout', this._mouseoutHandler);
	                root.attachEvent('onmousedown', this._mousedownHandler);
	                root.attachEvent('onmouseup', this._mouseupHandler);
	            }
	        };

	        /**
	         * 自定义事件绑定
	         * @param {string} eventName 事件名称，resize，hover，drag，etc~
	         * @param {Function} handler 响应函数
	         * @param {Object} [context] 响应函数
	         */
	        Handler.prototype.on = function (eventName, handler, context) {
	            this.bind(eventName, handler, context);
	            return this;
	        };

	        /**
	         * 自定义事件解绑
	         * @param {string} eventName 事件名称，resize，hover，drag，etc~
	         * @param {Function} handler 响应函数
	         */
	        Handler.prototype.un = function (eventName, handler) {
	            this.unbind(eventName, handler);
	            return this;
	        };

	        /**
	         * 事件触发
	         * @param {string} eventName 事件名称，resize，hover，drag，etc~
	         * @param {event=} eventArgs event dom事件对象
	         */
	        Handler.prototype.trigger = function (eventName, eventArgs) {
	            switch (eventName) {
	                case EVENT.RESIZE:
	                case EVENT.CLICK:
	                case EVENT.DBLCLICK:
	                case EVENT.MOUSEWHEEL:
	                case EVENT.MOUSEMOVE:
	                case EVENT.MOUSEDOWN:
	                case EVENT.MOUSEUP:
	                case EVENT.MOUSEOUT:
	                    this['_' + eventName + 'Handler'](eventArgs, true);
	                    break;
	            }
	        };

	        /**
	         * 释放，解绑所有事件
	         */
	        Handler.prototype.dispose = function () {
	            var root = this.root;

	            if (window.removeEventListener) {
	                window.removeEventListener('resize', this._resizeHandler);

	                if (env.os.tablet || env.os.phone) {
	                    // mobile支持
	                    root.removeEventListener('touchstart', this._touchstartHandler);
	                    root.removeEventListener('touchmove', this._touchmoveHandler);
	                    root.removeEventListener('touchend', this._touchendHandler);
	                }
	                else {
	                    // mobile的click自己模拟
	                    root.removeEventListener('click', this._clickHandler);
	                    root.removeEventListener('dblclick', this._dblclickHandler);
	                    root.removeEventListener('mousewheel', this._mousewheelHandler);
	                    root.removeEventListener('mousemove', this._mousemoveHandler);
	                    root.removeEventListener('mousedown', this._mousedownHandler);
	                    root.removeEventListener('mouseup', this._mouseupHandler);
	                }
	                root.removeEventListener('DOMMouseScroll', this._mousewheelHandler);
	                root.removeEventListener('mouseout', this._mouseoutHandler);
	            }
	            else {
	                window.detachEvent('onresize', this._resizeHandler);

	                root.detachEvent('onclick', this._clickHandler);
	                root.detachEvent('dblclick', this._dblclickHandler);
	                root.detachEvent('onmousewheel', this._mousewheelHandler);
	                root.detachEvent('onmousemove', this._mousemoveHandler);
	                root.detachEvent('onmouseout', this._mouseoutHandler);
	                root.detachEvent('onmousedown', this._mousedownHandler);
	                root.detachEvent('onmouseup', this._mouseupHandler);
	            }

	            this.root =
	            this._domHover =
	            this.storage =
	            this.painter = null;
	            
	            this.un();
	        };

	        /**
	         * 拖拽开始
	         * 
	         * @private
	         * @param {Object} event 事件对象
	         */
	        Handler.prototype._processDragStart = function (event) {
	            var _lastHover = this._lastHover;

	            if (this._isMouseDown
	                && _lastHover
	                && _lastHover.draggable
	                && !this._draggingTarget
	                && this._mouseDownTarget == _lastHover
	            ) {
	                // 拖拽点击生效时长阀门，某些场景需要降低拖拽敏感度
	                if (_lastHover.dragEnableTime && 
	                    new Date() - this._lastMouseDownMoment < _lastHover.dragEnableTime
	                ) {
	                    return;
	                }

	                var _draggingTarget = _lastHover;
	                this._draggingTarget = _draggingTarget;
	                this._isDragging = 1;

	                _draggingTarget.invisible = true;
	                this.storage.mod(_draggingTarget.id);

	                // 分发config.EVENT.DRAGSTART事件
	                this._dispatchAgency(
	                    _draggingTarget,
	                    EVENT.DRAGSTART,
	                    event
	                );
	                this.painter.refresh();
	            }
	        };

	        /**
	         * 拖拽进入目标元素
	         * 
	         * @private
	         * @param {Object} event 事件对象
	         */
	        Handler.prototype._processDragEnter = function (event) {
	            if (this._draggingTarget) {
	                // 分发config.EVENT.DRAGENTER事件
	                this._dispatchAgency(
	                    this._lastHover,
	                    EVENT.DRAGENTER,
	                    event,
	                    this._draggingTarget
	                );
	            }
	        };

	        /**
	         * 拖拽在目标元素上移动
	         * 
	         * @private
	         * @param {Object} event 事件对象
	         */
	        Handler.prototype._processDragOver = function (event) {
	            if (this._draggingTarget) {
	                // 分发config.EVENT.DRAGOVER事件
	                this._dispatchAgency(
	                    this._lastHover,
	                    EVENT.DRAGOVER,
	                    event,
	                    this._draggingTarget
	                );
	            }
	        };

	        /**
	         * 拖拽离开目标元素
	         * 
	         * @private
	         * @param {Object} event 事件对象
	         */
	        Handler.prototype._processDragLeave = function (event) {
	            if (this._draggingTarget) {
	                // 分发config.EVENT.DRAGLEAVE事件
	                this._dispatchAgency(
	                    this._lastHover,
	                    EVENT.DRAGLEAVE,
	                    event,
	                    this._draggingTarget
	                );
	            }
	        };

	        /**
	         * 拖拽在目标元素上完成
	         * 
	         * @private
	         * @param {Object} event 事件对象
	         */
	        Handler.prototype._processDrop = function (event) {
	            if (this._draggingTarget) {
	                this._draggingTarget.invisible = false;
	                this.storage.mod(this._draggingTarget.id);
	                this.painter.refresh();

	                // 分发config.EVENT.DROP事件
	                this._dispatchAgency(
	                    this._lastHover,
	                    EVENT.DROP,
	                    event,
	                    this._draggingTarget
	                );
	            }
	        };

	        /**
	         * 拖拽结束
	         * 
	         * @private
	         * @param {Object} event 事件对象
	         */
	        Handler.prototype._processDragEnd = function (event) {
	            if (this._draggingTarget) {
	                // 分发config.EVENT.DRAGEND事件
	                this._dispatchAgency(
	                    this._draggingTarget,
	                    EVENT.DRAGEND,
	                    event
	                );

	                this._lastHover = null;
	            }

	            this._isDragging = 0;
	            this._draggingTarget = null;
	        };

	        /**
	         * 鼠标在某个图形元素上移动
	         * 
	         * @private
	         * @param {Object} event 事件对象
	         */
	        Handler.prototype._processOverShape = function (event) {
	            // 分发config.EVENT.MOUSEOVER事件
	            this._dispatchAgency(this._lastHover, EVENT.MOUSEOVER, event);
	        };

	        /**
	         * 鼠标离开某个图形元素
	         * 
	         * @private
	         * @param {Object} event 事件对象
	         */
	        Handler.prototype._processOutShape = function (event) {
	            // 分发config.EVENT.MOUSEOUT事件
	            this._dispatchAgency(this._lastHover, EVENT.MOUSEOUT, event);
	        };

	        /**
	         * 事件分发代理
	         * 
	         * @private
	         * @param {Object} targetShape 目标图形元素
	         * @param {string} eventName 事件名称
	         * @param {Object} event 事件对象
	         * @param {Object=} draggedShape 拖拽事件特有，当前被拖拽图形元素
	         */
	        Handler.prototype._dispatchAgency = function (targetShape, eventName, event, draggedShape) {
	            var eventHandler = 'on' + eventName;
	            var eventPacket = {
	                type : eventName,
	                event : event,
	                target : targetShape,
	                cancelBubble: false
	            };

	            var el = targetShape;

	            if (draggedShape) {
	                eventPacket.dragged = draggedShape;
	            }

	            while (el) {
	                el[eventHandler] 
	                && (eventPacket.cancelBubble = el[eventHandler](eventPacket));
	                el.dispatch(eventName, eventPacket);

	                el = el.parent;
	                
	                if (eventPacket.cancelBubble) {
	                    break;
	                }
	            }

	            if (targetShape) {
	                // 冒泡到顶级 zrender 对象
	                if (!eventPacket.cancelBubble) {
	                    this.dispatch(eventName, eventPacket);
	                }
	            }
	            else if (!draggedShape) {
	                // 无hover目标，无拖拽对象，原生事件分发
	                var eveObj = {
	                    type: eventName,
	                    event: event
	                };
	                this.dispatch(eventName, eveObj);
	                // 分发事件到用户自定义层
	                this.painter.eachOtherLayer(function (layer) {
	                    if (typeof(layer[eventHandler]) == 'function') {
	                        layer[eventHandler](eveObj);
	                    }
	                    if (layer.dispatch) {
	                        layer.dispatch(eventName, eveObj);
	                    }
	                });
	            }
	        };

	        /**
	         * 迭代寻找hover shape
	         * @private
	         * @method
	         */
	        Handler.prototype._iterateAndFindHover = (function() {
	            var invTransform = mat2d.create();
	            return function() {
	                var list = this.storage.getShapeList();
	                var currentZLevel;
	                var currentLayer;
	                var tmp = [ 0, 0 ];
	                for (var i = list.length - 1; i >= 0 ; i--) {
	                    var shape = list[i];

	                    if (currentZLevel !== shape.zlevel) {
	                        currentLayer = this.painter.getLayer(shape.zlevel, currentLayer);
	                        tmp[0] = this._mouseX;
	                        tmp[1] = this._mouseY;

	                        if (currentLayer.needTransform) {
	                            mat2d.invert(invTransform, currentLayer.transform);
	                            vec2.applyTransform(tmp, tmp, invTransform);
	                        }
	                    }

	                    if (this._findHover(shape, tmp[0], tmp[1])) {
	                        break;
	                    }
	                }
	            };
	        })();
	        
	        // touch指尖错觉的尝试偏移量配置
	        var MOBILE_TOUCH_OFFSETS = [
	            { x: 10 },
	            { x: -20 },
	            { x: 10, y: 10 },
	            { y: -20 }
	        ];

	        // touch有指尖错觉，四向尝试，让touch上的点击更好触发事件
	        Handler.prototype._mobileFindFixed = function (event) {
	            this._lastHover = null;
	            this._mouseX = event.zrenderX;
	            this._mouseY = event.zrenderY;

	            this._event = event;

	            this._iterateAndFindHover();
	            for (var i = 0; !this._lastHover && i < MOBILE_TOUCH_OFFSETS.length ; i++) {
	                var offset = MOBILE_TOUCH_OFFSETS[ i ];
	                offset.x && (this._mouseX += offset.x);
	                offset.y && (this._mouseY += offset.y);

	                this._iterateAndFindHover();
	            }

	            if (this._lastHover) {
	                event.zrenderX = this._mouseX;
	                event.zrenderY = this._mouseY;
	            }
	        };

	        /**
	         * 迭代函数，查找hover到的图形元素并即时做些事件分发
	         * 
	         * @inner
	         * @param {Object} shape 图形元素
	         * @param {number} x
	         * @param {number} y
	         */
	        function findHover(shape, x, y) {
	            if (
	                (this._draggingTarget && this._draggingTarget.id == shape.id) // 迭代到当前拖拽的图形上
	                || shape.isSilent() // 打酱油的路过，啥都不响应的shape~
	            ) {
	                return false;
	            }

	            var event = this._event;
	            if (shape.isCover(x, y)) {
	                if (shape.hoverable) {
	                    this.storage.addHover(shape);
	                }
	                // 查找是否在 clipShape 中
	                var p = shape.parent;
	                while (p) {
	                    if (p.clipShape && !p.clipShape.isCover(this._mouseX, this._mouseY))  {
	                        // 已经被祖先 clip 掉了
	                        return false;
	                    }
	                    p = p.parent;
	                }

	                if (this._lastHover != shape) {
	                    this._processOutShape(event);

	                    // 可能出现config.EVENT.DRAGLEAVE事件
	                    this._processDragLeave(event);

	                    this._lastHover = shape;

	                    // 可能出现config.EVENT.DRAGENTER事件
	                    this._processDragEnter(event);
	                }

	                this._processOverShape(event);

	                // 可能出现config.EVENT.DRAGOVER
	                this._processDragOver(event);

	                this._hasfound = 1;

	                return true;    // 找到则中断迭代查找
	            }

	            return false;
	        }

	        /**
	         * 如果存在第三方嵌入的一些dom触发的事件，或touch事件，需要转换一下事件坐标
	         * 
	         * @private
	         */
	        Handler.prototype._zrenderEventFixed = function (event, isTouch) {
	            if (event.zrenderFixed) {
	                return event;
	            }

	            if (!isTouch) {
	                event = event || window.event;
	                // 进入对象优先~
	                var target = event.toElement
	                              || event.relatedTarget
	                              || event.srcElement
	                              || event.target;

	                if (target && target != this._domHover) {
	                    event.zrenderX = (typeof event.offsetX != 'undefined'
	                                        ? event.offsetX
	                                        : event.layerX)
	                                      + target.offsetLeft;
	                    event.zrenderY = (typeof event.offsetY != 'undefined'
	                                        ? event.offsetY
	                                        : event.layerY)
	                                      + target.offsetTop;
	                }
	            }
	            else {
	                var touch = event.type != 'touchend'
	                                ? event.targetTouches[0]
	                                : event.changedTouches[0];
	                if (touch) {
	                    var rBounding = this.painter._domRoot.getBoundingClientRect();
	                    // touch事件坐标是全屏的~
	                    event.zrenderX = touch.clientX - rBounding.left;
	                    event.zrenderY = touch.clientY - rBounding.top;
	                }
	            }

	            event.zrenderFixed = 1;
	            return event;
	        };

	        util.merge(Handler.prototype, Eventful.prototype, true);

	        return Handler;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 466 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	        var ArrayCtor = typeof Float32Array === 'undefined'
	            ? Array
	            : Float32Array;

	        /**
	         * @typedef {Float32Array|Array.<number>} Vector2
	         */
	        /**
	         * 二维向量类
	         * @exports zrender/tool/vector
	         */
	        var vector = {
	            /**
	             * 创建一个向量
	             * @param {number} [x=0]
	             * @param {number} [y=0]
	             * @return {Vector2}
	             */
	            create: function (x, y) {
	                var out = new ArrayCtor(2);
	                out[0] = x || 0;
	                out[1] = y || 0;
	                return out;
	            },

	            /**
	             * 复制向量数据
	             * @param {Vector2} out
	             * @param {Vector2} v
	             * @return {Vector2}
	             */
	            copy: function (out, v) {
	                out[0] = v[0];
	                out[1] = v[1];
	                return out;
	            },

	            /**
	             * 克隆一个向量
	             * @param {Vector2} v
	             * @return {Vector2}
	             */
	            clone: function (v) {
	                var out = new ArrayCtor(2);
	                out[0] = v[0];
	                out[1] = v[1];
	                return out;
	            },

	            /**
	             * 设置向量的两个项
	             * @param {Vector2} out
	             * @param {number} a
	             * @param {number} b
	             * @return {Vector2} 结果
	             */
	            set: function (out, a, b) {
	                out[0] = a;
	                out[1] = b;
	                return out;
	            },

	            /**
	             * 向量相加
	             * @param {Vector2} out
	             * @param {Vector2} v1
	             * @param {Vector2} v2
	             */
	            add: function (out, v1, v2) {
	                out[0] = v1[0] + v2[0];
	                out[1] = v1[1] + v2[1];
	                return out;
	            },

	            /**
	             * 向量缩放后相加
	             * @param {Vector2} out
	             * @param {Vector2} v1
	             * @param {Vector2} v2
	             * @param {number} a
	             */
	            scaleAndAdd: function (out, v1, v2, a) {
	                out[0] = v1[0] + v2[0] * a;
	                out[1] = v1[1] + v2[1] * a;
	                return out;
	            },

	            /**
	             * 向量相减
	             * @param {Vector2} out
	             * @param {Vector2} v1
	             * @param {Vector2} v2
	             */
	            sub: function (out, v1, v2) {
	                out[0] = v1[0] - v2[0];
	                out[1] = v1[1] - v2[1];
	                return out;
	            },

	            /**
	             * 向量长度
	             * @param {Vector2} v
	             * @return {number}
	             */
	            len: function (v) {
	                return Math.sqrt(this.lenSquare(v));
	            },

	            /**
	             * 向量长度平方
	             * @param {Vector2} v
	             * @return {number}
	             */
	            lenSquare: function (v) {
	                return v[0] * v[0] + v[1] * v[1];
	            },

	            /**
	             * 向量乘法
	             * @param {Vector2} out
	             * @param {Vector2} v1
	             * @param {Vector2} v2
	             */
	            mul: function (out, v1, v2) {
	                out[0] = v1[0] * v2[0];
	                out[1] = v1[1] * v2[1];
	                return out;
	            },

	            /**
	             * 向量除法
	             * @param {Vector2} out
	             * @param {Vector2} v1
	             * @param {Vector2} v2
	             */
	            div: function (out, v1, v2) {
	                out[0] = v1[0] / v2[0];
	                out[1] = v1[1] / v2[1];
	                return out;
	            },

	            /**
	             * 向量点乘
	             * @param {Vector2} v1
	             * @param {Vector2} v2
	             * @return {number}
	             */
	            dot: function (v1, v2) {
	                return v1[0] * v2[0] + v1[1] * v2[1];
	            },

	            /**
	             * 向量缩放
	             * @param {Vector2} out
	             * @param {Vector2} v
	             * @param {number} s
	             */
	            scale: function (out, v, s) {
	                out[0] = v[0] * s;
	                out[1] = v[1] * s;
	                return out;
	            },

	            /**
	             * 向量归一化
	             * @param {Vector2} out
	             * @param {Vector2} v
	             */
	            normalize: function (out, v) {
	                var d = vector.len(v);
	                if (d === 0) {
	                    out[0] = 0;
	                    out[1] = 0;
	                }
	                else {
	                    out[0] = v[0] / d;
	                    out[1] = v[1] / d;
	                }
	                return out;
	            },

	            /**
	             * 计算向量间距离
	             * @param {Vector2} v1
	             * @param {Vector2} v2
	             * @return {number}
	             */
	            distance: function (v1, v2) {
	                return Math.sqrt(
	                    (v1[0] - v2[0]) * (v1[0] - v2[0])
	                    + (v1[1] - v2[1]) * (v1[1] - v2[1])
	                );
	            },

	            /**
	             * 向量距离平方
	             * @param {Vector2} v1
	             * @param {Vector2} v2
	             * @return {number}
	             */
	            distanceSquare: function (v1, v2) {
	                return (v1[0] - v2[0]) * (v1[0] - v2[0])
	                    + (v1[1] - v2[1]) * (v1[1] - v2[1]);
	            },

	            /**
	             * 求负向量
	             * @param {Vector2} out
	             * @param {Vector2} v
	             */
	            negate: function (out, v) {
	                out[0] = -v[0];
	                out[1] = -v[1];
	                return out;
	            },

	            /**
	             * 插值两个点
	             * @param {Vector2} out
	             * @param {Vector2} v1
	             * @param {Vector2} v2
	             * @param {number} t
	             */
	            lerp: function (out, v1, v2, t) {
	                // var ax = v1[0];
	                // var ay = v1[1];
	                out[0] = v1[0] + t * (v2[0] - v1[0]);
	                out[1] = v1[1] + t * (v2[1] - v1[1]);
	                return out;
	            },
	            
	            /**
	             * 矩阵左乘向量
	             * @param {Vector2} out
	             * @param {Vector2} v
	             * @param {Vector2} m
	             */
	            applyTransform: function (out, v, m) {
	                var x = v[0];
	                var y = v[1];
	                out[0] = m[0] * x + m[2] * y + m[4];
	                out[1] = m[1] * x + m[3] * y + m[5];
	                return out;
	            },
	            /**
	             * 求两个向量最小值
	             * @param  {Vector2} out
	             * @param  {Vector2} v1
	             * @param  {Vector2} v2
	             */
	            min: function (out, v1, v2) {
	                out[0] = Math.min(v1[0], v2[0]);
	                out[1] = Math.min(v1[1], v2[1]);
	                return out;
	            },
	            /**
	             * 求两个向量最大值
	             * @param  {Vector2} out
	             * @param  {Vector2} v1
	             * @param  {Vector2} v2
	             */
	            max: function (out, v1, v2) {
	                out[0] = Math.max(v1[0], v2[0]);
	                out[1] = Math.max(v1[1], v2[1]);
	                return out;
	            }
	        };

	        vector.length = vector.len;
	        vector.lengthSquare = vector.lenSquare;
	        vector.dist = vector.distance;
	        vector.distSquare = vector.distanceSquare;
	        
	        return vector;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 467 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {

	        var ArrayCtor = typeof Float32Array === 'undefined'
	            ? Array
	            : Float32Array;
	        /**
	         * 3x2矩阵操作类
	         * @exports zrender/tool/matrix
	         */
	        var matrix = {
	            /**
	             * 创建一个单位矩阵
	             * @return {Float32Array|Array.<number>}
	             */
	            create : function() {
	                var out = new ArrayCtor(6);
	                matrix.identity(out);
	                
	                return out;
	            },
	            /**
	             * 设置矩阵为单位矩阵
	             * @param {Float32Array|Array.<number>} out
	             */
	            identity : function(out) {
	                out[0] = 1;
	                out[1] = 0;
	                out[2] = 0;
	                out[3] = 1;
	                out[4] = 0;
	                out[5] = 0;
	                return out;
	            },
	            /**
	             * 复制矩阵
	             * @param {Float32Array|Array.<number>} out
	             * @param {Float32Array|Array.<number>} m
	             */
	            copy: function(out, m) {
	                out[0] = m[0];
	                out[1] = m[1];
	                out[2] = m[2];
	                out[3] = m[3];
	                out[4] = m[4];
	                out[5] = m[5];
	                return out;
	            },
	            /**
	             * 矩阵相乘
	             * @param {Float32Array|Array.<number>} out
	             * @param {Float32Array|Array.<number>} m1
	             * @param {Float32Array|Array.<number>} m2
	             */
	            mul : function (out, m1, m2) {
	                out[0] = m1[0] * m2[0] + m1[2] * m2[1];
	                out[1] = m1[1] * m2[0] + m1[3] * m2[1];
	                out[2] = m1[0] * m2[2] + m1[2] * m2[3];
	                out[3] = m1[1] * m2[2] + m1[3] * m2[3];
	                out[4] = m1[0] * m2[4] + m1[2] * m2[5] + m1[4];
	                out[5] = m1[1] * m2[4] + m1[3] * m2[5] + m1[5];
	                return out;
	            },
	            /**
	             * 平移变换
	             * @param {Float32Array|Array.<number>} out
	             * @param {Float32Array|Array.<number>} a
	             * @param {Float32Array|Array.<number>} v
	             */
	            translate : function(out, a, v) {
	                out[0] = a[0];
	                out[1] = a[1];
	                out[2] = a[2];
	                out[3] = a[3];
	                out[4] = a[4] + v[0];
	                out[5] = a[5] + v[1];
	                return out;
	            },
	            /**
	             * 旋转变换
	             * @param {Float32Array|Array.<number>} out
	             * @param {Float32Array|Array.<number>} a
	             * @param {number} rad
	             */
	            rotate : function(out, a, rad) {
	                var aa = a[0];
	                var ac = a[2];
	                var atx = a[4];
	                var ab = a[1];
	                var ad = a[3];
	                var aty = a[5];
	                var st = Math.sin(rad);
	                var ct = Math.cos(rad);

	                out[0] = aa * ct + ab * st;
	                out[1] = -aa * st + ab * ct;
	                out[2] = ac * ct + ad * st;
	                out[3] = -ac * st + ct * ad;
	                out[4] = ct * atx + st * aty;
	                out[5] = ct * aty - st * atx;
	                return out;
	            },
	            /**
	             * 缩放变换
	             * @param {Float32Array|Array.<number>} out
	             * @param {Float32Array|Array.<number>} a
	             * @param {Float32Array|Array.<number>} v
	             */
	            scale : function(out, a, v) {
	                var vx = v[0];
	                var vy = v[1];
	                out[0] = a[0] * vx;
	                out[1] = a[1] * vy;
	                out[2] = a[2] * vx;
	                out[3] = a[3] * vy;
	                out[4] = a[4] * vx;
	                out[5] = a[5] * vy;
	                return out;
	            },
	            /**
	             * 求逆矩阵
	             * @param {Float32Array|Array.<number>} out
	             * @param {Float32Array|Array.<number>} a
	             */
	            invert : function(out, a) {
	            
	                var aa = a[0];
	                var ac = a[2];
	                var atx = a[4];
	                var ab = a[1];
	                var ad = a[3];
	                var aty = a[5];

	                var det = aa * ad - ab * ac;
	                if (!det) {
	                    return null;
	                }
	                det = 1.0 / det;

	                out[0] = ad * det;
	                out[1] = -ab * det;
	                out[2] = -ac * det;
	                out[3] = aa * det;
	                out[4] = (ac * aty - ad * atx) * det;
	                out[5] = (ab * atx - aa * aty) * det;
	                return out;
	            }
	        };

	        return matrix;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 468 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * Painter绘图模块
	 * @module zrender/Painter
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *         errorrik (errorrik@gmail.com)
	 *         pissang (https://www.github.com/pissang)
	 */
	 !(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	        'use strict';

	        var config = __webpack_require__(463);
	        var util = __webpack_require__(456);
	        // var vec2 = require('./tool/vector');
	        var log = __webpack_require__(462);
	        // var matrix = require('./tool/matrix');
	        var BaseLoadingEffect = __webpack_require__(469);

	        var Layer = __webpack_require__(477);

	        // 返回false的方法，用于避免页面被选中
	        function returnFalse() {
	            return false;
	        }

	        // 什么都不干的空方法
	        function doNothing() {}

	        function isLayerValid(layer) {
	            if (!layer) {
	                return false;
	            }
	            
	            if (layer.isBuildin) {
	                return true;
	            }

	            if (typeof(layer.resize) !== 'function'
	                || typeof(layer.refresh) !== 'function'
	            ) {
	                return false;
	            }

	            return true;
	        }

	        /**
	         * @alias module:zrender/Painter
	         * @constructor
	         * @param {HTMLElement} root 绘图容器
	         * @param {module:zrender/Storage} storage
	         */
	        var Painter = function (root, storage) {
	            /**
	             * 绘图容器
	             * @type {HTMLElement}
	             */
	            this.root = root;
	            root.style['-webkit-tap-highlight-color'] = 'transparent';
	            root.style['-webkit-user-select'] = 'none';
	            root.style['user-select'] = 'none';
	            root.style['-webkit-touch-callout'] = 'none';

	            /**
	             * @type {module:zrender/Storage}
	             */
	            this.storage = storage;

	            root.innerHTML = '';
	            this._width = this._getWidth(); // 宽，缓存记录
	            this._height = this._getHeight(); // 高，缓存记录

	            var domRoot = document.createElement('div');
	            this._domRoot = domRoot;

	            // domRoot.onselectstart = returnFalse; // 避免页面选中的尴尬
	            domRoot.style.position = 'relative';
	            domRoot.style.overflow = 'hidden';
	            domRoot.style.width = this._width + 'px';
	            domRoot.style.height = this._height + 'px';
	            root.appendChild(domRoot);

	            this._layers = {};

	            this._zlevelList = [];

	            this._layerConfig = {};

	            this._loadingEffect = new BaseLoadingEffect({});
	            this.shapeToImage = this._createShapeToImageProcessor();

	            // 创建各层canvas
	            // 背景
	            this._bgDom = document.createElement('div');
	            this._bgDom.style.cssText = [
	                'position:absolute;left:0px;top:0px;width:',
	                this._width, 'px;height:', this._height + 'px;', 
	                '-webkit-user-select:none;user-select;none;',
	                '-webkit-touch-callout:none;'
	            ].join('');
	            this._bgDom.setAttribute('data-zr-dom-id', 'bg');
	            this._bgDom.className = config.elementClassName;

	            domRoot.appendChild(this._bgDom);
	            this._bgDom.onselectstart = returnFalse;

	            // 高亮
	            var hoverLayer = new Layer('_zrender_hover_', this);
	            this._layers['hover'] = hoverLayer;
	            domRoot.appendChild(hoverLayer.dom);
	            hoverLayer.initContext();

	            hoverLayer.dom.onselectstart = returnFalse;
	            hoverLayer.dom.style['-webkit-user-select'] = 'none';
	            hoverLayer.dom.style['user-select'] = 'none';
	            hoverLayer.dom.style['-webkit-touch-callout'] = 'none';

	            // Will be injected by zrender instance
	            this.refreshNextFrame = null;
	        };

	        /**
	         * 首次绘图，创建各种dom和context
	         * 
	         * @param {Function} callback 绘画结束后的回调函数
	         */
	        Painter.prototype.render = function (callback) {
	            if (this.isLoading()) {
	                this.hideLoading();
	            }
	            // TODO
	            this.refresh(callback, true);

	            return this;
	        };

	        /**
	         * 刷新
	         * @param {Function} callback 刷新结束后的回调函数
	         * @param {boolean} paintAll 强制绘制所有shape
	         */
	        Painter.prototype.refresh = function (callback, paintAll) {
	            var list = this.storage.getShapeList(true);
	            this._paintList(list, paintAll);

	            // Paint custum layers
	            for (var i = 0; i < this._zlevelList.length; i++) {
	                var z = this._zlevelList[i];
	                var layer = this._layers[z];
	                if (! layer.isBuildin && layer.refresh) {
	                    layer.refresh();
	                }
	            }

	            if (typeof callback == 'function') {
	                callback();
	            }

	            return this;
	        };

	        Painter.prototype._preProcessLayer = function (layer) {
	            layer.unusedCount++;
	            layer.updateTransform();
	        };

	        Painter.prototype._postProcessLayer = function (layer) {
	            layer.dirty = false;
	            // 删除过期的层
	            // PENDING
	            // if (layer.unusedCount >= 500) {
	            //     this.delLayer(z);
	            // }
	            if (layer.unusedCount == 1) {
	                layer.clear();
	            }
	        };
	 
	        Painter.prototype._paintList = function (list, paintAll) {

	            if (typeof(paintAll) == 'undefined') {
	                paintAll = false;
	            }

	            this._updateLayerStatus(list);

	            var currentLayer;
	            var currentZLevel;
	            var ctx;

	            this.eachBuildinLayer(this._preProcessLayer);

	            // var invTransform = [];

	            for (var i = 0, l = list.length; i < l; i++) {
	                var shape = list[i];

	                // Change draw layer
	                if (currentZLevel !== shape.zlevel) {
	                    if (currentLayer) {
	                        if (currentLayer.needTransform) {
	                            ctx.restore();
	                        }
	                        ctx.flush && ctx.flush();
	                    }

	                    currentZLevel = shape.zlevel;
	                    currentLayer = this.getLayer(currentZLevel);

	                    if (!currentLayer.isBuildin) {
	                        log(
	                            'ZLevel ' + currentZLevel
	                            + ' has been used by unkown layer ' + currentLayer.id
	                        );
	                    }

	                    ctx = currentLayer.ctx;

	                    // Reset the count
	                    currentLayer.unusedCount = 0;

	                    if (currentLayer.dirty || paintAll) {
	                        currentLayer.clear();
	                    }

	                    if (currentLayer.needTransform) {
	                        ctx.save();
	                        currentLayer.setTransform(ctx);
	                    }
	                }

	                if ((currentLayer.dirty || paintAll) && !shape.invisible) {
	                    if (
	                        !shape.onbrush
	                        || (shape.onbrush && !shape.onbrush(ctx, false))
	                    ) {
	                        if (config.catchBrushException) {
	                            try {
	                                shape.brush(ctx, false, this.refreshNextFrame);
	                            }
	                            catch (error) {
	                                log(
	                                    error,
	                                    'brush error of ' + shape.type,
	                                    shape
	                                );
	                            }
	                        }
	                        else {
	                            shape.brush(ctx, false, this.refreshNextFrame);
	                        }
	                    }
	                }

	                shape.__dirty = false;
	            }

	            if (currentLayer) {
	                if (currentLayer.needTransform) {
	                    ctx.restore();
	                }
	                ctx.flush && ctx.flush();
	            }

	            this.eachBuildinLayer(this._postProcessLayer);
	        };

	        /**
	         * 获取 zlevel 所在层，如果不存在则会创建一个新的层
	         * @param {number} zlevel
	         * @return {module:zrender/Layer}
	         */
	        Painter.prototype.getLayer = function (zlevel) {
	            var layer = this._layers[zlevel];
	            if (!layer) {
	                // Create a new layer
	                layer = new Layer(zlevel, this);
	                layer.isBuildin = true;

	                if (this._layerConfig[zlevel]) {
	                    util.merge(layer, this._layerConfig[zlevel], true);
	                }

	                layer.updateTransform();

	                this.insertLayer(zlevel, layer);

	                // Context is created after dom inserted to document
	                // Or excanvas will get 0px clientWidth and clientHeight
	                layer.initContext();
	            }

	            return layer;
	        };

	        Painter.prototype.insertLayer = function (zlevel, layer) {
	            if (this._layers[zlevel]) {
	                log('ZLevel ' + zlevel + ' has been used already');
	                return;
	            }
	            // Check if is a valid layer
	            if (!isLayerValid(layer)) {
	                log('Layer of zlevel ' + zlevel + ' is not valid');
	                return;
	            }

	            var len = this._zlevelList.length;
	            var prevLayer = null;
	            var i = -1;
	            if (len > 0 && zlevel > this._zlevelList[0]) {
	                for (i = 0; i < len - 1; i++) {
	                    if (
	                        this._zlevelList[i] < zlevel
	                        && this._zlevelList[i + 1] > zlevel
	                    ) {
	                        break;
	                    }
	                }
	                prevLayer = this._layers[this._zlevelList[i]];
	            }
	            this._zlevelList.splice(i + 1, 0, zlevel);

	            var prevDom = prevLayer ? prevLayer.dom : this._bgDom;
	            if (prevDom.nextSibling) {
	                prevDom.parentNode.insertBefore(
	                    layer.dom,
	                    prevDom.nextSibling
	                );
	            }
	            else {
	                prevDom.parentNode.appendChild(layer.dom);
	            }

	            this._layers[zlevel] = layer;
	        };

	        // Iterate each layer
	        Painter.prototype.eachLayer = function (cb, context) {
	            for (var i = 0; i < this._zlevelList.length; i++) {
	                var z = this._zlevelList[i];
	                cb.call(context, this._layers[z], z);
	            }
	        };

	        // Iterate each buildin layer
	        Painter.prototype.eachBuildinLayer = function (cb, context) {
	            for (var i = 0; i < this._zlevelList.length; i++) {
	                var z = this._zlevelList[i];
	                var layer = this._layers[z];
	                if (layer.isBuildin) {
	                    cb.call(context, layer, z);
	                }
	            }
	        };

	        // Iterate each other layer except buildin layer
	        Painter.prototype.eachOtherLayer = function (cb, context) {
	            for (var i = 0; i < this._zlevelList.length; i++) {
	                var z = this._zlevelList[i];
	                var layer = this._layers[z];
	                if (! layer.isBuildin) {
	                    cb.call(context, layer, z);
	                }
	            }
	        };

	        /**
	         * 获取所有已创建的层
	         * @param {Array.<module:zrender/Layer>} [prevLayer]
	         */
	        Painter.prototype.getLayers = function () {
	            return this._layers;
	        };

	        Painter.prototype._updateLayerStatus = function (list) {
	            
	            var layers = this._layers;

	            var elCounts = {};

	            this.eachBuildinLayer(function (layer, z) {
	                elCounts[z] = layer.elCount;
	                layer.elCount = 0;
	            });

	            for (var i = 0, l = list.length; i < l; i++) {
	                var shape = list[i];
	                var zlevel = shape.zlevel;
	                var layer = layers[zlevel];
	                if (layer) {
	                    layer.elCount++;
	                    // 已经被标记为需要刷新
	                    if (layer.dirty) {
	                        continue;
	                    }
	                    layer.dirty = shape.__dirty;
	                }
	            }

	            // 层中的元素数量有发生变化
	            this.eachBuildinLayer(function (layer, z) {
	                if (elCounts[z] !== layer.elCount) {
	                    layer.dirty = true;
	                }
	            });
	        };

	        /**
	         * 指定的图形列表
	         * @param {Array.<module:zrender/shape/Base>} shapeList 需要更新的图形元素列表
	         * @param {Function} [callback] 视图更新后回调函数
	         */
	        Painter.prototype.refreshShapes = function (shapeList, callback) {
	            for (var i = 0, l = shapeList.length; i < l; i++) {
	                var shape = shapeList[i];
	                shape.modSelf();
	            }

	            this.refresh(callback);
	            return this;
	        };

	        /**
	         * 设置loading特效
	         * 
	         * @param {Object} loadingEffect loading特效
	         * @return {Painter}
	         */
	        Painter.prototype.setLoadingEffect = function (loadingEffect) {
	            this._loadingEffect = loadingEffect;
	            return this;
	        };

	        /**
	         * 清除hover层外所有内容
	         */
	        Painter.prototype.clear = function () {
	            this.eachBuildinLayer(this._clearLayer);
	            return this;
	        };

	        Painter.prototype._clearLayer = function (layer) {
	            layer.clear();
	        };

	        /**
	         * 修改指定zlevel的绘制参数
	         * 
	         * @param {string} zlevel
	         * @param {Object} config 配置对象
	         * @param {string} [config.clearColor=0] 每次清空画布的颜色
	         * @param {string} [config.motionBlur=false] 是否开启动态模糊
	         * @param {number} [config.lastFrameAlpha=0.7]
	         *                 在开启动态模糊的时候使用，与上一帧混合的alpha值，值越大尾迹越明显
	         * @param {Array.<number>} [position] 层的平移
	         * @param {Array.<number>} [rotation] 层的旋转
	         * @param {Array.<number>} [scale] 层的缩放
	         * @param {boolean} [zoomable=false] 层是否支持鼠标缩放操作
	         * @param {boolean} [panable=false] 层是否支持鼠标平移操作
	         */
	        Painter.prototype.modLayer = function (zlevel, config) {
	            if (config) {
	                if (!this._layerConfig[zlevel]) {
	                    this._layerConfig[zlevel] = config;
	                }
	                else {
	                    util.merge(this._layerConfig[zlevel], config, true);
	                }

	                var layer = this._layers[zlevel];

	                if (layer) {
	                    util.merge(layer, this._layerConfig[zlevel], true);
	                }
	            }
	        };

	        /**
	         * 删除指定层
	         * @param {number} zlevel 层所在的zlevel
	         */
	        Painter.prototype.delLayer = function (zlevel) {
	            var layer = this._layers[zlevel];
	            if (!layer) {
	                return;
	            }
	            // Save config
	            this.modLayer(zlevel, {
	                position: layer.position,
	                rotation: layer.rotation,
	                scale: layer.scale
	            });
	            layer.dom.parentNode.removeChild(layer.dom);
	            delete this._layers[zlevel];

	            this._zlevelList.splice(util.indexOf(this._zlevelList, zlevel), 1);
	        };

	        /**
	         * 刷新hover层
	         */
	        Painter.prototype.refreshHover = function () {
	            this.clearHover();
	            var list = this.storage.getHoverShapes(true);
	            for (var i = 0, l = list.length; i < l; i++) {
	                this._brushHover(list[i]);
	            }
	            var ctx = this._layers.hover.ctx;
	            ctx.flush && ctx.flush();

	            this.storage.delHover();

	            return this;
	        };

	        /**
	         * 清除hover层所有内容
	         */
	        Painter.prototype.clearHover = function () {
	            var hover = this._layers.hover;
	            hover && hover.clear();

	            return this;
	        };

	        /**
	         * 显示loading
	         * 
	         * @param {Object=} loadingEffect loading效果对象
	         */
	        Painter.prototype.showLoading = function (loadingEffect) {
	            this._loadingEffect && this._loadingEffect.stop();
	            loadingEffect && this.setLoadingEffect(loadingEffect);
	            this._loadingEffect.start(this);
	            this.loading = true;

	            return this;
	        };

	        /**
	         * loading结束
	         */
	        Painter.prototype.hideLoading = function () {
	            this._loadingEffect.stop();

	            this.clearHover();
	            this.loading = false;
	            return this;
	        };

	        /**
	         * loading结束判断
	         */
	        Painter.prototype.isLoading = function () {
	            return this.loading;
	        };

	        /**
	         * 区域大小变化后重绘
	         */
	        Painter.prototype.resize = function () {
	            var domRoot = this._domRoot;
	            domRoot.style.display = 'none';

	            var width = this._getWidth();
	            var height = this._getHeight();

	            domRoot.style.display = '';

	            // 优化没有实际改变的resize
	            if (this._width != width || height != this._height) {
	                this._width = width;
	                this._height = height;

	                domRoot.style.width = width + 'px';
	                domRoot.style.height = height + 'px';

	                for (var id in this._layers) {

	                    this._layers[id].resize(width, height);
	                }

	                this.refresh(null, true);
	            }

	            return this;
	        };

	        /**
	         * 清除单独的一个层
	         * @param {number} zLevel
	         */
	        Painter.prototype.clearLayer = function (zLevel) {
	            var layer = this._layers[zLevel];
	            if (layer) {
	                layer.clear();
	            }
	        };

	        /**
	         * 释放
	         */
	        Painter.prototype.dispose = function () {
	            if (this.isLoading()) {
	                this.hideLoading();
	            }

	            this.root.innerHTML = '';

	            this.root =
	            this.storage =

	            this._domRoot = 
	            this._layers = null;
	        };

	        Painter.prototype.getDomHover = function () {
	            return this._layers.hover.dom;
	        };

	        /**
	         * 图像导出
	         * @param {string} type
	         * @param {string} [backgroundColor='#fff'] 背景色
	         * @return {string} 图片的Base64 url
	         */
	        Painter.prototype.toDataURL = function (type, backgroundColor, args) {
	            if (window['G_vmlCanvasManager']) {
	                return null;
	            }

	            var imageLayer = new Layer('image', this);
	            this._bgDom.appendChild(imageLayer.dom);
	            imageLayer.initContext();
	            
	            var ctx = imageLayer.ctx;
	            imageLayer.clearColor = backgroundColor || '#fff';
	            imageLayer.clear();
	            
	            var self = this;
	            // 升序遍历，shape上的zlevel指定绘画图层的z轴层叠

	            this.storage.iterShape(
	                function (shape) {
	                    if (!shape.invisible) {
	                        if (!shape.onbrush // 没有onbrush
	                            // 有onbrush并且调用执行返回false或undefined则继续粉刷
	                            || (shape.onbrush && !shape.onbrush(ctx, false))
	                        ) {
	                            if (config.catchBrushException) {
	                                try {
	                                    shape.brush(ctx, false, self.refreshNextFrame);
	                                }
	                                catch (error) {
	                                    log(
	                                        error,
	                                        'brush error of ' + shape.type,
	                                        shape
	                                    );
	                                }
	                            }
	                            else {
	                                shape.brush(ctx, false, self.refreshNextFrame);
	                            }
	                        }
	                    }
	                },
	                { normal: 'up', update: true }
	            );
	            var image = imageLayer.dom.toDataURL(type, args); 
	            ctx = null;
	            this._bgDom.removeChild(imageLayer.dom);
	            return image;
	        };

	        /**
	         * 获取绘图区域宽度
	         */
	        Painter.prototype.getWidth = function () {
	            return this._width;
	        };

	        /**
	         * 获取绘图区域高度
	         */
	        Painter.prototype.getHeight = function () {
	            return this._height;
	        };

	        Painter.prototype._getWidth = function () {
	            var root = this.root;
	            var stl = root.currentStyle
	                      || document.defaultView.getComputedStyle(root);

	            return ((root.clientWidth || parseInt(stl.width, 10))
	                    - parseInt(stl.paddingLeft, 10) // 请原谅我这比较粗暴
	                    - parseInt(stl.paddingRight, 10)).toFixed(0) - 0;
	        };

	        Painter.prototype._getHeight = function () {
	            var root = this.root;
	            var stl = root.currentStyle
	                      || document.defaultView.getComputedStyle(root);

	            return ((root.clientHeight || parseInt(stl.height, 10))
	                    - parseInt(stl.paddingTop, 10) // 请原谅我这比较粗暴
	                    - parseInt(stl.paddingBottom, 10)).toFixed(0) - 0;
	        };

	        Painter.prototype._brushHover = function (shape) {
	            var ctx = this._layers.hover.ctx;

	            if (!shape.onbrush // 没有onbrush
	                // 有onbrush并且调用执行返回false或undefined则继续粉刷
	                || (shape.onbrush && !shape.onbrush(ctx, true))
	            ) {
	                var layer = this.getLayer(shape.zlevel);
	                if (layer.needTransform) {
	                    ctx.save();
	                    layer.setTransform(ctx);
	                }
	                // Retina 优化
	                if (config.catchBrushException) {
	                    try {
	                        shape.brush(ctx, true, this.refreshNextFrame);
	                    }
	                    catch (error) {
	                        log(
	                            error, 'hoverBrush error of ' + shape.type, shape
	                        );
	                    }
	                }
	                else {
	                    shape.brush(ctx, true, this.refreshNextFrame);
	                }
	                if (layer.needTransform) {
	                    ctx.restore();
	                }
	            }
	        };

	        Painter.prototype._shapeToImage = function (
	            id, shape, width, height, devicePixelRatio
	        ) {
	            var canvas = document.createElement('canvas');
	            var ctx = canvas.getContext('2d');
	            
	            canvas.style.width = width + 'px';
	            canvas.style.height = height + 'px';
	            canvas.setAttribute('width', width * devicePixelRatio);
	            canvas.setAttribute('height', height * devicePixelRatio);

	            ctx.clearRect(0, 0, width * devicePixelRatio, height * devicePixelRatio);

	            var shapeTransform = {
	                position : shape.position,
	                rotation : shape.rotation,
	                scale : shape.scale
	            };
	            shape.position = [ 0, 0, 0 ];
	            shape.rotation = 0;
	            shape.scale = [ 1, 1 ];
	            if (shape) {
	                shape.brush(ctx, false);
	            }

	            var ImageShape = __webpack_require__(478);
	            var imgShape = new ImageShape({
	                id : id,
	                style : {
	                    x : 0,
	                    y : 0,
	                    image : canvas
	                }
	            });

	            if (shapeTransform.position != null) {
	                imgShape.position = shape.position = shapeTransform.position;
	            }

	            if (shapeTransform.rotation != null) {
	                imgShape.rotation = shape.rotation = shapeTransform.rotation;
	            }

	            if (shapeTransform.scale != null) {
	                imgShape.scale = shape.scale = shapeTransform.scale;
	            }

	            return imgShape;
	        };

	        Painter.prototype._createShapeToImageProcessor = function () {
	            if (window['G_vmlCanvasManager']) {
	                return doNothing;
	            }

	            var me = this;

	            return function (id, e, width, height) {
	                return me._shapeToImage(
	                    id, e, width, height, config.devicePixelRatio
	                );
	            };
	        };

	        return Painter;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 469 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * zrender: loading特效类
	 *
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *         errorrik (errorrik@gmail.com)
	 */

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function(require) {
	        var util = __webpack_require__(456);
	        var TextShape = __webpack_require__(470);
	        var RectangleShape = __webpack_require__(476);


	        var DEFAULT_TEXT = 'Loading...';
	        var DEFAULT_TEXT_FONT = 'normal 16px Arial';

	        /**
	         * @constructor
	         * 
	         * @param {Object} options 选项
	         * @param {color} options.backgroundColor 背景颜色
	         * @param {Object} options.textStyle 文字样式，同shape/text.style
	         * @param {number=} options.progress 进度参数，部分特效有用
	         * @param {Object=} options.effect 特效参数，部分特效有用
	         * 
	         * {
	         *     effect,
	         *     //loading话术
	         *     text:'',
	         *     // 水平安放位置，默认为 'center'，可指定x坐标
	         *     x:'center' || 'left' || 'right' || {number},
	         *     // 垂直安放位置，默认为'top'，可指定y坐标
	         *     y:'top' || 'bottom' || {number},
	         *
	         *     textStyle:{
	         *         textFont: 'normal 20px Arial' || {textFont}, //文本字体
	         *         color: {color}
	         *     }
	         * }
	         */
	        function Base(options) {
	            this.setOptions(options);
	        }

	        /**
	         * 创建loading文字图形
	         * 
	         * @param {Object} textStyle 文字style，同shape/text.style
	         */
	        Base.prototype.createTextShape = function (textStyle) {
	            return new TextShape({
	                highlightStyle : util.merge(
	                    {
	                        x : this.canvasWidth / 2,
	                        y : this.canvasHeight / 2,
	                        text : DEFAULT_TEXT,
	                        textAlign : 'center',
	                        textBaseline : 'middle',
	                        textFont : DEFAULT_TEXT_FONT,
	                        color: '#333',
	                        brushType : 'fill'
	                    },
	                    textStyle,
	                    true
	                )
	            });
	        };
	        
	        /**
	         * 获取loading背景图形
	         * 
	         * @param {color} color 背景颜色
	         */
	        Base.prototype.createBackgroundShape = function (color) {
	            return new RectangleShape({
	                highlightStyle : {
	                    x : 0,
	                    y : 0,
	                    width : this.canvasWidth,
	                    height : this.canvasHeight,
	                    brushType : 'fill',
	                    color : color
	                }
	            });
	        };

	        Base.prototype.start = function (painter) {
	            this.canvasWidth = painter._width;
	            this.canvasHeight = painter._height;

	            function addShapeHandle(param) {
	                painter.storage.addHover(param);
	            }
	            function refreshHandle() {
	                painter.refreshHover();
	            }
	            this.loadingTimer = this._start(addShapeHandle, refreshHandle);
	        };

	        Base.prototype._start = function (/*addShapeHandle, refreshHandle*/) {
	            return setInterval(function () {
	            }, 10000);
	        };

	        Base.prototype.stop = function () {
	            clearInterval(this.loadingTimer);
	        };

	        Base.prototype.setOptions = function (options) {
	            this.options = options || {};
	        };
	        
	        Base.prototype.adjust = function (value, region) {
	            if (value <= region[0]) {
	                value = region[0];
	            }
	            else if (value >= region[1]) {
	                value = region[1];
	            }
	            return value;
	        };
	        
	        Base.prototype.getLocation = function(loc, totalWidth, totalHeight) {
	            var x = loc.x != null ? loc.x : 'center';
	            switch (x) {
	                case 'center' :
	                    x = Math.floor((this.canvasWidth - totalWidth) / 2);
	                    break;
	                case 'left' :
	                    x = 0;
	                    break;
	                case 'right' :
	                    x = this.canvasWidth - totalWidth;
	                    break;
	            }
	            var y = loc.y != null ? loc.y : 'center';
	            switch (y) {
	                case 'center' :
	                    y = Math.floor((this.canvasHeight - totalHeight) / 2);
	                    break;
	                case 'top' :
	                    y = 0;
	                    break;
	                case 'bottom' :
	                    y = this.canvasHeight - totalHeight;
	                    break;
	            }
	            return {
	                x : x,
	                y : y,
	                width : totalWidth,
	                height : totalHeight
	            };
	        };

	        return Base;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 470 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * @module zrender/shape/Text
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 * @example
	 *     var Text = require('zrender/shape/Text');
	 *     var shape = new Text({
	 *         style: {
	 *             text: 'Label',
	 *             x: 100,
	 *             y: 100,
	 *             textFont: '14px Arial'
	 *         }
	 *     });
	 *     zr.addShape(shape);
	 */

	/**
	 * @typedef {Object} ITextStyle
	 * @property {number} x 横坐标
	 * @property {number} y 纵坐标
	 * @property {string} text 文本内容
	 * @property {number} [maxWidth=null] 最大宽度限制
	 * @property {string} [textFont] 附加文本样式，eg:'bold 18px verdana'
	 * @property {string} [textAlign] 可以是start, end, left, right, center
	 * @property {string} [textBaseline] 默认根据textPosition自动设置，附加文本垂直对齐。
	 *                                可以是top, bottom, middle, alphabetic, hanging, ideographic
	 * @property {string} [brushType='fill']
	 * @property {string} [color='#000000'] 填充颜色
	 * @property {string} [strokeColor='#000000'] 描边颜色
	 * @property {number} [lineWidth=1] 描边宽度
	 * @property {number} [opacity=1] 绘制透明度
	 * @property {number} [shadowBlur=0] 阴影模糊度，大于0有效
	 * @property {string} [shadowColor='#000000'] 阴影颜色
	 * @property {number} [shadowOffsetX=0] 阴影横向偏移
	 * @property {number} [shadowOffsetY=0] 阴影纵向偏移
	 */

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	        var area = __webpack_require__(471);
	        var Base = __webpack_require__(473);
	        
	        /**
	         * @alias module:zrender/shape/Text
	         * @constructor
	         * @extends module:zrender/shape/Base
	         * @param {Object} options
	         */
	        var Text = function (options) {
	            Base.call(this, options);
	            /**
	             * 文字绘制样式
	             * @name module:zrender/shape/Text#style
	             * @type {module:zrender/shape/Text~ITextStyle}
	             */
	            /**
	             * 文字高亮绘制样式
	             * @name module:zrender/shape/Text#highlightStyle
	             * @type {module:zrender/shape/Text~ITextStyle}
	             */
	        };

	        Text.prototype =  {
	            type: 'text',

	            brush : function (ctx, isHighlight) {
	                var style = this.style;
	                if (isHighlight) {
	                    // 根据style扩展默认高亮样式
	                    style = this.getHighlightStyle(
	                        style, this.highlightStyle || {}
	                    );
	                }
	                
	                if (typeof(style.text) == 'undefined' || style.text === false) {
	                    return;
	                }

	                ctx.save();
	                this.doClip(ctx);

	                this.setContext(ctx, style);

	                // 设置transform
	                this.setTransform(ctx);

	                if (style.textFont) {
	                    ctx.font = style.textFont;
	                }
	                ctx.textAlign = style.textAlign || 'start';
	                ctx.textBaseline = style.textBaseline || 'middle';

	                var text = (style.text + '').split('\n');
	                var lineHeight = area.getTextHeight('国', style.textFont);
	                var rect = this.getRect(style);
	                var x = style.x;
	                var y;
	                if (style.textBaseline == 'top') {
	                    y = rect.y;
	                }
	                else if (style.textBaseline == 'bottom') {
	                    y = rect.y + lineHeight;
	                }
	                else {
	                    y = rect.y + lineHeight / 2;
	                }
	                
	                for (var i = 0, l = text.length; i < l; i++) {
	                    if (style.maxWidth) {
	                        switch (style.brushType) {
	                            case 'fill':
	                                ctx.fillText(
	                                    text[i],
	                                    x, y, style.maxWidth
	                                );
	                                break;
	                            case 'stroke':
	                                ctx.strokeText(
	                                    text[i],
	                                    x, y, style.maxWidth
	                                );
	                                break;
	                            case 'both':
	                                ctx.fillText(
	                                    text[i],
	                                    x, y, style.maxWidth
	                                );
	                                ctx.strokeText(
	                                    text[i],
	                                    x, y, style.maxWidth
	                                );
	                                break;
	                            default:
	                                ctx.fillText(
	                                    text[i],
	                                    x, y, style.maxWidth
	                                );
	                        }
	                    }
	                    else {
	                        switch (style.brushType) {
	                            case 'fill':
	                                ctx.fillText(text[i], x, y);
	                                break;
	                            case 'stroke':
	                                ctx.strokeText(text[i], x, y);
	                                break;
	                            case 'both':
	                                ctx.fillText(text[i], x, y);
	                                ctx.strokeText(text[i], x, y);
	                                break;
	                            default:
	                                ctx.fillText(text[i], x, y);
	                        }
	                    }
	                    y += lineHeight;
	                }

	                ctx.restore();
	                return;
	            },

	            /**
	             * 返回文字包围盒矩形
	             * @param {module:zrender/shape/Text~ITextStyle} style
	             * @return {module:zrender/shape/Base~IBoundingRect}
	             */
	            getRect : function (style) {
	                if (style.__rect) {
	                    return style.__rect;
	                }
	                
	                var width = area.getTextWidth(style.text, style.textFont);
	                var height = area.getTextHeight(style.text, style.textFont);
	                
	                var textX = style.x;                 // 默认start == left
	                if (style.textAlign == 'end' || style.textAlign == 'right') {
	                    textX -= width;
	                }
	                else if (style.textAlign == 'center') {
	                    textX -= (width / 2);
	                }

	                var textY;
	                if (style.textBaseline == 'top') {
	                    textY = style.y;
	                }
	                else if (style.textBaseline == 'bottom') {
	                    textY = style.y - height;
	                }
	                else {
	                    // middle
	                    textY = style.y - height / 2;
	                }

	                style.__rect = {
	                    x : textX,
	                    y : textY,
	                    width : width,
	                    height : height
	                };
	                
	                return style.__rect;
	            }
	        };

	        __webpack_require__(456).inherits(Text, Base);
	        return Text;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));



/***/ },
/* 471 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * zrender: 图形空间辅助类
	 *
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *         pissang (https://www.github.com/pissang)
	 *
	 * isInside：是否在区域内部
	 * isOutside：是否在区域外部
	 * getTextWidth：测算单行文本宽度
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {

	        'use strict';

	        var util = __webpack_require__(456);
	        var curve = __webpack_require__(472);

	        var _ctx;
	        
	        var _textWidthCache = {};
	        var _textHeightCache = {};
	        var _textWidthCacheCounter = 0;
	        var _textHeightCacheCounter = 0;
	        var TEXT_CACHE_MAX = 5000;
	            
	        var PI2 = Math.PI * 2;

	        function normalizeRadian(angle) {
	            angle %= PI2;
	            if (angle < 0) {
	                angle += PI2;
	            }
	            return angle;
	        }
	        /**
	         * 包含判断
	         *
	         * @param {Object} shape : 图形
	         * @param {Object} area ： 目标区域
	         * @param {number} x ： 横坐标
	         * @param {number} y ： 纵坐标
	         */
	        function isInside(shape, area, x, y) {
	            if (!area || !shape) {
	                // 无参数或不支持类型
	                return false;
	            }
	            var zoneType = shape.type;

	            _ctx = _ctx || util.getContext();

	            // 未实现或不可用时(excanvas不支持)则数学运算，主要是line，polyline，ring
	            var _mathReturn = _mathMethod(shape, area, x, y);
	            if (typeof _mathReturn != 'undefined') {
	                return _mathReturn;
	            }

	            if (shape.buildPath && _ctx.isPointInPath) {
	                return _buildPathMethod(shape, _ctx, area, x, y);
	            }

	            // 上面的方法都行不通时
	            switch (zoneType) {
	                case 'ellipse': // Todo，不精确
	                    return true;
	                // 旋轮曲线  不准确
	                case 'trochoid':
	                    var _r = area.location == 'out'
	                            ? area.r1 + area.r2 + area.d
	                            : area.r1 - area.r2 + area.d;
	                    return isInsideCircle(area, x, y, _r);
	                // 玫瑰线 不准确
	                case 'rose' :
	                    return isInsideCircle(area, x, y, area.maxr);
	                // 路径，椭圆，曲线等-----------------13
	                default:
	                    return false;   // Todo，暂不支持
	            }
	        }

	        /**
	         * @param {Object} shape : 图形
	         * @param {Object} area ：目标区域
	         * @param {number} x ： 横坐标
	         * @param {number} y ： 纵坐标
	         * @return {boolean=} true表示坐标处在图形中
	         */
	        function _mathMethod(shape, area, x, y) {
	            var zoneType = shape.type;
	            // 在矩形内则部分图形需要进一步判断
	            switch (zoneType) {
	                // 贝塞尔曲线
	                case 'bezier-curve':
	                    if (typeof(area.cpX2) === 'undefined') {
	                        return isInsideQuadraticStroke(
	                            area.xStart, area.yStart,
	                            area.cpX1, area.cpY1, 
	                            area.xEnd, area.yEnd,
	                            area.lineWidth, x, y
	                        );
	                    }
	                    return isInsideCubicStroke(
	                        area.xStart, area.yStart,
	                        area.cpX1, area.cpY1, 
	                        area.cpX2, area.cpY2, 
	                        area.xEnd, area.yEnd,
	                        area.lineWidth, x, y
	                    );
	                // 线
	                case 'line':
	                    return isInsideLine(
	                        area.xStart, area.yStart,
	                        area.xEnd, area.yEnd,
	                        area.lineWidth, x, y
	                    );
	                // 折线
	                case 'polyline':
	                    return isInsidePolyline(
	                        area.pointList, area.lineWidth, x, y
	                    );
	                // 圆环
	                case 'ring':
	                    return isInsideRing(
	                        area.x, area.y, area.r0, area.r, x, y
	                    );
	                // 圆形
	                case 'circle':
	                    return isInsideCircle(
	                        area.x, area.y, area.r, x, y
	                    );
	                // 扇形
	                case 'sector':
	                    var startAngle = area.startAngle * Math.PI / 180;
	                    var endAngle = area.endAngle * Math.PI / 180;
	                    if (!area.clockWise) {
	                        startAngle = -startAngle;
	                        endAngle = -endAngle;
	                    }
	                    return isInsideSector(
	                        area.x, area.y, area.r0, area.r,
	                        startAngle, endAngle,
	                        !area.clockWise,
	                        x, y
	                    );
	                // 多边形
	                case 'path':
	                    return area.pathArray && isInsidePath(
	                        area.pathArray, Math.max(area.lineWidth, 5),
	                        area.brushType, x, y
	                    );
	                case 'polygon':
	                case 'star':
	                case 'isogon':
	                    return isInsidePolygon(area.pointList, x, y);
	                // 文本
	                case 'text':
	                    var rect =  area.__rect || shape.getRect(area);
	                    return isInsideRect(
	                        rect.x, rect.y, rect.width, rect.height, x, y
	                    );
	                // 矩形
	                case 'rectangle':
	                // 图片
	                case 'image':
	                    return isInsideRect(
	                        area.x, area.y, area.width, area.height, x, y
	                    );
	            }
	        }

	        /**
	         * 通过buildPath方法来判断，三个方法中较快，但是不支持线条类型的shape，
	         * 而且excanvas不支持isPointInPath方法
	         *
	         * @param {Object} shape ： shape
	         * @param {Object} context : 上下文
	         * @param {Object} area ：目标区域
	         * @param {number} x ： 横坐标
	         * @param {number} y ： 纵坐标
	         * @return {boolean} true表示坐标处在图形中
	         */
	        function _buildPathMethod(shape, context, area, x, y) {
	            // 图形类实现路径创建了则用类的path
	            context.beginPath();
	            shape.buildPath(context, area);
	            context.closePath();
	            return context.isPointInPath(x, y);
	        }

	        /**
	         * !isInside
	         */
	        function isOutside(shape, area, x, y) {
	            return !isInside(shape, area, x, y);
	        }

	        /**
	         * 线段包含判断
	         * @param  {number}  x0
	         * @param  {number}  y0
	         * @param  {number}  x1
	         * @param  {number}  y1
	         * @param  {number}  lineWidth
	         * @param  {number}  x
	         * @param  {number}  y
	         * @return {boolean}
	         */
	        function isInsideLine(x0, y0, x1, y1, lineWidth, x, y) {
	            if (lineWidth === 0) {
	                return false;
	            }
	            var _l = Math.max(lineWidth, 5);
	            var _a = 0;
	            var _b = x0;
	            // Quick reject
	            if (
	                (y > y0 + _l && y > y1 + _l)
	                || (y < y0 - _l && y < y1 - _l)
	                || (x > x0 + _l && x > x1 + _l)
	                || (x < x0 - _l && x < x1 - _l)
	            ) {
	                return false;
	            }

	            if (x0 !== x1) {
	                _a = (y0 - y1) / (x0 - x1);
	                _b = (x0 * y1 - x1 * y0) / (x0 - x1) ;
	            }
	            else {
	                return Math.abs(x - x0) <= _l / 2;
	            }
	            var tmp = _a * x - y + _b;
	            var _s = tmp * tmp / (_a * _a + 1);
	            return _s <= _l / 2 * _l / 2;
	        }

	        /**
	         * 三次贝塞尔曲线描边包含判断
	         * @param  {number}  x0
	         * @param  {number}  y0
	         * @param  {number}  x1
	         * @param  {number}  y1
	         * @param  {number}  x2
	         * @param  {number}  y2
	         * @param  {number}  x3
	         * @param  {number}  y3
	         * @param  {number}  lineWidth
	         * @param  {number}  x
	         * @param  {number}  y
	         * @return {boolean}
	         */
	        function isInsideCubicStroke(
	            x0, y0, x1, y1, x2, y2, x3, y3,
	            lineWidth, x, y
	        ) {
	            if (lineWidth === 0) {
	                return false;
	            }
	            var _l = Math.max(lineWidth, 5);
	            // Quick reject
	            if (
	                (y > y0 + _l && y > y1 + _l && y > y2 + _l && y > y3 + _l)
	                || (y < y0 - _l && y < y1 - _l && y < y2 - _l && y < y3 - _l)
	                || (x > x0 + _l && x > x1 + _l && x > x2 + _l && x > x3 + _l)
	                || (x < x0 - _l && x < x1 - _l && x < x2 - _l && x < x3 - _l)
	            ) {
	                return false;
	            }
	            var d =  curve.cubicProjectPoint(
	                x0, y0, x1, y1, x2, y2, x3, y3,
	                x, y, null
	            );
	            return d <= _l / 2;
	        }

	        /**
	         * 二次贝塞尔曲线描边包含判断
	         * @param  {number}  x0
	         * @param  {number}  y0
	         * @param  {number}  x1
	         * @param  {number}  y1
	         * @param  {number}  x2
	         * @param  {number}  y2
	         * @param  {number}  lineWidth
	         * @param  {number}  x
	         * @param  {number}  y
	         * @return {boolean}
	         */
	        function isInsideQuadraticStroke(
	            x0, y0, x1, y1, x2, y2,
	            lineWidth, x, y
	        ) {
	            if (lineWidth === 0) {
	                return false;
	            }
	            var _l = Math.max(lineWidth, 5);
	            // Quick reject
	            if (
	                (y > y0 + _l && y > y1 + _l && y > y2 + _l)
	                || (y < y0 - _l && y < y1 - _l && y < y2 - _l)
	                || (x > x0 + _l && x > x1 + _l && x > x2 + _l)
	                || (x < x0 - _l && x < x1 - _l && x < x2 - _l)
	            ) {
	                return false;
	            }
	            var d =  curve.quadraticProjectPoint(
	                x0, y0, x1, y1, x2, y2,
	                x, y, null
	            );
	            return d <= _l / 2;
	        }

	        /**
	         * 圆弧描边包含判断
	         * @param  {number}  cx
	         * @param  {number}  cy
	         * @param  {number}  r
	         * @param  {number}  startAngle
	         * @param  {number}  endAngle
	         * @param  {boolean}  anticlockwise
	         * @param  {number} lineWidth
	         * @param  {number}  x
	         * @param  {number}  y
	         * @return {Boolean}
	         */
	        function isInsideArcStroke(
	            cx, cy, r, startAngle, endAngle, anticlockwise,
	            lineWidth, x, y
	        ) {
	            if (lineWidth === 0) {
	                return false;
	            }
	            var _l = Math.max(lineWidth, 5);

	            x -= cx;
	            y -= cy;
	            var d = Math.sqrt(x * x + y * y);
	            if ((d - _l > r) || (d + _l < r)) {
	                return false;
	            }
	            if (Math.abs(startAngle - endAngle) >= PI2) {
	                // Is a circle
	                return true;
	            }
	            if (anticlockwise) {
	                var tmp = startAngle;
	                startAngle = normalizeRadian(endAngle);
	                endAngle = normalizeRadian(tmp);
	            } else {
	                startAngle = normalizeRadian(startAngle);
	                endAngle = normalizeRadian(endAngle);
	            }
	            if (startAngle > endAngle) {
	                endAngle += PI2;
	            }
	            
	            var angle = Math.atan2(y, x);
	            if (angle < 0) {
	                angle += PI2;
	            }
	            return (angle >= startAngle && angle <= endAngle)
	                || (angle + PI2 >= startAngle && angle + PI2 <= endAngle);
	        }

	        function isInsidePolyline(points, lineWidth, x, y) {
	            var lineWidth = Math.max(lineWidth, 10);
	            for (var i = 0, l = points.length - 1; i < l; i++) {
	                var x0 = points[i][0];
	                var y0 = points[i][1];
	                var x1 = points[i + 1][0];
	                var y1 = points[i + 1][1];

	                if (isInsideLine(x0, y0, x1, y1, lineWidth, x, y)) {
	                    return true;
	                }
	            }

	            return false;
	        }

	        function isInsideRing(cx, cy, r0, r, x, y) {
	            var d = (x - cx) * (x - cx) + (y - cy) * (y - cy);
	            return (d < r * r) && (d > r0 * r0);
	        }

	        /**
	         * 矩形包含判断
	         */
	        function isInsideRect(x0, y0, width, height, x, y) {
	            return x >= x0 && x <= (x0 + width)
	                && y >= y0 && y <= (y0 + height);
	        }

	        /**
	         * 圆形包含判断
	         */
	        function isInsideCircle(x0, y0, r, x, y) {
	            return (x - x0) * (x - x0) + (y - y0) * (y - y0)
	                   < r * r;
	        }

	        /**
	         * 扇形包含判断
	         */
	        function isInsideSector(
	            cx, cy, r0, r, startAngle, endAngle, anticlockwise, x, y
	        ) {
	            return isInsideArcStroke(
	                cx, cy, (r0 + r) / 2, startAngle, endAngle, anticlockwise,
	                r - r0, x, y
	            );
	        }

	        /**
	         * 多边形包含判断
	         * 与 canvas 一样采用 non-zero winding rule
	         */
	        function isInsidePolygon(points, x, y) {
	            var N = points.length;
	            var w = 0;

	            for (var i = 0, j = N - 1; i < N; i++) {
	                var x0 = points[j][0];
	                var y0 = points[j][1];
	                var x1 = points[i][0];
	                var y1 = points[i][1];
	                w += windingLine(x0, y0, x1, y1, x, y);
	                j = i;
	            }
	            return w !== 0;
	        }

	        function windingLine(x0, y0, x1, y1, x, y) {
	            if ((y > y0 && y > y1) || (y < y0 && y < y1)) {
	                return 0;
	            }
	            if (y1 == y0) {
	                return 0;
	            }
	            var dir = y1 < y0 ? 1 : -1;
	            var t = (y - y0) / (y1 - y0);
	            var x_ = t * (x1 - x0) + x0;

	            return x_ > x ? dir : 0;
	        }

	        // 临时数组
	        var roots = [-1, -1, -1];
	        var extrema = [-1, -1];

	        function swapExtrema() {
	            var tmp = extrema[0];
	            extrema[0] = extrema[1];
	            extrema[1] = tmp;
	        }
	        function windingCubic(x0, y0, x1, y1, x2, y2, x3, y3, x, y) {
	            // Quick reject
	            if (
	                (y > y0 && y > y1 && y > y2 && y > y3)
	                || (y < y0 && y < y1 && y < y2 && y < y3)
	            ) {
	                return 0;
	            }
	            var nRoots = curve.cubicRootAt(y0, y1, y2, y3, y, roots);
	            if (nRoots === 0) {
	                return 0;
	            }
	            else {
	                var w = 0;
	                var nExtrema = -1;
	                var y0_, y1_;
	                for (var i = 0; i < nRoots; i++) {
	                    var t = roots[i];
	                    var x_ = curve.cubicAt(x0, x1, x2, x3, t);
	                    if (x_ < x) { // Quick reject
	                        continue;
	                    }
	                    if (nExtrema < 0) {
	                        nExtrema = curve.cubicExtrema(y0, y1, y2, y3, extrema);
	                        if (extrema[1] < extrema[0] && nExtrema > 1) {
	                            swapExtrema();
	                        }
	                        y0_ = curve.cubicAt(y0, y1, y2, y3, extrema[0]);
	                        if (nExtrema > 1) {
	                            y1_ = curve.cubicAt(y0, y1, y2, y3, extrema[1]);
	                        }
	                    }
	                    if (nExtrema == 2) {
	                        // 分成三段单调函数
	                        if (t < extrema[0]) {
	                            w += y0_ < y0 ? 1 : -1;
	                        } 
	                        else if (t < extrema[1]) {
	                            w += y1_ < y0_ ? 1 : -1;
	                        } 
	                        else {
	                            w += y3 < y1_ ? 1 : -1;
	                        }
	                    } 
	                    else {
	                        // 分成两段单调函数
	                        if (t < extrema[0]) {
	                            w += y0_ < y0 ? 1 : -1;
	                        } 
	                        else {
	                            w += y3 < y0_ ? 1 : -1;
	                        }
	                    }
	                }
	                return w;
	            }
	        }

	        function windingQuadratic(x0, y0, x1, y1, x2, y2, x, y) {
	            // Quick reject
	            if (
	                (y > y0 && y > y1 && y > y2)
	                || (y < y0 && y < y1 && y < y2)
	            ) {
	                return 0;
	            }
	            var nRoots = curve.quadraticRootAt(y0, y1, y2, y, roots);
	            if (nRoots === 0) {
	                return 0;
	            } 
	            else {
	                var t = curve.quadraticExtremum(y0, y1, y2);
	                if (t >=0 && t <= 1) {
	                    var w = 0;
	                    var y_ = curve.quadraticAt(y0, y1, y2, t);
	                    for (var i = 0; i < nRoots; i++) {
	                        var x_ = curve.quadraticAt(x0, x1, x2, roots[i]);
	                        if (x_ < x) {
	                            continue;
	                        }
	                        if (roots[i] < t) {
	                            w += y_ < y0 ? 1 : -1;
	                        } 
	                        else {
	                            w += y2 < y_ ? 1 : -1;
	                        }
	                    }
	                    return w;
	                } 
	                else {
	                    var x_ = curve.quadraticAt(x0, x1, x2, roots[0]);
	                    if (x_ < x) {
	                        return 0;
	                    }
	                    return y2 < y0 ? 1 : -1;
	                }
	            }
	        }
	        
	        // TODO
	        // Arc 旋转
	        function windingArc(
	            cx, cy, r, startAngle, endAngle, anticlockwise, x, y
	        ) {
	            y -= cy;
	            if (y > r || y < -r) {
	                return 0;
	            }
	            var tmp = Math.sqrt(r * r - y * y);
	            roots[0] = -tmp;
	            roots[1] = tmp;

	            if (Math.abs(startAngle - endAngle) >= PI2) {
	                // Is a circle
	                startAngle = 0;
	                endAngle = PI2;
	                var dir = anticlockwise ? 1 : -1;
	                if (x >= roots[0] + cx && x <= roots[1] + cx) {
	                    return dir;
	                } else {
	                    return 0;
	                }
	            }

	            if (anticlockwise) {
	                var tmp = startAngle;
	                startAngle = normalizeRadian(endAngle);
	                endAngle = normalizeRadian(tmp);   
	            } else {
	                startAngle = normalizeRadian(startAngle);
	                endAngle = normalizeRadian(endAngle);   
	            }
	            if (startAngle > endAngle) {
	                endAngle += PI2;
	            }

	            var w = 0;
	            for (var i = 0; i < 2; i++) {
	                var x_ = roots[i];
	                if (x_ + cx > x) {
	                    var angle = Math.atan2(y, x_);
	                    var dir = anticlockwise ? 1 : -1;
	                    if (angle < 0) {
	                        angle = PI2 + angle;
	                    }
	                    if (
	                        (angle >= startAngle && angle <= endAngle)
	                        || (angle + PI2 >= startAngle && angle + PI2 <= endAngle)
	                    ) {
	                        if (angle > Math.PI / 2 && angle < Math.PI * 1.5) {
	                            dir = -dir;
	                        }
	                        w += dir;
	                    }
	                }
	            }
	            return w;
	        }

	        /**
	         * 路径包含判断
	         * 与 canvas 一样采用 non-zero winding rule
	         */
	        function isInsidePath(pathArray, lineWidth, brushType, x, y) {
	            var w = 0;
	            var xi = 0;
	            var yi = 0;
	            var x0 = 0;
	            var y0 = 0;
	            var beginSubpath = true;
	            var firstCmd = true;

	            brushType = brushType || 'fill';

	            var hasStroke = brushType === 'stroke' || brushType === 'both';
	            var hasFill = brushType === 'fill' || brushType === 'both';

	            // var roots = [-1, -1, -1];
	            for (var i = 0; i < pathArray.length; i++) {
	                var seg = pathArray[i];
	                var p = seg.points;
	                // Begin a new subpath
	                if (beginSubpath || seg.command === 'M') {
	                    if (i > 0) {
	                        // Close previous subpath
	                        if (hasFill) {
	                            w += windingLine(xi, yi, x0, y0, x, y);
	                        }
	                        if (w !== 0) {
	                            return true;
	                        }
	                    }
	                    x0 = p[p.length - 2];
	                    y0 = p[p.length - 1];
	                    beginSubpath = false;
	                    if (firstCmd && seg.command !== 'A') {
	                        // 如果第一个命令不是M, 是lineTo, bezierCurveTo
	                        // 等绘制命令的话，是会从该绘制的起点开始算的
	                        // Arc 会在之后做单独处理所以这里忽略
	                        firstCmd = false;
	                        xi = x0;
	                        yi = y0;
	                    }
	                }
	                switch (seg.command) {
	                    case 'M':
	                        xi = p[0];
	                        yi = p[1];
	                        break;
	                    case 'L':
	                        if (hasStroke) {
	                            if (isInsideLine(
	                                xi, yi, p[0], p[1], lineWidth, x, y
	                            )) {
	                                return true;
	                            }
	                        }
	                        if (hasFill) {
	                            w += windingLine(xi, yi, p[0], p[1], x, y);
	                        }
	                        xi = p[0];
	                        yi = p[1];
	                        break;
	                    case 'C':
	                        if (hasStroke) {
	                            if (isInsideCubicStroke(
	                                xi, yi, p[0], p[1], p[2], p[3], p[4], p[5],
	                                lineWidth, x, y
	                            )) {
	                                return true;
	                            }
	                        }
	                        if (hasFill) {
	                            w += windingCubic(
	                                xi, yi, p[0], p[1], p[2], p[3], p[4], p[5], x, y
	                            );
	                        }
	                        xi = p[4];
	                        yi = p[5];
	                        break;
	                    case 'Q':
	                        if (hasStroke) {
	                            if (isInsideQuadraticStroke(
	                                xi, yi, p[0], p[1], p[2], p[3],
	                                lineWidth, x, y
	                            )) {
	                                return true;
	                            }
	                        }
	                        if (hasFill) {
	                            w += windingQuadratic(
	                                xi, yi, p[0], p[1], p[2], p[3], x, y
	                            );
	                        }
	                        xi = p[2];
	                        yi = p[3];
	                        break;
	                    case 'A':
	                        // TODO Arc 旋转
	                        // TODO Arc 判断的开销比较大
	                        var cx = p[0];
	                        var cy = p[1];
	                        var rx = p[2];
	                        var ry = p[3];
	                        var theta = p[4];
	                        var dTheta = p[5];
	                        var x1 = Math.cos(theta) * rx + cx;
	                        var y1 = Math.sin(theta) * ry + cy;
	                        // 不是直接使用 arc 命令
	                        if (!firstCmd) {
	                            w += windingLine(xi, yi, x1, y1);
	                        } else {
	                            firstCmd = false;
	                            // 第一个命令起点还未定义
	                            x0 = x1;
	                            y0 = y1;
	                        }
	                        // zr 使用scale来模拟椭圆, 这里也对x做一定的缩放
	                        var _x = (x - cx) * ry / rx + cx;
	                        if (hasStroke) {
	                            if (isInsideArcStroke(
	                                cx, cy, ry, theta, theta + dTheta, 1 - p[7],
	                                lineWidth, _x, y
	                            )) {
	                                return true;
	                            }
	                        }
	                        if (hasFill) {
	                            w += windingArc(
	                                cx, cy, ry, theta, theta + dTheta, 1 - p[7],
	                                _x, y
	                            );
	                        }
	                        xi = Math.cos(theta + dTheta) * rx + cx;
	                        yi = Math.sin(theta + dTheta) * ry + cy;
	                        break;
	                    case 'z':
	                        if (hasStroke) {
	                            if (isInsideLine(
	                                xi, yi, x0, y0, lineWidth, x, y
	                            )) {
	                                return true;
	                            }
	                        }
	                        beginSubpath = true;
	                        break;
	                }
	            }
	            if (hasFill) {
	                w += windingLine(xi, yi, x0, y0, x, y);
	            }
	            return w !== 0;
	        }

	        /**
	         * 测算多行文本宽度
	         * @param {Object} text
	         * @param {Object} textFont
	         */
	        function getTextWidth(text, textFont) {
	            var key = text + ':' + textFont;
	            if (_textWidthCache[key]) {
	                return _textWidthCache[key];
	            }
	            _ctx = _ctx || util.getContext();
	            _ctx.save();

	            if (textFont) {
	                _ctx.font = textFont;
	            }
	            
	            text = (text + '').split('\n');
	            var width = 0;
	            for (var i = 0, l = text.length; i < l; i++) {
	                width =  Math.max(
	                    _ctx.measureText(text[i]).width,
	                    width
	                );
	            }
	            _ctx.restore();

	            _textWidthCache[key] = width;
	            if (++_textWidthCacheCounter > TEXT_CACHE_MAX) {
	                // 内存释放
	                _textWidthCacheCounter = 0;
	                _textWidthCache = {};
	            }
	            
	            return width;
	        }
	        
	        /**
	         * 测算多行文本高度
	         * @param {Object} text
	         * @param {Object} textFont
	         */
	        function getTextHeight(text, textFont) {
	            var key = text + ':' + textFont;
	            if (_textHeightCache[key]) {
	                return _textHeightCache[key];
	            }
	            
	            _ctx = _ctx || util.getContext();

	            _ctx.save();
	            if (textFont) {
	                _ctx.font = textFont;
	            }
	            
	            text = (text + '').split('\n');
	            // 比较粗暴
	            var height = (_ctx.measureText('国').width + 2) * text.length;

	            _ctx.restore();

	            _textHeightCache[key] = height;
	            if (++_textHeightCacheCounter > TEXT_CACHE_MAX) {
	                // 内存释放
	                _textHeightCacheCounter = 0;
	                _textHeightCache = {};
	            }
	            return height;
	        }

	        return {
	            isInside : isInside,
	            isOutside : isOutside,
	            getTextWidth : getTextWidth,
	            getTextHeight : getTextHeight,

	            isInsidePath: isInsidePath,
	            isInsidePolygon: isInsidePolygon,
	            isInsideSector: isInsideSector,
	            isInsideCircle: isInsideCircle,
	            isInsideLine: isInsideLine,
	            isInsideRect: isInsideRect,
	            isInsidePolyline: isInsidePolyline,

	            isInsideCubicStroke: isInsideCubicStroke,
	            isInsideQuadraticStroke: isInsideQuadraticStroke
	        };
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 472 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * 曲线辅助模块
	 * @module zrender/tool/curve
	 * @author pissang(https://www.github.com/pissang)
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function(require) {

	    var vector = __webpack_require__(466);

	    'use strict';

	    var EPSILON = 1e-4;

	    var THREE_SQRT = Math.sqrt(3);
	    var ONE_THIRD = 1 / 3;

	    // 临时变量
	    var _v0 = vector.create();
	    var _v1 = vector.create();
	    var _v2 = vector.create();
	    // var _v3 = vector.create();

	    function isAroundZero(val) {
	        return val > -EPSILON && val < EPSILON;
	    }
	    function isNotAroundZero(val) {
	        return val > EPSILON || val < -EPSILON;
	    }
	    /*
	    function evalCubicCoeff(a, b, c, d, t) {
	        return ((a * t + b) * t + c) * t + d;
	    }
	    */

	    /** 
	     * 计算三次贝塞尔值
	     * @memberOf module:zrender/tool/curve
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @param  {number} p3
	     * @param  {number} t
	     * @return {number}
	     */
	    function cubicAt(p0, p1, p2, p3, t) {
	        var onet = 1 - t;
	        return onet * onet * (onet * p0 + 3 * t * p1)
	             + t * t * (t * p3 + 3 * onet * p2);
	    }

	    /** 
	     * 计算三次贝塞尔导数值
	     * @memberOf module:zrender/tool/curve
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @param  {number} p3
	     * @param  {number} t
	     * @return {number}
	     */
	    function cubicDerivativeAt(p0, p1, p2, p3, t) {
	        var onet = 1 - t;
	        return 3 * (
	            ((p1 - p0) * onet + 2 * (p2 - p1) * t) * onet
	            + (p3 - p2) * t * t
	        );
	    }

	    /**
	     * 计算三次贝塞尔方程根，使用盛金公式
	     * @memberOf module:zrender/tool/curve
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @param  {number} p3
	     * @param  {number} val
	     * @param  {Array.<number>} roots
	     * @return {number} 有效根数目
	     */
	    function cubicRootAt(p0, p1, p2, p3, val, roots) {
	        // Evaluate roots of cubic functions
	        var a = p3 + 3 * (p1 - p2) - p0;
	        var b = 3 * (p2 - p1 * 2 + p0);
	        var c = 3 * (p1  - p0);
	        var d = p0 - val;

	        var A = b * b - 3 * a * c;
	        var B = b * c - 9 * a * d;
	        var C = c * c - 3 * b * d;

	        var n = 0;

	        if (isAroundZero(A) && isAroundZero(B)) {
	            if (isAroundZero(b)) {
	                roots[0] = 0;
	            }
	            else {
	                var t1 = -c / b;  //t1, t2, t3, b is not zero
	                if (t1 >= 0 && t1 <= 1) {
	                    roots[n++] = t1;
	                }
	            }
	        }
	        else {
	            var disc = B * B - 4 * A * C;

	            if (isAroundZero(disc)) {
	                var K = B / A;
	                var t1 = -b / a + K;  // t1, a is not zero
	                var t2 = -K / 2;  // t2, t3
	                if (t1 >= 0 && t1 <= 1) {
	                    roots[n++] = t1;
	                }
	                if (t2 >= 0 && t2 <= 1) {
	                    roots[n++] = t2;
	                }
	            }
	            else if (disc > 0) {
	                var discSqrt = Math.sqrt(disc);
	                var Y1 = A * b + 1.5 * a * (-B + discSqrt);
	                var Y2 = A * b + 1.5 * a * (-B - discSqrt);
	                if (Y1 < 0) {
	                    Y1 = -Math.pow(-Y1, ONE_THIRD);
	                }
	                else {
	                    Y1 = Math.pow(Y1, ONE_THIRD);
	                }
	                if (Y2 < 0) {
	                    Y2 = -Math.pow(-Y2, ONE_THIRD);
	                }
	                else {
	                    Y2 = Math.pow(Y2, ONE_THIRD);
	                }
	                var t1 = (-b - (Y1 + Y2)) / (3 * a);
	                if (t1 >= 0 && t1 <= 1) {
	                    roots[n++] = t1;
	                }
	            }
	            else {
	                var T = (2 * A * b - 3 * a * B) / (2 * Math.sqrt(A * A * A));
	                var theta = Math.acos(T) / 3;
	                var ASqrt = Math.sqrt(A);
	                var tmp = Math.cos(theta);
	                
	                var t1 = (-b - 2 * ASqrt * tmp) / (3 * a);
	                var t2 = (-b + ASqrt * (tmp + THREE_SQRT * Math.sin(theta))) / (3 * a);
	                var t3 = (-b + ASqrt * (tmp - THREE_SQRT * Math.sin(theta))) / (3 * a);
	                if (t1 >= 0 && t1 <= 1) {
	                    roots[n++] = t1;
	                }
	                if (t2 >= 0 && t2 <= 1) {
	                    roots[n++] = t2;
	                }
	                if (t3 >= 0 && t3 <= 1) {
	                    roots[n++] = t3;
	                }
	            }
	        }
	        return n;
	    }

	    /**
	     * 计算三次贝塞尔方程极限值的位置
	     * @memberOf module:zrender/tool/curve
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @param  {number} p3
	     * @param  {Array.<number>} extrema
	     * @return {number} 有效数目
	     */
	    function cubicExtrema(p0, p1, p2, p3, extrema) {
	        var b = 6 * p2 - 12 * p1 + 6 * p0;
	        var a = 9 * p1 + 3 * p3 - 3 * p0 - 9 * p2;
	        var c = 3 * p1 - 3 * p0;

	        var n = 0;
	        if (isAroundZero(a)) {
	            if (isNotAroundZero(b)) {
	                var t1 = -c / b;
	                if (t1 >= 0 && t1 <=1) {
	                    extrema[n++] = t1;
	                }
	            }
	        }
	        else {
	            var disc = b * b - 4 * a * c;
	            if (isAroundZero(disc)) {
	                extrema[0] = -b / (2 * a);
	            }
	            else if (disc > 0) {
	                var discSqrt = Math.sqrt(disc);
	                var t1 = (-b + discSqrt) / (2 * a);
	                var t2 = (-b - discSqrt) / (2 * a);
	                if (t1 >= 0 && t1 <= 1) {
	                    extrema[n++] = t1;
	                }
	                if (t2 >= 0 && t2 <= 1) {
	                    extrema[n++] = t2;
	                }
	            }
	        }
	        return n;
	    }

	    /**
	     * 细分三次贝塞尔曲线
	     * @memberOf module:zrender/tool/curve
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @param  {number} p3
	     * @param  {number} t
	     * @param  {Array.<number>} out
	     */
	    function cubicSubdivide(p0, p1, p2, p3, t, out) {
	        var p01 = (p1 - p0) * t + p0;
	        var p12 = (p2 - p1) * t + p1;
	        var p23 = (p3 - p2) * t + p2;

	        var p012 = (p12 - p01) * t + p01;
	        var p123 = (p23 - p12) * t + p12;

	        var p0123 = (p123 - p012) * t + p012;
	        // Seg0
	        out[0] = p0;
	        out[1] = p01;
	        out[2] = p012;
	        out[3] = p0123;
	        // Seg1
	        out[4] = p0123;
	        out[5] = p123;
	        out[6] = p23;
	        out[7] = p3;
	    }

	    /**
	     * 投射点到三次贝塞尔曲线上，返回投射距离。
	     * 投射点有可能会有一个或者多个，这里只返回其中距离最短的一个。
	     * @param {number} x0
	     * @param {number} y0
	     * @param {number} x1
	     * @param {number} y1
	     * @param {number} x2
	     * @param {number} y2
	     * @param {number} x3
	     * @param {number} y3
	     * @param {number} x
	     * @param {number} y
	     * @param {Array.<number>} [out] 投射点
	     * @return {number}
	     */
	    function cubicProjectPoint(
	        x0, y0, x1, y1, x2, y2, x3, y3,
	        x, y, out
	    ) {
	        // http://pomax.github.io/bezierinfo/#projections
	        var t;
	        var interval = 0.005;
	        var d = Infinity;

	        _v0[0] = x;
	        _v0[1] = y;

	        // 先粗略估计一下可能的最小距离的 t 值
	        // PENDING
	        for (var _t = 0; _t < 1; _t += 0.05) {
	            _v1[0] = cubicAt(x0, x1, x2, x3, _t);
	            _v1[1] = cubicAt(y0, y1, y2, y3, _t);
	            var d1 = vector.distSquare(_v0, _v1);
	            if (d1 < d) {
	                t = _t;
	                d = d1;
	            }
	        }
	        d = Infinity;

	        // At most 32 iteration
	        for (var i = 0; i < 32; i++) {
	            if (interval < EPSILON) {
	                break;
	            }
	            var prev = t - interval;
	            var next = t + interval;
	            // t - interval
	            _v1[0] = cubicAt(x0, x1, x2, x3, prev);
	            _v1[1] = cubicAt(y0, y1, y2, y3, prev);

	            var d1 = vector.distSquare(_v1, _v0);

	            if (prev >= 0 && d1 < d) {
	                t = prev;
	                d = d1;
	            }
	            else {
	                // t + interval
	                _v2[0] = cubicAt(x0, x1, x2, x3, next);
	                _v2[1] = cubicAt(y0, y1, y2, y3, next);
	                var d2 = vector.distSquare(_v2, _v0);

	                if (next <= 1 && d2 < d) {
	                    t = next;
	                    d = d2;
	                }
	                else {
	                    interval *= 0.5;
	                }
	            }
	        }
	        // t
	        if (out) {
	            out[0] = cubicAt(x0, x1, x2, x3, t);
	            out[1] = cubicAt(y0, y1, y2, y3, t);   
	        }
	        // console.log(interval, i);
	        return Math.sqrt(d);
	    }

	    /**
	     * 计算二次方贝塞尔值
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @param  {number} t
	     * @return {number}
	     */
	    function quadraticAt(p0, p1, p2, t) {
	        var onet = 1 - t;
	        return onet * (onet * p0 + 2 * t * p1) + t * t * p2;
	    }

	    /**
	     * 计算二次方贝塞尔导数值
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @param  {number} t
	     * @return {number}
	     */
	    function quadraticDerivativeAt(p0, p1, p2, t) {
	        return 2 * ((1 - t) * (p1 - p0) + t * (p2 - p1));
	    }

	    /**
	     * 计算二次方贝塞尔方程根
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @param  {number} t
	     * @param  {Array.<number>} roots
	     * @return {number} 有效根数目
	     */
	    function quadraticRootAt(p0, p1, p2, val, roots) {
	        var a = p0 - 2 * p1 + p2;
	        var b = 2 * (p1 - p0);
	        var c = p0 - val;

	        var n = 0;
	        if (isAroundZero(a)) {
	            if (isNotAroundZero(b)) {
	                var t1 = -c / b;
	                if (t1 >= 0 && t1 <= 1) {
	                    roots[n++] = t1;
	                }
	            }
	        }
	        else {
	            var disc = b * b - 4 * a * c;
	            if (isAroundZero(disc)) {
	                var t1 = -b / (2 * a);
	                if (t1 >= 0 && t1 <= 1) {
	                    roots[n++] = t1;
	                }
	            }
	            else if (disc > 0) {
	                var discSqrt = Math.sqrt(disc);
	                var t1 = (-b + discSqrt) / (2 * a);
	                var t2 = (-b - discSqrt) / (2 * a);
	                if (t1 >= 0 && t1 <= 1) {
	                    roots[n++] = t1;
	                }
	                if (t2 >= 0 && t2 <= 1) {
	                    roots[n++] = t2;
	                }
	            }
	        }
	        return n;
	    }

	    /**
	     * 计算二次贝塞尔方程极限值
	     * @memberOf module:zrender/tool/curve
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @return {number}
	     */
	    function quadraticExtremum(p0, p1, p2) {
	        var divider = p0 + p2 - 2 * p1;
	        if (divider === 0) {
	            // p1 is center of p0 and p2 
	            return 0.5;
	        }
	        else {
	            return (p0 - p1) / divider;
	        }
	    }

	    /**
	     * 细分二次贝塞尔曲线
	     * @memberOf module:zrender/tool/curve
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @param  {number} t
	     * @param  {Array.<number>} out
	     */
	    function quadraticSubdivide(p0, p1, p2, t, out) {
	        var p01 = (p1 - p0) * t + p0;
	        var p12 = (p2 - p1) * t + p1;
	        var p012 = (p12 - p01) * t + p01;

	        // Seg0
	        out[0] = p0;
	        out[1] = p01;
	        out[2] = p012;

	        // Seg1
	        out[3] = p012;
	        out[4] = p12;
	        out[5] = p2;
	    }

	    /**
	     * 投射点到二次贝塞尔曲线上，返回投射距离。
	     * 投射点有可能会有一个或者多个，这里只返回其中距离最短的一个。
	     * @param {number} x0
	     * @param {number} y0
	     * @param {number} x1
	     * @param {number} y1
	     * @param {number} x2
	     * @param {number} y2
	     * @param {number} x
	     * @param {number} y
	     * @param {Array.<number>} out 投射点
	     * @return {number}
	     */
	    function quadraticProjectPoint(
	        x0, y0, x1, y1, x2, y2,
	        x, y, out
	    ) {
	        // http://pomax.github.io/bezierinfo/#projections
	        var t;
	        var interval = 0.005;
	        var d = Infinity;

	        _v0[0] = x;
	        _v0[1] = y;

	        // 先粗略估计一下可能的最小距离的 t 值
	        // PENDING
	        for (var _t = 0; _t < 1; _t += 0.05) {
	            _v1[0] = quadraticAt(x0, x1, x2, _t);
	            _v1[1] = quadraticAt(y0, y1, y2, _t);
	            var d1 = vector.distSquare(_v0, _v1);
	            if (d1 < d) {
	                t = _t;
	                d = d1;
	            }
	        }
	        d = Infinity;

	        // At most 32 iteration
	        for (var i = 0; i < 32; i++) {
	            if (interval < EPSILON) {
	                break;
	            }
	            var prev = t - interval;
	            var next = t + interval;
	            // t - interval
	            _v1[0] = quadraticAt(x0, x1, x2, prev);
	            _v1[1] = quadraticAt(y0, y1, y2, prev);

	            var d1 = vector.distSquare(_v1, _v0);

	            if (prev >= 0 && d1 < d) {
	                t = prev;
	                d = d1;
	            }
	            else {
	                // t + interval
	                _v2[0] = quadraticAt(x0, x1, x2, next);
	                _v2[1] = quadraticAt(y0, y1, y2, next);
	                var d2 = vector.distSquare(_v2, _v0);
	                if (next <= 1 && d2 < d) {
	                    t = next;
	                    d = d2;
	                }
	                else {
	                    interval *= 0.5;
	                }
	            }
	        }
	        // t
	        if (out) {
	            out[0] = quadraticAt(x0, x1, x2, t);
	            out[1] = quadraticAt(y0, y1, y2, t);   
	        }
	        // console.log(interval, i);
	        return Math.sqrt(d);
	    }

	    return {

	        cubicAt: cubicAt,

	        cubicDerivativeAt: cubicDerivativeAt,

	        cubicRootAt: cubicRootAt,

	        cubicExtrema: cubicExtrema,

	        cubicSubdivide: cubicSubdivide,

	        cubicProjectPoint: cubicProjectPoint,

	        quadraticAt: quadraticAt,

	        quadraticDerivativeAt: quadraticDerivativeAt,

	        quadraticRootAt: quadraticRootAt,

	        quadraticExtremum: quadraticExtremum,

	        quadraticSubdivide: quadraticSubdivide,

	        quadraticProjectPoint: quadraticProjectPoint
	    };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 473 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * shape基类
	 * @module zrender/shape/Base
	 * @author  Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *          errorrik (errorrik@gmail.com)
	 */

	/**
	 * @typedef {Object} IBaseShapeStyle
	 * @property {string} [brushType='fill']
	 * @property {string} [color='#000000'] 填充颜色
	 * @property {string} [strokeColor='#000000'] 描边颜色
	 * @property {string} [lineCape='butt'] 线帽样式，可以是 butt, round, square
	 * @property {number} [lineWidth=1] 描边宽度
	 * @property {number} [opacity=1] 绘制透明度
	 * @property {number} [shadowBlur=0] 阴影模糊度，大于0有效
	 * @property {string} [shadowColor='#000000'] 阴影颜色
	 * @property {number} [shadowOffsetX=0] 阴影横向偏移
	 * @property {number} [shadowOffsetY=0] 阴影纵向偏移
	 * @property {string} [text] 图形中的附加文本
	 * @property {string} [textColor='#000000'] 文本颜色
	 * @property {string} [textFont] 附加文本样式，eg:'bold 18px verdana'
	 * @property {string} [textPosition='end'] 附加文本位置, 可以是 inside, left, right, top, bottom
	 * @property {string} [textAlign] 默认根据textPosition自动设置，附加文本水平对齐。
	 *                                可以是start, end, left, right, center
	 * @property {string} [textBaseline] 默认根据textPosition自动设置，附加文本垂直对齐。
	 *                                可以是top, bottom, middle, alphabetic, hanging, ideographic
	 */

	/**
	 * @typedef {Object} module:zrender/shape/Base~IBoundingRect
	 * @property {number} x 左上角顶点x轴坐标 
	 * @property {number} y 左上角顶点y轴坐标
	 * @property {number} width 包围盒矩形宽度
	 * @property {number} height 包围盒矩形高度
	 */

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function(require) {
	        var vmlCanvasManager = window['G_vmlCanvasManager'];

	        var matrix = __webpack_require__(467);
	        var guid = __webpack_require__(464);
	        var util = __webpack_require__(456);
	        var log = __webpack_require__(462);

	        var Transformable = __webpack_require__(474);
	        var Eventful = __webpack_require__(459);

	        function _fillText(ctx, text, x, y, textFont, textAlign, textBaseline) {
	            if (textFont) {
	                ctx.font = textFont;
	            }
	            ctx.textAlign = textAlign;
	            ctx.textBaseline = textBaseline;
	            var rect = _getTextRect(
	                text, x, y, textFont, textAlign, textBaseline
	            );
	            
	            text = (text + '').split('\n');
	            var lineHeight = __webpack_require__(471).getTextHeight('国', textFont);
	            
	            switch (textBaseline) {
	                case 'top':
	                    y = rect.y;
	                    break;
	                case 'bottom':
	                    y = rect.y + lineHeight;
	                    break;
	                default:
	                    y = rect.y + lineHeight / 2;
	            }
	            
	            for (var i = 0, l = text.length; i < l; i++) {
	                ctx.fillText(text[i], x, y);
	                y += lineHeight;
	            }
	        }

	        /**
	         * 返回矩形区域，用于局部刷新和文字定位
	         * @inner
	         * @param {string} text
	         * @param {number} x
	         * @param {number} y
	         * @param {string} textFont
	         * @param {string} textAlign
	         * @param {string} textBaseline
	         */
	        function _getTextRect(text, x, y, textFont, textAlign, textBaseline) {
	            var area = __webpack_require__(471);
	            var width = area.getTextWidth(text, textFont);
	            var lineHeight = area.getTextHeight('国', textFont);
	            
	            text = (text + '').split('\n');
	            
	            switch (textAlign) {
	                case 'end':
	                case 'right':
	                    x -= width;
	                    break;
	                case 'center':
	                    x -= (width / 2);
	                    break;
	            }

	            switch (textBaseline) {
	                case 'top':
	                    break;
	                case 'bottom':
	                    y -= lineHeight * text.length;
	                    break;
	                default:
	                    y -= lineHeight * text.length / 2;
	            }

	            return {
	                x : x,
	                y : y,
	                width : width,
	                height : lineHeight * text.length
	            };
	        }

	        /**
	         * @alias module:zrender/shape/Base
	         * @constructor
	         * @extends module:zrender/mixin/Transformable
	         * @extends module:zrender/mixin/Eventful
	         * @param {Object} options 关于shape的配置项，可以是shape的自有属性，也可以是自定义的属性。
	         */
	        var Base = function(options) {
	            
	            options = options || {};
	            
	            /**
	             * Shape id, 全局唯一
	             * @type {string}
	             */
	            this.id = options.id || guid();

	            for (var key in options) {
	                this[key] = options[key];
	            }

	            /**
	             * 基础绘制样式
	             * @type {module:zrender/shape/Base~IBaseShapeStyle}
	             */
	            this.style = this.style || {};

	            /**
	             * 高亮样式
	             * @type {module:zrender/shape/Base~IBaseShapeStyle}
	             */
	            this.highlightStyle = this.highlightStyle || null;

	            /**
	             * 父节点
	             * @readonly
	             * @type {module:zrender/Group}
	             * @default null
	             */
	            this.parent = null;

	            this.__dirty = true;

	            this.__clipShapes = [];

	            Transformable.call(this);
	            Eventful.call(this);
	        };
	        /**
	         * 图形是否可见，为true时不绘制图形，但是仍能触发鼠标事件
	         * @name module:zrender/shape/Base#invisible
	         * @type {boolean}
	         * @default false
	         */
	        Base.prototype.invisible = false;

	        /**
	         * 图形是否忽略，为true时忽略图形的绘制以及事件触发
	         * @name module:zrender/shape/Base#ignore
	         * @type {boolean}
	         * @default false
	         */
	        Base.prototype.ignore = false;

	        /**
	         * z层level，决定绘画在哪层canvas中
	         * @name module:zrender/shape/Base#zlevel
	         * @type {number}
	         * @default 0
	         */
	        Base.prototype.zlevel = 0;

	        /**
	         * 是否可拖拽
	         * @name module:zrender/shape/Base#draggable
	         * @type {boolean}
	         * @default false
	         */
	        Base.prototype.draggable = false;

	        /**
	         * 是否可点击
	         * @name module:zrender/shape/Base#clickable
	         * @type {boolean}
	         * @default false
	         */
	        Base.prototype.clickable = false;

	        /**
	         * 是否可以hover
	         * @name module:zrender/shape/Base#hoverable
	         * @type {boolean}
	         * @default true
	         */
	        Base.prototype.hoverable = true;
	        
	        /**
	         * z值，跟zlevel一样影响shape绘制的前后顺序，z值大的shape会覆盖在z值小的上面，
	         * 但是并不会创建新的canvas，所以优先级低于zlevel，而且频繁改动的开销比zlevel小很多。
	         * 
	         * @name module:zrender/shape/Base#z
	         * @type {number}
	         * @default 0
	         */
	        Base.prototype.z = 0;

	        /**
	         * 绘制图形
	         * 
	         * @param {CanvasRenderingContext2D} ctx
	         * @param {boolean} [isHighlight=false] 是否使用高亮属性
	         * @param {Function} [updateCallback]
	         *        需要异步加载资源的shape可以通过这个callback(e), 
	         *        让painter更新视图，base.brush没用，需要的话重载brush
	         */
	        Base.prototype.brush = function (ctx, isHighlight) {

	            var style = this.beforeBrush(ctx, isHighlight);

	            ctx.beginPath();
	            this.buildPath(ctx, style);

	            switch (style.brushType) {
	                /* jshint ignore:start */
	                case 'both':
	                    ctx.fill();
	                case 'stroke':
	                    style.lineWidth > 0 && ctx.stroke();
	                    break;
	                /* jshint ignore:end */
	                default:
	                    ctx.fill();
	            }
	            
	            this.drawText(ctx, style, this.style);

	            this.afterBrush(ctx);
	        };

	        /**
	         * 具体绘制操作前的一些公共操作
	         * @param {CanvasRenderingContext2D} ctx
	         * @param {boolean} [isHighlight=false] 是否使用高亮属性
	         * @return {Object} 处理后的样式
	         */
	        Base.prototype.beforeBrush = function (ctx, isHighlight) {
	            var style = this.style;
	            
	            if (this.brushTypeOnly) {
	                style.brushType = this.brushTypeOnly;
	            }

	            if (isHighlight) {
	                // 根据style扩展默认高亮样式
	                style = this.getHighlightStyle(
	                    style,
	                    this.highlightStyle || {},
	                    this.brushTypeOnly
	                );
	            }

	            if (this.brushTypeOnly == 'stroke') {
	                style.strokeColor = style.strokeColor || style.color;
	            }

	            ctx.save();

	            this.doClip(ctx);

	            this.setContext(ctx, style);

	            // 设置transform
	            this.setTransform(ctx);

	            return style;
	        };

	        /**
	         * 绘制后的处理
	         * @param {CanvasRenderingContext2D} ctx
	         */
	        Base.prototype.afterBrush = function (ctx) {
	            ctx.restore();
	        };

	        var STYLE_CTX_MAP = [
	            [ 'color', 'fillStyle' ],
	            [ 'strokeColor', 'strokeStyle' ],
	            [ 'opacity', 'globalAlpha' ],
	            [ 'lineCap', 'lineCap' ],
	            [ 'lineJoin', 'lineJoin' ],
	            [ 'miterLimit', 'miterLimit' ],
	            [ 'lineWidth', 'lineWidth' ],
	            [ 'shadowBlur', 'shadowBlur' ],
	            [ 'shadowColor', 'shadowColor' ],
	            [ 'shadowOffsetX', 'shadowOffsetX' ],
	            [ 'shadowOffsetY', 'shadowOffsetY' ]
	        ];

	        /**
	         * 设置 fillStyle, strokeStyle, shadow 等通用绘制样式
	         * @param {CanvasRenderingContext2D} ctx
	         * @param {module:zrender/shape/Base~IBaseShapeStyle} style
	         */
	        Base.prototype.setContext = function (ctx, style) {
	            for (var i = 0, len = STYLE_CTX_MAP.length; i < len; i++) {
	                var styleProp = STYLE_CTX_MAP[i][0];
	                var styleValue = style[styleProp];
	                var ctxProp = STYLE_CTX_MAP[i][1];

	                if (typeof styleValue != 'undefined') {
	                    ctx[ctxProp] = styleValue;
	                }
	            }
	        };

	        var clipShapeInvTransform = matrix.create();
	        Base.prototype.doClip = function (ctx) {
	            if (this.__clipShapes && !vmlCanvasManager) {
	                for (var i = 0; i < this.__clipShapes.length; i++) {
	                    var clipShape = this.__clipShapes[i];
	                    if (clipShape.needTransform) {
	                        var m = clipShape.transform;
	                        matrix.invert(clipShapeInvTransform, m);
	                        ctx.transform(
	                            m[0], m[1],
	                            m[2], m[3],
	                            m[4], m[5]
	                        );
	                    }
	                    ctx.beginPath();
	                    clipShape.buildPath(ctx, clipShape.style);
	                    ctx.clip();
	                    // Transform back
	                    if (clipShape.needTransform) {
	                        var m = clipShapeInvTransform;
	                        ctx.transform(
	                            m[0], m[1],
	                            m[2], m[3],
	                            m[4], m[5]
	                        );
	                    }
	                }
	            }
	        };
	    
	        /**
	         * 根据默认样式扩展高亮样式
	         * 
	         * @param {module:zrender/shape/Base~IBaseShapeStyle} style 默认样式
	         * @param {module:zrender/shape/Base~IBaseShapeStyle} highlightStyle 高亮样式
	         * @param {string} brushTypeOnly
	         */
	        Base.prototype.getHighlightStyle = function (style, highlightStyle, brushTypeOnly) {
	            var newStyle = {};
	            for (var k in style) {
	                newStyle[k] = style[k];
	            }

	            var color = __webpack_require__(475);
	            var highlightColor = color.getHighlightColor();
	            // 根据highlightStyle扩展
	            if (style.brushType != 'stroke') {
	                // 带填充则用高亮色加粗边线
	                newStyle.strokeColor = highlightColor;
	                newStyle.lineWidth = (style.lineWidth || 1)
	                                      + this.getHighlightZoom();
	                newStyle.brushType = 'both';
	            }
	            else {
	                if (brushTypeOnly != 'stroke') {
	                    // 描边型的则用原色加工高亮
	                    newStyle.strokeColor = highlightColor;
	                    newStyle.lineWidth = (style.lineWidth || 1)
	                                          + this.getHighlightZoom();
	                } 
	                else {
	                    // 线型的则用原色加工高亮
	                    newStyle.strokeColor = highlightStyle.strokeColor
	                                           || color.mix(
	                                                 style.strokeColor,
	                                                 color.toRGB(highlightColor)
	                                              );
	                }
	            }

	            // 可自定义覆盖默认值
	            for (var k in highlightStyle) {
	                if (typeof highlightStyle[k] != 'undefined') {
	                    newStyle[k] = highlightStyle[k];
	                }
	            }

	            return newStyle;
	        };

	        // 高亮放大效果参数
	        // 当前统一设置为6，如有需要差异设置，通过this.type判断实例类型
	        Base.prototype.getHighlightZoom = function () {
	            return this.type != 'text' ? 6 : 2;
	        };

	        /**
	         * 移动位置
	         * @param {number} dx 横坐标变化
	         * @param {number} dy 纵坐标变化
	         */
	        Base.prototype.drift = function (dx, dy) {
	            this.position[0] += dx;
	            this.position[1] += dy;
	        };

	        /**
	         * 构建绘制的Path
	         * @param {CanvasRenderingContext2D} ctx
	         * @param {module:zrender/shape/Base~IBaseShapeStyle} style
	         */
	        Base.prototype.buildPath = function (ctx, style) {
	            log('buildPath not implemented in ' + this.type);
	        };

	        /**
	         * 计算返回包围盒矩形
	         * @param {module:zrender/shape/Base~IBaseShapeStyle} style
	         * @return {module:zrender/shape/Base~IBoundingRect}
	         */
	        Base.prototype.getRect = function (style) {
	            log('getRect not implemented in ' + this.type);   
	        };
	        
	        /**
	         * 判断鼠标位置是否在图形内
	         * @param {number} x
	         * @param {number} y
	         * @return {boolean}
	         */
	        Base.prototype.isCover = function (x, y) {
	            var originPos = this.transformCoordToLocal(x, y);
	            x = originPos[0];
	            y = originPos[1];

	            // 快速预判并保留判断矩形
	            if (this.isCoverRect(x, y)) {
	                // 矩形内
	                return __webpack_require__(471).isInside(this, this.style, x, y);
	            }
	            
	            return false;
	        };

	        Base.prototype.isCoverRect = function (x, y) {
	            // 快速预判并保留判断矩形
	            var rect = this.style.__rect;
	            if (!rect) {
	                rect = this.style.__rect = this.getRect(this.style);
	            }
	            return x >= rect.x
	                && x <= (rect.x + rect.width)
	                && y >= rect.y
	                && y <= (rect.y + rect.height);
	        };

	        /**
	         * 绘制附加文本
	         * @param {CanvasRenderingContext2D} ctx
	         * @param {module:zrender/shape/Base~IBaseShapeStyle} style 样式
	         * @param {module:zrender/shape/Base~IBaseShapeStyle} normalStyle 默认样式，用于定位文字显示
	         */
	        Base.prototype.drawText = function (ctx, style, normalStyle) {
	            if (typeof(style.text) == 'undefined' || style.text === false) {
	                return;
	            }
	            // 字体颜色策略
	            var textColor = style.textColor || style.color || style.strokeColor;
	            ctx.fillStyle = textColor;

	            // 文本与图形间空白间隙
	            var dd = 10;
	            var al;         // 文本水平对齐
	            var bl;         // 文本垂直对齐
	            var tx;         // 文本横坐标
	            var ty;         // 文本纵坐标

	            var textPosition = style.textPosition       // 用户定义
	                               || this.textPosition     // shape默认
	                               || 'top';                // 全局默认

	            switch (textPosition) {
	                case 'inside': 
	                case 'top': 
	                case 'bottom': 
	                case 'left': 
	                case 'right': 
	                    if (this.getRect) {
	                        var rect = (normalStyle || style).__rect
	                                   || this.getRect(normalStyle || style);

	                        switch (textPosition) {
	                            case 'inside':
	                                tx = rect.x + rect.width / 2;
	                                ty = rect.y + rect.height / 2;
	                                al = 'center';
	                                bl = 'middle';
	                                if (style.brushType != 'stroke'
	                                    && textColor == style.color
	                                ) {
	                                    ctx.fillStyle = '#fff';
	                                }
	                                break;
	                            case 'left':
	                                tx = rect.x - dd;
	                                ty = rect.y + rect.height / 2;
	                                al = 'end';
	                                bl = 'middle';
	                                break;
	                            case 'right':
	                                tx = rect.x + rect.width + dd;
	                                ty = rect.y + rect.height / 2;
	                                al = 'start';
	                                bl = 'middle';
	                                break;
	                            case 'top':
	                                tx = rect.x + rect.width / 2;
	                                ty = rect.y - dd;
	                                al = 'center';
	                                bl = 'bottom';
	                                break;
	                            case 'bottom':
	                                tx = rect.x + rect.width / 2;
	                                ty = rect.y + rect.height + dd;
	                                al = 'center';
	                                bl = 'top';
	                                break;
	                        }
	                    }
	                    break;
	                case 'start':
	                case 'end':
	                    var pointList = style.pointList
	                                    || [
	                                        [style.xStart || 0, style.yStart || 0],
	                                        [style.xEnd || 0, style.yEnd || 0]
	                                    ];
	                    var length = pointList.length;
	                    if (length < 2) {
	                        // 少于2个点就不画了~
	                        return;
	                    }
	                    var xStart;
	                    var xEnd;
	                    var yStart;
	                    var yEnd;
	                    switch (textPosition) {
	                        case 'start':
	                            xStart = pointList[1][0];
	                            xEnd = pointList[0][0];
	                            yStart = pointList[1][1];
	                            yEnd = pointList[0][1];
	                            break;
	                        case 'end':
	                            xStart = pointList[length - 2][0];
	                            xEnd = pointList[length - 1][0];
	                            yStart = pointList[length - 2][1];
	                            yEnd = pointList[length - 1][1];
	                            break;
	                    }
	                    tx = xEnd;
	                    ty = yEnd;
	                    
	                    var angle = Math.atan((yStart - yEnd) / (xEnd - xStart)) / Math.PI * 180;
	                    if ((xEnd - xStart) < 0) {
	                        angle += 180;
	                    }
	                    else if ((yStart - yEnd) < 0) {
	                        angle += 360;
	                    }
	                    
	                    dd = 5;
	                    if (angle >= 30 && angle <= 150) {
	                        al = 'center';
	                        bl = 'bottom';
	                        ty -= dd;
	                    }
	                    else if (angle > 150 && angle < 210) {
	                        al = 'right';
	                        bl = 'middle';
	                        tx -= dd;
	                    }
	                    else if (angle >= 210 && angle <= 330) {
	                        al = 'center';
	                        bl = 'top';
	                        ty += dd;
	                    }
	                    else {
	                        al = 'left';
	                        bl = 'middle';
	                        tx += dd;
	                    }
	                    break;
	                case 'specific':
	                    tx = style.textX || 0;
	                    ty = style.textY || 0;
	                    al = 'start';
	                    bl = 'middle';
	                    break;
	            }

	            if (tx != null && ty != null) {
	                _fillText(
	                    ctx,
	                    style.text, 
	                    tx, ty, 
	                    style.textFont,
	                    style.textAlign || al,
	                    style.textBaseline || bl
	                );
	            }
	        };

	        Base.prototype.modSelf = function() {
	            this.__dirty = true;
	            if (this.style) {
	                this.style.__rect = null;
	            }
	            if (this.highlightStyle) {
	                this.highlightStyle.__rect = null;
	            }
	        };

	        /**
	         * 图形是否会触发事件
	         * @return {boolean}
	         */
	        // TODO, 通过 bind 绑定的事件
	        Base.prototype.isSilent = function () {
	            return !(
	                this.hoverable || this.draggable || this.clickable
	                || this.onmousemove || this.onmouseover || this.onmouseout
	                || this.onmousedown || this.onmouseup || this.onclick
	                || this.ondragenter || this.ondragover || this.ondragleave
	                || this.ondrop
	            );
	        };

	        util.merge(Base.prototype, Transformable.prototype, true);
	        util.merge(Base.prototype, Eventful.prototype, true);

	        return Base;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 474 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * 提供变换扩展
	 * @module zrender/mixin/Transformable
	 * @author pissang (https://www.github.com/pissang)
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {

	    'use strict';

	    var matrix = __webpack_require__(467);
	    var vector = __webpack_require__(466);
	    var origin = [0, 0];

	    var mTranslate = matrix.translate;

	    var EPSILON = 5e-5;

	    function isAroundZero(val) {
	        return val > -EPSILON && val < EPSILON;
	    }
	    function isNotAroundZero(val) {
	        return val > EPSILON || val < -EPSILON;
	    }

	    /**
	     * @alias module:zrender/mixin/Transformable
	     * @constructor
	     */
	    var Transformable = function () {

	        if (!this.position) {
	            /**
	             * 平移
	             * @type {Array.<number>}
	             * @default [0, 0]
	             */
	            this.position = [ 0, 0 ];
	        }
	        if (typeof(this.rotation) == 'undefined') {
	            /**
	             * 旋转，可以通过数组二三项指定旋转的原点
	             * @type {Array.<number>}
	             * @default [0, 0, 0]
	             */
	            this.rotation = [ 0, 0, 0 ];
	        }
	        if (!this.scale) {
	            /**
	             * 缩放，可以通过数组三四项指定缩放的原点
	             * @type {Array.<number>}
	             * @default [1, 1, 0, 0]
	             */
	            this.scale = [ 1, 1, 0, 0 ];
	        }

	        this.needLocalTransform = false;

	        /**
	         * 是否有坐标变换
	         * @type {boolean}
	         * @readOnly
	         */
	        this.needTransform = false;
	    };

	    Transformable.prototype = {
	        
	        constructor: Transformable,

	        updateNeedTransform: function () {
	            this.needLocalTransform = isNotAroundZero(this.rotation[0])
	                || isNotAroundZero(this.position[0])
	                || isNotAroundZero(this.position[1])
	                || isNotAroundZero(this.scale[0] - 1)
	                || isNotAroundZero(this.scale[1] - 1);
	        },

	        /**
	         * 判断是否需要有坐标变换，更新needTransform属性。
	         * 如果有坐标变换, 则从position, rotation, scale以及父节点的transform计算出自身的transform矩阵
	         */
	        updateTransform: function () {
	            
	            this.updateNeedTransform();

	            var parentHasTransform = this.parent && this.parent.needTransform;
	            this.needTransform = this.needLocalTransform || parentHasTransform;
	            
	            if (!this.needTransform) {
	                return;
	            }

	            var m = this.transform || matrix.create();
	            matrix.identity(m);

	            if (this.needLocalTransform) {
	                var scale = this.scale;
	                if (
	                    isNotAroundZero(scale[0])
	                 || isNotAroundZero(scale[1])
	                ) {
	                    origin[0] = -scale[2] || 0;
	                    origin[1] = -scale[3] || 0;
	                    var haveOrigin = isNotAroundZero(origin[0])
	                                  || isNotAroundZero(origin[1]);
	                    if (haveOrigin) {
	                        mTranslate(m, m, origin);
	                    }
	                    matrix.scale(m, m, scale);
	                    if (haveOrigin) {
	                        origin[0] = -origin[0];
	                        origin[1] = -origin[1];
	                        mTranslate(m, m, origin);
	                    }
	                }

	                if (this.rotation instanceof Array) {
	                    if (this.rotation[0] !== 0) {
	                        origin[0] = -this.rotation[1] || 0;
	                        origin[1] = -this.rotation[2] || 0;
	                        var haveOrigin = isNotAroundZero(origin[0])
	                                      || isNotAroundZero(origin[1]);
	                        if (haveOrigin) {
	                            mTranslate(m, m, origin);
	                        }
	                        matrix.rotate(m, m, this.rotation[0]);
	                        if (haveOrigin) {
	                            origin[0] = -origin[0];
	                            origin[1] = -origin[1];
	                            mTranslate(m, m, origin);
	                        }
	                    }
	                }
	                else {
	                    if (this.rotation !== 0) {
	                        matrix.rotate(m, m, this.rotation);
	                    }
	                }

	                if (
	                    isNotAroundZero(this.position[0]) || isNotAroundZero(this.position[1])
	                ) {
	                    mTranslate(m, m, this.position);
	                }
	            }

	            // 应用父节点变换
	            if (parentHasTransform) {
	                if (this.needLocalTransform) {
	                    matrix.mul(m, this.parent.transform, m);
	                }
	                else {
	                    matrix.copy(m, this.parent.transform);
	                }
	            }
	            // 保存这个变换矩阵
	            this.transform = m;

	            this.invTransform = this.invTransform || matrix.create();
	            matrix.invert(this.invTransform, m);
	        },
	        /**
	         * 将自己的transform应用到context上
	         * @param {Context2D} ctx
	         */
	        setTransform: function (ctx) {
	            if (this.needTransform) {
	                var m = this.transform;
	                ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);
	            }
	        },
	        /**
	         * 设置图形的朝向
	         * @param  {Array.<number>|Float32Array} target
	         * @method
	         */
	        lookAt: (function () {
	            var v = vector.create();
	            return function(target) {
	                if (!this.transform) {
	                    this.transform = matrix.create();
	                }
	                var m = this.transform;
	                vector.sub(v, target, this.position);
	                if (isAroundZero(v[0]) && isAroundZero(v[1])) {
	                    return;
	                }
	                vector.normalize(v, v);
	                var scale = this.scale;
	                // Y Axis
	                // TODO Scale origin ?
	                m[2] = v[0] * scale[1];
	                m[3] = v[1] * scale[1];
	                // X Axis
	                m[0] = v[1] * scale[0];
	                m[1] = -v[0] * scale[0];
	                // Position
	                m[4] = this.position[0];
	                m[5] = this.position[1];

	                this.decomposeTransform();
	            };
	        })(),
	        /**
	         * 分解`transform`矩阵到`position`, `rotation`, `scale`
	         */
	        decomposeTransform: function () {
	            if (!this.transform) {
	                return;
	            }
	            var m = this.transform;
	            var sx = m[0] * m[0] + m[1] * m[1];
	            var position = this.position;
	            var scale = this.scale;
	            var rotation = this.rotation;
	            if (isNotAroundZero(sx - 1)) {
	                sx = Math.sqrt(sx);
	            }
	            var sy = m[2] * m[2] + m[3] * m[3];
	            if (isNotAroundZero(sy - 1)) {
	                sy = Math.sqrt(sy);
	            }
	            position[0] = m[4];
	            position[1] = m[5];
	            scale[0] = sx;
	            scale[1] = sy;
	            scale[2] = scale[3] = 0;
	            rotation[0] = Math.atan2(-m[1] / sy, m[0] / sx);
	            rotation[1] = rotation[2] = 0;
	        },

	        /**
	         * 变换坐标位置到 shape 的局部坐标空间
	         * @method
	         * @param {number} x
	         * @param {number} y
	         * @return {Array.<number>}
	         */
	        transformCoordToLocal: function (x, y) {
	            var v2 = [x, y];
	            if (this.needTransform && this.invTransform) {
	                vector.applyTransform(v2, v2, this.invTransform);
	            }
	            return v2;
	        }
	    };

	    return Transformable;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 475 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * 颜色辅助模块
	 * @module zrender/tool/color
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function(require) {
	    var util = __webpack_require__(456);

	    var _ctx;

	    // Color palette is an array containing the default colors for the chart's
	    // series.
	    // When all colors are used, new colors are selected from the start again.
	    // Defaults to:
	    // 默认色板
	    var palette = [
	        '#ff9277', ' #dddd00', ' #ffc877', ' #bbe3ff', ' #d5ffbb',
	        '#bbbbff', ' #ddb000', ' #b0dd00', ' #e2bbff', ' #ffbbe3',
	        '#ff7777', ' #ff9900', ' #83dd00', ' #77e3ff', ' #778fff',
	        '#c877ff', ' #ff77ab', ' #ff6600', ' #aa8800', ' #77c7ff',
	        '#ad77ff', ' #ff77ff', ' #dd0083', ' #777700', ' #00aa00',
	        '#0088aa', ' #8400dd', ' #aa0088', ' #dd0000', ' #772e00'
	    ];
	    var _palette = palette;

	    var highlightColor = 'rgba(255,255,0,0.5)';
	    var _highlightColor = highlightColor;

	    // 颜色格式
	    /*jshint maxlen: 330 */
	    var colorRegExp = /^\s*((#[a-f\d]{6})|(#[a-f\d]{3})|rgba?\(\s*([\d\.]+%?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+%?(?:\s*,\s*[\d\.]+%?)?)\s*\)|hsba?\(\s*([\d\.]+(?:deg|\xb0|%)?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+%?(?:\s*,\s*[\d\.]+)?)%?\s*\)|hsla?\(\s*([\d\.]+(?:deg|\xb0|%)?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+%?(?:\s*,\s*[\d\.]+)?)%?\s*\))\s*$/i;

	    var _nameColors = {
	        aliceblue : '#f0f8ff',
	        antiquewhite : '#faebd7',
	        aqua : '#0ff',
	        aquamarine : '#7fffd4',
	        azure : '#f0ffff',
	        beige : '#f5f5dc',
	        bisque : '#ffe4c4',
	        black : '#000',
	        blanchedalmond : '#ffebcd',
	        blue : '#00f',
	        blueviolet : '#8a2be2',
	        brown : '#a52a2a',
	        burlywood : '#deb887',
	        cadetblue : '#5f9ea0',
	        chartreuse : '#7fff00',
	        chocolate : '#d2691e',
	        coral : '#ff7f50',
	        cornflowerblue : '#6495ed',
	        cornsilk : '#fff8dc',
	        crimson : '#dc143c',
	        cyan : '#0ff',
	        darkblue : '#00008b',
	        darkcyan : '#008b8b',
	        darkgoldenrod : '#b8860b',
	        darkgray : '#a9a9a9',
	        darkgrey : '#a9a9a9',
	        darkgreen : '#006400',
	        darkkhaki : '#bdb76b',
	        darkmagenta : '#8b008b',
	        darkolivegreen : '#556b2f',
	        darkorange : '#ff8c00',
	        darkorchid : '#9932cc',
	        darkred : '#8b0000',
	        darksalmon : '#e9967a',
	        darkseagreen : '#8fbc8f',
	        darkslateblue : '#483d8b',
	        darkslategray : '#2f4f4f',
	        darkslategrey : '#2f4f4f',
	        darkturquoise : '#00ced1',
	        darkviolet : '#9400d3',
	        deeppink : '#ff1493',
	        deepskyblue : '#00bfff',
	        dimgray : '#696969',
	        dimgrey : '#696969',
	        dodgerblue : '#1e90ff',
	        firebrick : '#b22222',
	        floralwhite : '#fffaf0',
	        forestgreen : '#228b22',
	        fuchsia : '#f0f',
	        gainsboro : '#dcdcdc',
	        ghostwhite : '#f8f8ff',
	        gold : '#ffd700',
	        goldenrod : '#daa520',
	        gray : '#808080',
	        grey : '#808080',
	        green : '#008000',
	        greenyellow : '#adff2f',
	        honeydew : '#f0fff0',
	        hotpink : '#ff69b4',
	        indianred : '#cd5c5c',
	        indigo : '#4b0082',
	        ivory : '#fffff0',
	        khaki : '#f0e68c',
	        lavender : '#e6e6fa',
	        lavenderblush : '#fff0f5',
	        lawngreen : '#7cfc00',
	        lemonchiffon : '#fffacd',
	        lightblue : '#add8e6',
	        lightcoral : '#f08080',
	        lightcyan : '#e0ffff',
	        lightgoldenrodyellow : '#fafad2',
	        lightgray : '#d3d3d3',
	        lightgrey : '#d3d3d3',
	        lightgreen : '#90ee90',
	        lightpink : '#ffb6c1',
	        lightsalmon : '#ffa07a',
	        lightseagreen : '#20b2aa',
	        lightskyblue : '#87cefa',
	        lightslategray : '#789',
	        lightslategrey : '#789',
	        lightsteelblue : '#b0c4de',
	        lightyellow : '#ffffe0',
	        lime : '#0f0',
	        limegreen : '#32cd32',
	        linen : '#faf0e6',
	        magenta : '#f0f',
	        maroon : '#800000',
	        mediumaquamarine : '#66cdaa',
	        mediumblue : '#0000cd',
	        mediumorchid : '#ba55d3',
	        mediumpurple : '#9370d8',
	        mediumseagreen : '#3cb371',
	        mediumslateblue : '#7b68ee',
	        mediumspringgreen : '#00fa9a',
	        mediumturquoise : '#48d1cc',
	        mediumvioletred : '#c71585',
	        midnightblue : '#191970',
	        mintcream : '#f5fffa',
	        mistyrose : '#ffe4e1',
	        moccasin : '#ffe4b5',
	        navajowhite : '#ffdead',
	        navy : '#000080',
	        oldlace : '#fdf5e6',
	        olive : '#808000',
	        olivedrab : '#6b8e23',
	        orange : '#ffa500',
	        orangered : '#ff4500',
	        orchid : '#da70d6',
	        palegoldenrod : '#eee8aa',
	        palegreen : '#98fb98',
	        paleturquoise : '#afeeee',
	        palevioletred : '#d87093',
	        papayawhip : '#ffefd5',
	        peachpuff : '#ffdab9',
	        peru : '#cd853f',
	        pink : '#ffc0cb',
	        plum : '#dda0dd',
	        powderblue : '#b0e0e6',
	        purple : '#800080',
	        red : '#f00',
	        rosybrown : '#bc8f8f',
	        royalblue : '#4169e1',
	        saddlebrown : '#8b4513',
	        salmon : '#fa8072',
	        sandybrown : '#f4a460',
	        seagreen : '#2e8b57',
	        seashell : '#fff5ee',
	        sienna : '#a0522d',
	        silver : '#c0c0c0',
	        skyblue : '#87ceeb',
	        slateblue : '#6a5acd',
	        slategray : '#708090',
	        slategrey : '#708090',
	        snow : '#fffafa',
	        springgreen : '#00ff7f',
	        steelblue : '#4682b4',
	        tan : '#d2b48c',
	        teal : '#008080',
	        thistle : '#d8bfd8',
	        tomato : '#ff6347',
	        turquoise : '#40e0d0',
	        violet : '#ee82ee',
	        wheat : '#f5deb3',
	        white : '#fff',
	        whitesmoke : '#f5f5f5',
	        yellow : '#ff0',
	        yellowgreen : '#9acd32'
	    };

	    /**
	     * 自定义调色板
	     */
	    function customPalette(userPalete) {
	        palette = userPalete;
	    }

	    /**
	     * 复位默认色板
	     */
	    function resetPalette() {
	        palette = _palette;
	    }

	    /**
	     * 获取色板颜色
	     * @memberOf module:zrender/tool/color
	     * @param {number} idx 色板位置
	     * @param {Array.<string>} [userPalete] 自定义色板
	     * @return {string} 颜色
	     */
	    function getColor(idx, userPalete) {
	        idx = idx | 0;
	        userPalete = userPalete || palette;
	        return userPalete[idx % userPalete.length];
	    }

	    /**
	     * 自定义默认高亮颜色
	     */
	    function customHighlight(userHighlightColor) {
	        highlightColor = userHighlightColor;
	    }

	    /**
	     * 重置默认高亮颜色
	     */
	    function resetHighlight() {
	        _highlightColor = highlightColor;
	    }

	    /**
	     * 获取默认高亮颜色
	     */
	    function getHighlightColor() {
	        return highlightColor;
	    }

	    /**
	     * 径向渐变
	     * @memberOf module:zrender/tool/color
	     * @param {number} x0 渐变起点
	     * @param {number} y0
	     * @param {number} r0
	     * @param {number} x1 渐变终点
	     * @param {number} y1
	     * @param {number} r1
	     * @param {Array} colorList 颜色列表
	     * @return {CanvasGradient}
	     */
	    function getRadialGradient(x0, y0, r0, x1, y1, r1, colorList) {
	        if (!_ctx) {
	            _ctx = util.getContext();
	        }
	        var gradient = _ctx.createRadialGradient(x0, y0, r0, x1, y1, r1);
	        for (var i = 0, l = colorList.length; i < l; i++) {
	            gradient.addColorStop(colorList[i][0], colorList[i][1]);
	        }
	        gradient.__nonRecursion = true;
	        return gradient;
	    }

	    /**
	     * 线性渐变
	     * @param {Object} x0 渐变起点
	     * @param {Object} y0
	     * @param {Object} x1 渐变终点
	     * @param {Object} y1
	     * @param {Array} colorList 颜色列表
	     */
	    function getLinearGradient(x0, y0, x1, y1, colorList) {
	        if (!_ctx) {
	            _ctx = util.getContext();
	        }
	        var gradient = _ctx.createLinearGradient(x0, y0, x1, y1);
	        for (var i = 0, l = colorList.length; i < l; i++) {
	            gradient.addColorStop(colorList[i][0], colorList[i][1]);
	        }
	        gradient.__nonRecursion = true;
	        return gradient;
	    }

	    /**
	     * 获取两种颜色之间渐变颜色数组
	     * @param {color} start 起始颜色
	     * @param {color} end 结束颜色
	     * @param {number} step 渐变级数
	     * @return {Array}  颜色数组
	     */
	    function getStepColors(start, end, step) {
	        start = toRGBA(start);
	        end = toRGBA(end);
	        start = getData(start);
	        end = getData(end);

	        var colors = [];
	        var stepR = (end[0] - start[0]) / step;
	        var stepG = (end[1] - start[1]) / step;
	        var stepB = (end[2] - start[2]) / step;
	        var stepA = (end[3] - start[3]) / step;
	        // 生成颜色集合
	        // fix by linfeng 颜色堆积
	        for (var i = 0, r = start[0], g = start[1], b = start[2], a = start[3]; i < step; i++) {
	            colors[i] = toColor([
	                adjust(Math.floor(r), [ 0, 255 ]),
	                adjust(Math.floor(g), [ 0, 255 ]), 
	                adjust(Math.floor(b), [ 0, 255 ]),
	                a.toFixed(4) - 0
	            ],'rgba');
	            r += stepR;
	            g += stepG;
	            b += stepB;
	            a += stepA;
	        }
	        r = end[0];
	        g = end[1];
	        b = end[2];
	        a = end[3];
	        colors[i] = toColor([r, g, b, a], 'rgba');
	        return colors;
	    }

	    /**
	     * 获取指定级数的渐变颜色数组
	     * @memberOf module:zrender/tool/color
	     * @param {Array.<string>} colors 颜色组
	     * @param {number} [step=20] 渐变级数
	     * @return {Array.<string>}  颜色数组
	     */
	    function getGradientColors(colors, step) {
	        var ret = [];
	        var len = colors.length;
	        if (step === undefined) {
	            step = 20;
	        }
	        if (len === 1) {
	            ret = getStepColors(colors[0], colors[0], step);
	        }
	        else if (len > 1) {
	            for (var i = 0, n = len - 1; i < n; i++) {
	                var steps = getStepColors(colors[i], colors[i + 1], step);
	                if (i < n - 1) {
	                    steps.pop();
	                }
	                ret = ret.concat(steps);
	            }
	        }
	        return ret;
	    }

	    /**
	     * 颜色值数组转为指定格式颜色,例如:<br/>
	     * data = [60,20,20,0.1] format = 'rgba'
	     * 返回：rgba(60,20,20,0.1)
	     * @param {Array} data 颜色值数组
	     * @param {string} format 格式,默认rgb
	     * @return {string} 颜色
	     */
	    function toColor(data, format) {
	        format = format || 'rgb';
	        if (data && (data.length === 3 || data.length === 4)) {
	            data = map(data,
	                function(c) {
	                    return c > 1 ? Math.ceil(c) : c;
	                }
	            );

	            if (format.indexOf('hex') > -1) {
	                return '#' + ((1 << 24) + (data[0] << 16) + (data[1] << 8) + (+data[2])).toString(16).slice(1);
	            }
	            else if (format.indexOf('hs') > -1) {
	                var sx = map(data.slice(1, 3),
	                    function(c) {
	                        return c + '%';
	                    }
	                );
	                data[1] = sx[0];
	                data[2] = sx[1];
	            }

	            if (format.indexOf('a') > -1) {
	                if (data.length === 3) {
	                    data.push(1);
	                }
	                data[3] = adjust(data[3], [ 0, 1 ]);
	                return format + '(' + data.slice(0, 4).join(',') + ')';
	            }

	            return format + '(' + data.slice(0, 3).join(',') + ')';
	        }
	    }

	    /**
	     * 颜色字符串转换为rgba数组
	     * @memberOf module:zrender/tool/color
	     * @param {string} color 颜色
	     * @return {Array.<number>} 颜色值数组
	     */
	    function toArray(color) {
	        color = trim(color);
	        if (color.indexOf('rgba') < 0) {
	            color = toRGBA(color);
	        }

	        var data = [];
	        var i = 0;
	        color.replace(/[\d.]+/g, function (n) {
	            if (i < 3) {
	                n = n | 0;
	            }
	            else {
	                // Alpha
	                n = +n;
	            }
	            data[i++] = n;
	        });
	        return data;
	    }

	    /**
	     * 颜色格式转化
	     *
	     * @param {string} color 颜色值数组
	     * @param {string} format 格式,默认rgb
	     * @return {string} 颜色
	     */
	    function convert(color, format) {
	        if (!isCalculableColor(color)) {
	            return color;
	        }
	        var data = getData(color);
	        var alpha = data[3];
	        if (typeof alpha === 'undefined') {
	            alpha = 1;
	        }

	        if (color.indexOf('hsb') > -1) {
	            data = _HSV_2_RGB(data);
	        }
	        else if (color.indexOf('hsl') > -1) {
	            data = _HSL_2_RGB(data);
	        }

	        if (format.indexOf('hsb') > -1 || format.indexOf('hsv') > -1) {
	            data = _RGB_2_HSB(data);
	        }
	        else if (format.indexOf('hsl') > -1) {
	            data = _RGB_2_HSL(data);
	        }

	        data[3] = alpha;

	        return toColor(data, format);
	    }

	    /**
	     * 转换为rgba格式的颜色
	     * @memberOf module:zrender/tool/color
	     * @param {string} color 颜色
	     * @return {string} rgba颜色，rgba(r,g,b,a)
	     */
	    function toRGBA(color) {
	        return convert(color, 'rgba');
	    }

	    /**
	     * 转换为rgb数字格式的颜色
	     * @memberOf module:zrender/tool/color
	     * @param {string} color 颜色
	     * @return {string} rgb颜色，rgb(0,0,0)格式
	     */
	    function toRGB(color) {
	        return convert(color, 'rgb');
	    }

	    /**
	     * 转换为16进制颜色
	     * @memberOf module:zrender/tool/color
	     * @param {string} color 颜色
	     * @return {string} 16进制颜色，#rrggbb格式
	     */
	    function toHex(color) {
	        return convert(color, 'hex');
	    }

	    /**
	     * 转换为HSV颜色
	     * @memberOf module:zrender/tool/color
	     * @param {string} color 颜色
	     * @return {string} HSVA颜色，hsva(h,s,v,a)
	     */
	    function toHSVA(color) {
	        return convert(color, 'hsva');
	    }

	    /**
	     * 转换为HSV颜色
	     * @memberOf module:zrender/tool/color
	     * @param {string} color 颜色
	     * @return {string} HSV颜色，hsv(h,s,v)
	     */
	    function toHSV(color) {
	        return convert(color, 'hsv');
	    }

	    /**
	     * 转换为HSBA颜色
	     * @memberOf module:zrender/tool/color
	     * @param {string} color 颜色
	     * @return {string} HSBA颜色，hsba(h,s,b,a)
	     */
	    function toHSBA(color) {
	        return convert(color, 'hsba');
	    }

	    /**
	     * 转换为HSB颜色
	     * @memberOf module:zrender/tool/color
	     * @param {string} color 颜色
	     * @return {string} HSB颜色，hsb(h,s,b)
	     */
	    function toHSB(color) {
	        return convert(color, 'hsb');
	    }

	    /**
	     * 转换为HSLA颜色
	     * @memberOf module:zrender/tool/color
	     * @param {string} color 颜色
	     * @return {string} HSLA颜色，hsla(h,s,l,a)
	     */
	    function toHSLA(color) {
	        return convert(color, 'hsla');
	    }

	    /**
	     * 转换为HSL颜色
	     * @memberOf module:zrender/tool/color
	     * @param {string} color 颜色
	     * @return {string} HSL颜色，hsl(h,s,l)
	     */
	    function toHSL(color) {
	        return convert(color, 'hsl');
	    }

	    /**
	     * 转换颜色名
	     * 
	     * @param {string} color 颜色
	     * @return {string} 颜色名
	     */
	    function toName(color) {
	        for (var key in _nameColors) {
	            if (toHex(_nameColors[key]) === toHex(color)) {
	                return key;
	            }
	        }
	        return null;
	    }

	    /**
	     * 移除颜色中多余空格
	     * 
	     * @param {string} color 颜色
	     * @return {string} 无空格颜色
	     */
	    function trim(color) {
	        return String(color).replace(/\s+/g, '');
	    }

	    /**
	     * 颜色规范化
	     * @memberOf module:zrender/tool/color
	     * @param {string} color 颜色
	     * @return {string} 规范化后的颜色
	     */
	    function normalize(color) {
	        // 颜色名
	        if (_nameColors[color]) {
	            color = _nameColors[color];
	        }
	        // 去掉空格
	        color = trim(color);
	        // hsv与hsb等价
	        color = color.replace(/hsv/i, 'hsb');
	        // rgb转为rrggbb
	        if (/^#[\da-f]{3}$/i.test(color)) {
	            color = parseInt(color.slice(1), 16);
	            var r = (color & 0xf00) << 8;
	            var g = (color & 0xf0) << 4;
	            var b = color & 0xf;

	            color = '#' + ((1 << 24) + (r << 4) + r + (g << 4) + g + (b << 4) + b).toString(16).slice(1);
	        }
	        // 或者使用以下正则替换，不过 chrome 下性能相对差点
	        // color = color.replace(/^#([\da-f])([\da-f])([\da-f])$/i, '#$1$1$2$2$3$3');
	        return color;
	    }

	    /**
	     * 颜色加深或减淡，当level>0加深，当level<0减淡
	     * @memberOf module:zrender/tool/color
	     * @param {string} color 颜色
	     * @param {number} level 升降程度,取值区间[-1,1]
	     * @return {string} 加深或减淡后颜色值
	     */
	    function lift(color, level) {
	        if (!isCalculableColor(color)) {
	            return color;
	        }
	        var direct = level > 0 ? 1 : -1;
	        if (typeof level === 'undefined') {
	            level = 0;
	        }
	        level = Math.abs(level) > 1 ? 1 : Math.abs(level);
	        color = toRGB(color);
	        var data = getData(color);
	        for (var i = 0; i < 3; i++) {
	            if (direct === 1) {
	                data[i] = data[i] * (1 - level) | 0;
	            }
	            else {
	                data[i] = ((255 - data[i]) * level + data[i]) | 0;
	            }
	        }
	        return 'rgb(' + data.join(',') + ')';
	    }

	    /**
	     * 颜色翻转,[255-r,255-g,255-b,1-a]
	     * @memberOf module:zrender/tool/color
	     * @param {string} color 颜色
	     * @return {string} 翻转颜色
	     */
	    function reverse(color) {
	        if (!isCalculableColor(color)) {
	            return color;
	        }
	        var data = getData(toRGBA(color));
	        data = map(data,
	            function(c) {
	                return 255 - c;
	            }
	        );
	        return toColor(data, 'rgb');
	    }

	    /**
	     * 简单两种颜色混合
	     * @memberOf module:zrender/tool/color
	     * @param {string} color1 第一种颜色
	     * @param {string} color2 第二种颜色
	     * @param {number} weight 混合权重[0-1]
	     * @return {string} 结果色,rgb(r,g,b)或rgba(r,g,b,a)
	     */
	    function mix(color1, color2, weight) {
	        if (!isCalculableColor(color1) || !isCalculableColor(color2)) {
	            return color1;
	        }
	        
	        if (typeof weight === 'undefined') {
	            weight = 0.5;
	        }
	        weight = 1 - adjust(weight, [ 0, 1 ]);

	        var w = weight * 2 - 1;
	        var data1 = getData(toRGBA(color1));
	        var data2 = getData(toRGBA(color2));

	        var d = data1[3] - data2[3];

	        var weight1 = (((w * d === -1) ? w : (w + d) / (1 + w * d)) + 1) / 2;
	        var weight2 = 1 - weight1;

	        var data = [];

	        for (var i = 0; i < 3; i++) {
	            data[i] = data1[i] * weight1 + data2[i] * weight2;
	        }

	        var alpha = data1[3] * weight + data2[3] * (1 - weight);
	        alpha = Math.max(0, Math.min(1, alpha));

	        if (data1[3] === 1 && data2[3] === 1) {// 不考虑透明度
	            return toColor(data, 'rgb');
	        }
	        data[3] = alpha;
	        return toColor(data, 'rgba');
	    }

	    /**
	     * 随机颜色
	     * 
	     * @return {string} 颜色值，#rrggbb格式
	     */
	    function random() {
	        return '#' + (Math.random().toString(16) + '0000').slice(2, 8);
	    }

	    /**
	     * 获取颜色值数组,返回值范围： <br/>
	     * RGB 范围[0-255] <br/>
	     * HSL/HSV/HSB 范围[0-1]<br/>
	     * A透明度范围[0-1]
	     * 支持格式：
	     * #rgb
	     * #rrggbb
	     * rgb(r,g,b)
	     * rgb(r%,g%,b%)
	     * rgba(r,g,b,a)
	     * hsb(h,s,b) // hsv与hsb等价
	     * hsb(h%,s%,b%)
	     * hsba(h,s,b,a)
	     * hsl(h,s,l)
	     * hsl(h%,s%,l%)
	     * hsla(h,s,l,a)
	     *
	     * @param {string} color 颜色
	     * @return {Array.<number>} 颜色值数组或null
	     */
	    function getData(color) {
	        color = normalize(color);
	        var r = color.match(colorRegExp);
	        if (r === null) {
	            throw new Error('The color format error'); // 颜色格式错误
	        }
	        var d;
	        var a;
	        var data = [];
	        var rgb;

	        if (r[2]) {
	            // #rrggbb
	            d = r[2].replace('#', '').split('');
	            rgb = [ d[0] + d[1], d[2] + d[3], d[4] + d[5] ];
	            data = map(rgb,
	                function(c) {
	                    return adjust(parseInt(c, 16), [ 0, 255 ]);
	                }
	            );

	        }
	        else if (r[4]) {
	            // rgb rgba
	            var rgba = (r[4]).split(',');
	            a = rgba[3];
	            rgb = rgba.slice(0, 3);
	            data = map(
	                rgb,
	                function(c) {
	                    c = Math.floor(
	                        c.indexOf('%') > 0 ? parseInt(c, 0) * 2.55 : c
	                    );
	                    return adjust(c, [ 0, 255 ]);
	                }
	            );

	            if (typeof a !== 'undefined') {
	                data.push(adjust(parseFloat(a), [ 0, 1 ]));
	            }
	        }
	        else if (r[5] || r[6]) {
	            // hsb hsba hsl hsla
	            var hsxa = (r[5] || r[6]).split(',');
	            var h = parseInt(hsxa[0], 0) / 360;
	            var s = hsxa[1];
	            var x = hsxa[2];
	            a = hsxa[3];
	            data = map([ s, x ],
	                function(c) {
	                    return adjust(parseFloat(c) / 100, [ 0, 1 ]);
	                }
	            );
	            data.unshift(h);
	            if (typeof a !== 'undefined') {
	                data.push(adjust(parseFloat(a), [ 0, 1 ]));
	            }
	        }
	        return data;
	    }

	    /**
	     * 设置颜色透明度
	     * @memberOf module:zrender/tool/color
	     * @param {string} color 颜色
	     * @param {number} a 透明度,区间[0,1]
	     * @return {string} rgba颜色值
	     */
	    function alpha(color, a) {
	        if (!isCalculableColor(color)) {
	            return color;
	        }
	        if (a === null) {
	            a = 1;
	        }
	        var data = getData(toRGBA(color));
	        data[3] = adjust(Number(a).toFixed(4), [ 0, 1 ]);

	        return toColor(data, 'rgba');
	    }

	    // 数组映射
	    function map(array, fun) {
	        if (typeof fun !== 'function') {
	            throw new TypeError();
	        }
	        var len = array ? array.length : 0;
	        for (var i = 0; i < len; i++) {
	            array[i] = fun(array[i]);
	        }
	        return array;
	    }

	    // 调整值区间
	    function adjust(value, region) {
	        // < to <= & > to >=
	        // modify by linzhifeng 2014-05-25 because -0 == 0
	        if (value <= region[0]) {
	            value = region[0];
	        }
	        else if (value >= region[1]) {
	            value = region[1];
	        }
	        return value;
	    }
	    
	    function isCalculableColor(color) {
	        return color instanceof Array || typeof color === 'string';
	    }

	    // 参见 http:// www.easyrgb.com/index.php?X=MATH
	    function _HSV_2_RGB(data) {
	        var H = data[0];
	        var S = data[1];
	        var V = data[2];
	        // HSV from 0 to 1
	        var R; 
	        var G;
	        var B;
	        if (S === 0) {
	            R = V * 255;
	            G = V * 255;
	            B = V * 255;
	        }
	        else {
	            var h = H * 6;
	            if (h === 6) {
	                h = 0;
	            }
	            var i = h | 0;
	            var v1 = V * (1 - S);
	            var v2 = V * (1 - S * (h - i));
	            var v3 = V * (1 - S * (1 - (h - i)));
	            var r = 0;
	            var g = 0;
	            var b = 0;

	            if (i === 0) {
	                r = V;
	                g = v3;
	                b = v1;
	            }
	            else if (i === 1) {
	                r = v2;
	                g = V;
	                b = v1;
	            }
	            else if (i === 2) {
	                r = v1;
	                g = V;
	                b = v3;
	            }
	            else if (i === 3) {
	                r = v1;
	                g = v2;
	                b = V;
	            }
	            else if (i === 4) {
	                r = v3;
	                g = v1;
	                b = V;
	            }
	            else {
	                r = V;
	                g = v1;
	                b = v2;
	            }

	            // RGB results from 0 to 255
	            R = r * 255;
	            G = g * 255;
	            B = b * 255;
	        }
	        return [ R, G, B ];
	    }

	    function _HSL_2_RGB(data) {
	        var H = data[0];
	        var S = data[1];
	        var L = data[2];
	        // HSL from 0 to 1
	        var R;
	        var G;
	        var B;
	        if (S === 0) {
	            R = L * 255;
	            G = L * 255;
	            B = L * 255;
	        }
	        else {
	            var v2;
	            if (L < 0.5) {
	                v2 = L * (1 + S);
	            }
	            else {
	                v2 = (L + S) - (S * L);
	            }

	            var v1 = 2 * L - v2;

	            R = 255 * _HUE_2_RGB(v1, v2, H + (1 / 3));
	            G = 255 * _HUE_2_RGB(v1, v2, H);
	            B = 255 * _HUE_2_RGB(v1, v2, H - (1 / 3));
	        }
	        return [ R, G, B ];
	    }

	    function _HUE_2_RGB(v1, v2, vH) {
	        if (vH < 0) {
	            vH += 1;
	        }
	        if (vH > 1) {
	            vH -= 1;
	        }
	        if ((6 * vH) < 1) {
	            return (v1 + (v2 - v1) * 6 * vH);
	        }
	        if ((2 * vH) < 1) {
	            return (v2);
	        }
	        if ((3 * vH) < 2) {
	            return (v1 + (v2 - v1) * ((2 / 3) - vH) * 6);
	        }
	        return v1;
	    }

	    function _RGB_2_HSB(data) {
	        // RGB from 0 to 255
	        var R = (data[0] / 255);
	        var G = (data[1] / 255);
	        var B = (data[2] / 255);

	        var vMin = Math.min(R, G, B); // Min. value of RGB
	        var vMax = Math.max(R, G, B); // Max. value of RGB
	        var delta = vMax - vMin; // Delta RGB value
	        var V = vMax;
	        var H;
	        var S;

	        // HSV results from 0 to 1
	        if (delta === 0) {
	            H = 0;
	            S = 0;
	        }
	        else {
	            S = delta / vMax;

	            var deltaR = (((vMax - R) / 6) + (delta / 2)) / delta;
	            var deltaG = (((vMax - G) / 6) + (delta / 2)) / delta;
	            var deltaB = (((vMax - B) / 6) + (delta / 2)) / delta;

	            if (R === vMax) {
	                H = deltaB - deltaG;
	            }
	            else if (G === vMax) {
	                H = (1 / 3) + deltaR - deltaB;
	            }
	            else if (B === vMax) {
	                H = (2 / 3) + deltaG - deltaR;
	            }

	            if (H < 0) {
	                H += 1;
	            }
	            if (H > 1) {
	                H -= 1;
	            }
	        }
	        H = H * 360;
	        S = S * 100;
	        V = V * 100;
	        return [ H, S, V ];
	    }

	    function _RGB_2_HSL(data) {
	        // RGB from 0 to 255
	        var R = (data[0] / 255);
	        var G = (data[1] / 255);
	        var B = (data[2] / 255);

	        var vMin = Math.min(R, G, B); // Min. value of RGB
	        var vMax = Math.max(R, G, B); // Max. value of RGB
	        var delta = vMax - vMin; // Delta RGB value

	        var L = (vMax + vMin) / 2;
	        var H;
	        var S;
	        // HSL results from 0 to 1
	        if (delta === 0) {
	            H = 0;
	            S = 0;
	        }
	        else {
	            if (L < 0.5) {
	                S = delta / (vMax + vMin);
	            }
	            else {
	                S = delta / (2 - vMax - vMin);
	            }

	            var deltaR = (((vMax - R) / 6) + (delta / 2)) / delta;
	            var deltaG = (((vMax - G) / 6) + (delta / 2)) / delta;
	            var deltaB = (((vMax - B) / 6) + (delta / 2)) / delta;

	            if (R === vMax) {
	                H = deltaB - deltaG;
	            }
	            else if (G === vMax) {
	                H = (1 / 3) + deltaR - deltaB;
	            }
	            else if (B === vMax) {
	                H = (2 / 3) + deltaG - deltaR;
	            }

	            if (H < 0) {
	                H += 1;
	            }

	            if (H > 1) {
	                H -= 1;
	            }
	        }

	        H = H * 360;
	        S = S * 100;
	        L = L * 100;

	        return [ H, S, L ];
	    }

	    return {
	        customPalette : customPalette,
	        resetPalette : resetPalette,
	        getColor : getColor,
	        getHighlightColor : getHighlightColor,
	        customHighlight : customHighlight,
	        resetHighlight : resetHighlight,
	        getRadialGradient : getRadialGradient,
	        getLinearGradient : getLinearGradient,
	        getGradientColors : getGradientColors,
	        getStepColors : getStepColors,
	        reverse : reverse,
	        mix : mix,
	        lift : lift,
	        trim : trim,
	        random : random,
	        toRGB : toRGB,
	        toRGBA : toRGBA,
	        toHex : toHex,
	        toHSL : toHSL,
	        toHSLA : toHSLA,
	        toHSB : toHSB,
	        toHSBA : toHSBA,
	        toHSV : toHSV,
	        toHSVA : toHSVA,
	        toName : toName,
	        toColor : toColor,
	        toArray : toArray,
	        alpha : alpha,
	        getData : getData
	    };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));



/***/ },
/* 476 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * 矩形
	 * @module zrender/shape/Rectangle
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com) , 
	 *         strwind (@劲风FEI)
	 * @example
	 *     var Rectangle = require('zrender/shape/Rectangle');
	 *     var shape = new Rectangle({
	 *         style: {
	 *             x: 0,
	 *             y: 0,
	 *             width: 100,
	 *             height: 100,
	 *             radius: 20
	 *         }
	 *     });
	 *     zr.addShape(shape);
	 */

	/**
	 * @typedef {Object} IRectangleStyle
	 * @property {number} x 左上角x坐标
	 * @property {number} y 左上角y坐标
	 * @property {number} width 宽度
	 * @property {number} height 高度
	 * @property {number|Array.<number>} radius 矩形圆角，可以用数组分别指定四个角的圆角
	 * @property {string} [brushType='fill']
	 * @property {string} [color='#000000'] 填充颜色
	 * @property {string} [strokeColor='#000000'] 描边颜色
	 * @property {string} [lineCape='butt'] 线帽样式，可以是 butt, round, square
	 * @property {number} [lineWidth=1] 描边宽度
	 * @property {number} [opacity=1] 绘制透明度
	 * @property {number} [shadowBlur=0] 阴影模糊度，大于0有效
	 * @property {string} [shadowColor='#000000'] 阴影颜色
	 * @property {number} [shadowOffsetX=0] 阴影横向偏移
	 * @property {number} [shadowOffsetY=0] 阴影纵向偏移
	 * @property {string} [text] 图形中的附加文本
	 * @property {string} [textColor='#000000'] 文本颜色
	 * @property {string} [textFont] 附加文本样式，eg:'bold 18px verdana'
	 * @property {string} [textPosition='end'] 附加文本位置, 可以是 inside, left, right, top, bottom
	 * @property {string} [textAlign] 默认根据textPosition自动设置，附加文本水平对齐。
	 *                                可以是start, end, left, right, center
	 * @property {string} [textBaseline] 默认根据textPosition自动设置，附加文本垂直对齐。
	 *                                可以是top, bottom, middle, alphabetic, hanging, ideographic
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	        var Base = __webpack_require__(473);
	        
	        /**
	         * @alias module:zrender/shape/Rectangle
	         * @constructor
	         * @extends module:zrender/shape/Base
	         * @param {Object} options
	         */
	        var Rectangle = function (options) {
	            Base.call(this, options);
	            /**
	             * 矩形绘制样式
	             * @name module:zrender/shape/Rectangle#style
	             * @type {module:zrender/shape/Rectangle~IRectangleStyle}
	             */
	            /**
	             * 矩形高亮绘制样式
	             * @name module:zrender/shape/Rectangle#highlightStyle
	             * @type {module:zrender/shape/Rectangle~IRectangleStyle}
	             */
	        };

	        Rectangle.prototype =  {
	            type: 'rectangle',

	            _buildRadiusPath: function (ctx, style) {
	                // 左上、右上、右下、左下角的半径依次为r1、r2、r3、r4
	                // r缩写为1         相当于 [1, 1, 1, 1]
	                // r缩写为[1]       相当于 [1, 1, 1, 1]
	                // r缩写为[1, 2]    相当于 [1, 2, 1, 2]
	                // r缩写为[1, 2, 3] 相当于 [1, 2, 3, 2]
	                var x = style.x;
	                var y = style.y;
	                var width = style.width;
	                var height = style.height;
	                var r = style.radius;
	                var r1; 
	                var r2; 
	                var r3; 
	                var r4;
	                  
	                if (typeof r === 'number') {
	                    r1 = r2 = r3 = r4 = r;
	                }
	                else if (r instanceof Array) {
	                    if (r.length === 1) {
	                        r1 = r2 = r3 = r4 = r[0];
	                    }
	                    else if (r.length === 2) {
	                        r1 = r3 = r[0];
	                        r2 = r4 = r[1];
	                    }
	                    else if (r.length === 3) {
	                        r1 = r[0];
	                        r2 = r4 = r[1];
	                        r3 = r[2];
	                    }
	                    else {
	                        r1 = r[0];
	                        r2 = r[1];
	                        r3 = r[2];
	                        r4 = r[3];
	                    }
	                }
	                else {
	                    r1 = r2 = r3 = r4 = 0;
	                }
	                
	                var total;
	                if (r1 + r2 > width) {
	                    total = r1 + r2;
	                    r1 *= width / total;
	                    r2 *= width / total;
	                }
	                if (r3 + r4 > width) {
	                    total = r3 + r4;
	                    r3 *= width / total;
	                    r4 *= width / total;
	                }
	                if (r2 + r3 > height) {
	                    total = r2 + r3;
	                    r2 *= height / total;
	                    r3 *= height / total;
	                }
	                if (r1 + r4 > height) {
	                    total = r1 + r4;
	                    r1 *= height / total;
	                    r4 *= height / total;
	                }
	                ctx.moveTo(x + r1, y);
	                ctx.lineTo(x + width - r2, y);
	                r2 !== 0 && ctx.quadraticCurveTo(
	                    x + width, y, x + width, y + r2
	                );
	                ctx.lineTo(x + width, y + height - r3);
	                r3 !== 0 && ctx.quadraticCurveTo(
	                    x + width, y + height, x + width - r3, y + height
	                );
	                ctx.lineTo(x + r4, y + height);
	                r4 !== 0 && ctx.quadraticCurveTo(
	                    x, y + height, x, y + height - r4
	                );
	                ctx.lineTo(x, y + r1);
	                r1 !== 0 && ctx.quadraticCurveTo(x, y, x + r1, y);
	            },
	            
	            /**
	             * 创建矩形路径
	             * @param {CanvasRenderingContext2D} ctx
	             * @param {Object} style
	             */
	            buildPath : function (ctx, style) {
	                if (!style.radius) {
	                    ctx.moveTo(style.x, style.y);
	                    ctx.lineTo(style.x + style.width, style.y);
	                    ctx.lineTo(style.x + style.width, style.y + style.height);
	                    ctx.lineTo(style.x, style.y + style.height);
	                    ctx.lineTo(style.x, style.y);
	                    // ctx.rect(style.x, style.y, style.width, style.height);
	                }
	                else {
	                    this._buildRadiusPath(ctx, style);
	                }
	                ctx.closePath();
	                return;
	            },

	            /**
	             * 计算返回矩形包围盒矩阵
	             * @param {module:zrender/shape/Rectangle~IRectangleStyle} style
	             * @return {module:zrender/shape/Base~IBoundingRect}
	             */
	            getRect : function(style) {
	                if (style.__rect) {
	                    return style.__rect;
	                }
	                
	                var lineWidth;
	                if (style.brushType == 'stroke' || style.brushType == 'fill') {
	                    lineWidth = style.lineWidth || 1;
	                }
	                else {
	                    lineWidth = 0;
	                }
	                style.__rect = {
	                    x : Math.round(style.x - lineWidth / 2),
	                    y : Math.round(style.y - lineWidth / 2),
	                    width : style.width + lineWidth,
	                    height : style.height + lineWidth
	                };
	                
	                return style.__rect;
	            }
	        };

	        __webpack_require__(456).inherits(Rectangle, Base);
	        return Rectangle;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 477 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * @module zrender/Layer
	 * @author pissang(https://www.github.com/pissang)
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {

	    var Transformable = __webpack_require__(474);
	    var util = __webpack_require__(456);
	    var vmlCanvasManager = window['G_vmlCanvasManager'];
	    var config = __webpack_require__(463);

	    function returnFalse() {
	        return false;
	    }

	    /**
	     * 创建dom
	     * 
	     * @inner
	     * @param {string} id dom id 待用
	     * @param {string} type dom type，such as canvas, div etc.
	     * @param {Painter} painter painter instance
	     */
	    function createDom(id, type, painter) {
	        var newDom = document.createElement(type);
	        var width = painter.getWidth();
	        var height = painter.getHeight();

	        // 没append呢，请原谅我这样写，清晰~
	        newDom.style.position = 'absolute';
	        newDom.style.left = 0;
	        newDom.style.top = 0;
	        newDom.style.width = width + 'px';
	        newDom.style.height = height + 'px';
	        newDom.width = width * config.devicePixelRatio;
	        newDom.height = height * config.devicePixelRatio;

	        // id不作为索引用，避免可能造成的重名，定义为私有属性
	        newDom.setAttribute('data-zr-dom-id', id);
	        return newDom;
	    }

	    /**
	     * @alias module:zrender/Layer
	     * @constructor
	     * @extends module:zrender/mixin/Transformable
	     * @param {string} id
	     * @param {module:zrender/Painter} painter
	     */
	    var Layer = function(id, painter) {

	        this.id = id;

	        this.dom = createDom(id, 'canvas', painter);
	        this.dom.onselectstart = returnFalse; // 避免页面选中的尴尬
	        this.dom.style['-webkit-user-select'] = 'none';
	        this.dom.style['user-select'] = 'none';
	        this.dom.style['-webkit-touch-callout'] = 'none';
	        this.dom.style['-webkit-tap-highlight-color'] = 'rgba(0,0,0,0)';

	        this.dom.className = config.elementClassName;

	        vmlCanvasManager && vmlCanvasManager.initElement(this.dom);

	        this.domBack = null;
	        this.ctxBack = null;

	        this.painter = painter;

	        this.unusedCount = 0;

	        this.config = null;

	        this.dirty = true;

	        this.elCount = 0;

	        // Configs
	        /**
	         * 每次清空画布的颜色
	         * @type {string}
	         * @default 0
	         */
	        this.clearColor = 0;
	        /**
	         * 是否开启动态模糊
	         * @type {boolean}
	         * @default false
	         */
	        this.motionBlur = false;
	        /**
	         * 在开启动态模糊的时候使用，与上一帧混合的alpha值，值越大尾迹越明显
	         * @type {number}
	         * @default 0.7
	         */
	        this.lastFrameAlpha = 0.7;
	        /**
	         * 层是否支持鼠标平移操作
	         * @type {boolean}
	         * @default false
	         */
	        this.zoomable = false;
	        /**
	         * 层是否支持鼠标缩放操作
	         * @type {boolean}
	         * @default false
	         */
	        this.panable = false;

	        this.maxZoom = Infinity;
	        this.minZoom = 0;

	        Transformable.call(this);
	    };

	    Layer.prototype.initContext = function () {
	        this.ctx = this.dom.getContext('2d');

	        var dpr = config.devicePixelRatio;
	        if (dpr != 1) { 
	            this.ctx.scale(dpr, dpr);
	        }
	    };

	    Layer.prototype.createBackBuffer = function () {
	        if (vmlCanvasManager) { // IE 8- should not support back buffer
	            return;
	        }
	        this.domBack = createDom('back-' + this.id, 'canvas', this.painter);
	        this.ctxBack = this.domBack.getContext('2d');

	        var dpr = config.devicePixelRatio;

	        if (dpr != 1) { 
	            this.ctxBack.scale(dpr, dpr);
	        }
	    };

	    /**
	     * @param  {number} width
	     * @param  {number} height
	     */
	    Layer.prototype.resize = function (width, height) {
	        var dpr = config.devicePixelRatio;

	        this.dom.style.width = width + 'px';
	        this.dom.style.height = height + 'px';

	        this.dom.setAttribute('width', width * dpr);
	        this.dom.setAttribute('height', height * dpr);

	        if (dpr != 1) { 
	            this.ctx.scale(dpr, dpr);
	        }

	        if (this.domBack) {
	            this.domBack.setAttribute('width', width * dpr);
	            this.domBack.setAttribute('height', height * dpr);

	            if (dpr != 1) { 
	                this.ctxBack.scale(dpr, dpr);
	            }
	        }
	    };

	    /**
	     * 清空该层画布
	     */
	    Layer.prototype.clear = function () {
	        var dom = this.dom;
	        var ctx = this.ctx;
	        var width = dom.width;
	        var height = dom.height;

	        var haveClearColor = this.clearColor && !vmlCanvasManager;
	        var haveMotionBLur = this.motionBlur && !vmlCanvasManager;
	        var lastFrameAlpha = this.lastFrameAlpha;
	        
	        var dpr = config.devicePixelRatio;

	        if (haveMotionBLur) {
	            if (!this.domBack) {
	                this.createBackBuffer();
	            } 

	            this.ctxBack.globalCompositeOperation = 'copy';
	            this.ctxBack.drawImage(
	                dom, 0, 0,
	                width / dpr,
	                height / dpr
	            );
	        }

	        ctx.clearRect(0, 0, width / dpr, height / dpr);
	        if (haveClearColor) {
	            ctx.save();
	            ctx.fillStyle = this.clearColor;
	            ctx.fillRect(0, 0, width / dpr, height / dpr);
	            ctx.restore();
	        }

	        if (haveMotionBLur) {
	            var domBack = this.domBack;
	            ctx.save();
	            ctx.globalAlpha = lastFrameAlpha;
	            ctx.drawImage(domBack, 0, 0, width / dpr, height / dpr);
	            ctx.restore();
	        }
	    };

	    util.merge(Layer.prototype, Transformable.prototype);

	    return Layer;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 478 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * 图片绘制
	 * @module zrender/shape/Image
	 * @author pissang(https://www.github.com/pissang)
	 * @example
	 *     var ImageShape = require('zrender/shape/Image');
	 *     var image = new ImageShape({
	 *         style: {
	 *             image: 'test.jpg',
	 *             x: 100,
	 *             y: 100
	 *         }
	 *     });
	 *     zr.addShape(image);
	 */

	/**
	 * @typedef {Object} IImageStyle
	 * @property {string|HTMLImageElement|HTMLCanvasElement} image 图片url或者图片对象
	 * @property {number} x 左上角横坐标
	 * @property {number} y 左上角纵坐标
	 * @property {number} [width] 绘制到画布上的宽度，默认为图片宽度
	 * @property {number} [height] 绘制到画布上的高度，默认为图片高度
	 * @property {number} [sx=0] 从图片中裁剪的左上角横坐标
	 * @property {number} [sy=0] 从图片中裁剪的左上角纵坐标
	 * @property {number} [sWidth] 从图片中裁剪的宽度，默认为图片高度
	 * @property {number} [sHeight] 从图片中裁剪的高度，默认为图片高度
	 * @property {number} [opacity=1] 绘制透明度
	 * @property {number} [shadowBlur=0] 阴影模糊度，大于0有效
	 * @property {string} [shadowColor='#000000'] 阴影颜色
	 * @property {number} [shadowOffsetX=0] 阴影横向偏移
	 * @property {number} [shadowOffsetY=0] 阴影纵向偏移
	 * @property {string} [text] 图形中的附加文本
	 * @property {string} [textColor='#000000'] 文本颜色
	 * @property {string} [textFont] 附加文本样式，eg:'bold 18px verdana'
	 * @property {string} [textPosition='end'] 附加文本位置, 可以是 inside, left, right, top, bottom
	 * @property {string} [textAlign] 默认根据textPosition自动设置，附加文本水平对齐。
	 *                                可以是start, end, left, right, center
	 * @property {string} [textBaseline] 默认根据textPosition自动设置，附加文本垂直对齐。
	 *                                可以是top, bottom, middle, alphabetic, hanging, ideographic
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {

	        var Base = __webpack_require__(473);

	        /**
	         * @alias zrender/shape/Image
	         * @constructor
	         * @extends module:zrender/shape/Base
	         * @param {Object} options
	         */
	        var ZImage = function(options) {
	            Base.call(this, options);
	            /**
	             * 图片绘制样式
	             * @name module:zrender/shape/Image#style
	             * @type {module:zrender/shape/Image~IImageStyle}
	             */
	            /**
	             * 图片高亮绘制样式
	             * @name module:zrender/shape/Image#highlightStyle
	             * @type {module:zrender/shape/Image~IImageStyle}
	             */
	        };

	        ZImage.prototype = {
	            
	            type: 'image',

	            brush : function(ctx, isHighlight, refreshNextFrame) {
	                var style = this.style || {};

	                if (isHighlight) {
	                    // 根据style扩展默认高亮样式
	                    style = this.getHighlightStyle(
	                        style, this.highlightStyle || {}
	                    );
	                }

	                var image = style.image;
	                var self = this;

	                if (!this._imageCache) {
	                    this._imageCache = {};
	                }
	                if (typeof(image) === 'string') {
	                    var src = image;
	                    if (this._imageCache[src]) {
	                        image = this._imageCache[src];
	                    } else {
	                        image = new Image();
	                        image.onload = function () {
	                            image.onload = null;
	                            self.modSelf();
	                            refreshNextFrame();
	                        };

	                        image.src = src;
	                        this._imageCache[src] = image;
	                    }
	                }
	                if (image) {
	                    // 图片已经加载完成
	                    if (image.nodeName.toUpperCase() == 'IMG') {
	                        if (window.ActiveXObject) {
	                            if (image.readyState != 'complete') {
	                                return;
	                            }
	                        }
	                        else {
	                            if (!image.complete) {
	                                return;
	                            }
	                        }
	                    }
	                    // Else is canvas
	                    var width = style.width || image.width;
	                    var height = style.height || image.height;
	                    var x = style.x;
	                    var y = style.y;
	                    // 图片加载失败
	                    if (!image.width || !image.height) {
	                        return;
	                    }

	                    ctx.save();

	                    this.doClip(ctx);

	                    this.setContext(ctx, style);

	                    // 设置transform
	                    this.setTransform(ctx);

	                    if (style.sWidth && style.sHeight) {
	                        var sx = style.sx || 0;
	                        var sy = style.sy || 0;
	                        ctx.drawImage(
	                            image,
	                            sx, sy, style.sWidth, style.sHeight,
	                            x, y, width, height
	                        );
	                    }
	                    else if (style.sx && style.sy) {
	                        var sx = style.sx;
	                        var sy = style.sy;
	                        var sWidth = width - sx;
	                        var sHeight = height - sy;
	                        ctx.drawImage(
	                            image,
	                            sx, sy, sWidth, sHeight,
	                            x, y, width, height
	                        );
	                    }
	                    else {
	                        ctx.drawImage(image, x, y, width, height);
	                    }
	                    // 如果没设置宽和高的话自动根据图片宽高设置
	                    if (!style.width) {
	                        style.width = width;
	                    }
	                    if (!style.height) {
	                        style.height = height;
	                    }
	                    if (!this.style.width) {
	                        this.style.width = width;
	                    }
	                    if (!this.style.height) {
	                        this.style.height = height;
	                    }

	                    this.drawText(ctx, style, this.style);

	                    ctx.restore();
	                }
	            },

	            /**
	             * 计算返回图片的包围盒矩形
	             * @param {module:zrender/shape/Image~IImageStyle} style
	             * @return {module:zrender/shape/Base~IBoundingRect}
	             */
	            getRect: function(style) {
	                return {
	                    x : style.x,
	                    y : style.y,
	                    width : style.width,
	                    height : style.height
	                };
	            },

	            clearCache: function() {
	                this._imageCache = {};
	            }
	        };

	        __webpack_require__(456).inherits(ZImage, Base);
	        return ZImage;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 479 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * Storage内容仓库模块
	 * @module zrender/Storage
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 * @author errorrik (errorrik@gmail.com)
	 * @author pissang (https://github.com/pissang/)
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {

	        'use strict';

	        var util = __webpack_require__(456);

	        var Group = __webpack_require__(480);

	        var defaultIterateOption = {
	            hover: false,
	            normal: 'down',
	            update: false
	        };

	        function shapeCompareFunc(a, b) {
	            if (a.zlevel == b.zlevel) {
	                if (a.z == b.z) {
	                    return a.__renderidx - b.__renderidx;
	                }
	                return a.z - b.z;
	            }
	            return a.zlevel - b.zlevel;
	        }
	        /**
	         * 内容仓库 (M)
	         * @alias module:zrender/Storage
	         * @constructor
	         */
	        var Storage = function () {
	            // 所有常规形状，id索引的map
	            this._elements = {};

	            // 高亮层形状，不稳定，动态增删，数组位置也是z轴方向，靠前显示在下方
	            this._hoverElements = [];

	            this._roots = [];

	            this._shapeList = [];

	            this._shapeListOffset = 0;
	        };

	        /**
	         * 遍历迭代器
	         * 
	         * @param {Function} fun 迭代回调函数，return true终止迭代
	         * @param {Object} [option] 迭代参数，缺省为仅降序遍历普通层图形
	         * @param {boolean} [option.hover=true] 是否是高亮层图形
	         * @param {string} [option.normal='up'] 是否是普通层图形，迭代时是否指定及z轴顺序
	         * @param {boolean} [option.update=false] 是否在迭代前更新形状列表
	         * 
	         */
	        Storage.prototype.iterShape = function (fun, option) {
	            if (!option) {
	                option = defaultIterateOption;
	            }

	            if (option.hover) {
	                // 高亮层数据遍历
	                for (var i = 0, l = this._hoverElements.length; i < l; i++) {
	                    var el = this._hoverElements[i];
	                    el.updateTransform();
	                    if (fun(el)) {
	                        return this;
	                    }
	                }
	            }

	            if (option.update) {
	                this.updateShapeList();
	            }

	            // 遍历: 'down' | 'up'
	            switch (option.normal) {
	                case 'down':
	                    // 降序遍历，高层优先
	                    var l = this._shapeList.length;
	                    while (l--) {
	                        if (fun(this._shapeList[l])) {
	                            return this;
	                        }
	                    }
	                    break;
	                // case 'up':
	                default:
	                    // 升序遍历，底层优先
	                    for (var i = 0, l = this._shapeList.length; i < l; i++) {
	                        if (fun(this._shapeList[i])) {
	                            return this;
	                        }
	                    }
	                    break;
	            }

	            return this;
	        };

	        /**
	         * 返回hover层的形状数组
	         * @param  {boolean} [update=false] 是否在返回前更新图形的变换
	         * @return {Array.<module:zrender/shape/Base>}
	         */
	        Storage.prototype.getHoverShapes = function (update) {
	            // hoverConnect
	            var hoverElements = [];
	            for (var i = 0, l = this._hoverElements.length; i < l; i++) {
	                hoverElements.push(this._hoverElements[i]);
	                var target = this._hoverElements[i].hoverConnect;
	                if (target) {
	                    var shape;
	                    target = target instanceof Array ? target : [target];
	                    for (var j = 0, k = target.length; j < k; j++) {
	                        shape = target[j].id ? target[j] : this.get(target[j]);
	                        if (shape) {
	                            hoverElements.push(shape);
	                        }
	                    }
	                }
	            }
	            hoverElements.sort(shapeCompareFunc);
	            if (update) {
	                for (var i = 0, l = hoverElements.length; i < l; i++) {
	                    hoverElements[i].updateTransform();
	                }
	            }
	            return hoverElements;
	        };

	        /**
	         * 返回所有图形的绘制队列
	         * @param  {boolean} [update=false] 是否在返回前更新该数组
	         * 详见{@link module:zrender/shape/Base.prototype.updateShapeList}
	         * @return {Array.<module:zrender/shape/Base>}
	         */
	        Storage.prototype.getShapeList = function (update) {
	            if (update) {
	                this.updateShapeList();
	            }
	            return this._shapeList;
	        };

	        /**
	         * 更新图形的绘制队列。
	         * 每次绘制前都会调用，该方法会先深度优先遍历整个树，更新所有Group和Shape的变换并且把所有可见的Shape保存到数组中，
	         * 最后根据绘制的优先级（zlevel > z > 插入顺序）排序得到绘制队列
	         */
	        Storage.prototype.updateShapeList = function () {
	            this._shapeListOffset = 0;
	            for (var i = 0, len = this._roots.length; i < len; i++) {
	                var root = this._roots[i];
	                this._updateAndAddShape(root);
	            }
	            this._shapeList.length = this._shapeListOffset;

	            for (var i = 0, len = this._shapeList.length; i < len; i++) {
	                this._shapeList[i].__renderidx = i;
	            }

	            this._shapeList.sort(shapeCompareFunc);
	        };

	        Storage.prototype._updateAndAddShape = function (el, clipShapes) {
	            
	            if (el.ignore) {
	                return;
	            }

	            el.updateTransform();

	            if (el.clipShape) {
	                // clipShape 的变换是基于 group 的变换
	                el.clipShape.parent = el;
	                el.clipShape.updateTransform();

	                // PENDING 效率影响
	                if (clipShapes) {
	                    clipShapes = clipShapes.slice();
	                    clipShapes.push(el.clipShape);
	                } else {
	                    clipShapes = [el.clipShape];
	                }
	            }

	            if (el.type == 'group') {
	                
	                for (var i = 0; i < el._children.length; i++) {
	                    var child = el._children[i];

	                    // Force to mark as dirty if group is dirty
	                    child.__dirty = el.__dirty || child.__dirty;

	                    this._updateAndAddShape(child, clipShapes);
	                }

	                // Mark group clean here
	                el.__dirty = false;
	                
	            }
	            else {
	                el.__clipShapes = clipShapes;

	                this._shapeList[this._shapeListOffset++] = el;
	            }
	        };

	        /**
	         * 修改图形(Shape)或者组(Group)
	         * 
	         * @param {string|module:zrender/shape/Base|module:zrender/Group} el
	         * @param {Object} [params] 参数
	         */
	        Storage.prototype.mod = function (el, params) {
	            if (typeof (el) === 'string') {
	                el = this._elements[el];
	            }
	            if (el) {

	                el.modSelf();

	                if (params) {
	                    // 如果第二个参数直接使用 shape
	                    // parent, _storage, __clipShapes 三个属性会有循环引用
	                    // 主要为了向 1.x 版本兼容，2.x 版本不建议使用第二个参数
	                    if (params.parent || params._storage || params.__clipShapes) {
	                        var target = {};
	                        for (var name in params) {
	                            if (
	                                name === 'parent'
	                                || name === '_storage'
	                                || name === '__clipShapes'
	                            ) {
	                                continue;
	                            }
	                            if (params.hasOwnProperty(name)) {
	                                target[name] = params[name];
	                            }
	                        }
	                        util.merge(el, target, true);
	                    }
	                    else {
	                        util.merge(el, params, true);
	                    }
	                }
	            }

	            return this;
	        };

	        /**
	         * 移动指定的图形(Shape)或者组(Group)的位置
	         * @param {string} shapeId 形状唯一标识
	         * @param {number} dx
	         * @param {number} dy
	         */
	        Storage.prototype.drift = function (shapeId, dx, dy) {
	            var shape = this._elements[shapeId];
	            if (shape) {
	                shape.needTransform = true;
	                if (shape.draggable === 'horizontal') {
	                    dy = 0;
	                }
	                else if (shape.draggable === 'vertical') {
	                    dx = 0;
	                }
	                if (!shape.ondrift // ondrift
	                    // 有onbrush并且调用执行返回false或undefined则继续
	                    || (shape.ondrift && !shape.ondrift(dx, dy))
	                ) {
	                    shape.drift(dx, dy);
	                }
	            }

	            return this;
	        };

	        /**
	         * 添加高亮层数据
	         * 
	         * @param {module:zrender/shape/Base} shape
	         */
	        Storage.prototype.addHover = function (shape) {
	            shape.updateNeedTransform();
	            this._hoverElements.push(shape);
	            return this;
	        };

	        /**
	         * 清空高亮层数据
	         */
	        Storage.prototype.delHover = function () {
	            this._hoverElements = [];
	            return this;
	        };

	        /**
	         * 是否有图形在高亮层里
	         * @return {boolean}
	         */
	        Storage.prototype.hasHoverShape = function () {
	            return this._hoverElements.length > 0;
	        };

	        /**
	         * 添加图形(Shape)或者组(Group)到根节点
	         * @param {module:zrender/shape/Shape|module:zrender/Group} el
	         */
	        Storage.prototype.addRoot = function (el) {
	            // Element has been added
	            if (this._elements[el.id]) {
	                return;
	            }

	            if (el instanceof Group) {
	                el.addChildrenToStorage(this);
	            }

	            this.addToMap(el);
	            this._roots.push(el);
	        };

	        /**
	         * 删除指定的图形(Shape)或者组(Group)
	         * @param {string|Array.<string>} [elId] 如果为空清空整个Storage
	         */
	        Storage.prototype.delRoot = function (elId) {
	            if (typeof(elId) == 'undefined') {
	                // 不指定elId清空
	                for (var i = 0; i < this._roots.length; i++) {
	                    var root = this._roots[i];
	                    if (root instanceof Group) {
	                        root.delChildrenFromStorage(this);
	                    }
	                }

	                this._elements = {};
	                this._hoverElements = [];
	                this._roots = [];
	                this._shapeList = [];
	                this._shapeListOffset = 0;

	                return;
	            }

	            if (elId instanceof Array) {
	                for (var i = 0, l = elId.length; i < l; i++) {
	                    this.delRoot(elId[i]);
	                }
	                return;
	            }

	            var el;
	            if (typeof(elId) == 'string') {
	                el = this._elements[elId];
	            }
	            else {
	                el = elId;
	            }

	            var idx = util.indexOf(this._roots, el);
	            if (idx >= 0) {
	                this.delFromMap(el.id);
	                this._roots.splice(idx, 1);
	                if (el instanceof Group) {
	                    el.delChildrenFromStorage(this);
	                }
	            }
	        };

	        Storage.prototype.addToMap = function (el) {
	            if (el instanceof Group) {
	                el._storage = this;
	            }
	            el.modSelf();

	            this._elements[el.id] = el;

	            return this;
	        };

	        Storage.prototype.get = function (elId) {
	            return this._elements[elId];
	        };

	        Storage.prototype.delFromMap = function (elId) {
	            var el = this._elements[elId];
	            if (el) {
	                delete this._elements[elId];

	                if (el instanceof Group) {
	                    el._storage = null;
	                }
	            }

	            return this;
	        };

	        /**
	         * 清空并且释放Storage
	         */
	        Storage.prototype.dispose = function () {
	            this._elements = 
	            this._renderList = 
	            this._roots =
	            this._hoverElements = null;
	        };

	        return Storage;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 480 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * Group是一个容器，可以插入子节点，Group的变换也会被应用到子节点上
	 * @module zrender/Group
	 * @example
	 *     var Group = require('zrender/Group');
	 *     var Circle = require('zrender/shape/Circle');
	 *     var g = new Group();
	 *     g.position[0] = 100;
	 *     g.position[1] = 100;
	 *     g.addChild(new Circle({
	 *         style: {
	 *             x: 100,
	 *             y: 100,
	 *             r: 20,
	 *             brushType: 'fill'
	 *         }
	 *     }));
	 *     zr.addGroup(g);
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function(require) {

	    var guid = __webpack_require__(464);
	    var util = __webpack_require__(456);

	    var Transformable = __webpack_require__(474);
	    var Eventful = __webpack_require__(459);

	    /**
	     * @alias module:zrender/Group
	     * @constructor
	     * @extends module:zrender/mixin/Transformable
	     * @extends module:zrender/mixin/Eventful
	     */
	    var Group = function(options) {

	        options = options || {};

	        /**
	         * Group id
	         * @type {string}
	         */
	        this.id = options.id || guid();

	        for (var key in options) {
	            this[key] = options[key];
	        }

	        /**
	         * @type {string}
	         */
	        this.type = 'group';

	        /**
	         * 用于裁剪的图形(shape)，所有 Group 内的图形在绘制时都会被这个图形裁剪
	         * 该图形会继承Group的变换
	         * @type {module:zrender/shape/Base}
	         * @see http://www.w3.org/TR/2dcontext/#clipping-region
	         */
	        this.clipShape = null;

	        this._children = [];

	        this._storage = null;

	        this.__dirty = true;

	        // Mixin
	        Transformable.call(this);
	        Eventful.call(this);
	    };

	    /**
	     * 是否忽略该 Group 及其所有子节点
	     * @type {boolean}
	     * @default false
	     */
	    Group.prototype.ignore = false;

	    /**
	     * 复制并返回一份新的包含所有儿子节点的数组
	     * @return {Array.<module:zrender/Group|module:zrender/shape/Base>}
	     */
	    Group.prototype.children = function() {
	        return this._children.slice();
	    };

	    /**
	     * 获取指定 index 的儿子节点
	     * @param  {number} idx
	     * @return {module:zrender/Group|module:zrender/shape/Base}
	     */
	    Group.prototype.childAt = function(idx) {
	        return this._children[idx];
	    };

	    /**
	     * 添加子节点，可以是Shape或者Group
	     * @param {module:zrender/Group|module:zrender/shape/Base} child
	     */
	    // TODO Type Check
	    Group.prototype.addChild = function(child) {
	        if (child == this) {
	            return;
	        }
	        
	        if (child.parent == this) {
	            return;
	        }
	        if (child.parent) {
	            child.parent.removeChild(child);
	        }

	        this._children.push(child);
	        child.parent = this;

	        if (this._storage && this._storage !== child._storage) {
	            
	            this._storage.addToMap(child);

	            if (child instanceof Group) {
	                child.addChildrenToStorage(this._storage);
	            }
	        }
	    };

	    /**
	     * 移除子节点
	     * @param {module:zrender/Group|module:zrender/shape/Base} child
	     */
	    // TODO Type Check
	    Group.prototype.removeChild = function(child) {
	        var idx = util.indexOf(this._children, child);

	        if (idx >= 0) {
	            this._children.splice(idx, 1);
	        }
	        child.parent = null;

	        if (this._storage) {
	            
	            this._storage.delFromMap(child.id);

	            if (child instanceof Group) {
	                child.delChildrenFromStorage(this._storage);
	            }
	        }
	    };

	    /**
	     * 移除所有子节点
	     */
	    Group.prototype.clearChildren = function () {
	        for (var i = 0; i < this._children.length; i++) {
	            var child = this._children[i];
	            if (this._storage) {
	                this._storage.delFromMap(child.id);
	                if (child instanceof Group) {
	                    child.delChildrenFromStorage(this._storage);
	                }
	            }
	        }
	        this._children.length = 0;
	    };

	    /**
	     * 遍历所有子节点
	     * @param  {Function} cb
	     * @param  {}   context
	     */
	    Group.prototype.eachChild = function(cb, context) {
	        var haveContext = !!context;
	        for (var i = 0; i < this._children.length; i++) {
	            var child = this._children[i];
	            if (haveContext) {
	                cb.call(context, child);
	            } else {
	                cb(child);
	            }
	        }
	    };

	    /**
	     * 深度优先遍历所有子孙节点
	     * @param  {Function} cb
	     * @param  {}   context
	     */
	    Group.prototype.traverse = function(cb, context) {
	        var haveContext = !!context;
	        for (var i = 0; i < this._children.length; i++) {
	            var child = this._children[i];
	            if (haveContext) {
	                cb.call(context, child);
	            } else {
	                cb(child);
	            }

	            if (child.type === 'group') {
	                child.traverse(cb, context);
	            }
	        }
	    };

	    Group.prototype.addChildrenToStorage = function(storage) {
	        for (var i = 0; i < this._children.length; i++) {
	            var child = this._children[i];
	            storage.addToMap(child);
	            if (child instanceof Group) {
	                child.addChildrenToStorage(storage);
	            }
	        }
	    };

	    Group.prototype.delChildrenFromStorage = function(storage) {
	        for (var i = 0; i < this._children.length; i++) {
	            var child = this._children[i];
	            storage.delFromMap(child.id);
	            if (child instanceof Group) {
	                child.delChildrenFromStorage(storage);
	            }
	        }
	    };

	    Group.prototype.modSelf = function() {
	        this.__dirty = true;
	    };

	    util.merge(Group.prototype, Transformable.prototype, true);
	    util.merge(Group.prototype, Eventful.prototype, true);

	    return Group;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 481 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * 动画主类, 调度和管理所有动画控制器
	 * 
	 * @module zrender/animation/Animation
	 * @author pissang(https://github.com/pissang)
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function(require) {
	        
	        'use strict';

	        var Clip = __webpack_require__(482);
	        var color = __webpack_require__(475);
	        var util = __webpack_require__(456);
	        var Dispatcher = __webpack_require__(458).Dispatcher;

	        var requestAnimationFrame = window.requestAnimationFrame
	                                    || window.msRequestAnimationFrame
	                                    || window.mozRequestAnimationFrame
	                                    || window.webkitRequestAnimationFrame
	                                    || function (func) {
	                                        setTimeout(func, 16);
	                                    };

	        var arraySlice = Array.prototype.slice;

	        /**
	         * @typedef {Object} IZRenderStage
	         * @property {Function} update
	         */
	        
	        /** 
	         * @alias module:zrender/animation/Animation
	         * @constructor
	         * @param {Object} [options]
	         * @param {Function} [options.onframe]
	         * @param {IZRenderStage} [options.stage]
	         * @example
	         *     var animation = new Animation();
	         *     var obj = {
	         *         x: 100,
	         *         y: 100
	         *     };
	         *     animation.animate(node.position)
	         *         .when(1000, {
	         *             x: 500,
	         *             y: 500
	         *         })
	         *         .when(2000, {
	         *             x: 100,
	         *             y: 100
	         *         })
	         *         .start('spline');
	         */
	        var Animation = function (options) {

	            options = options || {};

	            this.stage = options.stage || {};

	            this.onframe = options.onframe || function() {};

	            // private properties
	            this._clips = [];

	            this._running = false;

	            this._time = 0;

	            Dispatcher.call(this);
	        };

	        Animation.prototype = {
	            /**
	             * 添加动画片段
	             * @param {module:zrender/animation/Clip} clip
	             */
	            add: function(clip) {
	                this._clips.push(clip);
	            },
	            /**
	             * 删除动画片段
	             * @param {module:zrender/animation/Clip} clip
	             */
	            remove: function(clip) {
	                if (clip.__inStep) {
	                    // 如果是在 step 中，不能直接移除
	                    // 需要标记为 needsRemove 然后在所有 clip step 完成后移除
	                    clip.__needsRemove = true;
	                }
	                else {
	                    var idx = util.indexOf(this._clips, clip);
	                    if (idx >= 0) {
	                        this._clips.splice(idx, 1);
	                    }
	                }
	            },
	            _update: function() {

	                var time = new Date().getTime();
	                var delta = time - this._time;
	                var clips = this._clips;
	                var len = clips.length;

	                var deferredEvents = [];
	                var deferredClips = [];
	                for (var i = 0; i < len; i++) {
	                    var clip = clips[i];
	                    clip.__inStep = true;
	                    var e = clip.step(time);
	                    clip.__inStep = false;
	                    // Throw out the events need to be called after
	                    // stage.update, like destroy
	                    if (e) {
	                        deferredEvents.push(e);
	                        deferredClips.push(clip);
	                    }
	                }

	                // Remove the finished clip
	                for (var i = 0; i < len;) {
	                    if (clips[i].__needsRemove) {
	                        clips[i] = clips[len - 1];
	                        clips.pop();
	                        len--;
	                    }
	                    else {
	                        i++;
	                    }
	                }

	                len = deferredEvents.length;
	                for (var i = 0; i < len; i++) {
	                    deferredClips[i].fire(deferredEvents[i]);
	                }

	                this._time = time;

	                this.onframe(delta);

	                this.dispatch('frame', delta);

	                if (this.stage.update) {
	                    this.stage.update();
	                }
	            },
	            /**
	             * 开始运行动画
	             */
	            start: function () {
	                var self = this;

	                this._running = true;

	                function step() {
	                    if (self._running) {
	                        
	                        requestAnimationFrame(step);

	                        self._update();
	                    }
	                }

	                this._time = new Date().getTime();
	                requestAnimationFrame(step);
	            },
	            /**
	             * 停止运行动画
	             */
	            stop: function () {
	                this._running = false;
	            },
	            /**
	             * 清除所有动画片段
	             */
	            clear : function () {
	                this._clips = [];
	            },
	            /**
	             * 对一个目标创建一个animator对象，可以指定目标中的属性使用动画
	             * @param  {Object} target
	             * @param  {Object} options
	             * @param  {boolean} [options.loop=false] 是否循环播放动画
	             * @param  {Function} [options.getter=null]
	             *         如果指定getter函数，会通过getter函数取属性值
	             * @param  {Function} [options.setter=null]
	             *         如果指定setter函数，会通过setter函数设置属性值
	             * @return {module:zrender/animation/Animation~Animator}
	             */
	            animate : function (target, options) {
	                options = options || {};
	                var deferred = new Animator(
	                    target,
	                    options.loop,
	                    options.getter, 
	                    options.setter
	                );
	                deferred.animation = this;
	                return deferred;
	            },
	            constructor: Animation
	        };

	        util.merge(Animation.prototype, Dispatcher.prototype, true);

	        function _defaultGetter(target, key) {
	            return target[key];
	        }

	        function _defaultSetter(target, key, value) {
	            target[key] = value;
	        }

	        function _interpolateNumber(p0, p1, percent) {
	            return (p1 - p0) * percent + p0;
	        }

	        function _interpolateArray(p0, p1, percent, out, arrDim) {
	            var len = p0.length;
	            if (arrDim == 1) {
	                for (var i = 0; i < len; i++) {
	                    out[i] = _interpolateNumber(p0[i], p1[i], percent); 
	                }
	            }
	            else {
	                var len2 = p0[0].length;
	                for (var i = 0; i < len; i++) {
	                    for (var j = 0; j < len2; j++) {
	                        out[i][j] = _interpolateNumber(
	                            p0[i][j], p1[i][j], percent
	                        );
	                    }
	                }
	            }
	        }

	        function _isArrayLike(data) {
	            switch (typeof data) {
	                case 'undefined':
	                case 'string':
	                    return false;
	            }
	            
	            return typeof data.length !== 'undefined';
	        }

	        function _catmullRomInterpolateArray(
	            p0, p1, p2, p3, t, t2, t3, out, arrDim
	        ) {
	            var len = p0.length;
	            if (arrDim == 1) {
	                for (var i = 0; i < len; i++) {
	                    out[i] = _catmullRomInterpolate(
	                        p0[i], p1[i], p2[i], p3[i], t, t2, t3
	                    );
	                }
	            }
	            else {
	                var len2 = p0[0].length;
	                for (var i = 0; i < len; i++) {
	                    for (var j = 0; j < len2; j++) {
	                        out[i][j] = _catmullRomInterpolate(
	                            p0[i][j], p1[i][j], p2[i][j], p3[i][j],
	                            t, t2, t3
	                        );
	                    }
	                }
	            }
	        }

	        function _catmullRomInterpolate(p0, p1, p2, p3, t, t2, t3) {
	            var v0 = (p2 - p0) * 0.5;
	            var v1 = (p3 - p1) * 0.5;
	            return (2 * (p1 - p2) + v0 + v1) * t3 
	                    + (-3 * (p1 - p2) - 2 * v0 - v1) * t2
	                    + v0 * t + p1;
	        }

	        function _cloneValue(value) {
	            if (_isArrayLike(value)) {
	                var len = value.length;
	                if (_isArrayLike(value[0])) {
	                    var ret = [];
	                    for (var i = 0; i < len; i++) {
	                        ret.push(arraySlice.call(value[i]));
	                    }
	                    return ret;
	                }
	                else {
	                    return arraySlice.call(value);
	                }
	            }
	            else {
	                return value;
	            }
	        }

	        function rgba2String(rgba) {
	            rgba[0] = Math.floor(rgba[0]);
	            rgba[1] = Math.floor(rgba[1]);
	            rgba[2] = Math.floor(rgba[2]);

	            return 'rgba(' + rgba.join(',') + ')';
	        }

	        /**
	         * @alias module:zrender/animation/Animation~Animator
	         * @constructor
	         * @param {Object} target
	         * @param {boolean} loop
	         * @param {Function} getter
	         * @param {Function} setter
	         */
	        var Animator = function(target, loop, getter, setter) {
	            this._tracks = {};
	            this._target = target;

	            this._loop = loop || false;

	            this._getter = getter || _defaultGetter;
	            this._setter = setter || _defaultSetter;

	            this._clipCount = 0;

	            this._delay = 0;

	            this._doneList = [];

	            this._onframeList = [];

	            this._clipList = [];
	        };

	        Animator.prototype = {
	            /**
	             * 设置动画关键帧
	             * @param  {number} time 关键帧时间，单位是ms
	             * @param  {Object} props 关键帧的属性值，key-value表示
	             * @return {module:zrender/animation/Animation~Animator}
	             */
	            when : function(time /* ms */, props) {
	                for (var propName in props) {
	                    if (!this._tracks[propName]) {
	                        this._tracks[propName] = [];
	                        // If time is 0 
	                        //  Then props is given initialize value
	                        // Else
	                        //  Initialize value from current prop value
	                        if (time !== 0) {
	                            this._tracks[propName].push({
	                                time : 0,
	                                value : _cloneValue(
	                                    this._getter(this._target, propName)
	                                )
	                            });
	                        }
	                    }
	                    this._tracks[propName].push({
	                        time : parseInt(time, 10),
	                        value : props[propName]
	                    });
	                }
	                return this;
	            },
	            /**
	             * 添加动画每一帧的回调函数
	             * @param  {Function} callback
	             * @return {module:zrender/animation/Animation~Animator}
	             */
	            during: function (callback) {
	                this._onframeList.push(callback);
	                return this;
	            },
	            /**
	             * 开始执行动画
	             * @param  {string|Function} easing 
	             *         动画缓动函数，详见{@link module:zrender/animation/easing}
	             * @return {module:zrender/animation/Animation~Animator}
	             */
	            start: function (easing) {

	                var self = this;
	                var setter = this._setter;
	                var getter = this._getter;
	                var useSpline = easing === 'spline';

	                var ondestroy = function() {
	                    self._clipCount--;
	                    if (self._clipCount === 0) {
	                        // Clear all tracks
	                        self._tracks = {};

	                        var len = self._doneList.length;
	                        for (var i = 0; i < len; i++) {
	                            self._doneList[i].call(self);
	                        }
	                    }
	                };

	                var createTrackClip = function (keyframes, propName) {
	                    var trackLen = keyframes.length;
	                    if (!trackLen) {
	                        return;
	                    }
	                    // Guess data type
	                    var firstVal = keyframes[0].value;
	                    var isValueArray = _isArrayLike(firstVal);
	                    var isValueColor = false;

	                    // For vertices morphing
	                    var arrDim = (
	                            isValueArray 
	                            && _isArrayLike(firstVal[0])
	                        )
	                        ? 2 : 1;
	                    // Sort keyframe as ascending
	                    keyframes.sort(function(a, b) {
	                        return a.time - b.time;
	                    });
	                    var trackMaxTime;
	                    if (trackLen) {
	                        trackMaxTime = keyframes[trackLen - 1].time;
	                    }
	                    else {
	                        return;
	                    }
	                    // Percents of each keyframe
	                    var kfPercents = [];
	                    // Value of each keyframe
	                    var kfValues = [];
	                    for (var i = 0; i < trackLen; i++) {
	                        kfPercents.push(keyframes[i].time / trackMaxTime);
	                        // Assume value is a color when it is a string
	                        var value = keyframes[i].value;
	                        if (typeof(value) == 'string') {
	                            value = color.toArray(value);
	                            if (value.length === 0) {    // Invalid color
	                                value[0] = value[1] = value[2] = 0;
	                                value[3] = 1;
	                            }
	                            isValueColor = true;
	                        }
	                        kfValues.push(value);
	                    }

	                    // Cache the key of last frame to speed up when 
	                    // animation playback is sequency
	                    var cacheKey = 0;
	                    var cachePercent = 0;
	                    var start;
	                    var i;
	                    var w;
	                    var p0;
	                    var p1;
	                    var p2;
	                    var p3;


	                    if (isValueColor) {
	                        var rgba = [ 0, 0, 0, 0 ];
	                    }

	                    var onframe = function (target, percent) {
	                        // Find the range keyframes
	                        // kf1-----kf2---------current--------kf3
	                        // find kf2 and kf3 and do interpolation
	                        if (percent < cachePercent) {
	                            // Start from next key
	                            start = Math.min(cacheKey + 1, trackLen - 1);
	                            for (i = start; i >= 0; i--) {
	                                if (kfPercents[i] <= percent) {
	                                    break;
	                                }
	                            }
	                            i = Math.min(i, trackLen - 2);
	                        }
	                        else {
	                            for (i = cacheKey; i < trackLen; i++) {
	                                if (kfPercents[i] > percent) {
	                                    break;
	                                }
	                            }
	                            i = Math.min(i - 1, trackLen - 2);
	                        }
	                        cacheKey = i;
	                        cachePercent = percent;

	                        var range = (kfPercents[i + 1] - kfPercents[i]);
	                        if (range === 0) {
	                            return;
	                        }
	                        else {
	                            w = (percent - kfPercents[i]) / range;
	                        }
	                        if (useSpline) {
	                            p1 = kfValues[i];
	                            p0 = kfValues[i === 0 ? i : i - 1];
	                            p2 = kfValues[i > trackLen - 2 ? trackLen - 1 : i + 1];
	                            p3 = kfValues[i > trackLen - 3 ? trackLen - 1 : i + 2];
	                            if (isValueArray) {
	                                _catmullRomInterpolateArray(
	                                    p0, p1, p2, p3, w, w * w, w * w * w,
	                                    getter(target, propName),
	                                    arrDim
	                                );
	                            }
	                            else {
	                                var value;
	                                if (isValueColor) {
	                                    value = _catmullRomInterpolateArray(
	                                        p0, p1, p2, p3, w, w * w, w * w * w,
	                                        rgba, 1
	                                    );
	                                    value = rgba2String(rgba);
	                                }
	                                else {
	                                    value = _catmullRomInterpolate(
	                                        p0, p1, p2, p3, w, w * w, w * w * w
	                                    );
	                                }
	                                setter(
	                                    target,
	                                    propName,
	                                    value
	                                );
	                            }
	                        }
	                        else {
	                            if (isValueArray) {
	                                _interpolateArray(
	                                    kfValues[i], kfValues[i + 1], w,
	                                    getter(target, propName),
	                                    arrDim
	                                );
	                            }
	                            else {
	                                var value;
	                                if (isValueColor) {
	                                    _interpolateArray(
	                                        kfValues[i], kfValues[i + 1], w,
	                                        rgba, 1
	                                    );
	                                    value = rgba2String(rgba);
	                                }
	                                else {
	                                    value = _interpolateNumber(kfValues[i], kfValues[i + 1], w);
	                                }
	                                setter(
	                                    target,
	                                    propName,
	                                    value
	                                );
	                            }
	                        }

	                        for (i = 0; i < self._onframeList.length; i++) {
	                            self._onframeList[i](target, percent);
	                        }
	                    };

	                    var clip = new Clip({
	                        target : self._target,
	                        life : trackMaxTime,
	                        loop : self._loop,
	                        delay : self._delay,
	                        onframe : onframe,
	                        ondestroy : ondestroy
	                    });

	                    if (easing && easing !== 'spline') {
	                        clip.easing = easing;
	                    }
	                    self._clipList.push(clip);
	                    self._clipCount++;
	                    self.animation.add(clip);
	                };

	                for (var propName in this._tracks) {
	                    createTrackClip(this._tracks[propName], propName);
	                }
	                return this;
	            },
	            /**
	             * 停止动画
	             */
	            stop : function() {
	                for (var i = 0; i < this._clipList.length; i++) {
	                    var clip = this._clipList[i];
	                    this.animation.remove(clip);
	                }
	                this._clipList = [];
	            },
	            /**
	             * 设置动画延迟开始的时间
	             * @param  {number} time 单位ms
	             * @return {module:zrender/animation/Animation~Animator}
	             */
	            delay : function (time) {
	                this._delay = time;
	                return this;
	            },
	            /**
	             * 添加动画结束的回调
	             * @param  {Function} cb
	             * @return {module:zrender/animation/Animation~Animator}
	             */
	            done : function(cb) {
	                if (cb) {
	                    this._doneList.push(cb);
	                }
	                return this;
	            }
	        };

	        return Animation;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 482 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * 动画主控制器
	 * @config target 动画对象，可以是数组，如果是数组的话会批量分发onframe等事件
	 * @config life(1000) 动画时长
	 * @config delay(0) 动画延迟时间
	 * @config loop(true)
	 * @config gap(0) 循环的间隔时间
	 * @config onframe
	 * @config easing(optional)
	 * @config ondestroy(optional)
	 * @config onrestart(optional)
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function(require) {

	        var Easing = __webpack_require__(483);

	        function Clip(options) {

	            this._targetPool = options.target || {};
	            if (!(this._targetPool instanceof Array)) {
	                this._targetPool = [ this._targetPool ];
	            }

	            // 生命周期
	            this._life = options.life || 1000;
	            // 延时
	            this._delay = options.delay || 0;
	            // 开始时间
	            this._startTime = new Date().getTime() + this._delay;// 单位毫秒

	            // 结束时间
	            this._endTime = this._startTime + this._life * 1000;

	            // 是否循环
	            this.loop = typeof options.loop == 'undefined'
	                        ? false : options.loop;

	            this.gap = options.gap || 0;

	            this.easing = options.easing || 'Linear';

	            this.onframe = options.onframe;
	            this.ondestroy = options.ondestroy;
	            this.onrestart = options.onrestart;
	        }

	        Clip.prototype = {
	            step : function (time) {
	                var percent = (time - this._startTime) / this._life;

	                // 还没开始
	                if (percent < 0) {
	                    return;
	                }

	                percent = Math.min(percent, 1);

	                var easingFunc = typeof this.easing == 'string'
	                                 ? Easing[this.easing]
	                                 : this.easing;
	                var schedule = typeof easingFunc === 'function'
	                    ? easingFunc(percent)
	                    : percent;

	                this.fire('frame', schedule);

	                // 结束
	                if (percent == 1) {
	                    if (this.loop) {
	                        this.restart();
	                        // 重新开始周期
	                        // 抛出而不是直接调用事件直到 stage.update 后再统一调用这些事件
	                        return 'restart';
	                    }
	                    
	                    // 动画完成将这个控制器标识为待删除
	                    // 在Animation.update中进行批量删除
	                    this.__needsRemove = true;
	                    return 'destroy';
	                }
	                
	                return null;
	            },
	            restart : function() {
	                var time = new Date().getTime();
	                var remainder = (time - this._startTime) % this._life;
	                this._startTime = new Date().getTime() - remainder + this.gap;

	                this.__needsRemove = false;
	            },
	            fire : function(eventType, arg) {
	                for (var i = 0, len = this._targetPool.length; i < len; i++) {
	                    if (this['on' + eventType]) {
	                        this['on' + eventType](this._targetPool[i], arg);
	                    }
	                }
	            },
	            constructor: Clip
	        };

	        return Clip;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 483 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	        /**
	         * 缓动代码来自 https://github.com/sole/tween.js/blob/master/src/Tween.js
	         * @see http://sole.github.io/tween.js/examples/03_graphs.html
	         * @exports zrender/animation/easing
	         */
	        var easing = {
	            // 线性
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            Linear: function (k) {
	                return k;
	            },

	            // 二次方的缓动（t^2）
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            QuadraticIn: function (k) {
	                return k * k;
	            },
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            QuadraticOut: function (k) {
	                return k * (2 - k);
	            },
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            QuadraticInOut: function (k) {
	                if ((k *= 2) < 1) {
	                    return 0.5 * k * k;
	                }
	                return -0.5 * (--k * (k - 2) - 1);
	            },

	            // 三次方的缓动（t^3）
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            CubicIn: function (k) {
	                return k * k * k;
	            },
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            CubicOut: function (k) {
	                return --k * k * k + 1;
	            },
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            CubicInOut: function (k) {
	                if ((k *= 2) < 1) {
	                    return 0.5 * k * k * k;
	                }
	                return 0.5 * ((k -= 2) * k * k + 2);
	            },

	            // 四次方的缓动（t^4）
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            QuarticIn: function (k) {
	                return k * k * k * k;
	            },
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            QuarticOut: function (k) {
	                return 1 - (--k * k * k * k);
	            },
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            QuarticInOut: function (k) {
	                if ((k *= 2) < 1) {
	                    return 0.5 * k * k * k * k;
	                }
	                return -0.5 * ((k -= 2) * k * k * k - 2);
	            },

	            // 五次方的缓动（t^5）
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            QuinticIn: function (k) {
	                return k * k * k * k * k;
	            },
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            QuinticOut: function (k) {
	                return --k * k * k * k * k + 1;
	            },
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            QuinticInOut: function (k) {
	                if ((k *= 2) < 1) {
	                    return 0.5 * k * k * k * k * k;
	                }
	                return 0.5 * ((k -= 2) * k * k * k * k + 2);
	            },

	            // 正弦曲线的缓动（sin(t)）
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            SinusoidalIn: function (k) {
	                return 1 - Math.cos(k * Math.PI / 2);
	            },
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            SinusoidalOut: function (k) {
	                return Math.sin(k * Math.PI / 2);
	            },
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            SinusoidalInOut: function (k) {
	                return 0.5 * (1 - Math.cos(Math.PI * k));
	            },

	            // 指数曲线的缓动（2^t）
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            ExponentialIn: function (k) {
	                return k === 0 ? 0 : Math.pow(1024, k - 1);
	            },
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            ExponentialOut: function (k) {
	                return k === 1 ? 1 : 1 - Math.pow(2, -10 * k);
	            },
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            ExponentialInOut: function (k) {
	                if (k === 0) {
	                    return 0;
	                }
	                if (k === 1) {
	                    return 1;
	                }
	                if ((k *= 2) < 1) {
	                    return 0.5 * Math.pow(1024, k - 1);
	                }
	                return 0.5 * (-Math.pow(2, -10 * (k - 1)) + 2);
	            },

	            // 圆形曲线的缓动（sqrt(1-t^2)）
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            CircularIn: function (k) {
	                return 1 - Math.sqrt(1 - k * k);
	            },
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            CircularOut: function (k) {
	                return Math.sqrt(1 - (--k * k));
	            },
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            CircularInOut: function (k) {
	                if ((k *= 2) < 1) {
	                    return -0.5 * (Math.sqrt(1 - k * k) - 1);
	                }
	                return 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);
	            },

	            // 创建类似于弹簧在停止前来回振荡的动画
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            ElasticIn: function (k) {
	                var s; 
	                var a = 0.1;
	                var p = 0.4;
	                if (k === 0) {
	                    return 0;
	                }
	                if (k === 1) {
	                    return 1;
	                }
	                if (!a || a < 1) {
	                    a = 1; s = p / 4;
	                }
	                else {
	                    s = p * Math.asin(1 / a) / (2 * Math.PI);
	                }
	                return -(a * Math.pow(2, 10 * (k -= 1)) *
	                            Math.sin((k - s) * (2 * Math.PI) / p));
	            },
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            ElasticOut: function (k) {
	                var s;
	                var a = 0.1;
	                var p = 0.4;
	                if (k === 0) {
	                    return 0;
	                }
	                if (k === 1) {
	                    return 1;
	                }
	                if (!a || a < 1) {
	                    a = 1; s = p / 4;
	                }
	                else {
	                    s = p * Math.asin(1 / a) / (2 * Math.PI);
	                }
	                return (a * Math.pow(2, -10 * k) *
	                        Math.sin((k - s) * (2 * Math.PI) / p) + 1);
	            },
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            ElasticInOut: function (k) {
	                var s;
	                var a = 0.1;
	                var p = 0.4;
	                if (k === 0) {
	                    return 0;
	                }
	                if (k === 1) {
	                    return 1;
	                }
	                if (!a || a < 1) {
	                    a = 1; s = p / 4;
	                }
	                else {
	                    s = p * Math.asin(1 / a) / (2 * Math.PI);
	                }
	                if ((k *= 2) < 1) {
	                    return -0.5 * (a * Math.pow(2, 10 * (k -= 1))
	                        * Math.sin((k - s) * (2 * Math.PI) / p));
	                }
	                return a * Math.pow(2, -10 * (k -= 1))
	                        * Math.sin((k - s) * (2 * Math.PI) / p) * 0.5 + 1;

	            },

	            // 在某一动画开始沿指示的路径进行动画处理前稍稍收回该动画的移动
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            BackIn: function (k) {
	                var s = 1.70158;
	                return k * k * ((s + 1) * k - s);
	            },
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            BackOut: function (k) {
	                var s = 1.70158;
	                return --k * k * ((s + 1) * k + s) + 1;
	            },
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            BackInOut: function (k) {
	                var s = 1.70158 * 1.525;
	                if ((k *= 2) < 1) {
	                    return 0.5 * (k * k * ((s + 1) * k - s));
	                }
	                return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);
	            },

	            // 创建弹跳效果
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            BounceIn: function (k) {
	                return 1 - easing.BounceOut(1 - k);
	            },
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            BounceOut: function (k) {
	                if (k < (1 / 2.75)) {
	                    return 7.5625 * k * k;
	                }
	                else if (k < (2 / 2.75)) {
	                    return 7.5625 * (k -= (1.5 / 2.75)) * k + 0.75;
	                }
	                else if (k < (2.5 / 2.75)) {
	                    return 7.5625 * (k -= (2.25 / 2.75)) * k + 0.9375;
	                }
	                else {
	                    return 7.5625 * (k -= (2.625 / 2.75)) * k + 0.984375;
	                }
	            },
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            BounceInOut: function (k) {
	                if (k < 0.5) {
	                    return easing.BounceIn(k * 2) * 0.5;
	                }
	                return easing.BounceOut(k * 2 - 1) * 0.5 + 0.5;
	            }
	        };

	        return easing;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));



/***/ },
/* 484 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * echarts组件：孤岛数据
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	    var ChartBase = __webpack_require__(485);
	    
	    // 图形依赖
	    var CircleShape = __webpack_require__(506);
	    
	    var ecConfig = __webpack_require__(455);
	    ecConfig.island = {
	        zlevel: 0,                  // 一级层叠
	        z: 5,                       // 二级层叠
	        r: 15,
	        calculateStep: 0.1  // 滚轮可计算步长 0.1 = 10%
	    };

	    var ecData = __webpack_require__(503);
	    var zrUtil = __webpack_require__(456);
	    var zrEvent = __webpack_require__(458);
	    
	    /**
	     * 构造函数
	     * @param {Object} messageCenter echart消息中心
	     * @param {ZRender} zr zrender实例
	     * @param {Object} option 图表选项
	     */
	    function Island(ecTheme, messageCenter, zr, option, myChart) {
	        // 图表基类
	        ChartBase.call(this, ecTheme, messageCenter, zr, option, myChart);

	        this._nameConnector;
	        this._valueConnector;
	        this._zrHeight = this.zr.getHeight();
	        this._zrWidth = this.zr.getWidth();

	        var self = this;
	        /**
	         * 滚轮改变孤岛数据值
	         */
	        self.shapeHandler.onmousewheel = function (param) {
	            var shape = param.target;

	            var event = param.event;
	            var delta = zrEvent.getDelta(event);
	            delta = delta > 0 ? (-1) : 1;
	            shape.style.r -= delta;
	            shape.style.r = shape.style.r < 5 ? 5 : shape.style.r;

	            var value = ecData.get(shape, 'value');
	            var dvalue = value * self.option.island.calculateStep;
	            value = dvalue > 1
	                    ? (Math.round(value - dvalue * delta))
	                    : +(value - dvalue * delta).toFixed(2);

	            var name = ecData.get(shape, 'name');
	            shape.style.text = name + ':' + value;

	            ecData.set(shape, 'value', value);
	            ecData.set(shape, 'name', name);

	            self.zr.modShape(shape.id);
	            self.zr.refreshNextFrame();
	            zrEvent.stop(event);
	        };
	    }
	    
	    Island.prototype = {
	        type: ecConfig.CHART_TYPE_ISLAND,
	        /**
	         * 孤岛合并
	         *
	         * @param {string} tarShapeIndex 目标索引
	         * @param {Object} srcShape 源目标，合入目标后删除
	         */
	        _combine: function (tarShape, srcShape) {
	            var zrColor = __webpack_require__(475);
	            var accMath = __webpack_require__(507);
	            var value = accMath.accAdd(
	                            ecData.get(tarShape, 'value'),
	                            ecData.get(srcShape, 'value')
	                        );
	            var name = ecData.get(tarShape, 'name')
	                       + this._nameConnector
	                       + ecData.get(srcShape, 'name');

	            tarShape.style.text = name + this._valueConnector + value;

	            ecData.set(tarShape, 'value', value);
	            ecData.set(tarShape, 'name', name);
	            tarShape.style.r = this.option.island.r;
	            tarShape.style.color = zrColor.mix(
	                tarShape.style.color,
	                srcShape.style.color
	            );
	        },

	        /**
	         * 刷新
	         */
	        refresh: function (newOption) {
	            if (newOption) {
	                newOption.island = this.reformOption(newOption.island);
	                this.option = newOption;
	    
	                this._nameConnector = this.option.nameConnector;
	                this._valueConnector = this.option.valueConnector;
	            }
	        },
	        
	        getOption: function () {
	            return this.option;
	        },

	        resize: function () {
	            var newWidth = this.zr.getWidth();
	            var newHieght = this.zr.getHeight();
	            var xScale = newWidth / (this._zrWidth || newWidth);
	            var yScale = newHieght / (this._zrHeight || newHieght);
	            if (xScale === 1 && yScale === 1) {
	                return;
	            }
	            this._zrWidth = newWidth;
	            this._zrHeight = newHieght;
	            for (var i = 0, l = this.shapeList.length; i < l; i++) {
	                this.zr.modShape(
	                    this.shapeList[i].id,
	                    {
	                        style: {
	                            x: Math.round(this.shapeList[i].style.x * xScale),
	                            y: Math.round(this.shapeList[i].style.y * yScale)
	                        }
	                    }
	                );
	            }
	        },

	        add: function (shape) {
	            var name = ecData.get(shape, 'name');
	            var value = ecData.get(shape, 'value');
	            var seriesName = ecData.get(shape, 'series') != null
	                             ? ecData.get(shape, 'series').name
	                             : '';
	            var font = this.getFont(this.option.island.textStyle);
	            var islandOption = this.option.island;
	            var islandShape = {
	                zlevel: islandOption.zlevel,
	                z: islandOption.z,
	                style: {
	                    x: shape.style.x,
	                    y: shape.style.y,
	                    r: this.option.island.r,
	                    color: shape.style.color || shape.style.strokeColor,
	                    text: name + this._valueConnector + value,
	                    textFont: font
	                },
	                draggable: true,
	                hoverable: true,
	                onmousewheel: this.shapeHandler.onmousewheel,
	                _type: 'island'
	            };
	            if (islandShape.style.color === '#fff') {
	                islandShape.style.color = shape.style.strokeColor;
	            }
	            this.setCalculable(islandShape);
	            islandShape.dragEnableTime = 0;
	            ecData.pack(
	                islandShape,
	                {name:seriesName}, -1,
	                value, -1,
	                name
	            );
	            islandShape = new CircleShape(islandShape);
	            this.shapeList.push(islandShape);
	            this.zr.addShape(islandShape);
	        },

	        del: function (shape) {
	            this.zr.delShape(shape.id);
	            var newShapeList = [];
	            for (var i = 0, l = this.shapeList.length; i < l; i++) {
	                if (this.shapeList[i].id != shape.id) {
	                    newShapeList.push(this.shapeList[i]);
	                }
	            }
	            this.shapeList = newShapeList;
	        },

	        /**
	         * 数据项被拖拽进来， 重载基类方法
	         */
	        ondrop: function (param, status) {
	            if (!this.isDrop || !param.target) {
	                // 没有在当前实例上发生拖拽行为则直接返回
	                return;
	            }
	            // 拖拽产生孤岛数据合并
	            var target = param.target;      // 拖拽安放目标
	            var dragged = param.dragged;    // 当前被拖拽的图形对象

	            this._combine(target, dragged);
	            this.zr.modShape(target.id);

	            status.dragIn = true;

	            // 处理完拖拽事件后复位
	            this.isDrop = false;

	            return;
	        },

	        /**
	         * 数据项被拖拽出去， 重载基类方法
	         */
	        ondragend: function (param, status) {
	            var target = param.target;      // 拖拽安放目标
	            if (!this.isDragend) {
	                // 拖拽的不是孤岛数据，如果没有图表接受孤岛数据，需要新增孤岛数据
	                if (!status.dragIn) {
	                    target.style.x = zrEvent.getX(param.event);
	                    target.style.y = zrEvent.getY(param.event);
	                    this.add(target);
	                    status.needRefresh = true;
	                }
	            }
	            else {
	                // 拖拽的是孤岛数据，如果有图表接受了孤岛数据，需要删除孤岛数据
	                if (status.dragIn) {
	                    this.del(target);
	                    status.needRefresh = true;
	                }
	            }

	            // 处理完拖拽事件后复位
	            this.isDragend = false;

	            return;
	        }
	    };
	    
	    zrUtil.inherits(Island, ChartBase);
	    
	    // 图表注册
	    __webpack_require__(454).define('island', Island);
	    
	    return Island;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 485 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * echarts图表基类
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	    // 图形依赖
	    var ImageShape = __webpack_require__(478);
	    var IconShape = __webpack_require__(486);
	    var MarkLineShape = __webpack_require__(492);
	    var SymbolShape = __webpack_require__(496);
	    var PolylineShape = __webpack_require__(501);
	    var ShapeBundle = __webpack_require__(502);
	    
	    var ecConfig = __webpack_require__(455);
	    var ecData = __webpack_require__(503);
	    var ecAnimation = __webpack_require__(504);
	    var ecEffect = __webpack_require__(505);
	    var accMath = __webpack_require__(507);
	    var ComponentBase = __webpack_require__(508);
	    var EdgeBundling = __webpack_require__(511);

	    var zrUtil = __webpack_require__(456);
	    var zrArea = __webpack_require__(471);

	    // Some utility functions
	    function isCoordAvailable(coord) {
	        return coord.x != null && coord.y != null;
	    }
	    
	    function Base(ecTheme, messageCenter, zr, option, myChart) {

	        ComponentBase.call(this, ecTheme, messageCenter, zr, option, myChart);

	        var self = this;
	        this.selectedMap = {};
	        this.lastShapeList = [];
	        this.shapeHandler = {
	            onclick: function () {
	                self.isClick = true;
	            },
	            
	            ondragover: function (param) {
	                // 返回触发可计算特性的图形提示
	                var calculableShape = param.target;
	                calculableShape.highlightStyle = calculableShape.highlightStyle || {};
	                
	                // 备份特出特性
	                var highlightStyle = calculableShape.highlightStyle;
	                var brushType = highlightStyle.brushTyep;
	                var strokeColor = highlightStyle.strokeColor;
	                var lineWidth = highlightStyle.lineWidth;
	                
	                highlightStyle.brushType = 'stroke';
	                highlightStyle.strokeColor = self.ecTheme.calculableColor
	                                             || ecConfig.calculableColor;
	                highlightStyle.lineWidth = calculableShape.type === 'icon' ? 30 : 10;

	                self.zr.addHoverShape(calculableShape);
	                
	                setTimeout(function (){
	                    // 复位
	                    if (highlightStyle) {
	                        highlightStyle.brushType = brushType;
	                        highlightStyle.strokeColor = strokeColor;
	                        highlightStyle.lineWidth = lineWidth;
	                    }
	                },20);
	            },
	            
	            ondrop: function (param) {
	                // 排除一些非数据的拖拽进入
	                if (ecData.get(param.dragged, 'data') != null) {
	                    self.isDrop = true;
	                }
	            },
	            
	            ondragend: function () {
	                self.isDragend = true;
	            }
	        };
	    }
	    
	    /**
	     * 基类方法
	     */
	    Base.prototype = {
	        /**
	         * 图形拖拽特性 
	         */
	        setCalculable: function (shape) {
	            shape.dragEnableTime = this.ecTheme.DRAG_ENABLE_TIME || ecConfig.DRAG_ENABLE_TIME;
	            shape.ondragover = this.shapeHandler.ondragover;
	            shape.ondragend = this.shapeHandler.ondragend;
	            shape.ondrop = this.shapeHandler.ondrop;
	            return shape;
	        },

	        /**
	         * 数据项被拖拽进来
	         */
	        ondrop: function (param, status) {
	            if (!this.isDrop || !param.target || status.dragIn) {
	                // 没有在当前实例上发生拖拽行为或者已经被认领了则直接返回
	                return;
	            }
	            var target = param.target;      // 拖拽安放目标
	            var dragged = param.dragged;    // 当前被拖拽的图形对象

	            var seriesIndex = ecData.get(target, 'seriesIndex');
	            var dataIndex = ecData.get(target, 'dataIndex');

	            var series = this.series;
	            var data;
	            var legend = this.component.legend;
	            if (dataIndex === -1) {
	                // 落到calculableCase上，数据被拖拽进某个饼图|雷达|漏斗，增加数据
	                if (ecData.get(dragged, 'seriesIndex') == seriesIndex) {
	                    // 自己拖拽到自己
	                    status.dragOut = status.dragIn = status.needRefresh = true;
	                    this.isDrop = false;
	                    return;
	                }
	                
	                data = {
	                    value: ecData.get(dragged, 'value'),
	                    name: ecData.get(dragged, 'name')
	                };

	                // 修饼图数值不为负值
	                if (this.type === ecConfig.CHART_TYPE_PIE && data.value < 0) {
	                    data.value = 0;
	                }

	                var hasFind = false;
	                var sData = series[seriesIndex].data;
	                for (var i = 0, l = sData.length; i < l; i++) {
	                    if (sData[i].name === data.name && sData[i].value === '-') {
	                        series[seriesIndex].data[i].value = data.value;
	                        hasFind = true;
	                    }
	                }
	                !hasFind && series[seriesIndex].data.push(data);

	                legend && legend.add(
	                    data.name,
	                    dragged.style.color || dragged.style.strokeColor
	                );
	            }
	            else {
	                // 落到数据item上，数据被拖拽到某个数据项上，数据修改
	                data = series[seriesIndex].data[dataIndex] || '-';
	                if (data.value != null) {
	                    if (data.value != '-') {
	                        series[seriesIndex].data[dataIndex].value = 
	                            accMath.accAdd(
	                                series[seriesIndex].data[dataIndex].value,
	                                ecData.get(dragged, 'value')
	                            );
	                    }
	                    else {
	                        series[seriesIndex].data[dataIndex].value =
	                            ecData.get(dragged, 'value');
	                    }
	                    
	                    if (this.type === ecConfig.CHART_TYPE_FUNNEL
	                        || this.type === ecConfig.CHART_TYPE_PIE
	                    ) {
	                        legend && legend.getRelatedAmount(data.name) === 1 
	                               && this.component.legend.del(data.name);
	                        data.name += this.option.nameConnector + ecData.get(dragged, 'name');
	                        legend && legend.add(
	                            data.name,
	                            dragged.style.color || dragged.style.strokeColor
	                        );
	                    }
	                }
	                else {
	                    if (data != '-') {
	                        series[seriesIndex].data[dataIndex] = 
	                            accMath.accAdd(
	                                series[seriesIndex].data[dataIndex],
	                                ecData.get(dragged, 'value')
	                            );
	                    }
	                    else {
	                        series[seriesIndex].data[dataIndex] =
	                            ecData.get(dragged, 'value');
	                    }
	                }
	            }

	            // 别status = {}赋值啊！！
	            status.dragIn = status.dragIn || true;

	            // 处理完拖拽事件后复位
	            this.isDrop = false;

	            var self = this;
	            setTimeout(function(){
	                self.zr.trigger('mousemove', param.event);
	            }, 300);
	            
	            return;
	        },

	        /**
	         * 数据项被拖拽出去
	         */
	        ondragend: function (param, status) {
	            if (!this.isDragend || !param.target || status.dragOut) {
	                // 没有在当前实例上发生拖拽行为或者已经被认领了则直接返回
	                return;
	            }
	            var target = param.target;      // 被拖拽图形元素

	            var seriesIndex = ecData.get(target, 'seriesIndex');
	            var dataIndex = ecData.get(target, 'dataIndex');

	            var series = this.series;

	            // 删除被拖拽走的数据
	            if (series[seriesIndex].data[dataIndex].value != null) {
	                series[seriesIndex].data[dataIndex].value = '-';
	                // 清理可能有且唯一的legend data
	                var name = series[seriesIndex].data[dataIndex].name;
	                var legend = this.component.legend;
	                if (legend && legend.getRelatedAmount(name) === 0) {
	                    legend.del(name);
	                }
	            }
	            else {
	                series[seriesIndex].data[dataIndex] = '-';
	            }
	            
	            // 别status = {}赋值啊！！
	            status.dragOut = true;
	            status.needRefresh = true;

	            // 处理完拖拽事件后复位
	            this.isDragend = false;

	            return;
	        },

	        /**
	         * 图例选择
	         */
	        onlegendSelected: function (param, status) {
	            var legendSelected = param.selected;
	            for (var itemName in this.selectedMap) {
	                if (this.selectedMap[itemName] != legendSelected[itemName]) {
	                    // 有一项不一致都需要重绘
	                    status.needRefresh = true;
	                }
	                this.selectedMap[itemName] = legendSelected[itemName];
	            }
	            return;
	        },
	        
	        /**
	         * 折线图、柱形图公用方法
	         */
	        _buildPosition: function() {
	            this._symbol = this.option.symbolList;
	            this._sIndex2ShapeMap = {};  // series拐点图形类型，seriesIndex索引到shape type
	            this._sIndex2ColorMap = {};  // series默认颜色索引，seriesIndex索引到color

	            this.selectedMap = {};
	            this.xMarkMap = {};
	            
	            var series = this.series;
	            // 水平垂直双向series索引 ，position索引到seriesIndex
	            var _position2sIndexMap = {
	                top: [],
	                bottom: [],
	                left: [],
	                right: [],
	                other: []
	            };
	            var xAxisIndex;
	            var yAxisIndex;
	            var xAxis;
	            var yAxis;
	            for (var i = 0, l = series.length; i < l; i++) {
	                if (series[i].type === this.type) {
	                    series[i] = this.reformOption(series[i]);
	                    this.legendHoverLink = series[i].legendHoverLink || this.legendHoverLink;
	                    xAxisIndex = series[i].xAxisIndex;
	                    yAxisIndex = series[i].yAxisIndex;
	                    xAxis = this.component.xAxis.getAxis(xAxisIndex);
	                    yAxis = this.component.yAxis.getAxis(yAxisIndex);
	                    if (xAxis.type === ecConfig.COMPONENT_TYPE_AXIS_CATEGORY) {
	                        _position2sIndexMap[xAxis.getPosition()].push(i);
	                    }
	                    else if (yAxis.type === ecConfig.COMPONENT_TYPE_AXIS_CATEGORY) {
	                        _position2sIndexMap[yAxis.getPosition()].push(i);
	                    }
	                    else {
	                        _position2sIndexMap.other.push(i);
	                    }
	                }
	            }
	            // console.log(_position2sIndexMap);
	            for (var position in _position2sIndexMap) {
	                if (_position2sIndexMap[position].length > 0) {
	                    this._buildSinglePosition(
	                        position, _position2sIndexMap[position]
	                    );
	                }
	            }

	            this.addShapeList();
	        },
	        
	        /**
	         * 构建单个方向上的折线图、柱形图公用方法
	         *
	         * @param {number} seriesIndex 系列索引
	         */
	        _buildSinglePosition: function (position, seriesArray) {
	            var mapData = this._mapData(seriesArray);
	            var locationMap = mapData.locationMap;
	            var maxDataLength = mapData.maxDataLength;

	            if (maxDataLength === 0 || locationMap.length === 0) {
	                return;
	            }
	            switch (position) {
	                case 'bottom' :
	                case 'top' :
	                    this._buildHorizontal(seriesArray, maxDataLength, locationMap, this.xMarkMap);
	                    break;
	                case 'left' :
	                case 'right' :
	                    this._buildVertical(seriesArray, maxDataLength, locationMap, this.xMarkMap);
	                    break;
	                case 'other' :
	                    this._buildOther(seriesArray, maxDataLength, locationMap, this.xMarkMap);
	                    break;
	            }
	            
	            for (var i = 0, l = seriesArray.length; i < l; i++) {
	                this.buildMark(seriesArray[i]);
	            }
	        },
	        
	        /**
	         * 数据整形，折线图、柱形图公用方法
	         * 数组位置映射到系列索引
	         */
	        _mapData: function (seriesArray) {
	            var series = this.series;
	            var serie;                              // 临时映射变量
	            var dataIndex = 0;                      // 堆积数据所在位置映射
	            var stackMap = {};                      // 堆积数据位置映射，堆积组在二维中的第几项
	            var magicStackKey = '__kener__stack__'; // 堆积命名，非堆积数据安单一堆积处理
	            var stackKey;                           // 临时映射变量
	            var serieName;                          // 临时映射变量
	            var legend = this.component.legend;
	            var locationMap = [];                   // 需要返回的东西：数组位置映射到系列索引
	            var maxDataLength = 0;                  // 需要返回的东西：最大数据长度
	            var iconShape;
	            // 计算需要显示的个数和分配位置并记在下面这个结构里
	            for (var i = 0, l = seriesArray.length; i < l; i++) {
	                serie = series[seriesArray[i]];
	                serieName = serie.name;
	                
	                this._sIndex2ShapeMap[seriesArray[i]] = this._sIndex2ShapeMap[seriesArray[i]]
	                                                        || this.query(serie,'symbol')
	                                                        || this._symbol[i % this._symbol.length];
	                      
	                if (legend){
	                    this.selectedMap[serieName] = legend.isSelected(serieName);
	                    
	                    this._sIndex2ColorMap[seriesArray[i]] = legend.getColor(serieName);
	                        
	                    iconShape = legend.getItemShape(serieName);
	                    if (iconShape) {
	                        // 回调legend，换一个更形象的icon
	                        var style = iconShape.style;
	                        if (this.type == ecConfig.CHART_TYPE_LINE) {
	                            style.iconType = 'legendLineIcon';
	                            style.symbol =  this._sIndex2ShapeMap[seriesArray[i]];
	                        }
	                        else if (serie.itemStyle.normal.barBorderWidth > 0) {
	                            var highlightStyle = iconShape.highlightStyle;
	                            style.brushType = 'both';
	                            style.x += 1;
	                            style.y += 1;
	                            style.width -= 2;
	                            style.height -= 2;
	                            style.strokeColor 
	                                = highlightStyle.strokeColor 
	                                = serie.itemStyle.normal.barBorderColor;
	                            highlightStyle.lineWidth = 3;
	                        }
	                        
	                        legend.setItemShape(serieName, iconShape);
	                    }
	                }
	                else {
	                    this.selectedMap[serieName] = true;
	                    this._sIndex2ColorMap[seriesArray[i]] = this.zr.getColor(seriesArray[i]);
	                }

	                if (this.selectedMap[serieName]) {
	                    stackKey = serie.stack || (magicStackKey + seriesArray[i]);
	                    if (stackMap[stackKey] == null) {
	                        stackMap[stackKey] = dataIndex;
	                        locationMap[dataIndex] = [seriesArray[i]];
	                        dataIndex++;
	                    }
	                    else {
	                        // 已经分配了位置就推进去就行
	                        locationMap[stackMap[stackKey]].push(seriesArray[i]);
	                    }
	                }
	                // 兼职帮算一下最大长度
	                maxDataLength = Math.max(maxDataLength, serie.data.length);
	            }
	            /* 调试输出
	            var s = '';
	            for (var i = 0, l = maxDataLength; i < l; i++) {
	                s = '[';
	                for (var j = 0, k = locationMap.length; j < k; j++) {
	                    s +='['
	                    for (var m = 0, n = locationMap[j].length - 1; m < n; m++) {
	                        s += series[locationMap[j][m]].data[i] + ','
	                    }
	                    s += series[locationMap[j][locationMap[j].length - 1]]
	                         .data[i];
	                    s += ']'
	                }
	                s += ']';
	                console.log(s);
	            }
	            console.log(locationMap)
	            */

	            return {
	                locationMap: locationMap,
	                maxDataLength: maxDataLength
	            };
	        },
	        
	        _calculMarkMapXY : function(xMarkMap, locationMap, xy) {
	            var series = this.series;
	            for (var j = 0, k = locationMap.length; j < k; j++) {
	                for (var m = 0, n = locationMap[j].length; m < n; m++) {
	                    var seriesIndex = locationMap[j][m];
	                    var valueIndex = xy == 'xy' ? 0 : '';
	                    var grid = this.component.grid;
	                    var tarMark = xMarkMap[seriesIndex];

	                    if (xy.indexOf('x') != '-1') {
	                        if (tarMark['counter' + valueIndex] > 0) {
	                            tarMark['average' + valueIndex] =
	                                tarMark['sum' + valueIndex] / tarMark['counter' + valueIndex];
	                        }
	                        
	                        var x = this.component.xAxis.getAxis(series[seriesIndex].xAxisIndex || 0)
	                                .getCoord(tarMark['average' + valueIndex]);
	                        tarMark['averageLine' + valueIndex] = [
	                            [x, grid.getYend()],
	                            [x, grid.getY()]
	                        ];
	                        tarMark['minLine' + valueIndex] = [
	                            [tarMark['minX' + valueIndex], grid.getYend()],
	                            [tarMark['minX' + valueIndex], grid.getY()]
	                        ];
	                        tarMark['maxLine' + valueIndex] = [
	                            [tarMark['maxX' + valueIndex], grid.getYend()],
	                            [tarMark['maxX' + valueIndex], grid.getY()]
	                        ];
	                        
	                        tarMark.isHorizontal = false;
	                    }
	                    
	                    valueIndex = xy == 'xy' ? 1 : '';
	                    if (xy.indexOf('y') != '-1') {
	                        if (tarMark['counter' + valueIndex] > 0) {
	                            tarMark['average' + valueIndex] = 
	                                tarMark['sum' + valueIndex] / tarMark['counter' + valueIndex];
	                        }
	                        var y = this.component.yAxis.getAxis(series[seriesIndex].yAxisIndex || 0)
	                                .getCoord(tarMark['average' + valueIndex]);
	                        tarMark['averageLine' + valueIndex] = [
	                            [grid.getX(), y],
	                            [grid.getXend(), y]
	                        ];
	                        tarMark['minLine' + valueIndex] = [
	                            [grid.getX(), tarMark['minY' + valueIndex]],
	                            [grid.getXend(), tarMark['minY' + valueIndex]]
	                        ];
	                        tarMark['maxLine' + valueIndex] = [
	                            [grid.getX(), tarMark['maxY' + valueIndex]],
	                            [grid.getXend(), tarMark['maxY' + valueIndex]]
	                        ];
	                        
	                        tarMark.isHorizontal = true;
	                    }
	                }
	            }
	        },
	        
	        /**
	         * 添加文本 
	         */
	        addLabel: function (tarShape, serie, data, name, orient) {
	            // 多级控制
	            var queryTarget = [data, serie];
	            var nLabel = this.deepMerge(queryTarget, 'itemStyle.normal.label');
	            var eLabel = this.deepMerge(queryTarget, 'itemStyle.emphasis.label');

	            var nTextStyle = nLabel.textStyle || {};
	            var eTextStyle = eLabel.textStyle || {};
	            
	            if (nLabel.show) {
	                var style = tarShape.style;
	                style.text = this._getLabelText(
	                    serie, data, name, 'normal'
	                );
	                style.textPosition = nLabel.position == null
	                                     ? (orient === 'horizontal' ? 'right' : 'top')
	                                     : nLabel.position;
	                style.textColor = nTextStyle.color;
	                style.textFont = this.getFont(nTextStyle);
	                style.textAlign = nTextStyle.align;
	                style.textBaseline = nTextStyle.baseline;
	            }
	            if (eLabel.show) {
	                var highlightStyle = tarShape.highlightStyle;
	                highlightStyle.text = this._getLabelText(
	                    serie, data, name, 'emphasis'
	                );
	                highlightStyle.textPosition = nLabel.show
	                                              ? tarShape.style.textPosition
	                                              : (eLabel.position == null
	                                                 ? (orient === 'horizontal' ? 'right' : 'top')
	                                                 : eLabel.position);
	                highlightStyle.textColor = eTextStyle.color;
	                highlightStyle.textFont = this.getFont(eTextStyle);
	                highlightStyle.textAlign = eTextStyle.align;
	                highlightStyle.textBaseline = eTextStyle.baseline;
	            }
	            
	            return tarShape;
	        },
	        
	        /**
	         * 根据lable.format计算label text
	         */
	        _getLabelText: function (serie, data, name, status) {
	            var formatter = this.deepQuery(
	                [data, serie],
	                'itemStyle.' + status + '.label.formatter'
	            );
	            if (!formatter && status === 'emphasis') {
	                // emphasis时需要看看normal下是否有formatter
	                formatter = this.deepQuery(
	                    [data, serie],
	                    'itemStyle.normal.label.formatter'
	                );
	            }
	            
	            var value = this.getDataFromOption(data, '-');
	            
	            if (formatter) {
	                if (typeof formatter === 'function') {
	                    return formatter.call(
	                        this.myChart,
	                        {
	                            seriesName: serie.name,
	                            series: serie,
	                            name: name,
	                            value: value,
	                            data: data,
	                            status: status
	                        }
	                    );
	                }
	                else if (typeof formatter === 'string') {
	                    formatter = formatter.replace('{a}','{a0}')
	                                         .replace('{b}','{b0}')
	                                         .replace('{c}','{c0}')
	                                         .replace('{a0}', serie.name)
	                                         .replace('{b0}', name)
	                                         .replace('{c0}', this.numAddCommas(value));
	    
	                    return formatter;
	                }
	            }
	            else {
	                if (value instanceof Array) {
	                    return value[2] != null
	                           ? this.numAddCommas(value[2])
	                           : (value[0] + ' , ' + value[1]);
	                }
	                else {
	                    return this.numAddCommas(value);
	                }
	            }
	        },
	        
	        /**
	         * 标线标注 
	         */
	        buildMark: function (seriesIndex) {
	            var serie = this.series[seriesIndex];
	            if (this.selectedMap[serie.name]) {
	                serie.markLine && this._buildMarkLine(seriesIndex);
	                serie.markPoint && this._buildMarkPoint(seriesIndex);
	            }
	        },
	        
	        /**
	         * 标注逻辑
	         */
	        _buildMarkPoint: function (seriesIndex) {
	            var attachStyle =  (this.markAttachStyle || {})[seriesIndex];
	            var serie = this.series[seriesIndex];
	            var mpData;
	            var pos;
	            var markPoint = zrUtil.clone(serie.markPoint);
	            for (var i = 0, l = markPoint.data.length; i < l; i++) {
	                mpData = markPoint.data[i];
	                pos = this.getMarkCoord(seriesIndex, mpData);
	                mpData.x = mpData.x != null ? mpData.x : pos[0];
	                mpData.y = mpData.y != null ? mpData.y : pos[1];
	                if (mpData.type
	                    && (mpData.type === 'max' || mpData.type === 'min')
	                ) {
	                    // 特殊值内置支持
	                    mpData.value = pos[3];
	                    mpData.name = mpData.name || mpData.type;
	                    mpData.symbolSize = mpData.symbolSize
	                        || (zrArea.getTextWidth(pos[3], this.getFont()) / 2 + 5);
	                }
	            }
	            
	            var shapeList = this._markPoint(seriesIndex, markPoint);
	            
	            for (var i = 0, l = shapeList.length; i < l; i++) {
	                var tarShape = shapeList[i];
	                tarShape.zlevel = serie.zlevel;
	                tarShape.z = serie.z + 1;
	                for (var key in attachStyle) {
	                    tarShape[key] = zrUtil.clone(attachStyle[key]);
	                }
	                this.shapeList.push(tarShape);
	            }
	            // 个别特殊图表需要自己addShape
	            if (this.type === ecConfig.CHART_TYPE_FORCE
	                || this.type === ecConfig.CHART_TYPE_CHORD
	            ) {
	                for (var i = 0, l = shapeList.length; i < l; i++) {
	                    this.zr.addShape(shapeList[i]);
	                }
	            }
	        },
	        
	        /**
	         * 标线逻辑
	         */
	        _buildMarkLine: function (seriesIndex) {
	            var attachStyle =  (this.markAttachStyle || {})[seriesIndex];
	            var serie = this.series[seriesIndex];
	            var pos;
	            var markLine = zrUtil.clone(serie.markLine);
	            for (var i = 0, l = markLine.data.length; i < l; i++) {
	                var mlData = markLine.data[i];
	                if (mlData.type
	                    && (mlData.type === 'max' || mlData.type === 'min' || mlData.type === 'average')
	                ) {
	                    // 特殊值内置支持
	                    pos = this.getMarkCoord(seriesIndex, mlData);
	                    markLine.data[i] = [zrUtil.clone(mlData), {}];
	                    markLine.data[i][0].name = mlData.name || mlData.type;
	                    markLine.data[i][0].value = mlData.type !== 'average'
	                                                ? pos[3]
	                                                : +pos[3].toFixed(
	                                                      markLine.precision != null 
	                                                      ? markLine.precision 
	                                                      : this.deepQuery(
	                                                            [this.ecTheme, ecConfig],
	                                                            'markLine.precision'
	                                                        )
	                                                  );
	                    pos = pos[2];
	                    mlData = [{},{}];
	                }
	                else {
	                    pos = [
	                        this.getMarkCoord(seriesIndex, mlData[0]),
	                        this.getMarkCoord(seriesIndex, mlData[1])
	                    ];
	                }
	                if (pos == null || pos[0] == null || pos[1] == null) {
	                    // 不在显示区域内
	                    continue;
	                }
	                markLine.data[i][0].x = mlData[0].x != null ? mlData[0].x : pos[0][0];
	                markLine.data[i][0].y = mlData[0].y != null ? mlData[0].y : pos[0][1];
	                markLine.data[i][1].x = mlData[1].x != null ? mlData[1].x : pos[1][0];
	                markLine.data[i][1].y = mlData[1].y != null ? mlData[1].y : pos[1][1];
	            }
	            
	            var shapeList = this._markLine(seriesIndex, markLine);

	            var isLarge = markLine.large;

	            if (isLarge) {
	                var shapeBundle = new ShapeBundle({
	                    style: {
	                        shapeList: shapeList
	                    }
	                });
	                var firstShape = shapeList[0];
	                if (firstShape) {
	                    zrUtil.merge(shapeBundle.style, firstShape.style);
	                    zrUtil.merge(shapeBundle.highlightStyle = {}, firstShape.highlightStyle);
	                    shapeBundle.style.brushType = 'stroke';
	                    shapeBundle.zlevel = serie.zlevel;
	                    shapeBundle.z = serie.z + 1;
	                    shapeBundle.hoverable = false;
	                    for (var key in attachStyle) {
	                        shapeBundle[key] = zrUtil.clone(attachStyle[key]);
	                    }
	                }
	                this.shapeList.push(shapeBundle);
	                this.zr.addShape(shapeBundle);

	                shapeBundle._mark = 'largeLine';
	                var effect = markLine.effect;
	                if (effect.show) {
	                    shapeBundle.effect = effect;
	                }
	            }
	            else {
	                for (var i = 0, l = shapeList.length; i < l; i++) {
	                    var tarShape = shapeList[i];
	                    tarShape.zlevel = serie.zlevel;
	                    tarShape.z = serie.z + 1;
	                    for (var key in attachStyle) {
	                        tarShape[key] = zrUtil.clone(attachStyle[key]);
	                    }
	                    this.shapeList.push(tarShape);
	                }
	                // 个别特殊图表需要自己addShape
	                if (this.type === ecConfig.CHART_TYPE_FORCE
	                    || this.type === ecConfig.CHART_TYPE_CHORD
	                ) {
	                    for (var i = 0, l = shapeList.length; i < l; i++) {
	                        this.zr.addShape(shapeList[i]);
	                    }
	                }
	            }
	        },
	        
	        /**
	         * 标注多级控制构造
	         */
	        _markPoint: function (seriesIndex, mpOption) {
	            var serie = this.series[seriesIndex];
	            var component = this.component;
	            zrUtil.merge(
	                zrUtil.merge(
	                    mpOption,
	                    zrUtil.clone(this.ecTheme.markPoint || {})
	                ),
	                zrUtil.clone(ecConfig.markPoint)
	            );

	            mpOption.name = serie.name;
	                   
	            var pList = [];
	            var data = mpOption.data;
	            var itemShape;
	            
	            var dataRange = component.dataRange;
	            var legend = component.legend;
	            var color;
	            var value;
	            var queryTarget;
	            var nColor;
	            var eColor;
	            var effect;
	            var zrWidth = this.zr.getWidth();
	            var zrHeight = this.zr.getHeight();

	            if (!mpOption.large) {
	                for (var i = 0, l = data.length; i < l; i++) {
	                    if (data[i].x == null || data[i].y == null) {
	                        continue;
	                    }
	                    value = data[i].value != null ? data[i].value : '';
	                    // 图例
	                    if (legend) {
	                        color = legend.getColor(serie.name);
	                    }
	                    // 值域
	                    if (dataRange) {
	                        color = isNaN(value) ? color : dataRange.getColor(value);
	                        
	                        queryTarget = [data[i], mpOption];
	                        nColor = this.deepQuery(queryTarget, 'itemStyle.normal.color')
	                                 || color;
	                        eColor = this.deepQuery(queryTarget, 'itemStyle.emphasis.color')
	                                 || nColor;
	                        // 有值域，并且值域返回null且用户没有自己定义颜色，则隐藏这个mark
	                        if (nColor == null && eColor == null) {
	                            continue;
	                        }
	                    }
	                    
	                    color = color == null ? this.zr.getColor(seriesIndex) : color;
	                    
	                    // 标准化一些参数
	                    data[i].tooltip = data[i].tooltip
	                                      || mpOption.tooltip
	                                      || {trigger:'item'}; // tooltip.trigger指定为item
	                    data[i].name = data[i].name != null ? data[i].name : '';
	                    data[i].value = value;

	                    // 复用getSymbolShape
	                    itemShape = this.getSymbolShape(
	                        mpOption, seriesIndex,      // 系列 
	                        data[i], i, data[i].name,   // 数据
	                        this.parsePercent(data[i].x, zrWidth),   // 坐标
	                        this.parsePercent(data[i].y, zrHeight),  // 坐标
	                        'pin', color,               // 默认symbol和color
	                        'rgba(0,0,0,0)',
	                        'horizontal'                // 走向，用于默认文字定位
	                    );
	                    itemShape._mark = 'point';
	                    
	                    effect = this.deepMerge(
	                        [data[i], mpOption],
	                        'effect'
	                    );
	                    if (effect.show) {
	                        itemShape.effect = effect;
	                    }
	                    
	                    if (serie.type === ecConfig.CHART_TYPE_MAP) {
	                        itemShape._geo = this.getMarkGeo(data[i]);
	                    }
	                    
	                    // 重新pack一下数据
	                    ecData.pack(
	                        itemShape,
	                        serie, seriesIndex,
	                        data[i], i,
	                        data[i].name,
	                        value
	                    );
	                    pList.push(itemShape);
	                }
	            }
	            else {
	                // 大规模MarkPoint
	                itemShape = this.getLargeMarkPointShape(seriesIndex, mpOption);
	                itemShape._mark = 'largePoint';
	                itemShape && pList.push(itemShape);
	            }
	            return pList;
	        },
	        
	        /**
	         * 标线多级控制构造
	         */
	        _markLine: (function () {
	            function normalizeOptionValue(mlOption, key) {
	                mlOption[key] = mlOption[key] instanceof Array
	                          ? mlOption[key].length > 1 
	                            ? mlOption[key] 
	                            : [mlOption[key][0], mlOption[key][0]]
	                          : [mlOption[key], mlOption[key]];
	            }

	            return function (seriesIndex, mlOption) {
	                var serie = this.series[seriesIndex];
	                var component = this.component;
	                var dataRange = component.dataRange;
	                var legend = component.legend;

	                zrUtil.merge(
	                    zrUtil.merge(
	                        mlOption,
	                        zrUtil.clone(this.ecTheme.markLine || {})
	                    ),
	                    zrUtil.clone(ecConfig.markLine)
	                );

	                var defaultColor = legend ? legend.getColor(serie.name)
	                    : this.zr.getColor(seriesIndex);

	                // 标准化一些同时支持Array和String的参数
	                normalizeOptionValue(mlOption, 'symbol');
	                normalizeOptionValue(mlOption, 'symbolSize');
	                normalizeOptionValue(mlOption, 'symbolRotate');

	                // Normalize and filter data
	                var data = mlOption.data;
	                var edges = [];
	                var zrWidth = this.zr.getWidth();
	                var zrHeight = this.zr.getHeight();
	                for (var i = 0; i < data.length; i++) {
	                    var mlData = data[i];
	                    if (isCoordAvailable(mlData[0])
	                        && isCoordAvailable(mlData[1])
	                    ) {
	                        // 组装一个mergeData
	                        var mergeData = this.deepMerge(mlData);
	                        var queryTarget = [mergeData, mlOption];
	                        var color = defaultColor;
	                        var value = mergeData.value != null ? mergeData.value : '';
	                        // 值域
	                        if (dataRange) {
	                            color = isNaN(value) ? color : dataRange.getColor(value);

	                            var nColor = this.deepQuery(queryTarget, 'itemStyle.normal.color')
	                                     || color;
	                            var eColor = this.deepQuery(queryTarget, 'itemStyle.emphasis.color')
	                                     || nColor;
	                            // 有值域，并且值域返回null且用户没有自己定义颜色，则隐藏这个mark
	                            if (nColor == null && eColor == null) {
	                                continue;
	                            }
	                        }
	                        // 标准化一些参数
	                        mlData[0].tooltip = mergeData.tooltip
	                                            || mlOption.tooltip
	                                            || {trigger:'item'}; // tooltip.trigger指定为item
	                        mlData[0].name = mlData[0].name || '';
	                        mlData[1].name = mlData[1].name || '';
	                        mlData[0].value = value;

	                        edges.push({
	                            points: [
	                                [this.parsePercent(mlData[0].x, zrWidth),
	                                this.parsePercent(mlData[0].y, zrHeight)],
	                                [this.parsePercent(mlData[1].x, zrWidth),
	                                this.parsePercent(mlData[1].y, zrHeight)]
	                            ],
	                            rawData: mlData,
	                            color: color
	                        });
	                    }
	                }

	                var enableBundling = this.query(mlOption, 'bundling.enable');
	                if (enableBundling) {
	                    var edgeBundling = new EdgeBundling();
	                    edgeBundling.maxTurningAngle = this.query(
	                        mlOption, 'bundling.maxTurningAngle'
	                    ) / 180 * Math.PI;
	                    edges = edgeBundling.run(edges);
	                }

	                mlOption.name = serie.name;
	  
	                var shapeList = [];

	                for (var i = 0, l = edges.length; i < l; i++) {
	                    var edge = edges[i];
	                    var rawEdge = edge.rawEdge || edge; 
	                    var mlData = rawEdge.rawData;
	                    var value = mlData.value != null ? mlData.value : '';

	                    var itemShape = this.getMarkLineShape(
	                        mlOption,
	                        seriesIndex,
	                        mlData,
	                        i,
	                        edge.points,
	                        enableBundling,
	                        rawEdge.color
	                    );
	                    itemShape._mark = 'line';
	                    
	                    var effect = this.deepMerge(
	                        [mlData[0], mlData[1], mlOption],
	                        'effect'
	                    );
	                    if (effect.show) {
	                        itemShape.effect = effect;
	                        itemShape.effect.large = mlOption.large;
	                    }
	                    
	                    if (serie.type === ecConfig.CHART_TYPE_MAP) {
	                        itemShape._geo = [
	                            this.getMarkGeo(mlData[0]),
	                            this.getMarkGeo(mlData[1])
	                        ];
	                    }
	                    
	                    // 重新pack一下数据
	                    ecData.pack(
	                        itemShape,
	                        serie, seriesIndex,
	                        mlData[0], i,
	                        mlData[0].name 
	                            // 不要帮我代码规范
	                            + (mlData[1].name !== '' ? (' > ' + mlData[1].name) : ''),
	                        value
	                    );
	                    shapeList.push(itemShape);
	                }

	                return shapeList;
	            };
	        })(),
	        
	        getMarkCoord: function () {
	            // 无转换位置
	            return [0, 0];
	        },
	        
	        /**
	         * symbol构造器 
	         */
	        getSymbolShape: function (
	            serie, seriesIndex,     // 系列 
	            data, dataIndex, name,  // 数据
	            x, y,                   // 坐标
	            symbol, color,          // 默认symbol和color，来自legend或dataRange全局分配
	            emptyColor,             // 折线的emptySymbol用白色填充
	            orient                  // 走向，用于默认文字定位
	        ) {
	            var queryTarget = [data, serie];
	            var value = this.getDataFromOption(data, '-');
	            
	            symbol = this.deepQuery(queryTarget, 'symbol') || symbol;
	            var symbolSize = this.deepQuery(queryTarget, 'symbolSize');
	            symbolSize = typeof symbolSize === 'function'
	                         ? symbolSize(value)
	                         : symbolSize;
	            if (typeof symbolSize === 'number') {
	                symbolSize = [symbolSize, symbolSize];
	            }
	            var symbolRotate = this.deepQuery(queryTarget, 'symbolRotate');
	            
	            var normal = this.deepMerge(
	                queryTarget,
	                'itemStyle.normal'
	            );
	            var emphasis = this.deepMerge(
	                queryTarget,
	                'itemStyle.emphasis'
	            );
	            var nBorderWidth = normal.borderWidth != null
	                               ? normal.borderWidth
	                               : (normal.lineStyle && normal.lineStyle.width);
	            if (nBorderWidth == null) {
	                nBorderWidth = symbol.match('empty') ? 2 : 0;
	            }
	            var eBorderWidth = emphasis.borderWidth != null
	                               ? emphasis.borderWidth
	                               : (emphasis.lineStyle && emphasis.lineStyle.width);
	            if (eBorderWidth == null) {
	                eBorderWidth = nBorderWidth + 2;
	            }

	            var nColor = this.getItemStyleColor(normal.color, seriesIndex, dataIndex, data);
	            var eColor = this.getItemStyleColor(emphasis.color, seriesIndex, dataIndex, data);
	            
	            var width = symbolSize[0];
	            var height = symbolSize[1];
	            var itemShape = new IconShape({
	                style: {
	                    iconType: symbol.replace('empty', '').toLowerCase(),
	                    x: x - width,
	                    y: y - height,
	                    width: width * 2,
	                    height: height * 2,
	                    brushType: 'both',
	                    color: symbol.match('empty') 
	                           ? emptyColor 
	                           : (nColor || color),
	                    strokeColor: normal.borderColor || nColor || color,
	                    lineWidth: nBorderWidth
	                },
	                highlightStyle: {
	                    color: symbol.match('empty') 
	                           ? emptyColor 
	                           : (eColor || nColor || color),
	                    strokeColor: emphasis.borderColor 
	                                 || normal.borderColor
	                                 || eColor
	                                 || nColor
	                                 || color,
	                    lineWidth: eBorderWidth
	                },
	                clickable: this.deepQuery(queryTarget, 'clickable')
	            });

	            if (symbol.match('image')) {
	                itemShape.style.image = symbol.replace(new RegExp('^image:\\/\\/'), '');
	                itemShape = new ImageShape({
	                    style: itemShape.style,
	                    highlightStyle: itemShape.highlightStyle,
	                    clickable: this.deepQuery(queryTarget, 'clickable')
	                });
	            }
	            
	            if (symbolRotate != null) {
	                itemShape.rotation = [
	                    symbolRotate * Math.PI / 180, x, y
	                ];
	            }
	            
	            if (symbol.match('star')) {
	                itemShape.style.iconType = 'star';
	                itemShape.style.n = 
	                    (symbol.replace('empty', '').replace('star','') - 0) || 5;
	            }
	            
	            if (symbol === 'none') {
	                itemShape.invisible = true;
	                itemShape.hoverable = false;
	            }
	            
	            /*
	            if (this.deepQuery([data, serie, option], 'calculable')) {
	                this.setCalculable(itemShape);
	                itemShape.draggable = true;
	            }
	            */

	            itemShape = this.addLabel(
	                itemShape, 
	                serie, data, name, 
	                orient
	            );
	            
	            if (symbol.match('empty')) {
	                if (itemShape.style.textColor == null) {
	                    itemShape.style.textColor = itemShape.style.strokeColor;
	                }
	                if (itemShape.highlightStyle.textColor == null) {
	                    itemShape.highlightStyle.textColor = 
	                        itemShape.highlightStyle.strokeColor;
	                }
	            }
	            
	            ecData.pack(
	                itemShape,
	                serie, seriesIndex,
	                data, dataIndex,
	                name
	            );

	            itemShape._x = x;
	            itemShape._y = y;
	            
	            itemShape._dataIndex = dataIndex;
	            itemShape._seriesIndex = seriesIndex;

	            return itemShape;
	        },
	        
	        /**
	         * 标线构造器 
	         */
	        getMarkLineShape: function (
	            mlOption,               // 系列 
	            seriesIndex,            // 系列索引
	            data,                   // 数据
	            dataIndex,              // 数据索引
	            points,                 // 坐标点
	            bundling,               // 是否边捆绑过
	            color                   // 默认color，来自legend或dataRange全局分配
	        ) {
	            var value0 = data[0].value != null ? data[0].value : '-';
	            var value1 = data[1].value != null ? data[1].value : '-';
	            var symbol = [
	                data[0].symbol || mlOption.symbol[0],
	                data[1].symbol || mlOption.symbol[1]
	            ];
	            var symbolSize = [
	                data[0].symbolSize || mlOption.symbolSize[0],
	                data[1].symbolSize || mlOption.symbolSize[1]
	            ];
	            symbolSize[0] = typeof symbolSize[0] === 'function'
	                            ? symbolSize[0](value0)
	                            : symbolSize[0];
	            symbolSize[1] = typeof symbolSize[1] === 'function'
	                            ? symbolSize[1](value1)
	                            : symbolSize[1];
	            var symbolRotate = [
	                this.query(data[0], 'symbolRotate') || mlOption.symbolRotate[0],
	                this.query(data[1], 'symbolRotate') || mlOption.symbolRotate[1]
	            ];
	            //console.log(symbol, symbolSize, symbolRotate);

	            var queryTarget = [data[0], data[1], mlOption];
	            var normal = this.deepMerge(
	                queryTarget,
	                'itemStyle.normal'
	            );
	            normal.color = this.getItemStyleColor(normal.color, seriesIndex, dataIndex, data);
	            var emphasis = this.deepMerge(
	                queryTarget,
	                'itemStyle.emphasis'
	            );
	            emphasis.color = this.getItemStyleColor(emphasis.color, seriesIndex, dataIndex, data);
	            
	            var nlineStyle = normal.lineStyle;
	            var elineStyle = emphasis.lineStyle;
	            
	            var nBorderWidth = nlineStyle.width;
	            if (nBorderWidth == null) {
	                nBorderWidth = normal.borderWidth;
	            }
	            var eBorderWidth = elineStyle.width;
	            if (eBorderWidth == null) {
	                eBorderWidth = emphasis.borderWidth != null 
	                               ? emphasis.borderWidth
	                               : (nBorderWidth + 2);
	            }
	            var smoothness = this.deepQuery(queryTarget, 'smoothness');
	            if (! this.deepQuery(queryTarget, 'smooth')) {
	                smoothness = 0;
	            }

	            var ShapeCtor = bundling ? PolylineShape : MarkLineShape;
	            var itemShape = new ShapeCtor({
	                style: {
	                    symbol: symbol,
	                    symbolSize: symbolSize,
	                    symbolRotate: symbolRotate,
	                    // data: [data[0].name,data[1].name],
	                    brushType: 'both',
	                    lineType: nlineStyle.type,
	                    shadowColor: nlineStyle.shadowColor
	                                 || nlineStyle.color
	                                 || normal.borderColor
	                                 || normal.color
	                                 || color,
	                    shadowBlur: nlineStyle.shadowBlur,
	                    shadowOffsetX: nlineStyle.shadowOffsetX,
	                    shadowOffsetY: nlineStyle.shadowOffsetY,
	                    color: normal.color || color,
	                    strokeColor: nlineStyle.color
	                                 || normal.borderColor
	                                 || normal.color
	                                 || color,
	                    lineWidth: nBorderWidth,
	                    symbolBorderColor: normal.borderColor
	                                       || normal.color
	                                       || color,
	                    symbolBorder: normal.borderWidth
	                },
	                highlightStyle: {
	                    shadowColor: elineStyle.shadowColor,
	                    shadowBlur: elineStyle.shadowBlur,
	                    shadowOffsetX: elineStyle.shadowOffsetX,
	                    shadowOffsetY: elineStyle.shadowOffsetY,
	                    color: emphasis.color|| normal.color || color,
	                    strokeColor: elineStyle.color
	                                 || nlineStyle.color
	                                 || emphasis.borderColor 
	                                 || normal.borderColor
	                                 || emphasis.color 
	                                 || normal.color
	                                 || color,
	                    lineWidth: eBorderWidth,
	                    symbolBorderColor: emphasis.borderColor
	                                       || normal.borderColor
	                                       || emphasis.color
	                                       || normal.color
	                                       || color,
	                    symbolBorder: emphasis.borderWidth == null
	                                  ? (normal.borderWidth + 2)
	                                  : (emphasis.borderWidth)
	                },
	                clickable: this.deepQuery(queryTarget, 'clickable')
	            });
	            var shapeStyle = itemShape.style;
	            if (bundling) {
	                shapeStyle.pointList = points;
	                shapeStyle.smooth = smoothness;
	            }
	            else {
	                shapeStyle.xStart = points[0][0];
	                shapeStyle.yStart = points[0][1];
	                shapeStyle.xEnd = points[1][0];
	                shapeStyle.yEnd = points[1][1];
	                shapeStyle.curveness = smoothness;
	                itemShape.updatePoints(itemShape.style);
	            }
	            
	            itemShape = this.addLabel(
	                itemShape, 
	                mlOption, 
	                data[0], 
	                data[0].name + ' : ' + data[1].name
	            );

	            return itemShape;
	        },
	        
	        /**
	         * 大规模标注构造器 
	         */
	        getLargeMarkPointShape: function(seriesIndex, mpOption) {
	            var serie = this.series[seriesIndex];
	            var component = this.component;
	            var data = mpOption.data;
	            var itemShape;
	            
	            var dataRange = component.dataRange;
	            var legend = component.legend;
	            var color;
	            var value;
	            var queryTarget = [data[0], mpOption];
	            var nColor;
	            var eColor;
	            var effect;
	            
	            // 图例
	            if (legend) {
	                color = legend.getColor(serie.name);
	            }
	            // 值域
	            if (dataRange) {
	                value = data[0].value != null ? data[0].value : '';
	                color = isNaN(value) ? color : dataRange.getColor(value);
	                
	                nColor = this.deepQuery(queryTarget, 'itemStyle.normal.color')
	                         || color;
	                eColor = this.deepQuery(queryTarget, 'itemStyle.emphasis.color')
	                         || nColor;
	                // 有值域，并且值域返回null且用户没有自己定义颜色，则隐藏这个mark
	                if (nColor == null && eColor == null) {
	                    return;
	                }
	            }
	            color = this.deepMerge(queryTarget, 'itemStyle.normal').color 
	                    || color;
	            
	            var symbol = this.deepQuery(queryTarget, 'symbol') || 'circle';
	            symbol = symbol.replace('empty', '').replace(/\d/g, '');
	            
	            effect = this.deepMerge(
	                [data[0], mpOption],
	                'effect'
	            );
	            
	            var devicePixelRatio = window.devicePixelRatio || 1;
	            
	            //console.log(data)
	            itemShape = new SymbolShape({
	                style: {
	                    pointList: data,
	                    color: color,
	                    strokeColor: color,
	                    shadowColor: effect.shadowColor || color,
	                    shadowBlur: (effect.shadowBlur != null ? effect.shadowBlur : 8)
	                                 * devicePixelRatio,
	                    size: this.deepQuery(queryTarget, 'symbolSize'),
	                    iconType: symbol,
	                    brushType: 'fill',
	                    lineWidth:1
	                },
	                draggable: false,
	                hoverable: false
	            });
	            
	            if (effect.show) {
	                itemShape.effect = effect;
	            }
	            
	            return itemShape;
	        },
	        
	        backupShapeList: function () {
	            if (this.shapeList && this.shapeList.length > 0) {
	                this.lastShapeList = this.shapeList;
	                this.shapeList = [];
	            }
	            else {
	                this.lastShapeList = [];
	            }
	        },
	        
	        addShapeList: function () {
	            var maxLenth = this.option.animationThreshold / (this.canvasSupported ? 2 : 4);
	            var lastShapeList = this.lastShapeList;
	            var shapeList = this.shapeList;
	            var isUpdate = lastShapeList.length > 0;
	            var duration = isUpdate
	                           ? this.query(this.option, 'animationDurationUpdate')
	                           : this.query(this.option, 'animationDuration');
	            var easing = this.query(this.option, 'animationEasing');
	            var delay;
	            var key;
	            var oldMap = {};
	            var newMap = {};
	            if (this.option.animation 
	                && !this.option.renderAsImage 
	                && shapeList.length < maxLenth
	                && !this.motionlessOnce
	            ) {
	                // 通过已有的shape做动画过渡
	                for (var i = 0, l = lastShapeList.length; i < l; i++) {
	                    key = this._getAnimationKey(lastShapeList[i]);
	                    if (key.match('undefined')) {
	                        this.zr.delShape(lastShapeList[i].id);  // 非关键元素直接删除
	                    }
	                    else {
	                        key += lastShapeList[i].type;
	                        // https://github.com/ecomfe/echarts/issues/1219#issuecomment-71987602
	                        // 响应中断可能产生的重复元素
	                        if (oldMap[key]) {
	                            this.zr.delShape(lastShapeList[i].id);
	                        }
	                        else {
	                            oldMap[key] = lastShapeList[i];
	                        }
	                    }
	                }
	                for (var i = 0, l = shapeList.length; i < l; i++) {
	                    key = this._getAnimationKey(shapeList[i]);
	                    if (key.match('undefined')) {
	                        this.zr.addShape(shapeList[i]);         // 非关键元素直接添加
	                    }
	                    else {
	                        key += shapeList[i].type;
	                        newMap[key] = shapeList[i];
	                    }
	                }
	                
	                for (key in oldMap) {
	                    if (!newMap[key]) {
	                        // 新的没有 删除
	                        this.zr.delShape(oldMap[key].id);
	                    }
	                }
	                for (key in newMap) {
	                    if (oldMap[key]) {
	                        // 新旧都有 动画过渡
	                        this.zr.delShape(oldMap[key].id);
	                        this._animateMod(
	                            oldMap[key], newMap[key], duration, easing, 0, isUpdate
	                        );
	                    }
	                    else {
	                        // 新有旧没有  添加并动画过渡
	                        //this._animateAdd(newMap[key], duration, easing);
	                        delay = (this.type == ecConfig.CHART_TYPE_LINE
	                                || this.type == ecConfig.CHART_TYPE_RADAR)
	                                && key.indexOf('icon') !== 0
	                                ? duration / 2
	                                : 0;
	                        this._animateMod(
	                            false, newMap[key], duration, easing, delay, isUpdate
	                        );
	                    }
	                }
	                this.zr.refresh();
	                this.animationEffect();
	            }
	            else {
	                this.motionlessOnce = false;
	                // clear old
	                this.zr.delShape(lastShapeList);
	                // 直接添加
	                for (var i = 0, l = shapeList.length; i < l; i++) {
	                    this.zr.addShape(shapeList[i]);
	                }
	            }
	        },
	        
	        _getAnimationKey: function(shape) {
	            if (this.type != ecConfig.CHART_TYPE_MAP
	                && this.type != ecConfig.CHART_TYPE_TREEMAP
	                && this.type != ecConfig.CHART_TYPE_VENN
	                && this.type != ecConfig.CHART_TYPE_TREE
	                ) {
	                return ecData.get(shape, 'seriesIndex') + '_'
	                       + ecData.get(shape, 'dataIndex')
	                       + (shape._mark ? shape._mark : '')
	                       + (this.type === ecConfig.CHART_TYPE_RADAR 
	                          ? ecData.get(shape, 'special') : '');
	            }
	            else {
	                return ecData.get(shape, 'seriesIndex') + '_'
	                       + ecData.get(shape, 'dataIndex')
	                       + (shape._mark ? shape._mark : 'undefined');
	            }
	        },
	        
	        /**
	         * 动画过渡 
	         */
	        _animateMod: function (oldShape, newShape, duration, easing, delay, isUpdate) {
	            switch (newShape.type) {
	                case 'polyline' :
	                case 'half-smooth-polygon' :
	                    ecAnimation.pointList(this.zr, oldShape, newShape, duration, easing);
	                    break;
	                case 'rectangle' :
	                    ecAnimation.rectangle(this.zr, oldShape, newShape, duration, easing);
	                    break;
	                case 'image' :
	                case 'icon' :
	                    ecAnimation.icon(this.zr, oldShape, newShape, duration, easing, delay);
	                    break;
	                case 'candle' :
	                    if (!isUpdate) {
	                        ecAnimation.candle(this.zr, oldShape, newShape, duration, easing);
	                    }
	                    else {
	                        this.zr.addShape(newShape);
	                    }
	                    break;
	                case 'ring' :
	                case 'sector' :
	                case 'circle' :
	                    if (!isUpdate) {
	                        // 进入动画，加旋转
	                        ecAnimation.ring(
	                            this.zr,
	                            oldShape,
	                            newShape, 
	                            duration + ((ecData.get(newShape, 'dataIndex') || 0) % 20 * 100), 
	                            easing
	                        );
	                    }
	                    else if (newShape.type === 'sector') {
	                        ecAnimation.sector(this.zr, oldShape, newShape, duration, easing);
	                    }
	                    else {
	                        this.zr.addShape(newShape);
	                    }
	                    break;
	                case 'text' :
	                    ecAnimation.text(this.zr, oldShape, newShape, duration, easing);
	                    break;
	                case 'polygon' :
	                    if (!isUpdate) {
	                        ecAnimation.polygon(this.zr, oldShape, newShape, duration, easing);
	                    }
	                    else {
	                        ecAnimation.pointList(this.zr, oldShape, newShape, duration, easing);
	                    }
	                    break;
	                case 'ribbon' :
	                    ecAnimation.ribbon(this.zr, oldShape, newShape, duration, easing);
	                    break;
	                case 'gauge-pointer' :
	                    ecAnimation.gaugePointer(this.zr, oldShape, newShape, duration, easing);
	                    break;
	                case 'mark-line' :
	                    ecAnimation.markline(this.zr, oldShape, newShape, duration, easing);
	                    break;
	                case 'bezier-curve' :
	                case 'line' :
	                    ecAnimation.line(this.zr, oldShape, newShape, duration, easing);
	                    break;
	                default :
	                    this.zr.addShape(newShape);
	                    break;
	            }
	        },
	        
	        /**
	         * 标注动画
	         * @param {number} duration 时长
	         * @param {string=} easing 缓动效果
	         * @param {Array=} shapeList 指定特效对象，不指定默认使用this.shapeList
	         */
	        animationMark: function (duration , easing, shapeList) {
	            var shapeList = shapeList || this.shapeList;
	            for (var i = 0, l = shapeList.length; i < l; i++) {
	                if (!shapeList[i]._mark) {
	                    continue;
	                }
	                this._animateMod(false, shapeList[i], duration, easing, 0, true);
	            }
	            this.animationEffect(shapeList);
	        },

	        /**
	         * 特效动画
	         * @param {Array=} shapeList 指定特效对象，不知道默认使用this.shapeList
	         */
	        animationEffect: function (shapeList) {
	            !shapeList && this.clearEffectShape();
	            shapeList = shapeList || this.shapeList;
	            if (shapeList == null) {
	                return;
	            }
	            var zlevel = ecConfig.EFFECT_ZLEVEL;
	            if (this.canvasSupported) {
	                this.zr.modLayer(
	                    zlevel,
	                    {
	                        motionBlur: true,
	                        lastFrameAlpha: this.option.effectBlendAlpha
	                            || ecConfig.effectBlendAlpha
	                    }
	                );
	            }
	            var shape;
	            for (var i = 0, l = shapeList.length; i < l; i++) {
	                shape = shapeList[i];
	                if (!(shape._mark && shape.effect && shape.effect.show && ecEffect[shape._mark])) {
	                    continue;
	                }
	                ecEffect[shape._mark](this.zr, this.effectList, shape, zlevel);
	                this.effectList[this.effectList.length - 1]._mark = shape._mark;
	            }
	        },
	        
	        clearEffectShape: function (clearMotionBlur) {
	            var effectList = this.effectList;
	            if (this.zr && effectList && effectList.length > 0) {
	                clearMotionBlur && this.zr.modLayer(
	                    ecConfig.EFFECT_ZLEVEL, 
	                    { motionBlur: false }
	                );
	                this.zr.delShape(effectList);

	                // 手动清除不会被 zr 自动清除的动画控制器
	                for (var i = 0; i < effectList.length; i++) {
	                    if (effectList[i].effectAnimator) {
	                        effectList[i].effectAnimator.stop();
	                    }
	                }
	            }
	            this.effectList = [];
	        },
	        
	        /**
	         * 动态标线标注添加
	         * @param {number} seriesIndex 系列索引
	         * @param {Object} markData 标线标注对象，支持多个
	         * @param {string} markType 标线标注类型
	         */
	        addMark: function (seriesIndex, markData, markType) {
	            var serie = this.series[seriesIndex];
	            if (this.selectedMap[serie.name]) {
	                var duration = this.query(this.option, 'animationDurationUpdate');
	                var easing = this.query(this.option, 'animationEasing');
	                // 备份，复用_buildMarkX
	                var oriMarkData = serie[markType].data;
	                var lastLength = this.shapeList.length;
	                
	                serie[markType].data = markData.data;
	                this['_build' + markType.replace('m', 'M')](seriesIndex);
	                if (this.option.animation && !this.option.renderAsImage) {
	                    // animationMark就会addShape
	                    this.animationMark(duration, easing, this.shapeList.slice(lastLength));
	                }
	                else {
	                    for (var i = lastLength, l = this.shapeList.length; i < l; i++) {
	                        this.zr.addShape(this.shapeList[i]);
	                    }
	                    this.zr.refreshNextFrame();
	                }
	                // 还原，复用_buildMarkX
	                serie[markType].data = oriMarkData;
	            }
	        },
	        
	        /**
	         * 动态标线标注删除
	         * @param {number} seriesIndex 系列索引
	         * @param {string} markName 标线标注名称
	         * @param {string} markType 标线标注类型
	         */
	        delMark: function (seriesIndex, markName, markType) {
	            markType = markType.replace('mark', '').replace('large', '').toLowerCase();
	            var serie = this.series[seriesIndex];
	            if (this.selectedMap[serie.name]) {
	                var needRefresh = false;
	                var shapeList = [this.shapeList, this.effectList];
	                var len = 2;
	                while(len--) {
	                    for (var i = 0, l = shapeList[len].length; i < l; i++) {
	                        if (shapeList[len][i]._mark == markType
	                            && ecData.get(shapeList[len][i], 'seriesIndex') == seriesIndex
	                            && ecData.get(shapeList[len][i], 'name') == markName
	                        ) {
	                            this.zr.delShape(shapeList[len][i].id);
	                            shapeList[len].splice(i, 1);
	                            needRefresh = true;
	                            break;
	                        }
	                    }
	                }
	                
	                needRefresh && this.zr.refreshNextFrame();
	            }
	        }
	    };

	    zrUtil.inherits(Base, ComponentBase);

	    return Base;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 486 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * echarts扩展zrender shape
	 *
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 * shape类：icon
	 * 可配图形属性：
	   {
	       // 基础属性
	       shape  : 'icon',       // 必须，shape类标识，需要显式指定
	       id     : {string},       // 必须，图形唯一标识，可通过'zrender/tool/guid'方法生成
	       zlevel : {number},       // 默认为0，z层level，决定绘画在哪层canvas中
	       invisible : {boolean},   // 默认为false，是否可见

	       // 样式属性，默认状态样式样式属性
	       style  : {
	           x             : {number},  // 必须，左上角横坐标
	           y             : {number},  // 必须，左上角纵坐标
	           width         : {number},  // 必须，宽度
	           height        : {number},  // 必须，高度
	           iconType      : {string},  // 必须，icon类型
	       },

	       // 样式属性，高亮样式属性，当不存在highlightStyle时使用基于默认样式扩展显示
	       highlightStyle : {
	           // 同style
	       }

	       // 交互属性，详见shape.Base

	       // 事件属性，详见shape.Base
	   }
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	    var zrUtil = __webpack_require__(456);
	    
	    function _iconMark(ctx, style) {
	        var x = style.x;
	        var y = style.y;
	        var dx = style.width / 16;
	        var dy = style.height / 16;
	        ctx.moveTo(x,                 y + style.height);
	        ctx.lineTo(x + 5 * dx,        y + 14 * dy);
	        ctx.lineTo(x + style.width,   y + 3 * dy);
	        ctx.lineTo(x + 13 * dx,       y);
	        ctx.lineTo(x + 2 * dx,        y + 11 * dy);
	        ctx.lineTo(x,                 y + style.height);

	        ctx.moveTo(x + 6 * dx,        y + 10 * dy);
	        ctx.lineTo(x + 14 * dx,       y + 2 * dy);

	        ctx.moveTo(x + 10 * dx,       y + 13 * dy);
	        ctx.lineTo(x + style.width,   y + 13 * dy);

	        ctx.moveTo(x + 13 * dx,       y + 10 * dy);
	        ctx.lineTo(x + 13 * dx,       y + style.height);
	    }

	    function _iconMarkUndo(ctx, style) {
	        var x = style.x;
	        var y = style.y;
	        var dx = style.width / 16;
	        var dy = style.height / 16;
	        ctx.moveTo(x,                 y + style.height);
	        ctx.lineTo(x + 5 * dx,        y + 14 * dy);
	        ctx.lineTo(x + style.width,   y + 3 * dy);
	        ctx.lineTo(x + 13 * dx,       y);
	        ctx.lineTo(x + 2 * dx,        y + 11 * dy);
	        ctx.lineTo(x,                 y + style.height);

	        ctx.moveTo(x + 6 * dx,        y + 10 * dy);
	        ctx.lineTo(x + 14 * dx,       y + 2 * dy);

	        ctx.moveTo(x + 10 * dx,       y + 13 * dy);
	        ctx.lineTo(x + style.width,   y + 13 * dy);
	    }

	    function _iconMarkClear(ctx, style) {
	        var x = style.x;
	        var y = style.y;
	        var dx = style.width / 16;
	        var dy = style.height / 16;

	        ctx.moveTo(x + 4 * dx,        y + 15 * dy);
	        ctx.lineTo(x + 9 * dx,        y + 13 * dy);
	        ctx.lineTo(x + 14 * dx,       y + 8 * dy);
	        ctx.lineTo(x + 11 * dx,       y + 5 * dy);
	        ctx.lineTo(x + 6 * dx,        y + 10 * dy);
	        ctx.lineTo(x + 4 * dx,        y + 15 * dy);

	        ctx.moveTo(x + 5 * dx,        y);
	        ctx.lineTo(x + 11 * dx,       y);
	        ctx.moveTo(x + 5 * dx,        y + dy);
	        ctx.lineTo(x + 11 * dx,       y + dy);
	        ctx.moveTo(x,                 y + 2 * dy);
	        ctx.lineTo(x + style.width,   y + 2 * dy);

	        ctx.moveTo(x,                 y + 5 * dy);
	        ctx.lineTo(x + 3 * dx,        y + style.height);
	        ctx.lineTo(x + 13 * dx,       y + style.height);
	        ctx.lineTo(x + style.width,   y + 5 * dy);
	    }

	    function _iconDataZoom(ctx, style) {
	        var x = style.x;
	        var y = style.y;
	        var dx = style.width / 16;
	        var dy = style.height / 16;

	        ctx.moveTo(x,               y + 3 * dy);
	        ctx.lineTo(x + 6 * dx,      y + 3 * dy);
	        
	        ctx.moveTo(x + 3 * dx,      y);
	        ctx.lineTo(x + 3 * dx,      y + 6 * dy);

	        ctx.moveTo(x + 3 * dx,      y + 8 * dy);
	        ctx.lineTo(x + 3 * dx,      y + style.height);
	        ctx.lineTo(x + style.width, y + style.height);
	        ctx.lineTo(x + style.width, y + 3 * dy);
	        ctx.lineTo(x + 8 * dx,      y + 3 * dy);
	    }
	    
	    function _iconDataZoomReset(ctx, style) {
	        var x = style.x;
	        var y = style.y;
	        var dx = style.width / 16;
	        var dy = style.height / 16;

	        ctx.moveTo(x + 6 * dx,      y);
	        ctx.lineTo(x + 2 * dx,      y + 3 * dy);
	        ctx.lineTo(x + 6 * dx,      y + 6 * dy);
	        
	        ctx.moveTo(x + 2 * dx,      y + 3 * dy);
	        ctx.lineTo(x + 14 * dx,     y + 3 * dy);
	        ctx.lineTo(x + 14 * dx,     y + 11 * dy);
	        
	        ctx.moveTo(x + 2 * dx,      y + 5 * dy);
	        ctx.lineTo(x + 2 * dx,      y + 13 * dy);
	        ctx.lineTo(x + 14 * dx,     y + 13 * dy);
	        
	        ctx.moveTo(x + 10 * dx,     y + 10 * dy);
	        ctx.lineTo(x + 14 * dx,     y + 13 * dy);
	        ctx.lineTo(x + 10 * dx,     y + style.height);
	    }
	    
	    function _iconRestore(ctx, style) {
	        var x = style.x;
	        var y = style.y;
	        var dx = style.width / 16;
	        var dy = style.height / 16;
	        var r = style.width / 2;
	        
	        ctx.lineWidth = 1.5;

	        ctx.arc(x + r, y + r, r - dx, 0, Math.PI * 2 / 3);
	        ctx.moveTo(x + 3 * dx,        y + style.height);
	        ctx.lineTo(x + 0 * dx,        y + 12 * dy);
	        ctx.lineTo(x + 5 * dx,        y + 11 * dy);

	        ctx.moveTo(x, y + 8 * dy);
	        ctx.arc(x + r, y + r, r - dx, Math.PI, Math.PI * 5 / 3);
	        ctx.moveTo(x + 13 * dx,       y);
	        ctx.lineTo(x + style.width,   y + 4 * dy);
	        ctx.lineTo(x + 11 * dx,       y + 5 * dy);
	    }

	    function _iconLineChart(ctx, style) {
	        var x = style.x;
	        var y = style.y;
	        var dx = style.width / 16;
	        var dy = style.height / 16;

	        ctx.moveTo(x, y);
	        ctx.lineTo(x, y + style.height);
	        ctx.lineTo(x + style.width, y + style.height);

	        ctx.moveTo(x + 2 * dx,    y + 14 * dy);
	        ctx.lineTo(x + 7 * dx,    y + 6 * dy);
	        ctx.lineTo(x + 11 * dx,   y + 11 * dy);
	        ctx.lineTo(x + 15 * dx,   y + 2 * dy);
	    }

	    function _iconBarChart(ctx, style) {
	        var x = style.x;
	        var y = style.y;
	        var dx = style.width / 16;
	        var dy = style.height / 16;

	        ctx.moveTo(x, y);
	        ctx.lineTo(x, y + style.height);
	        ctx.lineTo(x + style.width, y + style.height);

	        ctx.moveTo(x + 3 * dx,        y + 14 * dy);
	        ctx.lineTo(x + 3 * dx,        y + 6 * dy);
	        ctx.lineTo(x + 4 * dx,        y + 6 * dy);
	        ctx.lineTo(x + 4 * dx,        y + 14 * dy);
	        ctx.moveTo(x + 7 * dx,        y + 14 * dy);
	        ctx.lineTo(x + 7 * dx,        y + 2 * dy);
	        ctx.lineTo(x + 8 * dx,        y + 2 * dy);
	        ctx.lineTo(x + 8 * dx,        y + 14 * dy);
	        ctx.moveTo(x + 11 * dx,       y + 14 * dy);
	        ctx.lineTo(x + 11 * dx,       y + 9 * dy);
	        ctx.lineTo(x + 12 * dx,       y + 9 * dy);
	        ctx.lineTo(x + 12 * dx,       y + 14 * dy);
	    }
	    
	    function _iconPieChart(ctx, style) {
	        var x = style.x;
	        var y = style.y;
	        var width = style.width - 2;
	        var height = style.height - 2;
	        var r = Math.min(width, height) / 2;
	        y += 2;
	        ctx.moveTo(x + r + 3, y + r - 3);
	        ctx.arc(x + r + 3, y + r - 3, r - 1, 0, -Math.PI / 2, true);
	        ctx.lineTo(x + r + 3, y + r - 3);
	      
	        ctx.moveTo(x + r, y);
	        ctx.lineTo(x + r, y + r);
	        ctx.arc(x + r, y + r, r, -Math.PI / 2, Math.PI * 2, true);
	        ctx.lineTo(x + r, y + r);
	        ctx.lineWidth = 1.5;
	    }
	    
	    function _iconFunnelChart(ctx, style) {
	        var x = style.x;
	        var y = style.y;
	        var dx = style.width / 16;
	        var dy = style.height / 16;
	        y -= dy;
	        ctx.moveTo(x + 1 * dx,      y + 2 * dy);
	        ctx.lineTo(x + 15 * dx,     y + 2 * dy);
	        ctx.lineTo(x + 14 * dx,     y + 3 * dy);
	        ctx.lineTo(x + 2 * dx,      y + 3 * dy);
	        
	        ctx.moveTo(x + 3 * dx,      y + 6 * dy);
	        ctx.lineTo(x + 13 * dx,     y + 6 * dy);
	        ctx.lineTo(x + 12 * dx,     y + 7 * dy);
	        ctx.lineTo(x + 4 * dx,      y + 7 * dy);
	        
	        ctx.moveTo(x + 5 * dx,      y + 10 * dy);
	        ctx.lineTo(x + 11 * dx,      y + 10 * dy);
	        ctx.lineTo(x + 10 * dx,      y + 11 * dy);
	        ctx.lineTo(x + 6 * dx,      y + 11 * dy);
	        
	        ctx.moveTo(x + 7 * dx,      y + 14 * dy);
	        ctx.lineTo(x + 9 * dx,      y + 14 * dy);
	        ctx.lineTo(x + 8 * dx,      y + 15 * dy);
	        ctx.lineTo(x + 7 * dx,      y + 15 * dy);
	    }
	    
	    function _iconForceChart(ctx, style) {
	        var x = style.x;
	        var y = style.y;
	        var width = style.width;
	        var height = style.height;
	        var dx = width / 16;
	        var dy = height / 16;
	        var r = Math.min(dx, dy) * 2;

	        ctx.moveTo(x + dx + r, y + dy + r);
	        ctx.arc(x + dx, y + dy, r, Math.PI / 4, Math.PI * 3);
	        
	        ctx.lineTo(x + 7 * dx - r, y + 6 * dy - r);
	        ctx.arc(x + 7 * dx, y + 6 * dy, r, Math.PI / 4 * 5, Math.PI * 4);
	        ctx.arc(x + 7 * dx, y + 6 * dy, r / 2, Math.PI / 4 * 5, Math.PI * 4);
	        
	        ctx.moveTo(x + 7 * dx - r / 2, y + 6 * dy + r);
	        ctx.lineTo(x + dx + r, y + 14 * dy - r);
	        ctx.arc(x + dx, y + 14 * dy, r, -Math.PI / 4, Math.PI * 2);
	        
	        ctx.moveTo(x + 7 * dx + r / 2, y + 6 * dy);
	        ctx.lineTo(x + 14 * dx - r, y + 10 * dy - r / 2);
	        ctx.moveTo(x + 16 * dx, y + 10 * dy);
	        ctx.arc(x + 14 * dx, y + 10 * dy, r, 0, Math.PI * 3);
	        ctx.lineWidth = 1.5;
	    }
	    
	    function _iconChordChart(ctx, style) {
	        var x = style.x;
	        var y = style.y;
	        var width = style.width;
	        var height = style.height;
	        var r = Math.min(width, height) / 2;

	        ctx.moveTo(x + width, y + height / 2);
	        ctx.arc(x + r, y + r, r, 0, Math.PI * 2);
	        
	        ctx.arc(x + r, y, r, Math.PI / 4, Math.PI / 5 * 4);
	        ctx.arc(x, y + r, r, -Math.PI / 3, Math.PI / 3);
	        ctx.arc(x + width, y + height, r, Math.PI, Math.PI / 2 * 3);
	        ctx.lineWidth = 1.5;
	    }

	    function _iconStackChart(ctx, style) {
	        var x = style.x;
	        var y = style.y;
	        var width = style.width;
	        var height = style.height;
	        var dy = Math.round(height / 3);
	        var delta = Math.round((dy - 2) / 2);
	        var len = 3;
	        while (len--) {
	            ctx.rect(x, y + dy * len + delta, width, 2);
	        }
	    }
	    
	    function _iconTiledChart(ctx, style) {
	        var x = style.x;
	        var y = style.y;
	        var width = style.width;
	        var height = style.height;
	        var dx = Math.round(width / 3);
	        var delta = Math.round((dx - 2) / 2);
	        var len = 3;
	        while (len--) {
	            ctx.rect(x + dx * len + delta, y, 2, height);
	        }
	    }
	    
	    function _iconDataView(ctx, style) {
	        var x = style.x;
	        var y = style.y;
	        var dx = style.width / 16;

	        ctx.moveTo(x + dx, y);
	        ctx.lineTo(x + dx, y + style.height);
	        ctx.lineTo(x + 15 * dx, y + style.height);
	        ctx.lineTo(x + 15 * dx, y);
	        ctx.lineTo(x + dx, y);

	        ctx.moveTo(x + 3 * dx, y + 3 * dx);
	        ctx.lineTo(x + 13 * dx, y + 3 * dx);

	        ctx.moveTo(x + 3 * dx, y + 6 * dx);
	        ctx.lineTo(x + 13 * dx, y + 6 * dx);

	        ctx.moveTo(x + 3 * dx, y + 9 * dx);
	        ctx.lineTo(x + 13 * dx, y + 9 * dx);

	        ctx.moveTo(x + 3 * dx, y + 12 * dx);
	        ctx.lineTo(x + 9 * dx, y + 12 * dx);
	    }
	    
	    function _iconSave(ctx, style) {
	        var x = style.x;
	        var y = style.y;
	        var dx = style.width / 16;
	        var dy = style.height / 16;

	        ctx.moveTo(x, y);
	        ctx.lineTo(x, y + style.height);
	        ctx.lineTo(x + style.width, y + style.height);
	        ctx.lineTo(x + style.width, y);
	        ctx.lineTo(x, y);

	        ctx.moveTo(x + 4 * dx,    y);
	        ctx.lineTo(x + 4 * dx,    y + 8 * dy);
	        ctx.lineTo(x + 12 * dx,   y + 8 * dy);
	        ctx.lineTo(x + 12 * dx,   y);
	        
	        ctx.moveTo(x + 6 * dx,    y + 11 * dy);
	        ctx.lineTo(x + 6 * dx,    y + 13 * dy);
	        ctx.lineTo(x + 10 * dx,   y + 13 * dy);
	        ctx.lineTo(x + 10 * dx,   y + 11 * dy);
	        ctx.lineTo(x + 6 * dx,    y + 11 * dy);
	    }
	    
	    function _iconCross(ctx, style) {
	        var x = style.x;
	        var y = style.y;
	        var width = style.width;
	        var height = style.height;
	        ctx.moveTo(x, y + height / 2);
	        ctx.lineTo(x + width, y + height / 2);
	        
	        ctx.moveTo(x + width / 2, y);
	        ctx.lineTo(x + width / 2, y + height);
	    }
	    
	    function _iconCircle(ctx, style) {
	        var width = style.width / 2;
	        var height = style.height / 2;
	        var r = Math.min(width, height);
	        ctx.moveTo(
	            style.x + width + r, 
	            style.y + height
	        );
	        ctx.arc(
	            style.x + width, 
	            style.y + height, 
	            r,
	            0, 
	            Math.PI * 2
	        );
	        ctx.closePath();
	    }
	    
	    function _iconRectangle(ctx, style) {
	        ctx.rect(style.x, style.y, style.width, style.height);
	        ctx.closePath();
	    }
	    
	    function _iconTriangle(ctx, style) {
	        var width = style.width / 2;
	        var height = style.height / 2;
	        var x = style.x + width;
	        var y = style.y + height;
	        var symbolSize = Math.min(width, height);
	        ctx.moveTo(x, y - symbolSize);
	        ctx.lineTo(x + symbolSize, y + symbolSize);
	        ctx.lineTo(x - symbolSize, y + symbolSize);
	        ctx.lineTo(x, y - symbolSize);
	        ctx.closePath();
	    }
	    
	    function _iconDiamond(ctx, style) {
	        var width = style.width / 2;
	        var height = style.height / 2;
	        var x = style.x + width;
	        var y = style.y + height;
	        var symbolSize = Math.min(width, height);
	        ctx.moveTo(x, y - symbolSize);
	        ctx.lineTo(x + symbolSize, y);
	        ctx.lineTo(x, y + symbolSize);
	        ctx.lineTo(x - symbolSize, y);
	        ctx.lineTo(x, y - symbolSize);
	        ctx.closePath();
	    }
	    
	    function _iconArrow(ctx, style) {
	        var x = style.x;
	        var y = style.y;
	        var dx = style.width / 16;
	        ctx.moveTo(x + 8 * dx,  y);
	        ctx.lineTo(x + dx,      y + style.height);
	        ctx.lineTo(x + 8 * dx,  y + style.height / 4 * 3);
	        ctx.lineTo(x + 15 * dx, y + style.height);
	        ctx.lineTo(x + 8 * dx,  y);
	        ctx.closePath();
	    }
	    
	    function _iconStar(ctx, style) {
	        var StarShape = __webpack_require__(487);
	        var width = style.width / 2;
	        var height = style.height / 2;
	        StarShape.prototype.buildPath(ctx, {
	            x : style.x + width,
	            y : style.y + height,
	            r : Math.min(width, height),
	            n : style.n || 5
	        });
	    }
	    
	    function _iconHeart(ctx, style) {
	        var HeartShape = __webpack_require__(489);
	        HeartShape.prototype.buildPath(ctx, {
	            x : style.x + style.width / 2,
	            y : style.y + style.height * 0.2,
	            a : style.width / 2,
	            b : style.height * 0.8
	        });
	    }
	    
	    function _iconDroplet(ctx, style) {
	        var DropletShape = __webpack_require__(491);
	        DropletShape.prototype.buildPath(ctx, {
	            x : style.x + style.width * 0.5,
	            y : style.y + style.height * 0.5,
	            a : style.width * 0.5,
	            b : style.height * 0.8
	        });
	    }
	    
	    function _iconPin(ctx, style) {
	        var x = style.x;
	        var y = style.y - style.height / 2 * 1.5;
	        var width = style.width / 2;
	        var height = style.height / 2;
	        var r = Math.min(width, height);
	        ctx.arc(
	            x + width, 
	            y + height, 
	            r,
	            Math.PI / 5 * 4, 
	            Math.PI / 5
	        );
	        ctx.lineTo(x + width, y + height + r * 1.5);
	        ctx.closePath();
	    }
	    
	    function _iconImage(ctx, style, refreshNextFrame) {
	        var ImageShape = __webpack_require__(478);
	        this._imageShape = this._imageShape || new ImageShape({
	            style: {}
	        });
	        for (var name in style) {
	            this._imageShape.style[name] = style[name];
	        }
	        this._imageShape.brush(ctx, false, refreshNextFrame);
	    }
	    
	    var Base = __webpack_require__(473);
	    
	    function Icon(options) {
	        Base.call(this, options);
	    }

	    Icon.prototype =  {
	        type : 'icon',
	        iconLibrary : {
	            mark : _iconMark,
	            markUndo : _iconMarkUndo,
	            markClear : _iconMarkClear,
	            dataZoom : _iconDataZoom,
	            dataZoomReset : _iconDataZoomReset,
	            restore : _iconRestore,
	            lineChart : _iconLineChart,
	            barChart : _iconBarChart,
	            pieChart : _iconPieChart,
	            funnelChart : _iconFunnelChart,
	            forceChart : _iconForceChart,
	            chordChart : _iconChordChart,
	            stackChart : _iconStackChart,
	            tiledChart : _iconTiledChart,
	            dataView : _iconDataView,
	            saveAsImage : _iconSave,
	            
	            cross : _iconCross,
	            circle : _iconCircle,
	            rectangle : _iconRectangle,
	            triangle : _iconTriangle,
	            diamond : _iconDiamond,
	            arrow : _iconArrow,
	            star : _iconStar,
	            heart : _iconHeart,
	            droplet : _iconDroplet,
	            pin : _iconPin,
	            image : _iconImage
	        },
	        brush: function (ctx, isHighlight, refreshNextFrame) {
	            var style = isHighlight ? this.highlightStyle : this.style;
	            style = style || {};
	            var iconType = style.iconType || this.style.iconType;
	            if (iconType === 'image') {
	                var ImageShape = __webpack_require__(478);
	                ImageShape.prototype.brush.call(this, ctx, isHighlight, refreshNextFrame);

	            } else {

	                var style = this.beforeBrush(ctx, isHighlight);

	                ctx.beginPath();
	                this.buildPath(ctx, style, refreshNextFrame);

	                switch (style.brushType) {
	                    /* jshint ignore:start */
	                    case 'both':
	                        ctx.fill();
	                    case 'stroke':
	                        style.lineWidth > 0 && ctx.stroke();
	                        break;
	                    /* jshint ignore:end */
	                    default:
	                        ctx.fill();
	                }
	                
	                this.drawText(ctx, style, this.style);

	                this.afterBrush(ctx);
	            }
	        },
	        /**
	         * 创建矩形路径
	         * @param {Context2D} ctx Canvas 2D上下文
	         * @param {Object} style 样式
	         */
	        buildPath : function (ctx, style, refreshNextFrame) {
	            if (this.iconLibrary[style.iconType]) {
	                this.iconLibrary[style.iconType].call(this, ctx, style, refreshNextFrame);
	            }
	            else {
	                ctx.moveTo(style.x, style.y);
	                ctx.lineTo(style.x + style.width, style.y);
	                ctx.lineTo(style.x + style.width, style.y + style.height);
	                ctx.lineTo(style.x, style.y + style.height);
	                ctx.lineTo(style.x, style.y);
	                ctx.closePath();
	            }

	            return;
	        },

	        /**
	         * 返回矩形区域，用于局部刷新和文字定位
	         * @param {Object} style
	         */
	        getRect : function (style) {
	            if (style.__rect) {
	                return style.__rect;
	            }
	            
	            // pin比较特殊，让尖端在目标x,y上
	            style.__rect = {
	                x : Math.round(style.x),
	                y : Math.round(style.y - (style.iconType == 'pin' 
	                                         ? (style.height / 2 * 1.5) : 0)
	                               ),
	                width : style.width,
	                height : style.height * (
	                    style.iconType === 'pin' ? 1.25 : 1
	                )
	            };
	            
	            return style.__rect;
	        },

	        isCover : function (x, y) {
	            var originPos = this.transformCoordToLocal(x, y);
	            x = originPos[0];
	            y = originPos[1];

	            // 快速预判并保留判断矩形
	            var rect = this.style.__rect;
	            if (!rect) {
	                rect = this.style.__rect = this.getRect(this.style);
	            }
	            // 提高交互体验，太小的图形包围盒四向扩大4px
	            var delta = (rect.height < 8 || rect.width < 8 ) ? 4 : 0;
	            return x >= rect.x - delta
	                && x <= (rect.x + rect.width + delta)
	                && y >= rect.y - delta
	                && y <= (rect.y + rect.height + delta);
	        }
	    };

	    zrUtil.inherits(Icon, Base);
	    
	    return Icon;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 487 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * n角星（n>3）
	 * @module zrender/shape/Star
	 * @author sushuang (宿爽, sushuang0322@gmail.com)
	 * @example
	 *     var Star = require('zrender/shape/Star');
	 *     var shape = new Star({
	 *         style: {
	 *             x: 200,
	 *             y: 100,
	 *             r: 150,
	 *             n: 5,
	 *             text: '五角星'
	 *         }
	 *     });
	 *     zr.addShape(shape);
	 */

	/**
	 * @typedef {Object} IStarStyle
	 * @property {number} x n角星外接圆心x坐标
	 * @property {number} y n角星外接圆心y坐标
	 * @property {number} r n角星外接圆半径
	 * @property {number} [r0] n角星内部顶点（凹点）的外接圆半径。
	 *                         如果不指定此参数，则自动计算：取相隔外部顶点连线的交点作内部顶点。
	 * @property {number} n 指明几角星
	 * @property {string} [brushType='fill']
	 * @property {string} [color='#000000'] 填充颜色
	 * @property {string} [strokeColor='#000000'] 描边颜色
	 * @property {string} [lineCape='butt'] 线帽样式，可以是 butt, round, square
	 * @property {number} [lineWidth=1] 描边宽度
	 * @property {number} [opacity=1] 绘制透明度
	 * @property {number} [shadowBlur=0] 阴影模糊度，大于0有效
	 * @property {string} [shadowColor='#000000'] 阴影颜色
	 * @property {number} [shadowOffsetX=0] 阴影横向偏移
	 * @property {number} [shadowOffsetY=0] 阴影纵向偏移
	 * @property {string} [text] 图形中的附加文本
	 * @property {string} [textColor='#000000'] 文本颜色
	 * @property {string} [textFont] 附加文本样式，eg:'bold 18px verdana'
	 * @property {string} [textPosition='end'] 附加文本位置, 可以是 inside, left, right, top, bottom
	 * @property {string} [textAlign] 默认根据textPosition自动设置，附加文本水平对齐。
	 *                                可以是start, end, left, right, center
	 * @property {string} [textBaseline] 默认根据textPosition自动设置，附加文本垂直对齐。
	 *                                可以是top, bottom, middle, alphabetic, hanging, ideographic
	 */

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {

	        var math = __webpack_require__(488);
	        var sin = math.sin;
	        var cos = math.cos;
	        var PI = Math.PI;

	        var Base = __webpack_require__(473);

	        /**
	         * @alias module:zrender/shape/Star
	         * @param {Object} options
	         * @constructor
	         * @extends module:zrender/shape/Base
	         */
	        var Star = function(options) {
	            Base.call(this, options);
	            /**
	             * n角星绘制样式
	             * @name module:zrender/shape/Star#style
	             * @type {module:zrender/shape/Star~IStarStyle}
	             */
	            /**
	             * n角星高亮绘制样式
	             * @name module:zrender/shape/Star#highlightStyle
	             * @type {module:zrender/shape/Star~IStarStyle}
	             */
	        };

	        Star.prototype = {
	            type: 'star',

	            /**
	             * 创建n角星（n>3）路径
	             * @param {CanvasRenderingContext2D} ctx
	             * @param {module:zrender/shape/Star~IStarStyle} style
	             */
	            buildPath : function(ctx, style) {
	                var n = style.n;
	                if (!n || n < 2) {
	                    return;
	                }

	                var x = style.x;
	                var y = style.y;
	                var r = style.r;
	                var r0 = style.r0;

	                // 如果未指定内部顶点外接圆半径，则自动计算
	                if (r0 == null) {
	                    r0 = n > 4
	                        // 相隔的外部顶点的连线的交点，
	                        // 被取为内部交点，以此计算r0
	                        ? r * cos(2 * PI / n) / cos(PI / n)
	                        // 二三四角星的特殊处理
	                        : r / 3;
	                }

	                var dStep = PI / n;
	                var deg = -PI / 2;
	                var xStart = x + r * cos(deg);
	                var yStart = y + r * sin(deg);
	                deg += dStep;

	                // 记录边界点，用于判断inside
	                var pointList = style.pointList = [];
	                pointList.push([ xStart, yStart ]);
	                for (var i = 0, end = n * 2 - 1, ri; i < end; i++) {
	                    ri = i % 2 === 0 ? r0 : r;
	                    pointList.push([ x + ri * cos(deg), y + ri * sin(deg) ]);
	                    deg += dStep;
	                }
	                pointList.push([ xStart, yStart ]);

	                // 绘制
	                ctx.moveTo(pointList[0][0], pointList[0][1]);
	                for (var i = 0; i < pointList.length; i++) {
	                    ctx.lineTo(pointList[i][0], pointList[i][1]);
	                }
	                
	                ctx.closePath();

	                return;
	            },

	            /**
	             * 返回n角星包围盒矩形
	             * @param {module:zrender/shape/Star~IStarStyle} style
	             * @return {module:zrender/shape/Base~IBoundingRect}
	             */
	            getRect : function(style) {
	                if (style.__rect) {
	                    return style.__rect;
	                }
	                
	                var lineWidth;
	                if (style.brushType == 'stroke' || style.brushType == 'fill') {
	                    lineWidth = style.lineWidth || 1;
	                }
	                else {
	                    lineWidth = 0;
	                }
	                style.__rect = {
	                    x : Math.round(style.x - style.r - lineWidth / 2),
	                    y : Math.round(style.y - style.r - lineWidth / 2),
	                    width : style.r * 2 + lineWidth,
	                    height : style.r * 2 + lineWidth
	                };
	                
	                return style.__rect;
	            }
	        };

	        __webpack_require__(456).inherits(Star, Base);
	        return Star;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 488 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * zrender: 数学辅助类
	 *
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 * sin：正弦函数
	 * cos：余弦函数
	 * degreeToRadian：角度转弧度
	 * radianToDegree：弧度转角度
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {

	        var _radians = Math.PI / 180;

	        /**
	         * @param {number} angle 弧度（角度）参数
	         * @param {boolean} isDegrees angle参数是否为角度计算，默认为false，angle为以弧度计量的角度
	         */
	        function sin(angle, isDegrees) {
	            return Math.sin(isDegrees ? angle * _radians : angle);
	        }

	        /**
	         * @param {number} angle 弧度（角度）参数
	         * @param {boolean} isDegrees angle参数是否为角度计算，默认为false，angle为以弧度计量的角度
	         */
	        function cos(angle, isDegrees) {
	            return Math.cos(isDegrees ? angle * _radians : angle);
	        }

	        /**
	         * 角度转弧度
	         * @param {Object} angle
	         */
	        function degreeToRadian(angle) {
	            return angle * _radians;
	        }

	        /**
	         * 弧度转角度
	         * @param {Object} angle
	         */
	        function radianToDegree(angle) {
	            return angle / _radians;
	        }

	        return {
	            sin : sin,
	            cos : cos,
	            degreeToRadian : degreeToRadian,
	            radianToDegree : radianToDegree
	        };
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 489 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * @module zrender/shape/Heart
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 * @example
	 *   var Heart = require('zrender/shape/Heart');
	 *   var shape = new Heart({
	 *       style: {
	 *           x: 100,
	 *           y: 100,
	 *           a: 40,
	 *           b: 40,
	 *           brushType: 'both',
	 *           color: 'blue',
	 *           strokeColor: 'red',
	 *           lineWidth: 3,
	 *           text: 'Heart'
	 *       }    
	 *   });
	 *   zr.addShape(shape);
	 */

	/**
	 * @typedef {Object} IHeartStyle
	 * @property {number} x 心形内部尖端横坐标
	 * @property {number} y 心形内部尖端纵坐标
	 * @property {number} a 心形横宽（中轴线到水平边缘最宽处距离）
	 * @property {number} b 心形纵高（内尖到外尖距离）
	 * @property {string} [brushType='fill']
	 * @property {string} [color='#000000'] 填充颜色
	 * @property {string} [strokeColor='#000000'] 描边颜色
	 * @property {string} [lineCape='butt'] 线帽样式，可以是 butt, round, square
	 * @property {number} [lineWidth=1] 描边宽度
	 * @property {number} [opacity=1] 绘制透明度
	 * @property {number} [shadowBlur=0] 阴影模糊度，大于0有效
	 * @property {string} [shadowColor='#000000'] 阴影颜色
	 * @property {number} [shadowOffsetX=0] 阴影横向偏移
	 * @property {number} [shadowOffsetY=0] 阴影纵向偏移
	 * @property {string} [text] 图形中的附加文本
	 * @property {string} [textColor='#000000'] 文本颜色
	 * @property {string} [textFont] 附加文本样式，eg:'bold 18px verdana'
	 * @property {string} [textPosition='end'] 附加文本位置, 可以是 inside, left, right, top, bottom
	 * @property {string} [textAlign] 默认根据textPosition自动设置，附加文本水平对齐。
	 *                                可以是start, end, left, right, center
	 * @property {string} [textBaseline] 默认根据textPosition自动设置，附加文本垂直对齐。
	 *                                可以是top, bottom, middle, alphabetic, hanging, ideographic
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	        'use strict';
	        
	        var Base = __webpack_require__(473);
	        var PathProxy = __webpack_require__(490);
	        var area = __webpack_require__(471);
	        
	        /**
	         * @alias module:zrender/shape/Heart
	         * @constructor
	         * @extends module:zrender/shape/Base
	         * @param {Object} options
	         */
	        var Heart = function (options) {
	            Base.call(this, options);

	            this._pathProxy = new PathProxy();
	            /**
	             * 心形绘制样式
	             * @name module:zrender/shape/Heart#style
	             * @type {module:zrender/shape/Heart~IHeartStyle}
	             */
	            /**
	             * 心形高亮绘制样式
	             * @name module:zrender/shape/Heart#highlightStyle
	             * @type {module:zrender/shape/Heart~IHeartStyle}
	             */
	        };

	        Heart.prototype = {
	            type: 'heart',

	            /**
	             * 创建扇形路径
	             * @param {CanvasRenderingContext2D} ctx
	             * @param {module:zrender/shape/Heart~IHeartStyle} style
	             */
	            buildPath : function (ctx, style) {
	                var path = this._pathProxy || new PathProxy();
	                path.begin(ctx);

	                path.moveTo(style.x, style.y);
	                path.bezierCurveTo(
	                    style.x + style.a / 2,
	                    style.y - style.b * 2 / 3,
	                    style.x + style.a * 2,
	                    style.y + style.b / 3,
	                    style.x,
	                    style.y + style.b
	                );
	                path.bezierCurveTo(
	                    style.x - style.a *  2,
	                    style.y + style.b / 3,
	                    style.x - style.a / 2,
	                    style.y - style.b * 2 / 3,
	                    style.x,
	                    style.y
	                );
	                path.closePath();
	                return;
	            },

	            /**
	             * 计算返回心形的包围盒矩形
	             * @param {module:zrender/shape/Heart~IHeartStyle} style
	             * @return {module:zrender/shape/Base~IBoundingRect}
	             */
	            getRect : function (style) {
	                if (style.__rect) {
	                    return style.__rect;
	                }
	                if (!this._pathProxy.isEmpty()) {
	                    this.buildPath(null, style);
	                }
	                return this._pathProxy.fastBoundingRect();
	            },

	            isCover: function (x, y) {
	                var originPos = this.transformCoordToLocal(x, y);
	                x = originPos[0];
	                y = originPos[1];
	                
	                if (this.isCoverRect(x, y)) {
	                    return area.isInsidePath(
	                        this._pathProxy.pathCommands, this.style.lineWidth, this.style.brushType, x, y
	                    );
	                }
	            }
	        };

	        __webpack_require__(456).inherits(Heart, Base);
	        return Heart;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 490 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * Path 代理，可以在`buildPath`中用于替代`ctx`, 会保存每个path操作的命令到pathCommands属性中
	 * 可以用于 isInsidePath 判断以及获取boundingRect
	 * 
	 * @module zrender/shape/tool/PathProxy
	 * @author pissang (http://www.github.com/pissang)
	 * 
	 * @example
	 *     var SomeShape = function() {
	 *         this._pathProxy = new PathProxy();
	 *         ...
	 *     }
	 *     SomeShape.prototype.buildPath = function(ctx, style) {
	 *         this._pathProxy.begin(ctx);
	 *             .moveTo(style.x, style.y);
	 *             .lineTo(style.x1, style.y1);
	 *         ...
	 *             .closePath();
	 *     },
	 *     SomeShape.prototype.getRect = function(style) {
	 *         if (!style._rect) {
	 *             // 这里必须要在 buildPath 之后才能调用
	 *             style._rect = this._pathProxy.fastBoundingRect();
	 *         }
	 *         return this.style._rect;
	 *     },
	 *     SomeShape.prototype.isCover = function(x, y) {
	 *         var rect = this.getRect(this.style);
	 *         if (x >= rect.x
	 *             && x <= (rect.x + rect.width)
	 *             && y >= rect.y
	 *             && y <= (rect.y + rect.height)
	 *         ) {
	 *             return area.isInsidePath(
	 *                 this._pathProxy.pathCommands, 0, 'fill', x, y
	 *             );
	 *         }
	 *     }
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	    
	    var vector = __webpack_require__(466);
	    // var computeBoundingBox = require('../../tool/computeBoundingBox');

	    var PathSegment = function(command, points) {
	        this.command = command;
	        this.points = points || null;
	    };

	    /**
	     * @alias module:zrender/shape/tool/PathProxy
	     * @constructor
	     */
	    var PathProxy = function () {

	        /**
	         * Path描述的数组，用于`isInsidePath`的判断
	         * @type {Array.<Object>}
	         */
	        this.pathCommands = [];

	        this._ctx = null;

	        this._min = [];
	        this._max = [];
	    };

	    /**
	     * 快速计算Path包围盒（并不是最小包围盒）
	     * @return {Object}
	     */
	    PathProxy.prototype.fastBoundingRect = function () {
	        var min = this._min;
	        var max = this._max;
	        min[0] = min[1] = Infinity;
	        max[0] = max[1] = -Infinity;
	        for (var i = 0; i < this.pathCommands.length; i++) {
	            var seg = this.pathCommands[i];
	            var p = seg.points;
	            switch (seg.command) {
	                case 'M':
	                    vector.min(min, min, p);
	                    vector.max(max, max, p);
	                    break;
	                case 'L':
	                    vector.min(min, min, p);
	                    vector.max(max, max, p);
	                    break;
	                case 'C':
	                    for (var j = 0; j < 6; j += 2) {
	                        min[0] = Math.min(min[0], min[0], p[j]);
	                        min[1] = Math.min(min[1], min[1], p[j + 1]);
	                        max[0] = Math.max(max[0], max[0], p[j]);
	                        max[1] = Math.max(max[1], max[1], p[j + 1]);
	                    }
	                    break;
	                case 'Q':
	                    for (var j = 0; j < 4; j += 2) {
	                        min[0] = Math.min(min[0], min[0], p[j]);
	                        min[1] = Math.min(min[1], min[1], p[j + 1]);
	                        max[0] = Math.max(max[0], max[0], p[j]);
	                        max[1] = Math.max(max[1], max[1], p[j + 1]);
	                    }
	                    break;
	                case 'A':
	                    var cx = p[0];
	                    var cy = p[1];
	                    var rx = p[2];
	                    var ry = p[3];
	                    min[0] = Math.min(min[0], min[0], cx - rx);
	                    min[1] = Math.min(min[1], min[1], cy - ry);
	                    max[0] = Math.max(max[0], max[0], cx + rx);
	                    max[1] = Math.max(max[1], max[1], cy + ry);
	                    break;
	            }
	        }

	        return {
	            x: min[0],
	            y: min[1],
	            width: max[0] - min[0],
	            height: max[1] - min[1]
	        };
	    };

	    /**
	     * @param  {CanvasRenderingContext2D} ctx
	     * @return {module:zrender/shape/util/PathProxy}
	     */
	    PathProxy.prototype.begin = function (ctx) {
	        this._ctx = ctx || null;
	        // 清空pathCommands
	        this.pathCommands.length = 0;

	        return this;
	    };

	    /**
	     * @param  {number} x
	     * @param  {number} y
	     * @return {module:zrender/shape/util/PathProxy}
	     */
	    PathProxy.prototype.moveTo = function (x, y) {
	        this.pathCommands.push(new PathSegment('M', [x, y]));
	        if (this._ctx) {
	            this._ctx.moveTo(x, y);
	        }
	        return this;
	    };

	    /**
	     * @param  {number} x
	     * @param  {number} y
	     * @return {module:zrender/shape/util/PathProxy}
	     */
	    PathProxy.prototype.lineTo = function (x, y) {
	        this.pathCommands.push(new PathSegment('L', [x, y]));
	        if (this._ctx) {
	            this._ctx.lineTo(x, y);
	        }
	        return this;
	    };

	    /**
	     * @param  {number} x1
	     * @param  {number} y1
	     * @param  {number} x2
	     * @param  {number} y2
	     * @param  {number} x3
	     * @param  {number} y3
	     * @return {module:zrender/shape/util/PathProxy}
	     */
	    PathProxy.prototype.bezierCurveTo = function (x1, y1, x2, y2, x3, y3) {
	        this.pathCommands.push(new PathSegment('C', [x1, y1, x2, y2, x3, y3]));
	        if (this._ctx) {
	            this._ctx.bezierCurveTo(x1, y1, x2, y2, x3, y3);
	        }
	        return this;
	    };

	    /**
	     * @param  {number} x1
	     * @param  {number} y1
	     * @param  {number} x2
	     * @param  {number} y2
	     * @return {module:zrender/shape/util/PathProxy}
	     */
	    PathProxy.prototype.quadraticCurveTo = function (x1, y1, x2, y2) {
	        this.pathCommands.push(new PathSegment('Q', [x1, y1, x2, y2]));
	        if (this._ctx) {
	            this._ctx.quadraticCurveTo(x1, y1, x2, y2);
	        }
	        return this;
	    };

	    /**
	     * @param  {number} cx
	     * @param  {number} cy
	     * @param  {number} r
	     * @param  {number} startAngle
	     * @param  {number} endAngle
	     * @param  {boolean} anticlockwise
	     * @return {module:zrender/shape/util/PathProxy}
	     */
	    PathProxy.prototype.arc = function (cx, cy, r, startAngle, endAngle, anticlockwise) {
	        this.pathCommands.push(new PathSegment(
	            'A', [cx, cy, r, r, startAngle, endAngle - startAngle, 0, anticlockwise ? 0 : 1]
	        ));
	        if (this._ctx) {
	            this._ctx.arc(cx, cy, r, startAngle, endAngle, anticlockwise);
	        }
	        return this;
	    };

	    // TODO
	    PathProxy.prototype.arcTo = function (x1, y1, x2, y2, radius) {
	        if (this._ctx) {
	            this._ctx.arcTo(x1, y1, x2, y2, radius);
	        }
	        return this;
	    };

	    // TODO
	    PathProxy.prototype.rect = function (x, y, w, h) {
	        if (this._ctx) {
	            this._ctx.rect(x, y, w, h);
	        }
	        return this;
	    };

	    /**
	     * @return {module:zrender/shape/util/PathProxy}
	     */
	    PathProxy.prototype.closePath = function () {
	        this.pathCommands.push(new PathSegment('z'));
	        if (this._ctx) {
	            this._ctx.closePath();
	        }
	        return this;
	    };

	    /**
	     * 是否没有Path命令
	     * @return {boolean}
	     */
	    PathProxy.prototype.isEmpty = function() {
	        return this.pathCommands.length === 0;
	    };

	    PathProxy.PathSegment = PathSegment;

	    return PathProxy;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 491 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * 水滴形状
	 * @module zrender/shape/Droplet
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 * @example
	 *   var Droplet = require('zrender/shape/Droplet');
	 *   var shape = new Droplet({
	 *       style: {
	 *           x: 100,
	 *           y: 100,
	 *           a: 40,
	 *           b: 40,
	 *           brushType: 'both',
	 *           color: 'blue',
	 *           strokeColor: 'red',
	 *           lineWidth: 3,
	 *           text: 'Droplet'
	 *       }    
	 *   });
	 *   zr.addShape(shape);
	 */

	/**
	 * @typedef {Object} IDropletStyle
	 * @property {number} x 水滴中心x坐标
	 * @property {number} y 水滴中心y坐标
	 * @property {number} a 水滴横宽（中心到水平边缘最宽处距离）
	 * @property {number} b 水滴纵高（中心到尖端距离）
	 * @property {string} [brushType='fill']
	 * @property {string} [color='#000000'] 填充颜色
	 * @property {string} [strokeColor='#000000'] 描边颜色
	 * @property {string} [lineCape='butt'] 线帽样式，可以是 butt, round, square
	 * @property {number} [lineWidth=1] 描边宽度
	 * @property {number} [opacity=1] 绘制透明度
	 * @property {number} [shadowBlur=0] 阴影模糊度，大于0有效
	 * @property {string} [shadowColor='#000000'] 阴影颜色
	 * @property {number} [shadowOffsetX=0] 阴影横向偏移
	 * @property {number} [shadowOffsetY=0] 阴影纵向偏移
	 * @property {string} [text] 图形中的附加文本
	 * @property {string} [textColor='#000000'] 文本颜色
	 * @property {string} [textFont] 附加文本样式，eg:'bold 18px verdana'
	 * @property {string} [textPosition='end'] 附加文本位置, 可以是 inside, left, right, top, bottom
	 * @property {string} [textAlign] 默认根据textPosition自动设置，附加文本水平对齐。
	 *                                可以是start, end, left, right, center
	 * @property {string} [textBaseline] 默认根据textPosition自动设置，附加文本垂直对齐。
	 *                                可以是top, bottom, middle, alphabetic, hanging, ideographic
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	        'use strict';

	        var Base = __webpack_require__(473);
	        var PathProxy = __webpack_require__(490);
	        var area = __webpack_require__(471);

	        /**
	         * @alias module:zrender/shape/Droplet
	         * @constructor
	         * @extends module:zrender/shape/Base
	         * @param {Object} options
	         */
	        var Droplet = function(options) {
	            Base.call(this, options);
	            this._pathProxy = new PathProxy();
	            /**
	             * 水滴绘制样式
	             * @name module:zrender/shape/Droplet#style
	             * @type {module:zrender/shape/Droplet~IDropletStyle}
	             */
	            /**
	             * 水滴高亮绘制样式
	             * @name module:zrender/shape/Droplet#highlightStyle
	             * @type {module:zrender/shape/Droplet~IDropletStyle}
	             */
	        };

	        Droplet.prototype = {
	            type: 'droplet',

	            /**
	             * 创建水滴路径
	             * @param {CanvasRenderingContext2D} ctx
	             * @param {module:zrender/shape/Droplet~IDropletStyle} style
	             */
	            buildPath : function(ctx, style) {
	                var path = this._pathProxy || new PathProxy();
	                path.begin(ctx);

	                path.moveTo(style.x, style.y + style.a);
	                path.bezierCurveTo(
	                    style.x + style.a,
	                    style.y + style.a,
	                    style.x + style.a * 3 / 2,
	                    style.y - style.a / 3,
	                    style.x,
	                    style.y - style.b
	                );
	                path.bezierCurveTo(
	                    style.x - style.a * 3 / 2,
	                    style.y - style.a / 3,
	                    style.x - style.a,
	                    style.y + style.a,
	                    style.x,
	                    style.y + style.a
	                );
	                path.closePath();
	            },

	            /**
	             * 计算返回水滴的包围盒矩形
	             * @param {module:zrender/shape/Droplet~IDropletStyle} style
	             * @return {module:zrender/shape/Base~IBoundingRect}
	             */
	            getRect : function (style) {
	                if (style.__rect) {
	                    return style.__rect;
	                }
	                if (!this._pathProxy.isEmpty()) {
	                    this.buildPath(null, style);
	                }
	                return this._pathProxy.fastBoundingRect();
	            },

	            isCover: function (x, y) {
	                var originPos = this.transformCoordToLocal(x, y);
	                x = originPos[0];
	                y = originPos[1];
	                
	                if (this.isCoverRect(x, y)) {
	                    return area.isInsidePath(
	                        this._pathProxy.pathCommands, this.style.lineWidth, this.style.brushType, x, y
	                    );
	                }
	            }
	        };

	        __webpack_require__(456).inherits(Droplet, Base);
	        return Droplet;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 492 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * zrender
	 *
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *         Yi Shen(https://github.com/pissang)
	 *
	 * shape类：标线
	 */

	/**
	 * @typedef {Object} IMarkLineStyle
	 * @property {number} xStart 起点x坐标
	 * @property {number} yStart 起点y坐标
	 * @property {number} xEnd 终止点x坐标
	 * @property {number} yEnd 终止点y坐标
	 * @property {number} cpX1 控制点x坐标，可以使用updatePoints自动根据curveness计算
	 * @property {number} cpY1 控制点y坐标，可以使用updatePoints自动根据curveness计算
	 * @property {number} curveness 曲度
	 * @property {Array.<string>} symbol
	 * @property {Array.<number>} symbolRotate
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	    var Base = __webpack_require__(473);
	    var IconShape = __webpack_require__(486);
	    var LineShape = __webpack_require__(493);
	    var lineInstance = new LineShape({});
	    var CurveShape = __webpack_require__(495);
	    var curveInstance = new CurveShape({});

	    var area = __webpack_require__(471);
	    var dashedLineTo = __webpack_require__(494);
	    var zrUtil = __webpack_require__(456);
	    var curveTool = __webpack_require__(472);

	    function MarkLine(options) {
	        Base.call(this, options);

	        if (this.style.curveness > 0) {
	            this.updatePoints(this.style);
	        }
	        if (this.highlightStyle.curveness > 0) {
	            this.updatePoints(this.highlightStyle);
	        }
	    }

	    MarkLine.prototype =  {
	        type : 'mark-line',
	        /**
	         * 画刷
	         * @param ctx 画布句柄
	         * @param isHighlight   是否为高亮状态
	         * @param updateCallback 让painter更新视图，base.brush没用，需要的话重载brush
	         */
	        brush : function (ctx, isHighlight) {
	            var style = this.style;

	            if (isHighlight) {
	                // 根据style扩展默认高亮样式
	                style = this.getHighlightStyle(
	                    style,
	                    this.highlightStyle || {}
	                );
	            }

	            ctx.save();
	            this.setContext(ctx, style);

	            // 设置transform
	            this.setTransform(ctx);

	            ctx.save();
	            ctx.beginPath();
	            this.buildPath(ctx, style);
	            ctx.stroke();
	            ctx.restore();

	            this.brushSymbol(ctx, style, 0);
	            this.brushSymbol(ctx, style, 1);

	            this.drawText(ctx, style, this.style);

	            ctx.restore();
	        },

	        /**
	         * 创建线条路径
	         * @param {Context2D} ctx Canvas 2D上下文
	         * @param {Object} style 样式
	         */
	        buildPath : function (ctx, style) {
	            var lineType = style.lineType || 'solid';

	            ctx.moveTo(style.xStart, style.yStart);
	            if (style.curveness > 0) {
	                // FIXME Bezier 在少部分浏览器上暂时不支持虚线
	                var lineDash = null;
	                switch (lineType) {
	                    case 'dashed':
	                        lineDash = [5, 5];
	                        break;
	                    case'dotted':
	                        lineDash = [1, 1];
	                        break;
	                }
	                if (lineDash && ctx.setLineDash) {
	                    ctx.setLineDash(lineDash);
	                }
	                
	                ctx.quadraticCurveTo(
	                    style.cpX1, style.cpY1, style.xEnd, style.yEnd
	                );
	            }
	            else {
	                if (lineType == 'solid') {
	                    ctx.lineTo(style.xEnd, style.yEnd);
	                }
	                else {
	                    var dashLength = (style.lineWidth || 1) 
	                        * (style.lineType == 'dashed' ? 5 : 1);
	                    dashedLineTo(
	                        ctx, style.xStart, style.yStart,
	                        style.xEnd, style.yEnd, dashLength
	                    );
	                }
	            }
	        },

	        /**
	         * Update cpX1 and cpY1 according to curveniss
	         * @param  {Object} style
	         */
	        updatePoints: function (style) {
	            var curveness = style.curveness || 0;
	            var inv = 1;

	            var x0 = style.xStart;
	            var y0 = style.yStart;
	            var x2 = style.xEnd;
	            var y2 = style.yEnd;
	            var x1 = (x0 + x2) / 2 - inv * (y0 - y2) * curveness;
	            var y1 =(y0 + y2) / 2 - inv * (x2 - x0) * curveness;

	            style.cpX1 = x1;
	            style.cpY1 = y1;
	        },

	        /**
	         * 标线始末标注
	         */
	        brushSymbol : function (ctx, style, idx) {
	            if (style.symbol[idx] == 'none') {
	                return;
	            }
	            ctx.save();
	            ctx.beginPath();

	            ctx.lineWidth = style.symbolBorder;
	            ctx.strokeStyle = style.symbolBorderColor;
	            // symbol
	            var symbol = style.symbol[idx].replace('empty', '')
	                                              .toLowerCase();
	            if (style.symbol[idx].match('empty')) {
	                ctx.fillStyle = '#fff'; //'rgba(0, 0, 0, 0)';
	            }

	            // symbolRotate
	            var x0 = style.xStart;
	            var y0 = style.yStart;
	            var x2 = style.xEnd;
	            var y2 = style.yEnd;
	            var x = idx === 0 ? x0 : x2;
	            var y = idx === 0 ? y0 : y2;
	            var curveness = style.curveness || 0;
	            var rotate = style.symbolRotate[idx] != null ? (style.symbolRotate[idx] - 0) : 0;
	            rotate = rotate / 180 * Math.PI;

	            if (symbol == 'arrow' && rotate === 0) {
	                if (curveness === 0) {
	                    var sign = idx === 0 ? -1 : 1; 
	                    rotate = Math.PI / 2 + Math.atan2(
	                        sign * (y2 - y0), sign * (x2 - x0)
	                    );
	                }
	                else {
	                    var x1 = style.cpX1;
	                    var y1 = style.cpY1;

	                    var quadraticDerivativeAt = curveTool.quadraticDerivativeAt;
	                    var dx = quadraticDerivativeAt(x0, x1, x2, idx);
	                    var dy = quadraticDerivativeAt(y0, y1, y2, idx);

	                    rotate = Math.PI / 2 + Math.atan2(dy, dx);
	                }
	            }
	            
	            ctx.translate(x, y);

	            if (rotate !== 0) {
	                ctx.rotate(rotate);
	            }

	            // symbolSize
	            var symbolSize = style.symbolSize[idx];
	            IconShape.prototype.buildPath(ctx, {
	                x: -symbolSize,
	                y: -symbolSize,
	                width: symbolSize * 2,
	                height: symbolSize * 2,
	                iconType: symbol
	            });

	            ctx.closePath();
	            ctx.fill();
	            ctx.stroke();
	            ctx.restore();
	        },

	        /**
	         * 返回矩形区域，用于局部刷新和文字定位
	         * @param {Object} style
	         */
	        getRect : function (style) {
	            style.curveness > 0 ? curveInstance.getRect(style)
	                : lineInstance.getRect(style);
	            return style.__rect;
	        },

	        isCover : function (x, y) {
	            var originPos = this.transformCoordToLocal(x, y);
	            x = originPos[0];
	            y = originPos[1];

	            // 快速预判并保留判断矩形
	            if (this.isCoverRect(x, y)) {
	                // 矩形内
	                return this.style.curveness > 0
	                       ? area.isInside(curveInstance, this.style, x, y)
	                       : area.isInside(lineInstance, this.style, x, y);
	            }

	            return false;
	        }
	    };

	    zrUtil.inherits(MarkLine, Base);

	    return MarkLine;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 493 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * 直线
	 * @module zrender/shape/Line
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 * @example
	 *   var Line = require('zrender/shape/Line');
	 *   var shape = new Line({
	 *       style: {
	 *           xStart: 0,
	 *           yStart: 0,
	 *           xEnd: 100,
	 *           yEnd: 100,
	 *           strokeColor: '#000',
	 *           lineWidth: 10
	 *       }
	 *   });
	 *   zr.addShape(line);
	 */
	/**
	 * @typedef {Object} ILineStyle
	 * @property {number} xStart 起点x坐标
	 * @property {number} yStart 起点y坐标
	 * @property {number} xEnd 终止点x坐标
	 * @property {number} yEnd 终止点y坐标
	 * @property {string} [strokeColor='#000000'] 描边颜色
	 * @property {string} [lineCape='butt'] 线帽样式，可以是 butt, round, square
	 * @property {number} [lineWidth=1] 描边宽度
	 * @property {number} [opacity=1] 绘制透明度
	 * @property {number} [shadowBlur=0] 阴影模糊度，大于0有效
	 * @property {string} [shadowColor='#000000'] 阴影颜色
	 * @property {number} [shadowOffsetX=0] 阴影横向偏移
	 * @property {number} [shadowOffsetY=0] 阴影纵向偏移
	 * @property {string} [text] 图形中的附加文本
	 * @property {string} [textColor='#000000'] 文本颜色
	 * @property {string} [textFont] 附加文本样式，eg:'bold 18px verdana'
	 * @property {string} [textPosition='end'] 附加文本位置, 可以是 inside, left, right, top, bottom
	 * @property {string} [textAlign] 默认根据textPosition自动设置，附加文本水平对齐。
	 *                                可以是start, end, left, right, center
	 * @property {string} [textBaseline] 默认根据textPosition自动设置，附加文本垂直对齐。
	 *                                可以是top, bottom, middle, alphabetic, hanging, ideographic
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	        var Base = __webpack_require__(473);
	        var dashedLineTo = __webpack_require__(494);
	        
	        /**
	         * @alias module:zrender/shape/Line
	         * @param {Object} options
	         * @constructor
	         * @extends module:zrender/shape/Base
	         */
	        var Line = function (options) {
	            this.brushTypeOnly = 'stroke';  // 线条只能描边，填充后果自负
	            this.textPosition = 'end';
	            Base.call(this, options);

	            /**
	             * 直线绘制样式
	             * @name module:zrender/shape/Line#style
	             * @type {module:zrender/shape/Line~ILineStyle}
	             */
	            /**
	             * 直线高亮绘制样式
	             * @name module:zrender/shape/Line#highlightStyle
	             * @type {module:zrender/shape/Line~ILineStyle}
	             */
	        };

	        Line.prototype =  {
	            type: 'line',

	            /**
	             * 创建线条路径
	             * @param {CanvasRenderingContext2D} ctx
	             * @param {module:zrender/shape/Line~ILineStyle} style
	             */
	            buildPath : function (ctx, style) {
	                if (!style.lineType || style.lineType == 'solid') {
	                    // 默认为实线
	                    ctx.moveTo(style.xStart, style.yStart);
	                    ctx.lineTo(style.xEnd, style.yEnd);
	                }
	                else if (style.lineType == 'dashed'
	                        || style.lineType == 'dotted'
	                ) {
	                    var dashLength = (style.lineWidth || 1)  
	                                     * (style.lineType == 'dashed' ? 5 : 1);
	                    dashedLineTo(
	                        ctx,
	                        style.xStart, style.yStart,
	                        style.xEnd, style.yEnd,
	                        dashLength
	                    );
	                }
	            },

	            /**
	             * 计算返回线条的包围盒矩形
	             * @param {module:zrender/shape/Line~ILineStyle} style
	             * @return {module:zrender/shape/Base~IBoundingRect}
	             */
	            getRect : function (style) {
	                if (style.__rect) {
	                    return style.__rect;
	                }
	                
	                var lineWidth = style.lineWidth || 1;
	                style.__rect = {
	                    x : Math.min(style.xStart, style.xEnd) - lineWidth,
	                    y : Math.min(style.yStart, style.yEnd) - lineWidth,
	                    width : Math.abs(style.xStart - style.xEnd)
	                            + lineWidth,
	                    height : Math.abs(style.yStart - style.yEnd)
	                             + lineWidth
	                };
	                
	                return style.__rect;
	            }
	        };

	        __webpack_require__(456).inherits(Line, Base);
	        return Line;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 494 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * 虚线lineTo 
	 *
	 * author:  Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *          errorrik (errorrik@gmail.com)
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (/* require */) {

	        var dashPattern = [ 5, 5 ];
	        /**
	         * 虚线lineTo 
	         */
	        return function (ctx, x1, y1, x2, y2, dashLength) {
	            // http://msdn.microsoft.com/en-us/library/ie/dn265063(v=vs.85).aspx
	            if (ctx.setLineDash) {
	                dashPattern[0] = dashPattern[1] = dashLength;
	                ctx.setLineDash(dashPattern);
	                ctx.moveTo(x1, y1);
	                ctx.lineTo(x2, y2);
	                return;
	            }

	            dashLength = typeof dashLength != 'number'
	                            ? 5 
	                            : dashLength;

	            var dx = x2 - x1;
	            var dy = y2 - y1;
	            var numDashes = Math.floor(
	                Math.sqrt(dx * dx + dy * dy) / dashLength
	            );
	            dx = dx / numDashes;
	            dy = dy / numDashes;
	            var flag = true;
	            for (var i = 0; i < numDashes; ++i) {
	                if (flag) {
	                    ctx.moveTo(x1, y1);
	                }
	                else {
	                    ctx.lineTo(x1, y1);
	                }
	                flag = !flag;
	                x1 += dx;
	                y1 += dy;
	            }
	            ctx.lineTo(x2, y2);
	        };
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 495 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * 贝塞尔曲线
	 * @module zrender/shape/BezierCurve
	 * @author Neil (杨骥, 511415343@qq.com)
	 * @example
	 *     var BezierCurve = require('zrender/shape/BezierCurve');
	 *     var shape = new BezierCurve({
	 *         style: {
	 *             xStart: 0,
	 *             yStart: 0,
	 *             cpX1: 100,
	 *             cpY1: 0,
	 *             cpX2: 0,
	 *             cpY2: 100,
	 *             xEnd: 100,
	 *             yEnd: 100,
	 *             strokeColor: 'red'
	 *         }
	 *     });
	 *     zr.addShape(shape);
	 */

	/**
	 * @typedef {Object} IBezierCurveStyle
	 * @property {number} xStart 起点x坐标
	 * @property {number} yStart 起点y坐标
	 * @property {number} cpX1 第一个控制点x坐标
	 * @property {number} cpY1 第一个控制点y坐标
	 * @property {number} [cpX2] 第二个控制点x坐标，如果不给则为二次贝塞尔曲线
	 * @property {number} [cpY2] 第二个控制点y坐标，如果不给则为二次贝塞尔曲线
	 * @property {number} xEnd 终止点x坐标
	 * @property {number} yEnd 终止点y坐标
	 * @property {string} [strokeColor='#000000'] 描边颜色
	 * @property {string} [lineCape='butt'] 线帽样式，可以是 butt, round, square
	 * @property {number} [lineWidth=1] 描边宽度
	 * @property {number} [opacity=1] 绘制透明度
	 * @property {number} [shadowBlur=0] 阴影模糊度，大于0有效
	 * @property {string} [shadowColor='#000000'] 阴影颜色
	 * @property {number} [shadowOffsetX=0] 阴影横向偏移
	 * @property {number} [shadowOffsetY=0] 阴影纵向偏移
	 * @property {string} [text] 图形中的附加文本
	 * @property {string} [textColor='#000000'] 文本颜色
	 * @property {string} [textFont] 附加文本样式，eg:'bold 18px verdana'
	 * @property {string} [textPosition='end'] 附加文本位置, 可以是 inside, left, right, top, bottom
	 * @property {string} [textAlign] 默认根据textPosition自动设置，附加文本水平对齐。
	 *                                可以是start, end, left, right, center
	 * @property {string} [textBaseline] 默认根据textPosition自动设置，附加文本垂直对齐。
	 *                                可以是top, bottom, middle, alphabetic, hanging, ideographic
	 */

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	        'use strict';

	        var Base = __webpack_require__(473);
	        
	        /**
	         * @alias module:zrender/shape/BezierCurve
	         * @constructor
	         * @extends module:zrender/shape/Base
	         * @param {Object} options
	         */
	        var BezierCurve = function(options) {
	            this.brushTypeOnly = 'stroke';  // 线条只能描边，填充后果自负
	            this.textPosition = 'end';
	            Base.call(this, options);
	            /**
	             * 贝赛尔曲线绘制样式
	             * @name module:zrender/shape/BezierCurve#style
	             * @type {module:zrender/shape/BezierCurve~IBezierCurveStyle}
	             */
	            /**
	             * 贝赛尔曲线高亮绘制样式
	             * @name module:zrender/shape/BezierCurve#highlightStyle
	             * @type {module:zrender/shape/BezierCurve~IBezierCurveStyle}
	             */
	        };

	        BezierCurve.prototype = {
	            type: 'bezier-curve',

	            /**
	             * 创建贝塞尔曲线路径
	             * @param {CanvasRenderingContext2D} ctx
	             * @param {module:zrender/shape/BezierCurve~IBezierCurveStyle} style
	             */
	            buildPath : function(ctx, style) {
	                ctx.moveTo(style.xStart, style.yStart);
	                if (typeof style.cpX2 != 'undefined'
	                    && typeof style.cpY2 != 'undefined'
	                ) {
	                    ctx.bezierCurveTo(
	                        style.cpX1, style.cpY1,
	                        style.cpX2, style.cpY2,
	                        style.xEnd, style.yEnd
	                    );
	                }
	                else {
	                    ctx.quadraticCurveTo(
	                        style.cpX1, style.cpY1,
	                        style.xEnd, style.yEnd
	                    );
	                }
	            },

	            /**
	             * 计算返回贝赛尔曲线包围盒矩形。
	             * 该包围盒是直接从四个控制点计算，并非最小包围盒。
	             * @param {module:zrender/shape/BezierCurve~IBezierCurveStyle} style
	             * @return {module:zrender/shape/Base~IBoundingRect}
	             */
	            getRect : function(style) {
	                if (style.__rect) {
	                    return style.__rect;
	                }
	                
	                var _minX = Math.min(style.xStart, style.xEnd, style.cpX1);
	                var _minY = Math.min(style.yStart, style.yEnd, style.cpY1);
	                var _maxX = Math.max(style.xStart, style.xEnd, style.cpX1);
	                var _maxY = Math.max(style.yStart, style.yEnd, style.cpY1);
	                var _x2 = style.cpX2;
	                var _y2 = style.cpY2;

	                if (typeof _x2 != 'undefined'
	                    && typeof _y2 != 'undefined'
	                ) {
	                    _minX = Math.min(_minX, _x2);
	                    _minY = Math.min(_minY, _y2);
	                    _maxX = Math.max(_maxX, _x2);
	                    _maxY = Math.max(_maxY, _y2);
	                }

	                var lineWidth = style.lineWidth || 1;
	                style.__rect = {
	                    x : _minX - lineWidth,
	                    y : _minY - lineWidth,
	                    width : _maxX - _minX + lineWidth,
	                    height : _maxY - _minY + lineWidth
	                };
	                
	                return style.__rect;
	            }
	        };

	        __webpack_require__(456).inherits(BezierCurve, Base);
	        return BezierCurve;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 496 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * zrender
	 *
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 * shape类：大规模散点图图形
	 * 可配图形属性：
	   {
	       // 基础属性
	       shape  : 'symbol',       // 必须，shape类标识，需要显式指定
	       id     : {string},       // 必须，图形唯一标识，可通过'zrender/tool/guid'方法生成
	       zlevel : {number},       // 默认为0，z层level，决定绘画在哪层canvas中
	       invisible : {boolean},   // 默认为false，是否可见

	       // 样式属性，默认状态样式样式属性
	       style  : {
	           pointList     : {Array},   // 必须，二维数组，二维内容如下
	               x         : {number},  // 必须，横坐标
	               y         : {number},  // 必须，纵坐标数组
	               size      : {number},  // 必须，半宽
	               type      : {string=}, // 默认为'circle',图形类型
	       },

	       // 样式属性，高亮样式属性，当不存在highlightStyle时使用基于默认样式扩展显示
	       highlightStyle : {
	           // 同style
	       }

	       // 交互属性，详见shape.Base

	       // 事件属性，详见shape.Base
	   }
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	    var Base = __webpack_require__(473);
	    var PolygonShape = __webpack_require__(497);
	    var polygonInstance = new PolygonShape({});
	    var zrUtil = __webpack_require__(456);

	    function Symbol(options) {
	        Base.call(this, options);
	    }

	    Symbol.prototype =  {
	        type : 'symbol',
	        /**
	         * 创建矩形路径
	         * @param {Context2D} ctx Canvas 2D上下文
	         * @param {Object} style 样式
	         */
	        buildPath : function (ctx, style) {
	            var pointList = style.pointList;
	            var len = pointList.length;
	            if (len === 0) {
	                return;
	            }

	            var subSize = 10000;
	            var subSetLength = Math.ceil(len / subSize);
	            var sub;
	            var subLen;
	            var isArray = pointList[0] instanceof Array;
	            var size = style.size ? style.size : 2;
	            var curSize = size;
	            var halfSize = size / 2;
	            var PI2 = Math.PI * 2;
	            var percent;
	            var x;
	            var y;
	            for (var j = 0; j < subSetLength; j++) {
	                ctx.beginPath();
	                sub = j * subSize;
	                subLen = sub + subSize;
	                subLen = subLen > len ? len : subLen;
	                for (var i = sub; i < subLen; i++) {
	                    if (style.random) {
	                        percent = style['randomMap' + (i % 20)] / 100;
	                        curSize = size * percent * percent;
	                        halfSize = curSize / 2;
	                    }
	                    if (isArray) {
	                        x = pointList[i][0];
	                        y = pointList[i][1];
	                    }
	                    else {
	                        x = pointList[i].x;
	                        y = pointList[i].y;
	                    }
	                    if (curSize < 3) {
	                        // 小于3像素视觉误差
	                        ctx.rect(x - halfSize, y - halfSize, curSize, curSize);
	                    }
	                    else {
	                        // 大于3像素才考虑图形
	                        switch (style.iconType) {
	                            case 'circle' :
	                                ctx.moveTo(x, y);
	                                ctx.arc(x, y, halfSize, 0, PI2, true);
	                                break;
	                            case 'diamond' :
	                                ctx.moveTo(x, y - halfSize);
	                                ctx.lineTo(x + halfSize / 3, y - halfSize / 3);
	                                ctx.lineTo(x + halfSize, y);
	                                ctx.lineTo(x + halfSize / 3, y + halfSize / 3);
	                                ctx.lineTo(x, y + halfSize);
	                                ctx.lineTo(x - halfSize / 3, y + halfSize / 3);
	                                ctx.lineTo(x - halfSize, y);
	                                ctx.lineTo(x - halfSize / 3, y - halfSize / 3);
	                                ctx.lineTo(x, y - halfSize);
	                                break;
	                            default :
	                                ctx.rect(x - halfSize, y - halfSize, curSize, curSize);
	                        }
	                    }
	                }
	                ctx.closePath();
	                if (j < (subSetLength - 1)) {
	                    switch (style.brushType) {
	                        case 'both':
	                            ctx.fill();
	                            style.lineWidth > 0 && ctx.stroke();  // js hint -_-"
	                            break;
	                        case 'stroke':
	                            style.lineWidth > 0 && ctx.stroke();
	                            break;
	                        default:
	                            ctx.fill();
	                    }
	                }
	            }
	        },

	        /* 像素模式
	        buildPath : function (ctx, style) {
	            var pointList = style.pointList;
	            var rect = this.getRect(style);
	            var ratio = window.devicePixelRatio || 1;
	            // console.log(rect)
	            // var ti = new Date();
	            // bbox取整
	            rect = {
	                x : Math.floor(rect.x),
	                y : Math.floor(rect.y),
	                width : Math.floor(rect.width),
	                height : Math.floor(rect.height)
	            };
	            var pixels = ctx.getImageData(
	                rect.x * ratio, rect.y * ratio,
	                rect.width * ratio, rect.height * ratio
	            );
	            var data = pixels.data;
	            var idx;
	            var zrColor = require('zrender/tool/color');
	            var color = zrColor.toArray(style.color);
	            var r = color[0];
	            var g = color[1];
	            var b = color[2];
	            var width = rect.width;

	            for (var i = 1, l = pointList.length; i < l; i++) {
	                idx = ((Math.floor(pointList[i][0]) - rect.x) * ratio
	                       + (Math.floor(pointList[i][1])- rect.y) * width * ratio * ratio
	                      ) * 4;
	                data[idx] = r;
	                data[idx + 1] = g;
	                data[idx + 2] = b;
	                data[idx + 3] = 255;
	            }
	            ctx.putImageData(pixels, rect.x * ratio, rect.y * ratio);
	            // console.log(new Date() - ti);
	            return;
	        },
	        */

	        /**
	         * 返回矩形区域，用于局部刷新和文字定位
	         * @param {Object} style
	         */
	        getRect : function (style) {
	            return style.__rect || polygonInstance.getRect(style);
	        },

	        isCover : __webpack_require__(500)
	    };

	    zrUtil.inherits(Symbol, Base);

	    return Symbol;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 497 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * 多边形
	 * @module zrender/shape/Polygon
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 * @example
	 *     var Polygon = require('zrender/shape/Polygon');
	 *     var shape = new Polygon({
	 *         style: {
	 *             // 100x100的正方形
	 *             pointList: [[0, 0], [100, 0], [100, 100], [0, 100]],
	 *             color: 'blue'
	 *         }
	 *     });
	 *     zr.addShape(shape);
	 */

	/**
	 * @typedef {Object} IPolygonStyle
	 * @property {string} pointList 多边形顶点数组
	 * @property {string} [smooth=''] 是否做平滑插值, 平滑算法可以选择 bezier, spline
	 * @property {number} [smoothConstraint] 平滑约束
	 * @property {string} [brushType='fill']
	 * @property {string} [color='#000000'] 填充颜色
	 * @property {string} [strokeColor='#000000'] 描边颜色
	 * @property {string} [lineCape='butt'] 线帽样式，可以是 butt, round, square
	 * @property {number} [lineWidth=1] 描边宽度
	 * @property {number} [opacity=1] 绘制透明度
	 * @property {number} [shadowBlur=0] 阴影模糊度，大于0有效
	 * @property {string} [shadowColor='#000000'] 阴影颜色
	 * @property {number} [shadowOffsetX=0] 阴影横向偏移
	 * @property {number} [shadowOffsetY=0] 阴影纵向偏移
	 * @property {string} [text] 图形中的附加文本
	 * @property {string} [textColor='#000000'] 文本颜色
	 * @property {string} [textFont] 附加文本样式，eg:'bold 18px verdana'
	 * @property {string} [textPosition='end'] 附加文本位置, 可以是 inside, left, right, top, bottom
	 * @property {string} [textAlign] 默认根据textPosition自动设置，附加文本水平对齐。
	 *                                可以是start, end, left, right, center
	 * @property {string} [textBaseline] 默认根据textPosition自动设置，附加文本垂直对齐。
	 *                                可以是top, bottom, middle, alphabetic, hanging, ideographic
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	        var Base = __webpack_require__(473);
	        var smoothSpline = __webpack_require__(498);
	        var smoothBezier = __webpack_require__(499);
	        var dashedLineTo = __webpack_require__(494);

	        /**
	         * @alias module:zrender/shape/Polygon
	         * @param {Object} options
	         * @constructor
	         * @extends module:zrender/shape/Base
	         */
	        var Polygon = function (options) {
	            Base.call(this, options);
	            /**
	             * 多边形绘制样式
	             * @name module:zrender/shape/Polygon#style
	             * @type {module:zrender/shape/Polygon~IPolygonStyle}
	             */
	            /**
	             * 多边形高亮绘制样式
	             * @name module:zrender/shape/Polygon#highlightStyle
	             * @type {module:zrender/shape/Polygon~IPolygonStyle}
	             */
	        };

	        Polygon.prototype = {
	            type: 'polygon',

	            /**
	             * 创建多边形路径
	             * @param {CanvasRenderingContext2D} ctx
	             * @param {module:zrender/shape/Polygon~IPolygonStyle} style
	             */
	            buildPath : function (ctx, style) {
	                // 虽然能重用brokenLine，但底层图形基于性能考虑，重复代码减少调用吧
	                var pointList = style.pointList;
	                // 开始点和结束点重复
	                /*
	                var start = pointList[0];
	                var end = pointList[pointList.length-1];

	                if (start && end) {
	                    if (start[0] == end[0] &&
	                        start[1] == end[1]) {
	                        // 移除最后一个点
	                        pointList.pop();
	                    }
	                }
	                */

	                if (pointList.length < 2) {
	                    // 少于2个点就不画了~
	                    return;
	                }

	                if (style.smooth && style.smooth !== 'spline') {
	                    var controlPoints = smoothBezier(
	                        pointList, style.smooth, true, style.smoothConstraint
	                    );

	                    ctx.moveTo(pointList[0][0], pointList[0][1]);
	                    var cp1;
	                    var cp2;
	                    var p;
	                    var len = pointList.length;
	                    for (var i = 0; i < len; i++) {
	                        cp1 = controlPoints[i * 2];
	                        cp2 = controlPoints[i * 2 + 1];
	                        p = pointList[(i + 1) % len];
	                        ctx.bezierCurveTo(
	                            cp1[0], cp1[1], cp2[0], cp2[1], p[0], p[1]
	                        );
	                    }
	                } 
	                else {
	                    if (style.smooth === 'spline') {
	                        pointList = smoothSpline(pointList, true);
	                    }

	                    if (!style.lineType || style.lineType == 'solid') {
	                        // 默认为实线
	                        ctx.moveTo(pointList[0][0], pointList[0][1]);
	                        for (var i = 1, l = pointList.length; i < l; i++) {
	                            ctx.lineTo(pointList[i][0], pointList[i][1]);
	                        }
	                        ctx.lineTo(pointList[0][0], pointList[0][1]);
	                    }
	                    else if (style.lineType == 'dashed'
	                            || style.lineType == 'dotted'
	                    ) {
	                        var dashLength = 
	                            style._dashLength
	                            || (style.lineWidth || 1) 
	                               * (style.lineType == 'dashed' ? 5 : 1);
	                        style._dashLength = dashLength;
	                        ctx.moveTo(pointList[0][0], pointList[0][1]);
	                        for (var i = 1, l = pointList.length; i < l; i++) {
	                            dashedLineTo(
	                                ctx,
	                                pointList[i - 1][0], pointList[i - 1][1],
	                                pointList[i][0], pointList[i][1],
	                                dashLength
	                            );
	                        }
	                        dashedLineTo(
	                            ctx,
	                            pointList[pointList.length - 1][0], 
	                            pointList[pointList.length - 1][1],
	                            pointList[0][0],
	                            pointList[0][1],
	                            dashLength
	                        );
	                    }
	                }

	                ctx.closePath();
	                return;
	            },

	            /**
	             * 计算返回多边形包围盒矩阵
	             * @param {module:zrender/shape/Polygon~IPolygonStyle} style
	             * @return {module:zrender/shape/Base~IBoundingRect}
	             */
	            getRect : function (style) {
	                if (style.__rect) {
	                    return style.__rect;
	                }
	                
	                var minX =  Number.MAX_VALUE;
	                var maxX =  Number.MIN_VALUE;
	                var minY = Number.MAX_VALUE;
	                var maxY = Number.MIN_VALUE;

	                var pointList = style.pointList;
	                for (var i = 0, l = pointList.length; i < l; i++) {
	                    if (pointList[i][0] < minX) {
	                        minX = pointList[i][0];
	                    }
	                    if (pointList[i][0] > maxX) {
	                        maxX = pointList[i][0];
	                    }
	                    if (pointList[i][1] < minY) {
	                        minY = pointList[i][1];
	                    }
	                    if (pointList[i][1] > maxY) {
	                        maxY = pointList[i][1];
	                    }
	                }

	                var lineWidth;
	                if (style.brushType == 'stroke' || style.brushType == 'fill') {
	                    lineWidth = style.lineWidth || 1;
	                }
	                else {
	                    lineWidth = 0;
	                }
	                
	                style.__rect = {
	                    x : Math.round(minX - lineWidth / 2),
	                    y : Math.round(minY - lineWidth / 2),
	                    width : maxX - minX + lineWidth,
	                    height : maxY - minY + lineWidth
	                };
	                return style.__rect;
	            }
	        };

	        __webpack_require__(456).inherits(Polygon, Base);
	        return Polygon;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));



/***/ },
/* 498 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * Catmull-Rom spline 插值折线
	 * @module zrender/shape/util/smoothSpline
	 * @author pissang (https://www.github.com/pissang) 
	 *         Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *         errorrik (errorrik@gmail.com)
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	        var vector = __webpack_require__(466);

	        /**
	         * @inner
	         */
	        function interpolate(p0, p1, p2, p3, t, t2, t3) {
	            var v0 = (p2 - p0) * 0.5;
	            var v1 = (p3 - p1) * 0.5;
	            return (2 * (p1 - p2) + v0 + v1) * t3 
	                    + (-3 * (p1 - p2) - 2 * v0 - v1) * t2
	                    + v0 * t + p1;
	        }

	        /**
	         * @alias module:zrender/shape/util/smoothSpline
	         * @param {Array} points 线段顶点数组
	         * @param {boolean} isLoop
	         * @param {Array} constraint 
	         * @return {Array}
	         */
	        return function (points, isLoop, constraint) {
	            var len = points.length;
	            var ret = [];

	            var distance = 0;
	            for (var i = 1; i < len; i++) {
	                distance += vector.distance(points[i - 1], points[i]);
	            }
	            
	            var segs = distance / 5;
	            segs = segs < len ? len : segs;
	            for (var i = 0; i < segs; i++) {
	                var pos = i / (segs - 1) * (isLoop ? len : len - 1);
	                var idx = Math.floor(pos);

	                var w = pos - idx;

	                var p0;
	                var p1 = points[idx % len];
	                var p2;
	                var p3;
	                if (!isLoop) {
	                    p0 = points[idx === 0 ? idx : idx - 1];
	                    p2 = points[idx > len - 2 ? len - 1 : idx + 1];
	                    p3 = points[idx > len - 3 ? len - 1 : idx + 2];
	                }
	                else {
	                    p0 = points[(idx - 1 + len) % len];
	                    p2 = points[(idx + 1) % len];
	                    p3 = points[(idx + 2) % len];
	                }

	                var w2 = w * w;
	                var w3 = w * w2;

	                ret.push([
	                    interpolate(p0[0], p1[0], p2[0], p3[0], w, w2, w3),
	                    interpolate(p0[1], p1[1], p2[1], p3[1], w, w2, w3)
	                ]);
	            }
	            return ret;
	        };
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 499 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * 贝塞尔平滑曲线 
	 * @module zrender/shape/util/smoothBezier
	 * @author pissang (https://www.github.com/pissang) 
	 *         Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *         errorrik (errorrik@gmail.com)
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	        var vector = __webpack_require__(466);

	        /**
	         * 贝塞尔平滑曲线
	         * @alias module:zrender/shape/util/smoothBezier
	         * @param {Array} points 线段顶点数组
	         * @param {number} smooth 平滑等级, 0-1
	         * @param {boolean} isLoop
	         * @param {Array} constraint 将计算出来的控制点约束在一个包围盒内
	         *                           比如 [[0, 0], [100, 100]], 这个包围盒会与
	         *                           整个折线的包围盒做一个并集用来约束控制点。
	         * @param {Array} 计算出来的控制点数组
	         */
	        return function (points, smooth, isLoop, constraint) {
	            var cps = [];

	            var v = [];
	            var v1 = [];
	            var v2 = [];
	            var prevPoint;
	            var nextPoint;

	            var hasConstraint = !!constraint;
	            var min, max;
	            if (hasConstraint) {
	                min = [Infinity, Infinity];
	                max = [-Infinity, -Infinity];
	                for (var i = 0, len = points.length; i < len; i++) {
	                    vector.min(min, min, points[i]);
	                    vector.max(max, max, points[i]);
	                }
	                // 与指定的包围盒做并集
	                vector.min(min, min, constraint[0]);
	                vector.max(max, max, constraint[1]);
	            }

	            for (var i = 0, len = points.length; i < len; i++) {
	                var point = points[i];
	                var prevPoint;
	                var nextPoint;

	                if (isLoop) {
	                    prevPoint = points[i ? i - 1 : len - 1];
	                    nextPoint = points[(i + 1) % len];
	                } 
	                else {
	                    if (i === 0 || i === len - 1) {
	                        cps.push(vector.clone(points[i]));
	                        continue;
	                    } 
	                    else {
	                        prevPoint = points[i - 1];
	                        nextPoint = points[i + 1];
	                    }
	                }

	                vector.sub(v, nextPoint, prevPoint);

	                // use degree to scale the handle length
	                vector.scale(v, v, smooth);

	                var d0 = vector.distance(point, prevPoint);
	                var d1 = vector.distance(point, nextPoint);
	                var sum = d0 + d1;
	                if (sum !== 0) {
	                    d0 /= sum;
	                    d1 /= sum;
	                }

	                vector.scale(v1, v, -d0);
	                vector.scale(v2, v, d1);
	                var cp0 = vector.add([], point, v1);
	                var cp1 = vector.add([], point, v2);
	                if (hasConstraint) {
	                    vector.max(cp0, cp0, min);
	                    vector.min(cp0, cp0, max);
	                    vector.max(cp1, cp1, min);
	                    vector.min(cp1, cp1, max);
	                }
	                cps.push(cp0);
	                cps.push(cp1);
	            }
	            
	            if (isLoop) {
	                cps.push(vector.clone(cps.shift()));
	            }

	            return cps;
	        };
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 500 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;// 由于大多数shape默认的isCover都是相同的逻辑
	// 所以在echarts里临时抽象一个module，用于isCover method
	// TODO: 对zrender的isCover和getRect方法进行抽象，重新整理该逻辑

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	    return function (x, y) {
	        var originPos = this.transformCoordToLocal(x, y);
	        x = originPos[0];
	        y = originPos[1];

	        return this.isCoverRect(x, y);
	    };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 501 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * 折线
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 * @module zrender/shape/Polyline
	 * @example
	 *     var Polyline = require('zrender/shape/Polyline');
	 *     var shape = new Polyline({
	 *         style: {
	 *             pointList: [[0, 0], [100, 100], [100, 0]],
	 *             smooth: 'bezier',
	 *             strokeColor: 'purple'
	 *         }
	 *     });
	 *     zr.addShape(shape);
	 */

	/**
	 * @typedef {Object} IPolylineStyle
	 * @property {Array.<number>} pointList 顶点坐标数组
	 * @property {string|number} [smooth=''] 是否做平滑插值, 平滑算法可以选择 bezier, spline
	 * @property {number} [smoothConstraint] 平滑约束
	 * @property {string} [strokeColor='#000000'] 描边颜色
	 * @property {string} [lineCape='butt'] 线帽样式，可以是 butt, round, square
	 * @property {string} [lineJoin='miter'] 线段连接样式，可以是 miter, round, bevel
	 * @property {number} [lineWidth=1] 描边宽度
	 * @property {number} [opacity=1] 绘制透明度
	 * @property {number} [shadowBlur=0] 阴影模糊度，大于0有效
	 * @property {string} [shadowColor='#000000'] 阴影颜色
	 * @property {number} [shadowOffsetX=0] 阴影横向偏移
	 * @property {number} [shadowOffsetY=0] 阴影纵向偏移
	 * @property {string} [text] 图形中的附加文本
	 * @property {string} [textColor='#000000'] 文本颜色
	 * @property {string} [textFont] 附加文本样式，eg:'bold 18px verdana'
	 * @property {string} [textPosition='end'] 附加文本位置, 可以是 inside, left, right, top, bottom
	 * @property {string} [textAlign] 默认根据textPosition自动设置，附加文本水平对齐。
	 *                                可以是start, end, left, right, center
	 * @property {string} [textBaseline] 默认根据textPosition自动设置，附加文本垂直对齐。
	 *                                可以是top, bottom, middle, alphabetic, hanging, ideographic
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	        var Base = __webpack_require__(473);
	        var smoothSpline = __webpack_require__(498);
	        var smoothBezier = __webpack_require__(499);
	        var dashedLineTo = __webpack_require__(494);

	        /**
	         * @alias module:zrender/shape/Polyline
	         * @constructor
	         * @extends module:zrender/shape/Base
	         * @param {Object} options
	         */
	        var Polyline = function(options) {
	            this.brushTypeOnly = 'stroke';  // 线条只能描边，填充后果自负
	            this.textPosition = 'end';
	            Base.call(this, options);
	            /**
	             * 贝赛尔曲线绘制样式
	             * @name module:zrender/shape/Polyline#style
	             * @type {module:zrender/shape/Polyline~IPolylineStyle}
	             */
	            /**
	             * 贝赛尔曲线高亮绘制样式
	             * @name module:zrender/shape/Polyline#highlightStyle
	             * @type {module:zrender/shape/Polyline~IPolylineStyle}
	             */
	        };

	        Polyline.prototype =  {
	            type: 'polyline',

	            /**
	             * 创建多边形路径
	             * @param {CanvasRenderingContext2D} ctx
	             * @param {module:zrender/shape/Polyline~IPolylineStyle} style
	             */
	            buildPath : function(ctx, style) {
	                var pointList = style.pointList;
	                if (pointList.length < 2) {
	                    // 少于2个点就不画了~
	                    return;
	                }
	                
	                var len = Math.min(
	                    style.pointList.length, 
	                    Math.round(style.pointListLength || style.pointList.length)
	                );
	                
	                if (style.smooth && style.smooth !== 'spline') {
	                    if (! style.controlPointList) {
	                        this.updateControlPoints(style);
	                    }
	                    var controlPointList = style.controlPointList;

	                    ctx.moveTo(pointList[0][0], pointList[0][1]);
	                    var cp1;
	                    var cp2;
	                    var p;
	                    for (var i = 0; i < len - 1; i++) {
	                        cp1 = controlPointList[i * 2];
	                        cp2 = controlPointList[i * 2 + 1];
	                        p = pointList[i + 1];
	                        ctx.bezierCurveTo(
	                            cp1[0], cp1[1], cp2[0], cp2[1], p[0], p[1]
	                        );
	                    }
	                }
	                else {
	                    if (style.smooth === 'spline') {
	                        pointList = smoothSpline(pointList);
	                        len = pointList.length;
	                    }
	                    if (!style.lineType || style.lineType == 'solid') {
	                        // 默认为实线
	                        ctx.moveTo(pointList[0][0], pointList[0][1]);
	                        for (var i = 1; i < len; i++) {
	                            ctx.lineTo(pointList[i][0], pointList[i][1]);
	                        }
	                    }
	                    else if (style.lineType == 'dashed'
	                            || style.lineType == 'dotted'
	                    ) {
	                        var dashLength = (style.lineWidth || 1) 
	                                         * (style.lineType == 'dashed' ? 5 : 1);
	                        ctx.moveTo(pointList[0][0], pointList[0][1]);
	                        for (var i = 1; i < len; i++) {
	                            dashedLineTo(
	                                ctx,
	                                pointList[i - 1][0], pointList[i - 1][1],
	                                pointList[i][0], pointList[i][1],
	                                dashLength
	                            );
	                        }
	                    }
	                }
	                return;
	            },

	            updateControlPoints: function (style) {
	                style.controlPointList = smoothBezier(
	                    style.pointList, style.smooth, false, style.smoothConstraint
	                );
	            },

	            /**
	             * 计算返回折线包围盒矩形。
	             * @param {IZRenderBezierCurveStyle} style
	             * @return {module:zrender/shape/Base~IBoundingRect}
	             */
	            getRect : function(style) {
	                return __webpack_require__(497).prototype.getRect(style);
	            }
	        };

	        __webpack_require__(456).inherits(Polyline, Base);
	        return Polyline;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 502 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * ShapeBundle 捆绑多个 shape 的 buildPath 方法，但是共用同一个样式
	 * @author pissang (https://github.com/pissang)
	 * @module zrender/shape/ShapeBundle
	 * @example
	 *     var poly1 = new PolygonShape();
	 *     var poly2 = new PolygonShape();
	 *     var poly3 = new PolygonShape();
	 *     var shapeBundle = new ShapeBundle({
	 *         style: {
	 *             shapeList: [poly1, poly2, poly3],
	 *             color: 'red'
	 *         }
	 *     });
	 *     zr.addShape(shapeBundle);
	 */

	/**
	 * @typedef {Object} IShapeBundleStyle
	 * @property {string} shapeList shape列表
	 * @property {string} [brushType='fill']
	 * @property {string} [color='#000000'] 填充颜色
	 * @property {string} [strokeColor='#000000'] 描边颜色
	 * @property {string} [lineCape='butt'] 线帽样式，可以是 butt, round, square
	 * @property {number} [lineWidth=1] 描边宽度
	 * @property {number} [opacity=1] 绘制透明度
	 * @property {number} [shadowBlur=0] 阴影模糊度，大于0有效
	 * @property {string} [shadowColor='#000000'] 阴影颜色
	 * @property {number} [shadowOffsetX=0] 阴影横向偏移
	 * @property {number} [shadowOffsetY=0] 阴影纵向偏移
	 * @property {string} [text] 图形中的附加文本
	 * @property {string} [textColor='#000000'] 文本颜色
	 * @property {string} [textFont] 附加文本样式，eg:'bold 18px verdana'
	 * @property {string} [textPosition='end'] 附加文本位置, 可以是 inside, left, right, top, bottom
	 * @property {string} [textAlign] 默认根据textPosition自动设置，附加文本水平对齐。
	 *                                可以是start, end, left, right, center
	 * @property {string} [textBaseline] 默认根据textPosition自动设置，附加文本垂直对齐。
	 *                                可以是top, bottom, middle, alphabetic, hanging, ideographic
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {

	    var Base = __webpack_require__(473);

	    var ShapeBundle = function (options) {
	        Base.call(this, options);
	        /**
	         * ShapeBundle绘制样式
	         * @name module:zrender/shape/ShapeBundle#style
	         * @type {module:zrender/shape/ShapeBundle~IShapeBundleStyle}
	         */
	        /**
	         * ShapeBundle高亮绘制样式
	         * @name module:zrender/shape/ShapeBundle#highlightStyle
	         * @type {module:zrender/shape/ShapeBundle~IShapeBundleStyle}
	         */
	    };

	    ShapeBundle.prototype = {

	        constructor: ShapeBundle,

	        type: 'shape-bundle',

	        brush: function (ctx, isHighlight) {
	            var style = this.beforeBrush(ctx, isHighlight);

	            ctx.beginPath();
	            for (var i = 0; i < style.shapeList.length; i++) {
	                var subShape = style.shapeList[i];
	                var subShapeStyle = subShape.style;
	                if (isHighlight) {
	                    subShapeStyle = subShape.getHighlightStyle(
	                        subShapeStyle,
	                        subShape.highlightStyle || {},
	                        subShape.brushTypeOnly
	                    );
	                }
	                subShape.buildPath(ctx, subShapeStyle);
	            }
	            switch (style.brushType) {
	                /* jshint ignore:start */
	                case 'both':
	                    ctx.fill();
	                case 'stroke':
	                    style.lineWidth > 0 && ctx.stroke();
	                    break;
	                /* jshint ignore:end */
	                default:
	                    ctx.fill();
	            }

	            this.drawText(ctx, style, this.style);

	            this.afterBrush(ctx);
	        },

	        /**
	         * 计算返回多边形包围盒矩阵
	         * @param {module:zrender/shape/Polygon~IShapeBundleStyle} style
	         * @return {module:zrender/shape/Base~IBoundingRect}
	         */
	        getRect: function (style) {
	            if (style.__rect) {
	                return style.__rect;
	            }
	            var minX = Infinity;
	            var maxX = -Infinity;
	            var minY = Infinity;
	            var maxY = -Infinity;
	            for (var i = 0; i < style.shapeList.length; i++) {
	                var subShape = style.shapeList[i];
	                // TODO Highlight style ?
	                var subRect = subShape.getRect(subShape.style);

	                var minX = Math.min(subRect.x, minX);
	                var minY = Math.min(subRect.y, minY);
	                var maxX = Math.max(subRect.x + subRect.width, maxX);
	                var maxY = Math.max(subRect.y + subRect.height, maxY);
	            }

	            style.__rect = {
	                x: minX,
	                y: minY,
	                width: maxX - minX,
	                height: maxY - minY
	            };

	            return style.__rect;
	        },

	        isCover: function (x, y) {
	            var originPos = this.transformCoordToLocal(x, y);
	            x = originPos[0];
	            y = originPos[1];
	            
	            if (this.isCoverRect(x, y)) {
	                for (var i = 0; i < this.style.shapeList.length; i++) {
	                    var subShape = this.style.shapeList[i];
	                    if (subShape.isCover(x, y)) {
	                        return true;
	                    }
	                }
	            }

	            return false;
	        }
	    };

	    __webpack_require__(456).inherits(ShapeBundle, Base);
	    return ShapeBundle;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); 

/***/ },
/* 503 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * echarts通用私有数据服务
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	    /**
	     * 打包私有数据
	     *
	     * @param {shape} shape 修改目标
	     * @param {Object} series
	     * @param {number} seriesIndex
	     * @param {number | Object} data
	     * @param {number} dataIndex
	     * @param {*=} special
	     * @param {*=} special2
	     */
	    function pack(
	        shape, series, seriesIndex, data, dataIndex, name, special, special2
	    ) {
	        var value;
	        if (typeof data != 'undefined') {
	            value = data.value == null
	                ? data
	                : data.value;
	        }

	        shape._echartsData = {
	            '_series' : series,
	            '_seriesIndex' : seriesIndex,
	            '_data' : data,
	            '_dataIndex' : dataIndex,
	            '_name' : name,
	            '_value' : value,
	            '_special' : special,
	            '_special2' : special2
	        };
	        return shape._echartsData;
	    }

	    /**
	     * 从私有数据中获取特定项
	     * @param {shape} shape
	     * @param {string} key
	     */
	    function get(shape, key) {
	        var data = shape._echartsData;
	        if (!key) {
	            return data;
	        }

	        switch (key) {
	            case 'series' :
	            case 'seriesIndex' :
	            case 'data' :
	            case 'dataIndex' :
	            case 'name' :
	            case 'value' :
	            case 'special' :
	            case 'special2' :
	                return data && data['_' + key];
	        }

	        return null;
	    }

	    /**
	     * 修改私有数据中获取特定项
	     * @param {shape} shape
	     * @param {string} key
	     * @param {*} value
	     */
	    function set(shape, key, value) {
	        shape._echartsData = shape._echartsData || {};
	        switch (key) {
	            case 'series' :             // 当前系列值
	            case 'seriesIndex' :        // 系列数组位置索引
	            case 'data' :               // 当前数据值
	            case 'dataIndex' :          // 数据数组位置索引
	            case 'name' :
	            case 'value' :
	            case 'special' :
	            case 'special2' :
	                shape._echartsData['_' + key] = value;
	                break;
	        }
	    }
	    
	    /**
	     * 私有数据克隆，把source拷贝到target上
	     * @param {shape} source 源
	     * @param {shape} target 目标
	     */
	    function clone(source, target) {
	        target._echartsData =  {
	            '_series' : source._echartsData._series,
	            '_seriesIndex' : source._echartsData._seriesIndex,
	            '_data' : source._echartsData._data,
	            '_dataIndex' : source._echartsData._dataIndex,
	            '_name' : source._echartsData._name,
	            '_value' : source._echartsData._value,
	            '_special' : source._echartsData._special,
	            '_special2' : source._echartsData._special2
	        };
	    }

	    return {
	        pack : pack,
	        set : set,
	        get : get,
	        clone : clone
	    };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 504 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * echarts图表动画基类
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	    var zrUtil = __webpack_require__(456);
	    var curveTool = __webpack_require__(472);
	    
	    /**
	     * 折线型动画
	     * 
	     * @param {ZRender} zr
	     * @param {shape} oldShape
	     * @param {shape} newShape
	     * @param {number} duration
	     * @param {tring} easing
	     */
	    function pointList(zr, oldShape, newShape, duration, easing) {
	        var newPointList = newShape.style.pointList;
	        var newPointListLen = newPointList.length;
	        var oldPointList;

	        if (!oldShape) {        // add
	            oldPointList = [];
	            if (newShape._orient != 'vertical') {
	                var y = newPointList[0][1];
	                for (var i = 0; i < newPointListLen; i++) {
	                    oldPointList[i] = [newPointList[i][0], y];
	                }
	            }
	            else {
	                var x = newPointList[0][0];
	                for (var i = 0; i < newPointListLen; i++) {
	                    oldPointList[i] = [x, newPointList[i][1]];
	                }
	            }

	            if (newShape.type == 'half-smooth-polygon') {
	                oldPointList[newPointListLen - 1] = zrUtil.clone(newPointList[newPointListLen - 1]);
	                oldPointList[newPointListLen - 2] = zrUtil.clone(newPointList[newPointListLen - 2]);
	            }
	            oldShape = {style : {pointList : oldPointList}};
	        }
	        
	        oldPointList = oldShape.style.pointList;
	        var oldPointListLen = oldPointList.length;
	        if (oldPointListLen == newPointListLen) {
	            newShape.style.pointList = oldPointList;
	        }
	        else if (oldPointListLen < newPointListLen) {
	            // 原来短，新的长，补全
	            newShape.style.pointList = oldPointList.concat(newPointList.slice(oldPointListLen));
	        }
	        else {
	            // 原来长，新的短，截断
	            newShape.style.pointList = oldPointList.slice(0, newPointListLen);
	        }

	        zr.addShape(newShape);
	        newShape.__animating = true;
	        zr.animate(newShape.id, 'style')
	            .when(
	                duration,
	                { pointList: newPointList }
	            )
	            .during(function () {
	                // Updating bezier points
	                if (newShape.updateControlPoints) {
	                    newShape.updateControlPoints(newShape.style);
	                }
	            })
	            .done(function() {
	                newShape.__animating = false;
	            })
	            .start(easing);
	    }
	    
	    /**
	     * 复制样式
	     * 
	     * @inner
	     * @param {Object} target 目标对象
	     * @param {Object} source 源对象
	     * @param {...string} props 复制的属性列表
	     */
	    function cloneStyle(target, source) {
	        var len = arguments.length;
	        for (var i = 2; i < len; i++) {
	            var prop = arguments[i];
	            target.style[prop] = source.style[prop];
	        }
	    }

	    /**
	     * 方型动画
	     * 
	     * @param {ZRender} zr
	     * @param {shape} oldShape
	     * @param {shape} newShape
	     * @param {number} duration
	     * @param {tring} easing
	     */
	    function rectangle(zr, oldShape, newShape, duration, easing) {
	        var newShapeStyle = newShape.style;
	        if (!oldShape) {        // add
	            oldShape = {
	                position : newShape.position,
	                style : {
	                    x : newShapeStyle.x,
	                    y : newShape._orient == 'vertical'
	                        ? newShapeStyle.y + newShapeStyle.height
	                        : newShapeStyle.y,
	                    width: newShape._orient == 'vertical' 
	                           ? newShapeStyle.width : 0,
	                    height: newShape._orient != 'vertical' 
	                           ? newShapeStyle.height : 0
	                }
	            };
	        }
	        
	        var newX = newShapeStyle.x;
	        var newY = newShapeStyle.y;
	        var newWidth = newShapeStyle.width;
	        var newHeight = newShapeStyle.height;
	        var newPosition = [newShape.position[0], newShape.position[1]];
	        cloneStyle(
	            newShape, oldShape,
	            'x', 'y', 'width', 'height'
	        );
	        newShape.position = oldShape.position;

	        zr.addShape(newShape);
	        if (newPosition[0] != oldShape.position[0] || newPosition[1] != oldShape.position[1]) {
	            zr.animate(newShape.id, '')
	                .when(
	                    duration,
	                    {
	                        position: newPosition
	                    }
	                )
	                .start(easing);
	        }
	        
	        newShape.__animating = true;
	        zr.animate(newShape.id, 'style')
	            .when(
	                duration,
	                {
	                    x: newX,
	                    y: newY,
	                    width: newWidth,
	                    height: newHeight
	                }
	            )
	            .done(function() {
	                newShape.__animating = false;
	            })
	            .start(easing);
	    }
	    
	    /**
	     * 蜡烛动画
	     * 
	     * @param {ZRender} zr
	     * @param {shape} oldShape
	     * @param {shape} newShape
	     * @param {number} duration
	     * @param {tring} easing
	     */
	    function candle(zr, oldShape, newShape, duration, easing) {
	        if (!oldShape) {        // add
	            var y = newShape.style.y;
	            oldShape = {style : {y : [y[0], y[0], y[0], y[0]]}};
	        }
	        
	        var newY = newShape.style.y;
	        newShape.style.y = oldShape.style.y;
	        zr.addShape(newShape);
	        newShape.__animating = true;
	        zr.animate(newShape.id, 'style')
	            .when(
	                duration,
	                { y: newY }
	            )
	            .done(function() {
	                newShape.__animating = false;
	            })
	            .start(easing);
	    }

	    /**
	     * 环型动画
	     * 
	     * @param {ZRender} zr
	     * @param {shape} oldShape
	     * @param {shape} newShape
	     * @param {number} duration
	     * @param {tring} easing
	     */
	    function ring(zr, oldShape, newShape, duration, easing) {
	        var x = newShape.style.x;
	        var y = newShape.style.y;
	        var r0 = newShape.style.r0;
	        var r = newShape.style.r;
	        
	        newShape.__animating = true;

	        if (newShape._animationAdd != 'r') {
	            newShape.style.r0 = 0;
	            newShape.style.r = 0;
	            newShape.rotation = [Math.PI*2, x, y];
	            
	            zr.addShape(newShape);
	            zr.animate(newShape.id, 'style')
	                .when(
	                    duration,
	                    {
	                        r0 : r0,
	                        r : r
	                    }
	                )
	                .done(function() {
	                    newShape.__animating = false;
	                })
	                .start(easing);
	            zr.animate(newShape.id, '')
	                .when(
	                    duration,
	                    { rotation : [0, x, y] }
	                )
	                .start(easing);
	        }
	        else {
	            newShape.style.r0 = newShape.style.r;
	            
	            zr.addShape(newShape);
	            zr.animate(newShape.id, 'style')
	                .when(
	                    duration,
	                    {
	                        r0 : r0
	                    }
	                )
	                .done(function() {
	                    newShape.__animating = false;
	                })
	                .start(easing);
	        }
	    }
	    
	    /**
	     * 扇形动画
	     * 
	     * @param {ZRender} zr
	     * @param {shape} oldShape
	     * @param {shape} newShape
	     * @param {number} duration
	     * @param {tring} easing
	     */
	    function sector(zr, oldShape, newShape, duration, easing) {
	        if (!oldShape) {        // add
	            if (newShape._animationAdd != 'r') {
	                oldShape = {
	                    style : {
	                        startAngle : newShape.style.startAngle,
	                        endAngle : newShape.style.startAngle
	                    }
	                };
	            }
	            else {
	                oldShape = {style : {r0 : newShape.style.r}};
	            }
	        }
	        
	        var startAngle = newShape.style.startAngle;
	        var endAngle = newShape.style.endAngle;
	        
	        cloneStyle(
	            newShape, oldShape,
	            'startAngle', 'endAngle'
	        );
	        
	        zr.addShape(newShape);
	        newShape.__animating = true;
	        zr.animate(newShape.id, 'style')
	            .when(
	                duration,
	                {
	                    startAngle : startAngle,
	                    endAngle : endAngle
	                }
	            )
	            .done(function() {
	                newShape.__animating = false;
	            })
	            .start(easing);
	    }
	    
	    /**
	     * 文本动画
	     * 
	     * @param {ZRender} zr
	     * @param {shape} oldShape
	     * @param {shape} newShape
	     * @param {number} duration
	     * @param {tring} easing
	     */
	    function text(zr, oldShape, newShape, duration, easing) {
	        if (!oldShape) {        // add
	            oldShape = {
	                style : {
	                    x : newShape.style.textAlign == 'left' 
	                        ? newShape.style.x + 100
	                        : newShape.style.x - 100,
	                    y : newShape.style.y
	                }
	            };
	        }
	        
	        var x = newShape.style.x;
	        var y = newShape.style.y;
	        
	        cloneStyle(
	            newShape, oldShape,
	            'x', 'y'
	        );
	        
	        zr.addShape(newShape);
	        newShape.__animating = true;
	        zr.animate(newShape.id, 'style')
	            .when(
	                duration,
	                {
	                    x : x,
	                    y : y
	                }
	            )
	            .done(function() {
	                newShape.__animating = false;
	            })
	            .start(easing);
	    }
	    
	    /**
	     * 多边形动画
	     * 
	     * @param {ZRender} zr
	     * @param {shape} oldShape
	     * @param {shape} newShape
	     * @param {number} duration
	     * @param {tring} easing
	     */
	    function polygon(zr, oldShape, newShape, duration, easing) {
	        var rect = __webpack_require__(497).prototype.getRect(newShape.style);
	        var x = rect.x + rect.width / 2;
	        var y = rect.y + rect.height / 2;
	        
	        newShape.scale = [0.1, 0.1, x, y];
	        zr.addShape(newShape);
	        newShape.__animating = true;
	        zr.animate(newShape.id, '')
	            .when(
	                duration,
	                {
	                    scale : [1, 1, x, y]
	                }
	            )
	            .done(function() {
	                newShape.__animating = false;
	            })
	            .start(easing);
	    }
	    
	    /**
	     * 和弦动画
	     * 
	     * @param {ZRender} zr
	     * @param {shape} oldShape
	     * @param {shape} newShape
	     * @param {number} duration
	     * @param {tring} easing
	     */
	    function ribbon(zr, oldShape, newShape, duration, easing) {
	        if (!oldShape) {        // add
	            oldShape = {
	                style : {
	                    source0 : 0,
	                    source1 : newShape.style.source1 > 0 ? 360 : -360,
	                    target0 : 0,
	                    target1 : newShape.style.target1 > 0 ? 360 : -360
	                }
	            };
	        }
	        
	        var source0 = newShape.style.source0;
	        var source1 = newShape.style.source1;
	        var target0 = newShape.style.target0;
	        var target1 = newShape.style.target1;
	        
	        if (oldShape.style) {
	            cloneStyle(
	                newShape, oldShape,
	                'source0', 'source1', 'target0', 'target1'
	            );
	        }
	        
	        zr.addShape(newShape);
	        newShape.__animating = true;
	        zr.animate(newShape.id, 'style')
	            .when(
	                duration,
	                {
	                    source0 : source0,
	                    source1 : source1,
	                    target0 : target0,
	                    target1 : target1
	                }
	            )
	            .done(function() {
	                newShape.__animating = false;
	            })
	            .start(easing);
	    }
	    
	    /**
	     * gaugePointer动画
	     * 
	     * @param {ZRender} zr
	     * @param {shape} oldShape
	     * @param {shape} newShape
	     * @param {number} duration
	     * @param {tring} easing
	     */
	    function gaugePointer(zr, oldShape, newShape, duration, easing) {
	        if (!oldShape) {        // add
	            oldShape = {
	                style : {
	                    angle : newShape.style.startAngle
	                }
	            };
	        }
	        
	        var angle = newShape.style.angle;
	        newShape.style.angle = oldShape.style.angle;
	        zr.addShape(newShape);
	        newShape.__animating = true;
	        zr.animate(newShape.id, 'style')
	            .when(
	                duration,
	                {
	                    angle : angle
	                }
	            )
	            .done(function() {
	                newShape.__animating = false;
	            })
	            .start(easing);
	    }
	    
	    /**
	     * icon动画
	     * 
	     * @param {ZRender} zr
	     * @param {shape} oldShape
	     * @param {shape} newShape
	     * @param {number} duration
	     * @param {tring} easing
	     */
	    function icon(zr, oldShape, newShape, duration, easing, delay) {
	        // 避免markPoint特效取值在动画帧上
	        newShape.style._x = newShape.style.x;
	        newShape.style._y = newShape.style.y;
	        newShape.style._width = newShape.style.width;
	        newShape.style._height = newShape.style.height;

	        if (!oldShape) {    // add
	            var x = newShape._x || 0;
	            var y = newShape._y || 0;
	            newShape.scale = [0.01, 0.01, x, y];
	            zr.addShape(newShape);
	            newShape.__animating = true;
	            zr.animate(newShape.id, '')
	                .delay(delay)
	                .when(
	                    duration,
	                    {scale : [1, 1, x, y]}
	                )
	                .done(function() {
	                    newShape.__animating = false;
	                })
	                .start(easing || 'QuinticOut');
	        }
	        else {              // mod
	            rectangle(zr, oldShape, newShape, duration, easing);
	        }
	    }
	    
	    /**
	     * line动画
	     * 
	     * @param {ZRender} zr
	     * @param {shape} oldShape
	     * @param {shape} newShape
	     * @param {number} duration
	     * @param {tring} easing
	     */
	    function line(zr, oldShape, newShape, duration, easing) {
	        if (!oldShape) {
	            oldShape = {
	                style : {
	                    xStart : newShape.style.xStart,
	                    yStart : newShape.style.yStart,
	                    xEnd : newShape.style.xStart,
	                    yEnd : newShape.style.yStart
	                }
	            };
	        }
	        
	        var xStart = newShape.style.xStart;
	        var xEnd = newShape.style.xEnd;
	        var yStart = newShape.style.yStart;
	        var yEnd = newShape.style.yEnd;

	        cloneStyle(
	            newShape, oldShape,
	            'xStart', 'xEnd', 'yStart', 'yEnd'
	        );

	        zr.addShape(newShape);
	        newShape.__animating = true;
	        zr.animate(newShape.id, 'style')
	            .when(
	                duration,
	                {
	                    xStart: xStart,
	                    xEnd: xEnd,
	                    yStart: yStart,
	                    yEnd: yEnd
	                }
	            )
	            .done(function() {
	                newShape.__animating = false;
	            })
	            .start(easing);
	    }
	    
	    /**
	     * markline动画
	     * 
	     * @param {ZRender} zr
	     * @param {shape} oldShape
	     * @param {shape} newShape
	     * @param {number} duration
	     * @param {tring} easing
	     */
	    function markline(zr, oldShape, newShape, duration, easing) {
	        easing = easing || 'QuinticOut';
	        newShape.__animating = true;
	        zr.addShape(newShape);
	        var newShapeStyle = newShape.style;

	        var animationDone = function () {
	            newShape.__animating = false;
	        };
	        var x0 = newShapeStyle.xStart;
	        var y0 = newShapeStyle.yStart;
	        var x2 = newShapeStyle.xEnd;
	        var y2 = newShapeStyle.yEnd;
	        if (newShapeStyle.curveness > 0) {
	            newShape.updatePoints(newShapeStyle);
	            var obj = { p: 0 };
	            var x1 = newShapeStyle.cpX1;
	            var y1 = newShapeStyle.cpY1;
	            var newXArr = [];
	            var newYArr = [];
	            var subdivide = curveTool.quadraticSubdivide;
	            zr.animation.animate(obj)
	                .when(duration, { p: 1 })
	                .during(function () {
	                    // Calculate subdivided curve
	                    subdivide(x0, x1, x2, obj.p, newXArr);
	                    subdivide(y0, y1, y2, obj.p, newYArr);
	                    newShapeStyle.cpX1 = newXArr[1];
	                    newShapeStyle.cpY1 = newYArr[1];
	                    newShapeStyle.xEnd = newXArr[2];
	                    newShapeStyle.yEnd = newYArr[2];
	                    zr.modShape(newShape);
	                })
	                .done(animationDone)
	                .start(easing);
	        }
	        else {
	            zr.animate(newShape.id, 'style')
	                .when(0, {
	                    xEnd: x0,
	                    yEnd: y0
	                })
	                .when(duration, {
	                    xEnd: x2,
	                    yEnd: y2
	                })
	                .done(animationDone)
	                .start(easing);
	        }
	    }

	    return {
	        pointList : pointList,
	        rectangle : rectangle,
	        candle : candle,
	        ring : ring,
	        sector : sector,
	        text : text,
	        polygon : polygon,
	        ribbon : ribbon,
	        gaugePointer : gaugePointer,
	        icon : icon,
	        line : line,
	        markline : markline
	    };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 505 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * echarts图表特效基类
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	    var ecData = __webpack_require__(503);
	    
	    var CircleShape = __webpack_require__(506);
	    var ImageShape = __webpack_require__(478);
	    var curveTool = __webpack_require__(472);
	    var IconShape = __webpack_require__(486);
	    var SymbolShape = __webpack_require__(496);
	    var ShapeBundle = __webpack_require__(502);
	    var Polyline = __webpack_require__(501);
	    var vec2 = __webpack_require__(466);

	    var canvasSupported = __webpack_require__(460).canvasSupported;
	    
	    function point(zr, effectList, shape, zlevel) {
	        var effect = shape.effect;
	        var color = effect.color || shape.style.strokeColor || shape.style.color;
	        var shadowColor = effect.shadowColor || color;
	        var size = effect.scaleSize;
	        var distance = effect.bounceDistance;
	        var shadowBlur = typeof effect.shadowBlur != 'undefined'
	                         ? effect.shadowBlur : size;

	        var effectShape;
	        if (shape.type !== 'image') {
	            effectShape = new IconShape({
	                zlevel : zlevel,
	                style : {
	                    brushType : 'stroke',
	                    iconType : shape.style.iconType != 'droplet'
	                               ? shape.style.iconType
	                               : 'circle',
	                    x : shadowBlur + 1, // 线宽
	                    y : shadowBlur + 1,
	                    n : shape.style.n,
	                    width : shape.style._width * size,
	                    height : shape.style._height * size,
	                    lineWidth : 1,
	                    strokeColor : color,
	                    shadowColor : shadowColor,
	                    shadowBlur : shadowBlur
	                },
	                draggable : false,
	                hoverable : false
	            });
	            if (shape.style.iconType == 'pin') {
	                effectShape.style.y += effectShape.style.height / 2 * 1.5;
	            }

	            if (canvasSupported) {  // 提高性能，换成image
	                effectShape.style.image = zr.shapeToImage(
	                    effectShape, 
	                    effectShape.style.width + shadowBlur * 2 + 2, 
	                    effectShape.style.height + shadowBlur * 2 + 2
	                ).style.image;
	                
	                effectShape = new ImageShape({
	                    zlevel : effectShape.zlevel,
	                    style : effectShape.style,
	                    draggable : false,
	                    hoverable : false
	                });
	            }
	        }
	        else {
	            effectShape = new ImageShape({
	                zlevel : zlevel,
	                style : shape.style,
	                draggable : false,
	                hoverable : false
	            });
	        }
	        
	        ecData.clone(shape, effectShape);
	        
	        // 改变坐标，不能移到前面
	        effectShape.position = shape.position;
	        effectList.push(effectShape);
	        zr.addShape(effectShape);
	        
	        var devicePixelRatio = shape.type !== 'image' ? (window.devicePixelRatio || 1) : 1;
	        var offset = (effectShape.style.width / devicePixelRatio - shape.style._width) / 2;
	        effectShape.style.x = shape.style._x - offset;
	        effectShape.style.y = shape.style._y - offset;

	        if (shape.style.iconType == 'pin') {
	            effectShape.style.y -= shape.style.height / 2 * 1.5;
	        }

	        var duration = (effect.period + Math.random() * 10) * 100;
	        
	        zr.modShape(
	            shape.id, 
	            { invisible : true}
	        );
	        
	        var centerX = effectShape.style.x + (effectShape.style.width) / 2 / devicePixelRatio;
	        var centerY = effectShape.style.y + (effectShape.style.height) / 2 / devicePixelRatio;

	        if (effect.type === 'scale') {
	            // 放大效果
	            zr.modShape(
	                effectShape.id, 
	                {
	                    scale : [0.1, 0.1, centerX, centerY]
	                }
	            );
	            
	            zr.animate(effectShape.id, '', effect.loop)
	                .when(
	                    duration,
	                    {
	                        scale : [1, 1, centerX, centerY]
	                    }
	                )
	                .done(function() {
	                    shape.effect.show = false;
	                    zr.delShape(effectShape.id);
	                })
	                .start();
	        }
	        else {
	            zr.animate(effectShape.id, 'style', effect.loop)
	                .when(
	                    duration,
	                    {
	                        y : effectShape.style.y - distance
	                    }
	                )
	                .when(
	                    duration * 2,
	                    {
	                        y : effectShape.style.y
	                    }
	                )
	                .done(function() {
	                    shape.effect.show = false;
	                    zr.delShape(effectShape.id);
	                })
	                .start();
	        }
	        
	    }
	    
	    function largePoint(zr, effectList, shape, zlevel) {
	        var effect = shape.effect;
	        var color = effect.color || shape.style.strokeColor || shape.style.color;
	        var size = effect.scaleSize;
	        var shadowColor = effect.shadowColor || color;
	        var shadowBlur = typeof effect.shadowBlur != 'undefined'
	                         ? effect.shadowBlur : (size * 2);
	        var devicePixelRatio = window.devicePixelRatio || 1;
	        var effectShape = new SymbolShape({
	            zlevel : zlevel,
	            position : shape.position,
	            scale : shape.scale,
	            style : {
	                pointList : shape.style.pointList,
	                iconType : shape.style.iconType,
	                color : color,
	                strokeColor : color,
	                shadowColor : shadowColor,
	                shadowBlur : shadowBlur * devicePixelRatio,
	                random : true,
	                brushType: 'fill',
	                lineWidth:1,
	                size : shape.style.size
	            },
	            draggable : false,
	            hoverable : false
	        });
	        
	        effectList.push(effectShape);
	        zr.addShape(effectShape);
	        zr.modShape(
	            shape.id, 
	            { invisible : true}
	        );
	        
	        var duration = Math.round(effect.period * 100);
	        var clip1 = {};
	        var clip2 = {};
	        for (var i = 0; i < 20; i++) {
	            effectShape.style['randomMap' + i] = 0;
	            clip1 = {};
	            clip1['randomMap' + i] = 100;
	            clip2 = {};
	            clip2['randomMap' + i] = 0;
	            effectShape.style['randomMap' + i] = Math.random() * 100;
	            zr.animate(effectShape.id, 'style', true)
	                .when(duration, clip1)
	                .when(duration * 2, clip2)
	                .when(duration * 3, clip1)
	                .when(duration * 4, clip1)
	                .delay(Math.random() * duration * i)
	                //.delay(duration / 15 * (15 - i + 1))
	                .start();
	            
	        }
	    }
	    
	    function line(zr, effectList, shape, zlevel, isLarge) {
	        var effect = shape.effect;
	        var shapeStyle = shape.style;
	        var color = effect.color || shapeStyle.strokeColor || shapeStyle.color;
	        var shadowColor = effect.shadowColor || shapeStyle.strokeColor || color;
	        var size = shapeStyle.lineWidth * effect.scaleSize;
	        var shadowBlur = typeof effect.shadowBlur != 'undefined'
	                         ? effect.shadowBlur : size;

	        var effectShape = new CircleShape({
	            zlevel : zlevel,
	            style : {
	                x : shadowBlur,
	                y : shadowBlur,
	                r : size,
	                color : color,
	                shadowColor : shadowColor,
	                shadowBlur : shadowBlur
	            },
	            hoverable : false
	        });

	        var offset = 0;
	        if (canvasSupported && ! isLarge) {  // 提高性能，换成image
	            var zlevel = effectShape.zlevel;
	            effectShape = zr.shapeToImage(
	                effectShape,
	                (size + shadowBlur) * 2,
	                (size + shadowBlur) * 2
	            );
	            effectShape.zlevel = zlevel;
	            effectShape.hoverable = false;

	            offset = shadowBlur;
	        }

	        if (! isLarge) {
	            ecData.clone(shape, effectShape);
	            // 改变坐标， 不能移到前面
	            effectShape.position = shape.position;
	            effectList.push(effectShape);
	            zr.addShape(effectShape);
	        }

	        var effectDone = function () {
	            if (! isLarge) {
	                shape.effect.show = false;
	                zr.delShape(effectShape.id);   
	            }
	            effectShape.effectAnimator = null;
	        };

	        if (shape instanceof Polyline) {
	            var distanceList = [0];
	            var totalDist = 0;
	            var pointList = shapeStyle.pointList;
	            var controlPointList = shapeStyle.controlPointList;
	            for (var i = 1; i < pointList.length; i++) {
	                if (controlPointList) {
	                    var cp1 = controlPointList[(i - 1) * 2];
	                    var cp2 = controlPointList[(i - 1) * 2 + 1];
	                    totalDist += vec2.dist(pointList[i - 1], cp1)
	                         + vec2.dist(cp1, cp2)
	                         + vec2.dist(cp2, pointList[i]);
	                }
	                else {
	                    totalDist += vec2.dist(pointList[i - 1], pointList[i]);
	                }
	                distanceList.push(totalDist);
	            }
	            var obj = { p: 0 };
	            var animator = zr.animation.animate(obj, { loop: effect.loop });

	            for (var i = 0; i < distanceList.length; i++) {
	                animator.when(distanceList[i] * effect.period, { p: i });
	            }
	            animator.during(function () {
	                var i = Math.floor(obj.p);
	                var x, y;
	                if (i == pointList.length - 1) {
	                    x = pointList[i][0];
	                    y = pointList[i][1];
	                }
	                else {
	                    var t = obj.p - i;
	                    var p0 = pointList[i];
	                    var p1 = pointList[i + 1];
	                    if (controlPointList) {
	                        var cp1 = controlPointList[i * 2];
	                        var cp2 = controlPointList[i * 2 + 1];
	                        x = curveTool.cubicAt(
	                            p0[0], cp1[0], cp2[0], p1[0], t
	                        );
	                        y = curveTool.cubicAt(
	                            p0[1], cp1[1], cp2[1], p1[1], t
	                        );
	                    }
	                    else {
	                        x = (p1[0] - p0[0]) * t + p0[0];
	                        y = (p1[1] - p0[1]) * t + p0[1];   
	                    }
	                }
	                effectShape.style.x = x;
	                effectShape.style.y = y;
	                if (! isLarge) {
	                    zr.modShape(effectShape);
	                }
	            })
	            .done(effectDone)
	            .start();

	            animator.duration = totalDist * effect.period;

	            effectShape.effectAnimator = animator;
	        }
	        else {
	            var x0 = shapeStyle.xStart - offset;
	            var y0 = shapeStyle.yStart - offset;
	            var x2 = shapeStyle.xEnd - offset;
	            var y2 = shapeStyle.yEnd - offset;
	            effectShape.style.x = x0;
	            effectShape.style.y = y0;

	            var distance = (x2 - x0) * (x2 - x0) + (y2 - y0) * (y2 - y0);
	            var duration = Math.round(Math.sqrt(Math.round(
	                distance * effect.period * effect.period
	            )));

	            if (shape.style.curveness > 0) {
	                var x1 = shapeStyle.cpX1 - offset;
	                var y1 = shapeStyle.cpY1 - offset;
	                effectShape.effectAnimator = zr.animation.animate(effectShape, { loop: effect.loop })
	                    .when(duration, { p: 1 })
	                    .during(function (target, t) {
	                        effectShape.style.x = curveTool.quadraticAt(
	                            x0, x1, x2, t
	                        );
	                        effectShape.style.y = curveTool.quadraticAt(
	                            y0, y1, y2, t
	                        );
	                        if (! isLarge) {
	                            zr.modShape(effectShape);
	                        }
	                    })
	                    .done(effectDone)
	                    .start();
	            }
	            else {
	                // 不用 zr.animate，因为在用 ShapeBundle 的时候单个 effectShape 不会
	                // 被加到 zrender 中
	                effectShape.effectAnimator = zr.animation.animate(effectShape.style, { loop: effect.loop })
	                    .when(duration, {
	                        x: x2,
	                        y: y2
	                    })
	                    .during(function () {
	                        if (! isLarge) {
	                            zr.modShape(effectShape);
	                        }
	                    })
	                    .done(effectDone)
	                    .start();
	            }
	            effectShape.effectAnimator.duration = duration;
	        }
	        return effectShape;
	    }

	    function largeLine(zr, effectList, shape, zlevel) {
	        var effectShape = new ShapeBundle({
	            style: {
	                shapeList: []
	            },
	            zlevel: zlevel,
	            hoverable: false
	        });
	        var shapeList = shape.style.shapeList;
	        var effect = shape.effect;
	        effectShape.position = shape.position;

	        var maxDuration = 0;
	        var subEffectAnimators = [];
	        for (var i = 0; i < shapeList.length; i++) {
	            shapeList[i].effect = effect;
	            var subEffectShape = line(zr, null, shapeList[i], zlevel, true);
	            var subEffectAnimator = subEffectShape.effectAnimator;
	            effectShape.style.shapeList.push(subEffectShape);
	            if (subEffectAnimator.duration > maxDuration) {
	                maxDuration = subEffectAnimator.duration;
	            }
	            if (i === 0) {
	                effectShape.style.color = subEffectShape.style.color;
	                effectShape.style.shadowBlur = subEffectShape.style.shadowBlur;
	                effectShape.style.shadowColor = subEffectShape.style.shadowColor;
	            }
	            subEffectAnimators.push(subEffectAnimator);
	        }
	        effectList.push(effectShape);
	        zr.addShape(effectShape);

	        var clearAllAnimators = function () {
	            for (var i = 0; i < subEffectAnimators.length; i++) {
	                subEffectAnimators[i].stop();
	            }
	        };
	        if (maxDuration) {
	            effectShape.__dummy = 0;
	            // Proxy animator
	            var animator = zr.animate(effectShape.id, '', effect.loop)
	                .when(maxDuration, {
	                    __dummy: 1
	                })
	                .during(function () {
	                    zr.modShape(effectShape);
	                })
	                .done(function () {
	                    shape.effect.show = false;
	                    zr.delShape(effectShape.id);
	                })
	                .start();
	            var oldStop = animator.stop;

	            animator.stop = function () {
	                clearAllAnimators();
	                oldStop.call(this);
	            };
	        }
	    }

	    return {
	        point : point,
	        largePoint : largePoint,
	        line : line,
	        largeLine: largeLine
	    };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 506 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * 圆形
	 * @module zrender/shape/Circle
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 * @example
	 *   var Circle = require('zrender/shape/Circle');
	 *   var shape = new Circle({
	 *       style: {
	 *           x: 100,
	 *           y: 100,
	 *           r: 40,
	 *           brushType: 'both',
	 *           color: 'blue',
	 *           strokeColor: 'red',
	 *           lineWidth: 3,
	 *           text: 'Circle'
	 *       }    
	 *   });
	 *   zr.addShape(shape);
	 */

	/**
	 * @typedef {Object} ICircleStyle
	 * @property {number} x 圆心x坐标
	 * @property {number} y 圆心y坐标
	 * @property {number} r 半径
	 * @property {string} [brushType='fill']
	 * @property {string} [color='#000000'] 填充颜色
	 * @property {string} [strokeColor='#000000'] 描边颜色
	 * @property {string} [lineCape='butt'] 线帽样式，可以是 butt, round, square
	 * @property {number} [lineWidth=1] 描边宽度
	 * @property {number} [opacity=1] 绘制透明度
	 * @property {number} [shadowBlur=0] 阴影模糊度，大于0有效
	 * @property {string} [shadowColor='#000000'] 阴影颜色
	 * @property {number} [shadowOffsetX=0] 阴影横向偏移
	 * @property {number} [shadowOffsetY=0] 阴影纵向偏移
	 * @property {string} [text] 图形中的附加文本
	 * @property {string} [textColor='#000000'] 文本颜色
	 * @property {string} [textFont] 附加文本样式，eg:'bold 18px verdana'
	 * @property {string} [textPosition='end'] 附加文本位置, 可以是 inside, left, right, top, bottom
	 * @property {string} [textAlign] 默认根据textPosition自动设置，附加文本水平对齐。
	 *                                可以是start, end, left, right, center
	 * @property {string} [textBaseline] 默认根据textPosition自动设置，附加文本垂直对齐。
	 *                                可以是top, bottom, middle, alphabetic, hanging, ideographic
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	        'use strict';

	        var Base = __webpack_require__(473);

	        /**
	         * @alias module:zrender/shape/Circle
	         * @constructor
	         * @extends module:zrender/shape/Base
	         * @param {Object} options
	         */
	        var Circle = function(options) {
	            Base.call(this, options);
	            /**
	             * 圆形绘制样式
	             * @name module:zrender/shape/Circle#style
	             * @type {module:zrender/shape/Circle~ICircleStyle}
	             */
	            /**
	             * 圆形高亮绘制样式
	             * @name module:zrender/shape/Circle#highlightStyle
	             * @type {module:zrender/shape/Circle~ICircleStyle}
	             */
	        };

	        Circle.prototype = {
	            type: 'circle',
	            /**
	             * 创建圆形路径
	             * @param {CanvasRenderingContext2D} ctx
	             * @param {module:zrender/shape/Circle~ICircleStyle} style
	             */
	            buildPath : function (ctx, style) {
	                // Better stroking in ShapeBundle
	                ctx.moveTo(style.x + style.r, style.y);
	                ctx.arc(style.x, style.y, style.r, 0, Math.PI * 2, true);
	                return;
	            },

	            /**
	             * 计算返回圆形的包围盒矩形
	             * @param {module:zrender/shape/Circle~ICircleStyle} style
	             * @return {module:zrender/shape/Base~IBoundingRect}
	             */
	            getRect : function (style) {
	                if (style.__rect) {
	                    return style.__rect;
	                }
	                
	                var lineWidth;
	                if (style.brushType == 'stroke' || style.brushType == 'fill') {
	                    lineWidth = style.lineWidth || 1;
	                }
	                else {
	                    lineWidth = 0;
	                }
	                style.__rect = {
	                    x : Math.round(style.x - style.r - lineWidth / 2),
	                    y : Math.round(style.y - style.r - lineWidth / 2),
	                    width : style.r * 2 + lineWidth,
	                    height : style.r * 2 + lineWidth
	                };
	                
	                return style.__rect;
	            }
	        };

	        __webpack_require__(456).inherits(Circle, Base);
	        return Circle;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 507 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * 高精度数学运算
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	    // 除法函数，用来得到精确的除法结果 
	    // 说明：javascript的除法结果会有误差，在两个浮点数相除的时候会比较明显。这个函数返回较为精确的除法结果。 
	    // 调用：accDiv(arg1,arg2) 
	    // 返回值：arg1除以arg2的精确结果
	    function accDiv(arg1,arg2){
	        var s1 = arg1.toString();
	        var s2 = arg2.toString(); 
	        var m = 0;
	        try {
	            m = s2.split('.')[1].length;
	        }
	        catch(e) {}
	        try {
	            m -= s1.split('.')[1].length;
	        }
	        catch(e) {}
	        
	        return (s1.replace('.', '') - 0) / (s2.replace('.', '') - 0) * Math.pow(10, m);
	    }

	    // 乘法函数，用来得到精确的乘法结果
	    // 说明：javascript的乘法结果会有误差，在两个浮点数相乘的时候会比较明显。这个函数返回较为精确的乘法结果。 
	    // 调用：accMul(arg1,arg2) 
	    // 返回值：arg1乘以arg2的精确结果
	    function accMul(arg1, arg2) {
	        var s1 = arg1.toString();
	        var s2 = arg2.toString();
	        var m = 0;
	        try {
	            m += s1.split('.')[1].length;
	        }
	        catch(e) {}
	        try {
	            m += s2.split('.')[1].length;
	        }
	        catch(e) {}
	        
	        return (s1.replace('.', '') - 0) * (s2.replace('.', '') - 0) / Math.pow(10, m);
	    }

	    // 加法函数，用来得到精确的加法结果 
	    // 说明：javascript的加法结果会有误差，在两个浮点数相加的时候会比较明显。这个函数返回较为精确的加法结果。 
	    // 调用：accAdd(arg1,arg2) 
	    // 返回值：arg1加上arg2的精确结果 
	    function accAdd(arg1, arg2) {
	        var r1 = 0;
	        var r2 = 0;
	        try {
	            r1 = arg1.toString().split('.')[1].length;
	        }
	        catch(e) {}
	        try {
	            r2 = arg2.toString().split('.')[1].length;
	        }
	        catch(e) {}
	        
	        var m = Math.pow(10, Math.max(r1, r2));
	        return (Math.round(arg1 * m) + Math.round(arg2 * m)) / m; 
	    }

	    //减法函数，用来得到精确的减法结果 
	    //说明：javascript的减法结果会有误差，在两个浮点数减法的时候会比较明显。这个函数返回较为精确的减法结果。 
	    //调用：accSub(arg1,arg2) 
	    //返回值：arg1减法arg2的精确结果 
	    function accSub(arg1,arg2) {
	        return accAdd(arg1, -arg2);
	    }

	    return {
	        accDiv : accDiv,
	        accMul : accMul,
	        accAdd : accAdd,
	        accSub : accSub
	    };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 508 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * echarts组件基类
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	    var ecConfig = __webpack_require__(455);
	    var ecData = __webpack_require__(503);
	    var ecQuery = __webpack_require__(510);
	    var number = __webpack_require__(509);
	    var zrUtil = __webpack_require__(456);
	    
	    function Base(ecTheme, messageCenter, zr, option, myChart){
	        this.ecTheme = ecTheme;
	        this.messageCenter = messageCenter;
	        this.zr =zr;
	        this.option = option;
	        this.series = option.series;
	        this.myChart = myChart;
	        this.component = myChart.component;

	        this.shapeList = [];
	        this.effectList = [];
	        
	        var self = this;
	        
	        self._onlegendhoverlink = function(param) {
	            if (self.legendHoverLink) {
	                var targetName = param.target;
	                var name;
	                for (var i = self.shapeList.length - 1; i >= 0; i--) {
	                    name = self.type == ecConfig.CHART_TYPE_PIE
	                           || self.type == ecConfig.CHART_TYPE_FUNNEL
	                           ? ecData.get(self.shapeList[i], 'name')
	                           : (ecData.get(self.shapeList[i], 'series') || {}).name;
	                    if (name == targetName 
	                        && !self.shapeList[i].invisible 
	                        && !self.shapeList[i].__animating
	                    ) {
	                        self.zr.addHoverShape(self.shapeList[i]);
	                    }
	                }
	            }
	        };
	        messageCenter && messageCenter.bind(
	            ecConfig.EVENT.LEGEND_HOVERLINK, this._onlegendhoverlink
	        );
	    }

	    /**
	     * 基类方法
	     */
	    Base.prototype = {
	        canvasSupported: __webpack_require__(460).canvasSupported,
	        _getZ : function(zWhat) {
	            if (this[zWhat] != null) {
	                return this[zWhat];
	            }
	            var opt = this.ecTheme[this.type];
	            if (opt && opt[zWhat] != null) {
	                return opt[zWhat];
	            }
	            opt = ecConfig[this.type];
	            if (opt && opt[zWhat] != null) {
	                return opt[zWhat];
	            }
	            return 0;
	        },

	        /**
	         * 获取zlevel基数配置
	         */
	        getZlevelBase: function () {
	            return this._getZ('zlevel');
	        },
	        
	        /**
	         * 获取z基数配置
	         */
	        getZBase: function() {
	            return this._getZ('z');
	        },

	        /**
	         * 参数修正&默认值赋值
	         * @param {Object} opt 参数
	         *
	         * @return {Object} 修正后的参数
	         */
	        reformOption: function (opt) {
	            // 默认配置项动态多级合并，依赖加载的组件选项未被merge到ecTheme里，需要从config里取
	            opt = zrUtil.merge(
	                       zrUtil.merge(
	                           opt || {},
	                           zrUtil.clone(this.ecTheme[this.type] || {})
	                       ),
	                       zrUtil.clone(ecConfig[this.type] || {})
	                   );
	            this.z = opt.z;
	            this.zlevel = opt.zlevel;
	            return opt;
	        },
	        
	        /**
	         * css类属性数组补全，如padding，margin等~
	         */
	        reformCssArray: function (p) {
	            if (p instanceof Array) {
	                switch (p.length + '') {
	                    case '4':
	                        return p;
	                    case '3':
	                        return [p[0], p[1], p[2], p[1]];
	                    case '2':
	                        return [p[0], p[1], p[0], p[1]];
	                    case '1':
	                        return [p[0], p[0], p[0], p[0]];
	                    case '0':
	                        return [0, 0, 0, 0];
	                }
	            }
	            else {
	                return [p, p, p, p];
	            }
	        },
	        
	        getShapeById: function(id) {
	            for (var i = 0, l = this.shapeList.length; i < l; i++) {
	                if (this.shapeList[i].id === id) {
	                    return this.shapeList[i];
	                }
	            }
	            return null;
	        },
	        
	        /**
	         * 获取自定义和默认配置合并后的字体设置
	         */
	        getFont: function (textStyle) {
	            var finalTextStyle = this.getTextStyle(
	                zrUtil.clone(textStyle)
	            );
	            return finalTextStyle.fontStyle + ' '
	                   + finalTextStyle.fontWeight + ' '
	                   + finalTextStyle.fontSize + 'px '
	                   + finalTextStyle.fontFamily;
	        },

	        /**
	         * 获取统一主题字体样式
	         */
	        getTextStyle: function(targetStyle) {
	            return zrUtil.merge(
	                       zrUtil.merge(
	                           targetStyle || {},
	                           this.ecTheme.textStyle
	                       ),
	                       ecConfig.textStyle
	                   );
	        },
	        
	        getItemStyleColor: function (itemColor, seriesIndex, dataIndex, data) {
	            return typeof itemColor === 'function'
	                   ? itemColor.call(
	                        this.myChart,
	                        {
	                            seriesIndex: seriesIndex,
	                            series: this.series[seriesIndex],
	                            dataIndex: dataIndex,
	                            data: data
	                        }
	                   )
	                   : itemColor;
	            
	        }, 

	        /**
	         * @parmas {object | number} data 目标data
	         * @params {string= | number=} defaultData 无数据时默认返回
	         */
	        getDataFromOption: function (data, defaultData) {
	            return data != null ? (data.value != null ? data.value : data) : defaultData;
	        },
	        
	        // 亚像素优化
	        subPixelOptimize: function (position, lineWidth) {
	            if (lineWidth % 2 === 1) {
	                //position += position === Math.ceil(position) ? 0.5 : 0;
	                position = Math.floor(position) + 0.5;
	            }
	            else {
	                position = Math.round(position);
	            }
	            return position;
	        },
	        
	        // 默认resize
	        resize: function () {
	            this.refresh && this.refresh();
	            this.clearEffectShape && this.clearEffectShape(true);
	            var self = this;
	            setTimeout(function(){
	                self.animationEffect && self.animationEffect();
	            },200);
	        },

	        /**
	         * 清除图形数据，实例仍可用
	         */
	        clear :function () {
	            this.clearEffectShape && this.clearEffectShape();
	            this.zr && this.zr.delShape(this.shapeList);
	            this.shapeList = [];
	        },

	        /**
	         * 释放后实例不可用
	         */
	        dispose: function () {
	            this.onbeforDispose && this.onbeforDispose();
	            this.clear();
	            this.shapeList = null;
	            this.effectList = null;
	            this.messageCenter && this.messageCenter.unbind(
	                ecConfig.EVENT.LEGEND_HOVERLINK, this._onlegendhoverlink
	            );
	            this.onafterDispose && this.onafterDispose();
	        },
	        
	        query: ecQuery.query,
	        deepQuery: ecQuery.deepQuery,
	        deepMerge: ecQuery.deepMerge,
	        
	        parsePercent: number.parsePercent,
	        parseCenter: number.parseCenter,
	        parseRadius: number.parseRadius,
	        numAddCommas: number.addCommas,

	        getPrecision: number.getPrecision
	    };
	    
	    return Base;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 509 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * echarts数字运算相关
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	    function _trim(str) {
	        return str.replace(/^\s+/, '').replace(/\s+$/, '');
	    }
	    
	    /**
	     * 百分比计算
	     */
	    function parsePercent(value, maxValue) {
	        if (typeof value === 'string') {
	            if (_trim(value).match(/%$/)) {
	                return parseFloat(value) / 100 * maxValue;
	            }

	            return parseFloat(value);
	        }

	        return value;
	    }
	    
	    /**
	     * 获取中心坐标
	     */ 
	    function parseCenter(zr, center) {
	        return [
	            parsePercent(center[0], zr.getWidth()),
	            parsePercent(center[1], zr.getHeight())
	        ];
	    }

	    /**
	     * 获取自适应半径
	     */ 
	    function parseRadius(zr, radius) {
	        // 传数组实现环形图，[内半径，外半径]，传单个则默认为外半径为
	        if (!(radius instanceof Array)) {
	            radius = [0, radius];
	        }
	        var zrSize = Math.min(zr.getWidth(), zr.getHeight()) / 2;
	        return [
	            parsePercent(radius[0], zrSize),
	            parsePercent(radius[1], zrSize)
	        ];
	    }
	    
	    /**
	     * 每三位默认加,格式化
	     */
	    function addCommas(x) {
	        if (isNaN(x)) {
	            return '-';
	        }
	        x = (x + '').split('.');
	        return x[0].replace(/(\d{1,3})(?=(?:\d{3})+(?!\d))/g,'$1,') 
	               + (x.length > 1 ? ('.' + x[1]) : '');
	    }

	    /**
	     * 获取数字的小数位数
	     * @param {number} val
	     */
	    
	    // It is much faster than methods converting number to string as follows 
	    //      var tmp = val.toString();
	    //      return tmp.length - 1 - tmp.indexOf('.');
	    // especially when precision is low
	    function getPrecision(val) {
	        var e = 1;
	        var count = 0;
	        while (Math.round(val * e) / e !== val) {
	            e *= 10;
	            count++;
	        }
	        return count;
	    }
	    
	    return {
	        parsePercent: parsePercent,
	        parseCenter: parseCenter,
	        parseRadius: parseRadius,
	        addCommas: addCommas,
	        getPrecision: getPrecision
	    };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 510 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * echarts层级查找方法
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function(require) {
	    var zrUtil = __webpack_require__(456);
	    
	    /**
	     * 获取嵌套选项的基础方法
	     * 返回optionTarget中位于optionLocation上的值，如果没有定义，则返回undefined
	     */
	    function query(optionTarget, optionLocation) {
	        if (typeof optionTarget == 'undefined') {
	            return;
	        }

	        if (!optionLocation) {
	            return optionTarget;
	        }

	        optionLocation = optionLocation.split('.');
	        var length = optionLocation.length;
	        var curIdx = 0;
	        while (curIdx < length) {
	            optionTarget = optionTarget[optionLocation[curIdx]];
	            if (typeof optionTarget == 'undefined') {
	                return;
	            }
	            curIdx++;
	        }

	        return optionTarget;
	    }
	        
	    /**
	     * 获取多级控制嵌套属性的基础方法
	     * 返回ctrList中优先级最高（最靠前）的非undefined属性，ctrList中均无定义则返回undefined
	     */
	    function deepQuery(ctrList, optionLocation) {
	        var finalOption;
	        for (var i = 0, l = ctrList.length; i < l; i++) {
	            finalOption = query(ctrList[i], optionLocation);
	            if (typeof finalOption != 'undefined') {
	                return finalOption;
	            }
	        }
	    }
	    
	    /**
	     * 获取多级控制嵌套属性的基础方法
	     * 根据ctrList中优先级合并产出目标属性
	     */
	    function deepMerge(ctrList, optionLocation) {
	        var finalOption;
	        var len = ctrList.length;
	        while (len--) {
	            var tempOption = query(ctrList[len], optionLocation);
	            if (typeof tempOption != 'undefined') {
	                if (typeof finalOption == 'undefined') {
	                    finalOption = zrUtil.clone(tempOption);
	                }
	                else {
	                    zrUtil.merge(
	                        finalOption, tempOption, true
	                    );
	                }
	            }
	        }
	        
	        return finalOption;
	    }
	    
	    return {
	        query : query,
	        deepQuery : deepQuery,
	        deepMerge : deepMerge
	    };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 511 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * Edge bundling laytout
	 *
	 * Use MINGLE algorithm
	 * Multilevel agglomerative edge bundling for visualizing large graphs
	 *
	 * @module echarts/layout/EdgeBundling
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {

	    var KDTree = __webpack_require__(512);
	    var vec2 = __webpack_require__(466);
	    var v2Create = vec2.create;
	    var v2DistSquare = vec2.distSquare;
	    var v2Dist = vec2.dist;
	    var v2Copy = vec2.copy;
	    var v2Clone = vec2.clone;

	    function squaredDistance(a, b) {
	        a = a.array;
	        b = b.array;

	        var x = b[0] - a[0];
	        var y = b[1] - a[1];
	        var z = b[2] - a[2];
	        var w = b[3] - a[3];

	        return x * x + y * y + z * z + w * w;
	    }

	    function CoarsenedEdge(group) {
	        this.points = [
	            group.mp0, group.mp1
	        ];

	        this.group = group;
	    }

	    function Edge(edge) {
	        var points = edge.points;
	        // Sort on y
	        if (
	            points[0][1] < points[1][1]
	            // If coarsened edge is flipped, the final composition of meet point
	            // will be unordered
	            || edge instanceof CoarsenedEdge
	        ) {
	            this.array = [points[0][0], points[0][1], points[1][0], points[1][1]];
	            this._startPoint = points[0];
	            this._endPoint = points[1];
	        }
	        else {
	            this.array = [points[1][0], points[1][1], points[0][0], points[0][1]];
	            this._startPoint = points[1];
	            this._endPoint = points[0];
	        }

	        this.ink = v2Dist(points[0], points[1]);

	        this.edge = edge;

	        this.group = null;
	    }

	    Edge.prototype.getStartPoint = function () {
	        return this._startPoint;
	    };

	    Edge.prototype.getEndPoint = function () {
	        return this._endPoint;
	    };

	    function BundledEdgeGroup() {

	        this.edgeList = [];

	        this.mp0 = v2Create();
	        this.mp1 = v2Create();

	        this.ink = 0;
	    }

	    BundledEdgeGroup.prototype.addEdge = function (edge) {
	        edge.group = this;
	        this.edgeList.push(edge);
	    };

	    BundledEdgeGroup.prototype.removeEdge = function (edge) {
	        edge.group = null;
	        this.edgeList.splice(this.edgeList.indexOf(edge), 1);
	    };

	    /**
	     * @constructor
	     * @alias module:echarts/layout/EdgeBundling
	     */
	    function EdgeBundling() {
	        this.maxNearestEdge = 6;
	        this.maxTurningAngle = Math.PI / 4;
	        this.maxIteration = 20;
	    }

	    EdgeBundling.prototype = {
	        
	        constructor: EdgeBundling,

	        run: function (rawEdges) {
	            var res = this._iterate(rawEdges);
	            var nIterate = 0;
	            while (nIterate++ < this.maxIteration) {
	                var coarsenedEdges = [];
	                for (var i = 0; i < res.groups.length; i++) {
	                    coarsenedEdges.push(new CoarsenedEdge(res.groups[i]));
	                }
	                var newRes = this._iterate(coarsenedEdges);
	                if (newRes.savedInk <= 0) {
	                    break;
	                } else {
	                    res = newRes;
	                }
	            }

	            // Get new edges
	            var newEdges = [];

	            function pointApproxEqual(p0, p1) {
	                // Use Float32Array may affect the precision
	                return v2DistSquare(p0, p1) < 1e-10;
	            }
	            // Clone all points to make sure all points in edge will not reference to the same array
	            // And clean the duplicate points
	            function cleanEdgePoints(edgePoints, rawEdgePoints) {
	                var res = [];
	                var off = 0;
	                for (var i = 0; i < edgePoints.length; i++) {
	                    if (! (off > 0 && pointApproxEqual(edgePoints[i], res[off - 1]))) {
	                        res[off++] = v2Clone(edgePoints[i]);
	                    }
	                }
	                // Edge has been reversed
	                if (rawEdgePoints[0] && !pointApproxEqual(res[0], rawEdgePoints[0])) {
	                    res = res.reverse();
	                }
	                return res;
	            }

	            var buildNewEdges = function (groups, fromEdgePoints) {
	                var newEdgePoints;
	                for (var i = 0; i < groups.length; i++) {
	                    var group = groups[i];
	                    if (
	                        group.edgeList[0]
	                        && (group.edgeList[0].edge instanceof CoarsenedEdge)
	                    ) {
	                        var newGroups = [];
	                        for (var j = 0; j < group.edgeList.length; j++) {
	                            newGroups.push(group.edgeList[j].edge.group);
	                        }
	                        if (! fromEdgePoints) {
	                            newEdgePoints = [];
	                        } else {
	                            newEdgePoints = fromEdgePoints.slice();
	                        }
	                        newEdgePoints.unshift(group.mp0);
	                        newEdgePoints.push(group.mp1);
	                        buildNewEdges(newGroups, newEdgePoints);
	                    } else {
	                        // console.log(group.edgeList.length);
	                        for (var j = 0; j < group.edgeList.length; j++) {
	                            var edge = group.edgeList[j];
	                            if (! fromEdgePoints) {
	                                newEdgePoints = [];
	                            } else {
	                                newEdgePoints = fromEdgePoints.slice();
	                            }
	                            newEdgePoints.unshift(group.mp0);
	                            newEdgePoints.push(group.mp1);
	                            newEdgePoints.unshift(edge.getStartPoint());
	                            newEdgePoints.push(edge.getEndPoint());
	                            newEdges.push({
	                                points: cleanEdgePoints(newEdgePoints, edge.edge.points),
	                                rawEdge: edge.edge
	                            });
	                        }
	                    }
	                }
	            };

	            buildNewEdges(res.groups);

	            return newEdges;
	        },

	        _iterate: function (rawEdges) {
	            var edges = [];
	            var groups = [];
	            var totalSavedInk = 0;
	            for (var i = 0; i < rawEdges.length; i++) {
	                var edge = new Edge(rawEdges[i]);
	                edges.push(edge);
	            }

	            var tree = new KDTree(edges, 4);

	            var nearests = [];

	            var _mp0 = v2Create();
	            var _mp1 = v2Create();
	            var _newGroupInk = 0;
	            var mp0 = v2Create();
	            var mp1 = v2Create();
	            var newGroupInk = 0;
	            for (var i = 0; i < edges.length; i++) {
	                var edge = edges[i];
	                if (edge.group) {
	                    // Edge have been groupped
	                    continue;
	                }
	                tree.nearestN(
	                    edge, this.maxNearestEdge,
	                    squaredDistance, nearests
	                );
	                var maxSavedInk = 0;
	                var mostSavingInkEdge = null;
	                var lastCheckedGroup = null;
	                for (var j = 0; j < nearests.length; j++) {
	                    var nearest = nearests[j];
	                    var savedInk = 0;
	                    if (nearest.group) {
	                        if (nearest.group !== lastCheckedGroup) {
	                            lastCheckedGroup = nearest.group;
	                            _newGroupInk = this._calculateGroupEdgeInk(
	                                nearest.group, edge, _mp0, _mp1
	                            );
	                            savedInk = nearest.group.ink + edge.ink - _newGroupInk;
	                        }
	                    }
	                    else {
	                        _newGroupInk = this._calculateEdgeEdgeInk(
	                            edge, nearest, _mp0, _mp1
	                        );
	                        savedInk = nearest.ink + edge.ink - _newGroupInk;
	                    }
	                    if (savedInk > maxSavedInk) {
	                        maxSavedInk = savedInk;
	                        mostSavingInkEdge = nearest;
	                        v2Copy(mp1, _mp1);
	                        v2Copy(mp0, _mp0);
	                        newGroupInk = _newGroupInk;
	                    }
	                }
	                if (mostSavingInkEdge) {
	                    totalSavedInk += maxSavedInk;
	                    var group;
	                    if (! mostSavingInkEdge.group) {
	                        group = new BundledEdgeGroup();
	                        groups.push(group);
	                        group.addEdge(mostSavingInkEdge);
	                    }
	                    group = mostSavingInkEdge.group;
	                    // Use the meet point and group ink calculated before
	                    v2Copy(group.mp0, mp0);
	                    v2Copy(group.mp1, mp1);
	                    group.ink = newGroupInk;
	                    mostSavingInkEdge.group.addEdge(edge);
	                }
	                else {
	                    var group = new BundledEdgeGroup();
	                    groups.push(group);
	                    v2Copy(group.mp0, edge.getStartPoint());
	                    v2Copy(group.mp1, edge.getEndPoint());
	                    group.ink = edge.ink;
	                    group.addEdge(edge);
	                }
	            }

	            return {
	                groups: groups,
	                edges: edges,
	                savedInk: totalSavedInk
	            };
	        },

	        _calculateEdgeEdgeInk: (function () {
	            var startPointSet = [];
	            var endPointSet = [];
	            return function (e0, e1, mp0, mp1) {
	                startPointSet[0] = e0.getStartPoint();
	                startPointSet[1] = e1.getStartPoint();
	                endPointSet[0] = e0.getEndPoint();
	                endPointSet[1] = e1.getEndPoint();

	                this._calculateMeetPoints(
	                    startPointSet, endPointSet, mp0, mp1
	                );
	                var ink = v2Dist(startPointSet[0], mp0)
	                    + v2Dist(mp0, mp1)
	                    + v2Dist(mp1, endPointSet[0])
	                    + v2Dist(startPointSet[1], mp0)
	                    + v2Dist(mp1, endPointSet[1]);

	                return ink;
	            };
	        })(),

	        _calculateGroupEdgeInk: function (group, edgeTryAdd, mp0, mp1) {
	            var startPointSet = [];
	            var endPointSet = [];
	            for (var i = 0; i < group.edgeList.length; i++) {
	                var edge = group.edgeList[i];
	                startPointSet.push(edge.getStartPoint());
	                endPointSet.push(edge.getEndPoint());
	            }
	            startPointSet.push(edgeTryAdd.getStartPoint());
	            endPointSet.push(edgeTryAdd.getEndPoint());

	            this._calculateMeetPoints(
	                startPointSet, endPointSet, mp0, mp1
	            );

	            var ink = v2Dist(mp0, mp1);
	            for (var i = 0; i < startPointSet.length; i++) {
	                ink += v2Dist(startPointSet[i], mp0)
	                    + v2Dist(endPointSet[i], mp1);
	            }

	            return ink;
	        },

	        /**
	         * Calculating the meet points
	         * @method
	         * @param {Array} startPointSet Start points set of bundled edges
	         * @param {Array} endPointSet End points set of bundled edges
	         * @param {Array.<number>} mp0 Output meet point 0
	         * @param {Array.<number>} mp1 Output meet point 1
	         */
	        _calculateMeetPoints: (function () {
	            var cp0 = v2Create();
	            var cp1 = v2Create();
	            return function (startPointSet, endPointSet, mp0, mp1) {
	                vec2.set(cp0, 0, 0);
	                vec2.set(cp1, 0, 0);
	                var len = startPointSet.length;
	                // Calculate the centroid of start points set
	                for (var i = 0; i < len; i++) {
	                    vec2.add(cp0, cp0, startPointSet[i]);
	                }
	                vec2.scale(cp0, cp0, 1 / len);

	                // Calculate the centroid of end points set
	                len = endPointSet.length;
	                for (var i = 0; i < len; i++) {
	                    vec2.add(cp1, cp1, endPointSet[i]);
	                }
	                vec2.scale(cp1, cp1, 1 / len);

	                this._limitTurningAngle(
	                    startPointSet, cp0, cp1, mp0
	                );
	                this._limitTurningAngle(
	                    endPointSet, cp1, cp0, mp1
	                );
	            };
	        })(),

	        _limitTurningAngle: (function () {
	            var v10 = v2Create();
	            var vTmp = v2Create();
	            var project = v2Create();
	            var tmpOut = v2Create();
	            return function (pointSet, p0, p1, out) {
	                // Limit the max turning angle
	                var maxTurningAngleCos = Math.cos(this.maxTurningAngle);
	                var maxTurningAngleTan = Math.tan(this.maxTurningAngle);

	                vec2.sub(v10, p0, p1);
	                vec2.normalize(v10, v10);

	                // Simply copy the centroid point if no need to turn the angle
	                vec2.copy(out, p0);

	                var maxMovement = 0;
	                for (var i = 0; i < pointSet.length; i++) {
	                    var p = pointSet[i];
	                    vec2.sub(vTmp, p, p0);
	                    var len = vec2.len(vTmp);
	                    vec2.scale(vTmp, vTmp, 1 / len);
	                    var turningAngleCos = vec2.dot(vTmp, v10);
	                    // Turning angle is to large
	                    if (turningAngleCos < maxTurningAngleCos) {
	                        // Calculat p's project point on vector p1-p0 
	                        // and distance to the vector
	                        vec2.scaleAndAdd(
	                            project, p0, v10, len * turningAngleCos
	                        );
	                        var distance = v2Dist(project, p);

	                        // Use the max turning angle to calculate the new meet point
	                        var d = distance / maxTurningAngleTan;
	                        vec2.scaleAndAdd(tmpOut, project, v10, -d);

	                        var movement = v2DistSquare(tmpOut, p0);
	                        if (movement > maxMovement) {
	                            maxMovement = movement;
	                            vec2.copy(out, tmpOut);
	                        }
	                    }
	                }
	            };
	        })()
	    };

	    return EdgeBundling;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 512 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * K-Dimension Tree
	 *
	 * @module echarts/data/KDTree
	 * @author Yi Shen(https://github.com/pissang)
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {

	    var quickSelect = __webpack_require__(513);

	    function Node(axis, data) {
	        this.left = null;
	        this.right = null;
	        this.axis = axis;

	        this.data = data;
	    }

	    /**
	     * @constructor
	     * @alias module:echarts/data/KDTree
	     * @param {Array} points List of points.
	     * each point needs an array property to repesent the actual data
	     * @param {Number} [dimension]
	     *        Point dimension.
	     *        Default will use the first point's length as dimensiont
	     */
	    var KDTree = function (points, dimension) {
	        if (!points.length) {
	            return;
	        }

	        if (!dimension) {
	            dimension = points[0].array.length;
	        }
	        this.dimension = dimension;
	        this.root = this._buildTree(points, 0, points.length - 1, 0);

	        // Use one stack to avoid allocation 
	        // each time searching the nearest point
	        this._stack = [];
	        // Again avoid allocating a new array
	        // each time searching nearest N points
	        this._nearstNList = [];
	    };

	    /**
	     * Resursively build the tree
	     */
	    KDTree.prototype._buildTree = function (points, left, right, axis) {
	        if (right < left) {
	            return null;
	        }

	        var medianIndex = Math.floor((left + right) / 2);
	        medianIndex = quickSelect(
	            points, left, right, medianIndex,
	            function (a, b) {
	                return a.array[axis] - b.array[axis];
	            }
	        );
	        var median = points[medianIndex];

	        var node = new Node(axis, median);

	        axis = (axis + 1) % this.dimension;
	        if (right > left) {
	            node.left = this._buildTree(points, left, medianIndex - 1, axis);
	            node.right = this._buildTree(points, medianIndex + 1, right, axis);   
	        }

	        return node;
	    };

	    /**
	     * Find nearest point
	     * @param  {Array} target Target point
	     * @param  {Function} squaredDistance Squared distance function
	     * @return {Array} Nearest point
	     */
	    KDTree.prototype.nearest = function (target, squaredDistance) {
	        var curr = this.root;
	        var stack = this._stack;
	        var idx = 0;
	        var minDist = Infinity;
	        var nearestNode = null;
	        if (curr.data !== target) {
	            minDist = squaredDistance(curr.data, target);
	            nearestNode = curr;
	        }

	        if (target.array[curr.axis] < curr.data.array[curr.axis]) {
	            // Left first
	            curr.right && (stack[idx++] = curr.right);
	            curr.left && (stack[idx++] = curr.left);
	        }
	        else {
	            // Right first
	            curr.left && (stack[idx++] = curr.left);
	            curr.right && (stack[idx++] = curr.right);
	        }

	        while (idx--) {
	            curr = stack[idx];
	            var currDist = target.array[curr.axis] - curr.data.array[curr.axis];
	            var isLeft = currDist < 0;
	            var needsCheckOtherSide = false;
	            currDist = currDist * currDist;
	            // Intersecting right hyperplane with minDist hypersphere
	            if (currDist < minDist) {
	                currDist = squaredDistance(curr.data, target);
	                if (currDist < minDist && curr.data !== target) {
	                    minDist = currDist;
	                    nearestNode = curr;
	                }
	                needsCheckOtherSide = true;
	            }
	            if (isLeft) {
	                if (needsCheckOtherSide) {
	                    curr.right && (stack[idx++] = curr.right);
	                }
	                // Search in the left area
	                curr.left && (stack[idx++] = curr.left);
	            }
	            else {
	                if (needsCheckOtherSide) {
	                    curr.left && (stack[idx++] = curr.left);
	                }
	                // Search the right area
	                curr.right && (stack[idx++] = curr.right);
	            }
	        }

	        return nearestNode.data;
	    };

	    KDTree.prototype._addNearest = function (found, dist, node) {
	        var nearestNList = this._nearstNList;

	        // Insert to the right position
	        // Sort from small to large
	        for (var i = found - 1; i > 0; i--) {
	            if (dist >= nearestNList[i - 1].dist) {                
	                break;
	            }
	            else {
	                nearestNList[i].dist = nearestNList[i - 1].dist;
	                nearestNList[i].node = nearestNList[i - 1].node;
	            }
	        }

	        nearestNList[i].dist = dist;
	        nearestNList[i].node = node;
	    };

	    /**
	     * Find nearest N points
	     * @param  {Array} target Target point
	     * @param  {number} N
	     * @param  {Function} squaredDistance Squared distance function
	     * @param  {Array} [output] Output nearest N points
	     */
	    KDTree.prototype.nearestN = function (target, N, squaredDistance, output) {
	        if (N <= 0) {
	            output.length = 0;
	            return output;
	        }

	        var curr = this.root;
	        var stack = this._stack;
	        var idx = 0;

	        var nearestNList = this._nearstNList;
	        for (var i = 0; i < N; i++) {
	            // Allocate
	            if (!nearestNList[i]) {
	                nearestNList[i] = {};
	            }
	            nearestNList[i].dist = 0;
	            nearestNList[i].node = null;
	        }
	        var currDist = squaredDistance(curr.data, target);

	        var found = 0;
	        if (curr.data !== target) {
	            found++;
	            this._addNearest(found, currDist, curr);
	        }

	        if (target.array[curr.axis] < curr.data.array[curr.axis]) {
	            // Left first
	            curr.right && (stack[idx++] = curr.right);
	            curr.left && (stack[idx++] = curr.left);
	        }
	        else {
	            // Right first
	            curr.left && (stack[idx++] = curr.left);
	            curr.right && (stack[idx++] = curr.right);
	        }

	        while (idx--) {
	            curr = stack[idx];
	            var currDist = target.array[curr.axis] - curr.data.array[curr.axis];
	            var isLeft = currDist < 0;
	            var needsCheckOtherSide = false;
	            currDist = currDist * currDist;
	            // Intersecting right hyperplane with minDist hypersphere
	            if (found < N || currDist < nearestNList[found - 1].dist) {
	                currDist = squaredDistance(curr.data, target);
	                if (
	                    (found < N || currDist < nearestNList[found - 1].dist)
	                    && curr.data !== target
	                ) {
	                    if (found < N) {
	                        found++;
	                    }
	                    this._addNearest(found, currDist, curr);
	                }
	                needsCheckOtherSide = true;
	            }
	            if (isLeft) {
	                if (needsCheckOtherSide) {
	                    curr.right && (stack[idx++] = curr.right);
	                }
	                // Search in the left area
	                curr.left && (stack[idx++] = curr.left);
	            }
	            else {
	                if (needsCheckOtherSide) {
	                    curr.left && (stack[idx++] = curr.left);
	                }
	                // Search the right area
	                curr.right && (stack[idx++] = curr.right);
	            }
	        }

	        // Copy to output
	        for (var i = 0; i < found; i++) {
	            output[i] = nearestNList[i].node.data;
	        }
	        output.length = found;

	        return output;
	    };

	    return KDTree;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 513 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * Quick select n-th element in an array.
	 *
	 * Note: it will change the elements placement in array.
	 *
	 * @module echarts/data/quickSelect
	 * @author Yi Shen(https://github.com/pissang)
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {

	    function defaultCompareFunc(a, b) {
	        return a - b;
	    }

	    function swapElement(list, idx0, idx1) {
	        var tmp = list[idx0];
	        list[idx0] = list[idx1];
	        list[idx1] = tmp;
	    }

	    function select(list, left, right, nth, compareFunc) {
	        var pivotIdx = left;
	        while (right > left) {
	            var pivotIdx = Math.round((right + left) / 2);
	            var pivotValue = list[pivotIdx];
	            // Swap pivot to the end
	            swapElement(list, pivotIdx, right);
	            pivotIdx = left;
	            for (var i = left; i <= right - 1; i++) {
	                if (compareFunc(pivotValue, list[i]) >= 0) {
	                    swapElement(list, i, pivotIdx);
	                    pivotIdx++;
	                }
	            }
	            swapElement(list, right, pivotIdx);

	            if (pivotIdx === nth) {
	                return pivotIdx;
	            } else if (pivotIdx < nth) {
	                left = pivotIdx + 1;
	            } else {
	                right = pivotIdx - 1;
	            }
	        }
	        // Left == right
	        return left;
	    }

	    /**
	     * @alias module:echarts/data/quickSelect
	     * @param {Array} list
	     * @param {number} [left]
	     * @param {number} [right]
	     * @param {number} nth
	     * @param {Function} [compareFunc]
	     * @example
	     *     var quickSelect = require('echarts/data/quickSelect');
	     *     var list = [5, 2, 1, 4, 3]
	     *     quickSelect(list, 3);
	     *     quickSelect(list, 0, 3, 1, function (a, b) {return a - b});
	     *
	     * @return {number}
	     */
	    function quickSelect(list, left, right, nth, compareFunc) {
	        if (arguments.length <= 3) {
	            nth = left;
	            if (arguments.length == 2) {
	                compareFunc = defaultCompareFunc;
	            } else {
	                compareFunc = right;
	            }
	            left = 0;
	            right = list.length - 1;
	        }
	        return select(list, left, right, nth, compareFunc);
	    }
	    
	    return quickSelect;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 514 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * echarts组件：工具箱
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	    var Base = __webpack_require__(508);
	    
	    // 图形依赖
	    var LineShape = __webpack_require__(493);
	    var ImageShape = __webpack_require__(478);
	    var RectangleShape = __webpack_require__(476);
	    var IconShape = __webpack_require__(486);
	    
	    var ecConfig = __webpack_require__(455);
	    ecConfig.toolbox = {
	        zlevel: 0,                  // 一级层叠
	        z: 6,                       // 二级层叠
	        show: false,
	        orient: 'horizontal',      // 布局方式，默认为水平布局，可选为：
	                                   // 'horizontal' ¦ 'vertical'
	        x: 'right',                // 水平安放位置，默认为全图右对齐，可选为：
	                                   // 'center' ¦ 'left' ¦ 'right'
	                                   // ¦ {number}（x坐标，单位px）
	        y: 'top',                  // 垂直安放位置，默认为全图顶端，可选为：
	                                   // 'top' ¦ 'bottom' ¦ 'center'
	                                   // ¦ {number}（y坐标，单位px）
	        color: ['#1e90ff','#22bb22','#4b0082','#d2691e'],
	        disableColor: '#ddd',
	        effectiveColor: 'red',
	        backgroundColor: 'rgba(0,0,0,0)', // 工具箱背景颜色
	        borderColor: '#ccc',       // 工具箱边框颜色
	        borderWidth: 0,            // 工具箱边框线宽，单位px，默认为0（无边框）
	        padding: 5,                // 工具箱内边距，单位px，默认各方向内边距为5，
	                                   // 接受数组分别设定上右下左边距，同css
	        itemGap: 10,               // 各个item之间的间隔，单位px，默认为10，
	                                   // 横向布局时为水平间隔，纵向布局时为纵向间隔
	        itemSize: 16,              // 工具箱图形宽度
	        showTitle: true,
	        // textStyle: {},
	        feature: {
	            mark: {
	                show: false,
	                title: {
	                    mark: '辅助线开关',
	                    markUndo: '删除辅助线',
	                    markClear: '清空辅助线'
	                },
	                lineStyle: {
	                    width: 1,
	                    color: '#1e90ff',
	                    type: 'dashed'
	                }
	            },
	            dataZoom: {
	                show: false,
	                title: {
	                    dataZoom: '区域缩放',
	                    dataZoomReset: '区域缩放后退'
	                }
	            },
	            dataView: {
	                show: false,
	                title: '数据视图',
	                readOnly: false,
	                lang: ['数据视图', '关闭', '刷新']
	            },
	            magicType: {
	                show: false,
	                title: {
	                    line: '折线图切换',
	                    bar: '柱形图切换',
	                    stack: '堆积',
	                    tiled: '平铺',
	                    force: '力导向布局图切换',
	                    chord: '和弦图切换',
	                    pie: '饼图切换',
	                    funnel: '漏斗图切换'
	                },
	                /*
	                option: {
	                    line: {},
	                    bar: {},
	                    stack: {},
	                    tiled: {},
	                    force: {},
	                    chord: {},
	                    pie: {},
	                    funnel: {}
	                },
	                */
	                type: [] // 'line', 'bar', 'stack', 'tiled', 'force', 'chord', 'pie', 'funnel'
	            },
	            restore: {
	                show: false,
	                title: '还原'
	            },
	            saveAsImage: {
	                show: false,
	                title: '保存为图片',
	                type: 'png',
	                lang: ['点击保存'] 
	            }
	        }
	    };

	    var zrUtil = __webpack_require__(456);
	    var zrConfig = __webpack_require__(463);
	    var zrEvent = __webpack_require__(458);
	    
	    var _MAGICTYPE_STACK = 'stack';
	    var _MAGICTYPE_TILED = 'tiled';
	        
	    /**
	     * 构造函数
	     * @param {Object} messageCenter echart消息中心
	     * @param {ZRender} zr zrender实例
	     * @param {HtmlElement} dom 目标对象
	     * @param {ECharts} myChart 当前图表实例
	     */
	    function Toolbox(ecTheme, messageCenter, zr, option, myChart) {
	        Base.call(this, ecTheme, messageCenter, zr, option, myChart);

	        this.dom = myChart.dom;
	        
	        this._magicType = {};
	        this._magicMap = {};
	        this._isSilence = false;
	        
	        this._iconList;
	        this._iconShapeMap = {};
	        //this._itemGroupLocation;
	        this._featureTitle = {};             // 文字
	        this._featureIcon = {};              // 图标
	        this._featureColor = {};             // 颜色
	        this._featureOption = {};
	        this._enableColor = 'red';
	        this._disableColor = '#ccc';
	        // this._markStart;
	        // this._marking;
	        // this._markShape;
	        // this._zoomStart;
	        // this._zooming;
	        // this._zoomShape;
	        // this._zoomQueue;
	        // this._dataView;
	        this._markShapeList = [];
	        var self = this;
	        self._onMark = function (param) {
	            self.__onMark(param);
	        };
	        self._onMarkUndo = function (param) {
	            self.__onMarkUndo(param);
	        };
	        self._onMarkClear = function (param) {
	            self.__onMarkClear(param);
	        };
	        self._onDataZoom = function (param) {
	            self.__onDataZoom(param);
	        };
	        self._onDataZoomReset = function (param) {
	            self.__onDataZoomReset(param);
	        };
	        self._onDataView = function (param) {
	            self.__onDataView(param);
	        };
	        self._onRestore = function (param) {
	            self.__onRestore(param);
	        };
	        self._onSaveAsImage = function (param) {
	            self.__onSaveAsImage(param);
	        };
	        self._onMagicType = function (param) {
	            self.__onMagicType(param);
	        };
	        self._onCustomHandler = function (param) {
	            self.__onCustomHandler(param);
	        };
	        self._onmousemove = function (param) {
	            return self.__onmousemove(param);
	        };

	        self._onmousedown = function (param) {
	            return self.__onmousedown(param);
	        };
	        
	        self._onmouseup = function (param) {
	            return self.__onmouseup(param);
	        };
	        
	        self._onclick = function (param) {
	            return self.__onclick(param);
	        };
	    }

	    Toolbox.prototype = {
	        type: ecConfig.COMPONENT_TYPE_TOOLBOX,
	        _buildShape: function () {
	            this._iconList = [];
	            var toolboxOption = this.option.toolbox;
	            this._enableColor = toolboxOption.effectiveColor;
	            this._disableColor = toolboxOption.disableColor;
	            var feature = toolboxOption.feature;
	            var iconName = [];
	            for (var key in feature){
	                if (feature[key].show) {
	                    switch (key) {
	                        case 'mark' :
	                            iconName.push({ key: key, name: 'mark' });
	                            iconName.push({ key: key, name: 'markUndo' });
	                            iconName.push({ key: key, name: 'markClear' });
	                            break;
	                        case 'magicType' :
	                            for (var i = 0, l = feature[key].type.length; i < l; i++) {
	                                feature[key].title[feature[key].type[i] + 'Chart']
	                                    = feature[key].title[feature[key].type[i]];
	                                if (feature[key].option) {
	                                    feature[key].option[feature[key].type[i] + 'Chart']
	                                        = feature[key].option[feature[key].type[i]];
	                                }
	                                iconName.push({ key: key, name: feature[key].type[i] + 'Chart' });
	                            }
	                            break;
	                        case 'dataZoom' :
	                            iconName.push({ key: key, name: 'dataZoom' });
	                            iconName.push({ key: key, name: 'dataZoomReset' });
	                            break;
	                        case 'saveAsImage' :
	                            if (this.canvasSupported) {
	                                iconName.push({ key: key, name: 'saveAsImage' });
	                            }
	                            break;
	                        default :
	                            iconName.push({ key: key, name: key });
	                            break;
	                    }
	                }
	            }
	            if (iconName.length > 0) {
	                var name;
	                var key;
	                for (var i = 0, l = iconName.length; i < l; i++) {
	                    name = iconName[i].name;
	                    key = iconName[i].key;
	                    this._iconList.push(name);
	                    this._featureTitle[name] = feature[key].title[name] || feature[key].title;
	                    if (feature[key].icon) {
	                        this._featureIcon[name] = feature[key].icon[name] || feature[key].icon;
	                    }
	                    if (feature[key].color) {
	                        this._featureColor[name] = feature[key].color[name] || feature[key].color;
	                    }
	                    if (feature[key].option) {
	                        this._featureOption[name] = feature[key].option[name] 
	                                                    || feature[key].option;
	                    }
	                }
	                this._itemGroupLocation = this._getItemGroupLocation();

	                this._buildBackground();
	                this._buildItem();

	                for (var i = 0, l = this.shapeList.length; i < l; i++) {
	                    this.zr.addShape(this.shapeList[i]);
	                }
	                if (this._iconShapeMap['mark']) {
	                    this._iconDisable(this._iconShapeMap['markUndo']);
	                    this._iconDisable(this._iconShapeMap['markClear']);
	                }
	                if (this._iconShapeMap['dataZoomReset'] && this._zoomQueue.length === 0) {
	                    this._iconDisable(this._iconShapeMap['dataZoomReset']);
	                }
	            }
	        },

	        /**
	         * 构建所有图例元素
	         */
	        _buildItem: function () {
	            var toolboxOption = this.option.toolbox;
	            var iconLength = this._iconList.length;
	            var lastX = this._itemGroupLocation.x;
	            var lastY = this._itemGroupLocation.y;
	            var itemSize = toolboxOption.itemSize;
	            var itemGap = toolboxOption.itemGap;
	            var itemShape;

	            var color = toolboxOption.color instanceof Array
	                        ? toolboxOption.color : [toolboxOption.color];
	            
	            var textFont = this.getFont(toolboxOption.textStyle);
	            var textPosition;
	            var textAlign;
	            var textBaseline;
	            if (toolboxOption.orient === 'horizontal') {
	                textPosition = this._itemGroupLocation.y / this.zr.getHeight() < 0.5
	                               ? 'bottom' : 'top';
	                textAlign = this._itemGroupLocation.x / this.zr.getWidth() < 0.5
	                            ? 'left' : 'right';
	                textBaseline = this._itemGroupLocation.y / this.zr.getHeight() < 0.5
	                               ? 'top' : 'bottom';
	            }
	            else {
	                textPosition = this._itemGroupLocation.x / this.zr.getWidth() < 0.5
	                               ? 'right' : 'left';
	            }
	            
	           this._iconShapeMap = {};
	           var self = this;

	            for (var i = 0; i < iconLength; i++) {
	                // 图形
	                itemShape = {
	                    type: 'icon',
	                    zlevel: this.getZlevelBase(),
	                    z: this.getZBase(),
	                    style: {
	                        x: lastX,
	                        y: lastY,
	                        width: itemSize,
	                        height: itemSize,
	                        iconType: this._iconList[i],
	                        lineWidth: 1,
	                        strokeColor: this._featureColor[this._iconList[i]] 
	                                     || color[i % color.length],
	                        brushType: 'stroke'
	                    },
	                    highlightStyle: {
	                        lineWidth: 1,
	                        text: toolboxOption.showTitle 
	                              ? this._featureTitle[this._iconList[i]]
	                              : undefined,
	                        textFont: textFont,
	                        textPosition: textPosition,
	                        strokeColor: this._featureColor[this._iconList[i]] 
	                                     || color[i % color.length]
	                    },
	                    hoverable: true,
	                    clickable: true
	                };
	                
	                if (this._featureIcon[this._iconList[i]]) {
	                    itemShape.style.image = this._featureIcon[this._iconList[i]].replace(
	                        new RegExp('^image:\\/\\/'), ''
	                    );
	                    itemShape.style.opacity = 0.8;
	                    itemShape.highlightStyle.opacity = 1;
	                    itemShape.type = 'image';
	                }
	                
	                if (toolboxOption.orient === 'horizontal') {
	                    // 修正左对齐第一个或右对齐最后一个
	                    if (i === 0 && textAlign === 'left') {
	                        itemShape.highlightStyle.textPosition = 'specific';
	                        itemShape.highlightStyle.textAlign = textAlign;
	                        itemShape.highlightStyle.textBaseline = textBaseline;
	                        itemShape.highlightStyle.textX = lastX;
	                        itemShape.highlightStyle.textY = textBaseline === 'top' 
	                                                     ? lastY + itemSize + 10
	                                                     : lastY - 10;
	                    }
	                    if (i === iconLength - 1 && textAlign === 'right') {
	                        itemShape.highlightStyle.textPosition = 'specific';
	                        itemShape.highlightStyle.textAlign = textAlign;
	                        itemShape.highlightStyle.textBaseline = textBaseline;
	                        itemShape.highlightStyle.textX = lastX + itemSize;
	                        itemShape.highlightStyle.textY = textBaseline === 'top' 
	                                                         ? lastY + itemSize + 10
	                                                         : lastY - 10;
	                    }
	                }
	                
	                switch(this._iconList[i]) {
	                    case 'mark':
	                        itemShape.onclick = self._onMark;
	                        break;
	                    case 'markUndo':
	                        itemShape.onclick = self._onMarkUndo;
	                        break;
	                    case 'markClear':
	                        itemShape.onclick = self._onMarkClear;
	                        break;
	                    case 'dataZoom':
	                        itemShape.onclick = self._onDataZoom;
	                        break;
	                    case 'dataZoomReset':
	                        itemShape.onclick = self._onDataZoomReset;
	                        break;
	                    case 'dataView' :
	                        if (!this._dataView) {
	                            var DataView = __webpack_require__(515);
	                            this._dataView = new DataView(
	                                this.ecTheme, this.messageCenter, this.zr, this.option, this.myChart
	                            );
	                        }
	                        itemShape.onclick = self._onDataView;
	                        break;
	                    case 'restore':
	                        itemShape.onclick = self._onRestore;
	                        break;
	                    case 'saveAsImage':
	                        itemShape.onclick = self._onSaveAsImage;
	                        break;
	                    default:
	                        if (this._iconList[i].match('Chart')) {
	                            itemShape._name = this._iconList[i].replace('Chart', '');
	                            itemShape.onclick = self._onMagicType;
	                        }
	                        else {
	                            itemShape.onclick = self._onCustomHandler;
	                        }
	                        break;
	                }

	                if (itemShape.type === 'icon') {
	                    itemShape = new IconShape(itemShape);
	                }
	                else if (itemShape.type === 'image') {
	                    itemShape = new ImageShape(itemShape);
	                }
	                this.shapeList.push(itemShape);
	                this._iconShapeMap[this._iconList[i]] = itemShape;

	                if (toolboxOption.orient === 'horizontal') {
	                    lastX += itemSize + itemGap;
	                }
	                else {
	                    lastY += itemSize + itemGap;
	                }
	            }
	        },

	        _buildBackground: function () {
	            var toolboxOption = this.option.toolbox;
	            var padding = this.reformCssArray(this.option.toolbox.padding);

	            this.shapeList.push(new RectangleShape({
	                zlevel: this.getZlevelBase(),
	                z: this.getZBase(),
	                hoverable :false,
	                style: {
	                    x: this._itemGroupLocation.x - padding[3],
	                    y: this._itemGroupLocation.y - padding[0],
	                    width: this._itemGroupLocation.width + padding[3] + padding[1],
	                    height: this._itemGroupLocation.height + padding[0] + padding[2],
	                    brushType: toolboxOption.borderWidth === 0 ? 'fill' : 'both',
	                    color: toolboxOption.backgroundColor,
	                    strokeColor: toolboxOption.borderColor,
	                    lineWidth: toolboxOption.borderWidth
	                }
	            }));
	        },

	        /**
	         * 根据选项计算图例实体的位置坐标
	         */
	        _getItemGroupLocation: function () {
	            var toolboxOption = this.option.toolbox;
	            var padding = this.reformCssArray(this.option.toolbox.padding);
	            var iconLength = this._iconList.length;
	            var itemGap = toolboxOption.itemGap;
	            var itemSize = toolboxOption.itemSize;
	            var totalWidth = 0;
	            var totalHeight = 0;

	            if (toolboxOption.orient === 'horizontal') {
	                // 水平布局，计算总宽度，别忘减去最后一个的itemGap
	                totalWidth = (itemSize + itemGap) * iconLength - itemGap;
	                totalHeight = itemSize;
	            }
	            else {
	                // 垂直布局，计算总高度
	                totalHeight = (itemSize + itemGap) * iconLength - itemGap;
	                totalWidth = itemSize;
	            }

	            var x;
	            var zrWidth = this.zr.getWidth();
	            switch (toolboxOption.x) {
	                case 'center' :
	                    x = Math.floor((zrWidth - totalWidth) / 2);
	                    break;
	                case 'left' :
	                    x = padding[3] + toolboxOption.borderWidth;
	                    break;
	                case 'right' :
	                    x = zrWidth
	                        - totalWidth
	                        - padding[1]
	                        - toolboxOption.borderWidth;
	                    break;
	                default :
	                    x = toolboxOption.x - 0;
	                    x = isNaN(x) ? 0 : x;
	                    break;
	            }

	            var y;
	            var zrHeight = this.zr.getHeight();
	            switch (toolboxOption.y) {
	                case 'top' :
	                    y = padding[0] + toolboxOption.borderWidth;
	                    break;
	                case 'bottom' :
	                    y = zrHeight
	                        - totalHeight
	                        - padding[2]
	                        - toolboxOption.borderWidth;
	                    break;
	                case 'center' :
	                    y = Math.floor((zrHeight - totalHeight) / 2);
	                    break;
	                default :
	                    y = toolboxOption.y - 0;
	                    y = isNaN(y) ? 0 : y;
	                    break;
	            }

	            return {
	                x: x,
	                y: y,
	                width: totalWidth,
	                height: totalHeight
	            };
	        },

	        __onmousemove: function (param) {
	            if (this._marking) {
	                this._markShape.style.xEnd = zrEvent.getX(param.event);
	                this._markShape.style.yEnd = zrEvent.getY(param.event);
	                this.zr.addHoverShape(this._markShape);
	            }
	            if (this._zooming) {
	                this._zoomShape.style.width = 
	                    zrEvent.getX(param.event) - this._zoomShape.style.x;
	                this._zoomShape.style.height = 
	                    zrEvent.getY(param.event) - this._zoomShape.style.y;
	                this.zr.addHoverShape(this._zoomShape);
	                this.dom.style.cursor = 'crosshair';
	                zrEvent.stop(param.event);
	            }
	            if (this._zoomStart
	                && (this.dom.style.cursor != 'pointer' && this.dom.style.cursor != 'move')
	            ) {
	                this.dom.style.cursor = 'crosshair';
	            }
	        },

	        __onmousedown: function (param) {
	            if (param.target) {
	                return;
	            }
	            this._zooming = true;
	            var x = zrEvent.getX(param.event);
	            var y = zrEvent.getY(param.event);
	            var zoomOption = this.option.dataZoom || {};
	            this._zoomShape = new RectangleShape({
	                zlevel: this.getZlevelBase(),
	                z: this.getZBase(),
	                style: {
	                    x: x,
	                    y: y,
	                    width: 1,
	                    height: 1,
	                    brushType: 'both'
	                },
	                highlightStyle: {
	                    lineWidth: 2,
	                    color: zoomOption.fillerColor 
	                           || ecConfig.dataZoom.fillerColor,
	                    strokeColor: zoomOption.handleColor 
	                                  || ecConfig.dataZoom.handleColor,
	                    brushType: 'both'
	                }
	            });
	            this.zr.addHoverShape(this._zoomShape);
	            return true; // 阻塞全局事件
	        },
	        
	        __onmouseup: function (/*param*/) {
	            if (!this._zoomShape 
	                || Math.abs(this._zoomShape.style.width) < 10 
	                || Math.abs(this._zoomShape.style.height) < 10
	            ) {
	                this._zooming = false;
	                return true;
	            }
	            if (this._zooming && this.component.dataZoom) {
	                this._zooming = false;
	                
	                var zoom = this.component.dataZoom.rectZoom(this._zoomShape.style);
	                if (zoom) {
	                    this._zoomQueue.push({
	                        start: zoom.start,
	                        end: zoom.end,
	                        start2: zoom.start2,
	                        end2: zoom.end2
	                    });
	                    this._iconEnable(this._iconShapeMap['dataZoomReset']);
	                    this.zr.refreshNextFrame();
	                }
	            }
	            return true; // 阻塞全局事件
	        },
	        
	        __onclick: function (param) {
	            if (param.target) {
	                return;
	            }
	            if (this._marking) {
	                this._marking = false;
	                this._markShapeList.push(this._markShape);
	                this._iconEnable(this._iconShapeMap['markUndo']);
	                this._iconEnable(this._iconShapeMap['markClear']);
	                this.zr.addShape(this._markShape);
	                this.zr.refreshNextFrame();
	            } 
	            else if (this._markStart) {
	                this._marking = true;
	                var x = zrEvent.getX(param.event);
	                var y = zrEvent.getY(param.event);
	                this._markShape = new LineShape({
	                    zlevel: this.getZlevelBase(),
	                    z: this.getZBase(),
	                    style: {
	                        xStart: x,
	                        yStart: y,
	                        xEnd: x,
	                        yEnd: y,
	                        lineWidth: this.query(
	                                       this.option,
	                                       'toolbox.feature.mark.lineStyle.width'
	                                   ),
	                        strokeColor: this.query(
	                                         this.option,
	                                         'toolbox.feature.mark.lineStyle.color'
	                                     ),
	                        lineType: this.query(
	                                      this.option,
	                                      'toolbox.feature.mark.lineStyle.type'
	                                  )
	                    }
	                });
	                this.zr.addHoverShape(this._markShape);
	            }
	        },
	        
	        __onMark: function (param) {
	            var target = param.target;
	            if (this._marking || this._markStart) {
	                // 取消
	                this._resetMark();
	                this.zr.refreshNextFrame();
	            }
	            else {
	                // 启用Mark
	                this._resetZoom();   // mark与dataZoom互斥
	                
	                this.zr.modShape(target.id, {style: {strokeColor: this._enableColor}});
	                this.zr.refreshNextFrame();
	                this._markStart = true;
	                var self = this;
	                setTimeout(function (){
	                    self.zr
	                    && self.zr.on(zrConfig.EVENT.CLICK, self._onclick)
	                    && self.zr.on(zrConfig.EVENT.MOUSEMOVE, self._onmousemove);
	                }, 10);
	            }
	            return true; // 阻塞全局事件
	        },
	        
	        __onMarkUndo: function () {
	            if (this._marking) {
	                this._marking = false;
	            } else {
	                var len = this._markShapeList.length;
	                if (len >= 1) {
	                    var target = this._markShapeList[len - 1];
	                    this.zr.delShape(target.id);
	                    this.zr.refreshNextFrame();
	                    this._markShapeList.pop();
	                    if (len === 1) {
	                        this._iconDisable(this._iconShapeMap['markUndo']);
	                        this._iconDisable(this._iconShapeMap['markClear']);
	                    }
	                }
	            }
	            return true;
	        },

	        __onMarkClear: function () {
	            if (this._marking) {
	                this._marking = false;
	            }
	            var len = this._markShapeList.length;
	            if (len > 0) {
	                while(len--) {
	                    this.zr.delShape(this._markShapeList.pop().id);
	                }
	                this._iconDisable(this._iconShapeMap['markUndo']);
	                this._iconDisable(this._iconShapeMap['markClear']);
	                this.zr.refreshNextFrame();
	            }
	            return true;
	        },
	        
	        __onDataZoom: function (param) {
	            var target = param.target;
	            if (this._zooming || this._zoomStart) {
	                // 取消
	                this._resetZoom();
	                this.zr.refreshNextFrame();
	                this.dom.style.cursor = 'default';
	            }
	            else {
	                // 启用Zoom
	                this._resetMark();   // mark与dataZoom互斥
	                
	                this.zr.modShape(target.id, {style: {strokeColor: this._enableColor}});
	                this.zr.refreshNextFrame();
	                this._zoomStart = true;
	                var self = this;
	                setTimeout(function (){
	                    self.zr
	                    && self.zr.on(zrConfig.EVENT.MOUSEDOWN, self._onmousedown)
	                    && self.zr.on(zrConfig.EVENT.MOUSEUP, self._onmouseup)
	                    && self.zr.on(zrConfig.EVENT.MOUSEMOVE, self._onmousemove);
	                }, 10);
	                
	                this.dom.style.cursor = 'crosshair';
	            }
	            return true; // 阻塞全局事件
	        },
	        
	        __onDataZoomReset: function () {
	            if (this._zooming) {
	                this._zooming = false;
	            }
	            this._zoomQueue.pop();
	            //console.log(this._zoomQueue)
	            if (this._zoomQueue.length > 0) {
	                this.component.dataZoom.absoluteZoom(
	                    this._zoomQueue[this._zoomQueue.length - 1]
	                );
	            }
	            else {
	                this.component.dataZoom.rectZoom();
	                this._iconDisable(this._iconShapeMap['dataZoomReset']);
	                this.zr.refreshNextFrame();
	            }
	            
	            return true;
	        },

	        _resetMark: function () {
	            this._marking = false;
	            if (this._markStart) {
	                this._markStart = false;
	                if (this._iconShapeMap['mark']) {
	                    // 还原图标为未生效状态
	                    this.zr.modShape(
	                        this._iconShapeMap['mark'].id,
	                        {
	                            style: {
	                                strokeColor: this._iconShapeMap['mark']
	                                                 .highlightStyle
	                                                 .strokeColor
	                            }
	                         }
	                    );
	                }
	                
	                this.zr.un(zrConfig.EVENT.CLICK, this._onclick);
	                this.zr.un(zrConfig.EVENT.MOUSEMOVE, this._onmousemove);
	            }
	        },
	        
	        _resetZoom: function () {
	            this._zooming = false;
	            if (this._zoomStart) {
	                this._zoomStart = false;
	                if (this._iconShapeMap['dataZoom']) {
	                    // 还原图标为未生效状态
	                    this.zr.modShape(
	                        this._iconShapeMap['dataZoom'].id,
	                        {
	                            style: {
	                                strokeColor: this._iconShapeMap['dataZoom']
	                                                 .highlightStyle
	                                                 .strokeColor
	                            }
	                         }
	                    );
	                }
	                
	                this.zr.un(zrConfig.EVENT.MOUSEDOWN, this._onmousedown);
	                this.zr.un(zrConfig.EVENT.MOUSEUP, this._onmouseup);
	                this.zr.un(zrConfig.EVENT.MOUSEMOVE, this._onmousemove);
	            }
	        },

	        _iconDisable: function (target) {
	            if (target.type != 'image') {
	                this.zr.modShape(target.id, {
	                    hoverable: false,
	                    clickable: false,
	                    style: {
	                        strokeColor: this._disableColor
	                    }
	                });
	            }
	            else {
	                this.zr.modShape(target.id, {
	                    hoverable: false,
	                    clickable: false,
	                    style: {
	                        opacity: 0.3
	                    }
	                });
	            }
	        },

	        _iconEnable: function (target) {
	            if (target.type != 'image') {
	                this.zr.modShape(target.id, {
	                    hoverable: true,
	                    clickable: true,
	                    style: {
	                        strokeColor: target.highlightStyle.strokeColor
	                    }
	                });
	            }
	            else {
	                this.zr.modShape(target.id, {
	                    hoverable: true,
	                    clickable: true,
	                    style: {
	                        opacity: 0.8
	                    }
	                });
	            }
	        },

	        __onDataView: function () {
	            this._dataView.show(this.option);
	            return true;
	        },

	        __onRestore: function (){
	            this._resetMark();
	            this._resetZoom();
	            this.messageCenter.dispatch(ecConfig.EVENT.RESTORE, null, null, this.myChart);
	            return true;
	        },
	        
	        __onSaveAsImage: function () {
	            var saveOption = this.option.toolbox.feature.saveAsImage;
	            var imgType = saveOption.type || 'png';
	            if (imgType != 'png' && imgType != 'jpeg') {
	                imgType = 'png';
	            }
	            
	            var image;
	            if (!this.myChart.isConnected()) {
	                image = this.zr.toDataURL(
	                    'image/' + imgType,
	                    this.option.backgroundColor 
	                    && this.option.backgroundColor.replace(' ','') === 'rgba(0,0,0,0)'
	                        ? '#fff' : this.option.backgroundColor
	                );
	            }
	            else {
	                image = this.myChart.getConnectedDataURL(imgType);
	            }
	             
	            var downloadDiv = document.createElement('div');
	            downloadDiv.id = '__echarts_download_wrap__';
	            downloadDiv.style.cssText = 'position:fixed;'
	                + 'z-index:99999;'
	                + 'display:block;'
	                + 'top:0;left:0;'
	                + 'background-color:rgba(33,33,33,0.5);'
	                + 'text-align:center;'
	                + 'width:100%;'
	                + 'height:100%;'
	                + 'line-height:' 
	                + document.documentElement.clientHeight + 'px;';
	                
	            var downloadLink = document.createElement('a');
	            //downloadLink.onclick = _saveImageForIE;
	            downloadLink.href = image;
	            downloadLink.setAttribute(
	                'download',
	                (saveOption.name 
	                 ? saveOption.name 
	                 : (this.option.title && (this.option.title.text || this.option.title.subtext))
	                   ? (this.option.title.text || this.option.title.subtext)
	                   : 'ECharts')
	                + '.' + imgType 
	            );
	            downloadLink.innerHTML = '<img style="vertical-align:middle" src="' + image 
	                + '" title="'
	                + ((!!window.ActiveXObject || 'ActiveXObject' in window)
	                  ? '右键->图片另存为'
	                  : (saveOption.lang ? saveOption.lang[0] : '点击保存'))
	                + '"/>';
	            
	            downloadDiv.appendChild(downloadLink);
	            document.body.appendChild(downloadDiv);
	            downloadLink = null;
	            downloadDiv = null;
	            
	            setTimeout(function (){
	                var _d = document.getElementById('__echarts_download_wrap__');
	                if (_d) {
	                    _d.onclick = function () {
	                        var d = document.getElementById(
	                            '__echarts_download_wrap__'
	                        );
	                        d.onclick = null;
	                        d.innerHTML = '';
	                        document.body.removeChild(d);
	                        d = null;
	                    };
	                    _d = null;
	                }
	            }, 500);
	            
	            /*
	            function _saveImageForIE() {
	                window.win = window.open(image);
	                win.document.execCommand("SaveAs");
	                win.close()
	            }
	            */
	            return;
	        },

	        __onMagicType: function (param) {
	            this._resetMark();
	            var itemName = param.target._name;
	            if (!this._magicType[itemName]) {
	                // 启用
	                this._magicType[itemName] = true;
	                // 折柱互斥
	                if (itemName === ecConfig.CHART_TYPE_LINE) {
	                    this._magicType[ecConfig.CHART_TYPE_BAR] = false;
	                }
	                else if (itemName === ecConfig.CHART_TYPE_BAR) {
	                    this._magicType[ecConfig.CHART_TYPE_LINE] = false;
	                }
	                // 饼图漏斗互斥
	                if (itemName === ecConfig.CHART_TYPE_PIE) {
	                    this._magicType[ecConfig.CHART_TYPE_FUNNEL] = false;
	                }
	                else if (itemName === ecConfig.CHART_TYPE_FUNNEL) {
	                    this._magicType[ecConfig.CHART_TYPE_PIE] = false;
	                }
	                // 力导和弦互斥
	                if (itemName === ecConfig.CHART_TYPE_FORCE) {
	                    this._magicType[ecConfig.CHART_TYPE_CHORD] = false;
	                }
	                else if (itemName === ecConfig.CHART_TYPE_CHORD) {
	                    this._magicType[ecConfig.CHART_TYPE_FORCE] = false;
	                }
	                // 堆积平铺互斥
	                if (itemName === _MAGICTYPE_STACK) {
	                    this._magicType[_MAGICTYPE_TILED] = false;
	                }
	                else if (itemName === _MAGICTYPE_TILED) {
	                    this._magicType[_MAGICTYPE_STACK] = false;
	                }
	                this.messageCenter.dispatch(
	                    ecConfig.EVENT.MAGIC_TYPE_CHANGED,
	                    param.event,
	                    { magicType: this._magicType },
	                    this.myChart
	                );
	            }
	            
	            return true;
	        },
	        
	        setMagicType: function (magicType) {
	            this._resetMark();
	            this._magicType = magicType;
	            
	            !this._isSilence && this.messageCenter.dispatch(
	                ecConfig.EVENT.MAGIC_TYPE_CHANGED,
	                null,
	                { magicType: this._magicType },
	                this.myChart
	            );
	        },
	        
	        // 用户自定义扩展toolbox方法
	        __onCustomHandler: function (param) {
	            var target = param.target.style.iconType;
	            var featureHandler = this.option.toolbox.feature[target].onclick;
	            if (typeof featureHandler === 'function') {
	                featureHandler.call(this, this.option);
	            }
	        },

	        // 重置备份还原状态等
	        reset: function (newOption, isRestore) {
	            isRestore && this.clear();
	            
	            if (this.query(newOption, 'toolbox.show')
	                && this.query(newOption, 'toolbox.feature.magicType.show')
	            ) {
	                var magicType = newOption.toolbox.feature.magicType.type;
	                var len = magicType.length;
	                this._magicMap = {};     // 标识可控类型
	                while (len--) {
	                    this._magicMap[magicType[len]] = true;
	                }

	                len = newOption.series.length;
	                var oriType;        // 备份还原可控类型
	                var axis;
	                while (len--) {
	                    oriType = newOption.series[len].type;
	                    if (this._magicMap[oriType]) {
	                        axis = newOption.xAxis instanceof Array
	                               ? newOption.xAxis[newOption.series[len].xAxisIndex || 0]
	                               : newOption.xAxis;
	                        if (axis && (axis.type || 'category') === 'category') {
	                            axis.__boundaryGap = axis.boundaryGap != null
	                                                 ? axis.boundaryGap : true;
	                        }
	                        axis = newOption.yAxis instanceof Array
	                               ? newOption.yAxis[newOption.series[len].yAxisIndex || 0]
	                               : newOption.yAxis;
	                        if (axis && axis.type === 'category') {
	                            axis.__boundaryGap = axis.boundaryGap != null
	                                                 ? axis.boundaryGap : true;
	                        }
	                        newOption.series[len].__type = oriType;
	                        // 避免不同类型图表类型的样式污染
	                        newOption.series[len].__itemStyle = zrUtil.clone(
	                            newOption.series[len].itemStyle || {}
	                        );
	                    }
	                    
	                    if (this._magicMap[_MAGICTYPE_STACK] || this._magicMap[_MAGICTYPE_TILED]) {
	                        newOption.series[len].__stack = newOption.series[len].stack;
	                    }
	                }
	            }
	            
	            this._magicType = isRestore ? {} : (this._magicType || {});
	            for (var itemName in this._magicType) {
	                if (this._magicType[itemName]) {
	                    this.option = newOption;
	                    this.getMagicOption();
	                    break;
	                }
	            }
	            
	            // 框选缩放
	            var zoomOption = newOption.dataZoom;
	            if (zoomOption && zoomOption.show) {
	                var start = zoomOption.start != null
	                            && zoomOption.start >= 0
	                            && zoomOption.start <= 100
	                            ? zoomOption.start : 0;
	                var end = zoomOption.end != null
	                          && zoomOption.end >= 0
	                          && zoomOption.end <= 100
	                          ? zoomOption.end : 100;
	                if (start > end) {
	                    // 大小颠倒自动翻转
	                    start = start + end;
	                    end = start - end;
	                    start = start - end;
	                }
	                this._zoomQueue = [{
	                    start: start,
	                    end: end,
	                    start2: 0,
	                    end2: 100
	                }];
	            }
	            else {
	                this._zoomQueue = [];
	            }
	        },
	        
	        getMagicOption: function (){
	            var axis;
	            var chartType;
	            if (this._magicType[ecConfig.CHART_TYPE_LINE] 
	                || this._magicType[ecConfig.CHART_TYPE_BAR]
	            ) {
	                // 图表类型有折柱切换
	                var boundaryGap = this._magicType[ecConfig.CHART_TYPE_LINE] ? false : true;
	                for (var i = 0, l = this.option.series.length; i < l; i++) {
	                    chartType = this.option.series[i].type;
	                    if (chartType == ecConfig.CHART_TYPE_LINE
	                        || chartType == ecConfig.CHART_TYPE_BAR
	                    ) {
	                        axis = this.option.xAxis instanceof Array
	                               ? this.option.xAxis[this.option.series[i].xAxisIndex || 0]
	                               : this.option.xAxis;
	                        if (axis && (axis.type || 'category') === 'category') {
	                            axis.boundaryGap = boundaryGap ? true : axis.__boundaryGap;
	                        }
	                        axis = this.option.yAxis instanceof Array
	                               ? this.option.yAxis[this.option.series[i].yAxisIndex || 0]
	                               : this.option.yAxis;
	                        if (axis && axis.type === 'category') {
	                            axis.boundaryGap = boundaryGap ? true : axis.__boundaryGap;
	                        }
	                    }
	                }
	                
	                this._defaultMagic(ecConfig.CHART_TYPE_LINE, ecConfig.CHART_TYPE_BAR);
	            }
	            this._defaultMagic(ecConfig.CHART_TYPE_CHORD, ecConfig.CHART_TYPE_FORCE);
	            this._defaultMagic(ecConfig.CHART_TYPE_PIE, ecConfig.CHART_TYPE_FUNNEL);
	            
	            if (this._magicType[_MAGICTYPE_STACK] || this._magicType[_MAGICTYPE_TILED]) {
	                // 有堆积平铺切换
	                for (var i = 0, l = this.option.series.length; i < l; i++) {
	                    if (this._magicType[_MAGICTYPE_STACK]) {
	                        // 启用堆积
	                        this.option.series[i].stack = '_ECHARTS_STACK_KENER_2014_';
	                        chartType = _MAGICTYPE_STACK;
	                    }
	                    else if (this._magicType[_MAGICTYPE_TILED]) {
	                        // 启用平铺
	                        this.option.series[i].stack = null;
	                        chartType = _MAGICTYPE_TILED;
	                    }
	                    if (this._featureOption[chartType + 'Chart']) {
	                        zrUtil.merge(
	                            this.option.series[i],
	                            this._featureOption[chartType + 'Chart'] || {},
	                            true
	                        );
	                    }
	                }
	            }
	            return this.option;
	        },
	        
	        _defaultMagic : function(cType1, cType2) {
	            if (this._magicType[cType1] || this._magicType[cType2]) {
	                for (var i = 0, l = this.option.series.length; i < l; i++) {
	                    var chartType = this.option.series[i].type;
	                    if (chartType == cType1 || chartType == cType2) {
	                        this.option.series[i].type = this._magicType[cType1] ? cType1 : cType2;
	                        // 避免不同类型图表类型的样式污染
	                        this.option.series[i].itemStyle = zrUtil.clone(
	                            this.option.series[i].__itemStyle
	                        );
	                        chartType = this.option.series[i].type;
	                        if (this._featureOption[chartType + 'Chart']) {
	                            zrUtil.merge(
	                                this.option.series[i],
	                                this._featureOption[chartType + 'Chart'] || {},
	                                true
	                            );
	                        }
	                    }
	                }
	            }
	        },

	        silence: function (s) {
	            this._isSilence = s;
	        },
	        
	        resize: function () {
	            this._resetMark();
	            this.clear();
	            if (this.option && this.option.toolbox && this.option.toolbox.show) {
	               this._buildShape();
	            }
	            if (this._dataView) {
	                this._dataView.resize();
	            }
	        },

	        hideDataView: function () {
	            if (this._dataView) {
	                this._dataView.hide();
	            }
	        },
	        
	        clear: function(notMark) {
	            if (this.zr) {
	                this.zr.delShape(this.shapeList);
	                this.shapeList = [];
	                
	                if (!notMark) {
	                    this.zr.delShape(this._markShapeList);
	                    this._markShapeList = [];
	                }
	            }
	        },
	        
	        /**
	         * 释放后实例不可用
	         */
	        onbeforDispose: function () {
	            if (this._dataView) {
	                this._dataView.dispose();
	                this._dataView = null;
	            }
	            this._markShapeList = null;
	        },
	        
	        /**
	         * 刷新
	         */
	        refresh: function (newOption) {
	            if (newOption) {
	                this._resetMark();
	                this._resetZoom();
	                
	                newOption.toolbox = this.reformOption(newOption.toolbox);
	                this.option = newOption;
	                
	                this.clear(true);
	    
	                if (newOption.toolbox.show) {
	                    this._buildShape();
	                }
	    
	                this.hideDataView();
	            }
	        }
	    };
	    
	    zrUtil.inherits(Toolbox, Base);
	    
	    __webpack_require__(516).define('toolbox', Toolbox);
	    
	    return Toolbox;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 515 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * echarts组件：提示框
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	    var Base = __webpack_require__(508);

	    var ecConfig = __webpack_require__(455);
	    var zrUtil = __webpack_require__(456);
	    
	    /**
	     * 构造函数
	     * @param {Object} messageCenter echart消息中心
	     * @param {ZRender} zr zrender实例
	     * @param {Object} option 提示框参数
	     * @param {HtmlElement} dom 目标对象
	     */
	    function DataView(ecTheme, messageCenter, zr, option, myChart) {
	        Base.call(this, ecTheme, messageCenter, zr, option, myChart);

	        this.dom = myChart.dom;
	        
	        // dataview dom & css
	        this._tDom = document.createElement('div');
	        this._textArea = document.createElement('textArea');
	        this._buttonRefresh = document.createElement('button');
	        // 高级浏览器默认type为submit
	        // 如果图表出现在form表单时，点击button后会提交表单
	        // 设置为button，防止点击button后提交表单
	        this._buttonRefresh.setAttribute('type', 'button');
	        this._buttonClose = document.createElement('button');
	        this._buttonClose.setAttribute('type', 'button');
	        this._hasShow = false;

	        // 缓存一些高宽数据
	        this._zrHeight = zr.getHeight();
	        this._zrWidth = zr.getWidth();
	    
	        this._tDom.className = 'echarts-dataview';
	        this.hide();
	        this.dom.firstChild.appendChild(this._tDom);

	        if (window.addEventListener) {
	            this._tDom.addEventListener('click', this._stop);
	            this._tDom.addEventListener('mousewheel', this._stop);
	            this._tDom.addEventListener('mousemove', this._stop);
	            this._tDom.addEventListener('mousedown', this._stop);
	            this._tDom.addEventListener('mouseup', this._stop);

	            // mobile支持
	            this._tDom.addEventListener('touchstart', this._stop);
	            this._tDom.addEventListener('touchmove', this._stop);
	            this._tDom.addEventListener('touchend', this._stop);
	        }
	        else {
	            this._tDom.attachEvent('onclick', this._stop);
	            this._tDom.attachEvent('onmousewheel', this._stop);
	            this._tDom.attachEvent('onmousemove', this._stop);
	            this._tDom.attachEvent('onmousedown', this._stop);
	            this._tDom.attachEvent('onmouseup', this._stop);
	        }
	    }
	    
	    DataView.prototype = {
	        type : ecConfig.COMPONENT_TYPE_DATAVIEW,
	        _lang : ['Data View', 'close', 'refresh'],
	        // 通用样式
	        _gCssText : 'position:absolute;'
	                    + 'display:block;'
	                    + 'overflow:hidden;'
	                    + 'transition:height 0.8s,background-color 1s;'
	                    + '-moz-transition:height 0.8s,background-color 1s;'
	                    + '-webkit-transition:height 0.8s,background-color 1s;'
	                    + '-o-transition:height 0.8s,background-color 1s;'
	                    + 'z-index:1;'
	                    + 'left:0;'
	                    + 'top:0;',
	        hide : function () {
	            this._sizeCssText = 'width:' + this._zrWidth + 'px;'
	                           + 'height:' + 0 + 'px;'
	                           + 'background-color:#f0ffff;';
	            this._tDom.style.cssText = this._gCssText + this._sizeCssText;
	            // 这是个很恶心的事情
	            /*
	            this.dom.onselectstart = function () {
	                return false;
	            };
	            */
	        },

	        show : function (newOption) {
	            this._hasShow = true;
	            var lang = this.query(this.option, 'toolbox.feature.dataView.lang')
	                       || this._lang;

	            this.option = newOption;

	            this._tDom.innerHTML = '<p style="padding:8px 0;margin:0 0 10px 0;'
	                              + 'border-bottom:1px solid #eee">'
	                              + (lang[0] || this._lang[0])
	                              + '</p>';

	            var customContent = this.query(
	                this.option, 'toolbox.feature.dataView.optionToContent'
	            );
	            if (typeof customContent != 'function') {
	                this._textArea.value = this._optionToContent();
	            }
	            else {
	                // innerHTML the custom optionToContent;
	                this._textArea = document.createElement('div');
	                this._textArea.innerHTML = customContent(this.option);
	            }

	            this._textArea.style.cssText =
	                'display:block;margin:0 0 8px 0;padding:4px 6px;overflow:auto;'
	                + 'width:100%;'
	                + 'height:' + (this._zrHeight - 100) + 'px;';

	            this._tDom.appendChild(this._textArea);

	            this._buttonClose.style.cssText = 'float:right;padding:1px 6px;';
	            this._buttonClose.innerHTML = lang[1] || this._lang[1];
	            var self = this;
	            this._buttonClose.onclick = function (){
	                self.hide();
	            };
	            this._tDom.appendChild(this._buttonClose);

	            if (this.query(this.option, 'toolbox.feature.dataView.readOnly')
	                === false
	            ) {
	                this._buttonRefresh.style.cssText =
	                    'float:right;margin-right:10px;padding:1px 6px;';
	                this._buttonRefresh.innerHTML = lang[2] || this._lang[2];
	                this._buttonRefresh.onclick = function (){
	                    self._save();
	                };
	                this._textArea.readOnly = false;
	                this._textArea.style.cursor = 'default';
	            }
	            else {
	                this._buttonRefresh.style.cssText =
	                    'display:none';
	                this._textArea.readOnly = true;
	                this._textArea.style.cursor = 'text';
	            }
	            this._tDom.appendChild(this._buttonRefresh);

	            this._sizeCssText = 'width:' + this._zrWidth + 'px;'
	                           + 'height:' + this._zrHeight + 'px;'
	                           + 'background-color:#fff;';
	            this._tDom.style.cssText = this._gCssText + this._sizeCssText;
	            // 这是个很恶心的事情
	            /*
	            this.dom.onselectstart = function () {
	                return true;
	            };
	            */
	        },

	        _optionToContent : function () {
	            var i;
	            var j;
	            var k;
	            var len;
	            var data;
	            var valueList;
	            var axisList = [];
	            var content = '';
	            if (this.option.xAxis) {
	                if (this.option.xAxis instanceof Array) {
	                    axisList = this.option.xAxis;
	                } else {
	                    axisList = [this.option.xAxis];
	                }
	                for (i = 0, len = axisList.length; i < len; i++) {
	                    // 横纵默认为类目
	                    if ((axisList[i].type || 'category') == 'category') {
	                        valueList = [];
	                        for (j = 0, k = axisList[i].data.length; j < k; j++) {
	                            valueList.push(this.getDataFromOption(axisList[i].data[j]));
	                        }
	                        content += valueList.join(', ') + '\n\n';
	                    }
	                }
	            }

	            if (this.option.yAxis) {
	                if (this.option.yAxis instanceof Array) {
	                    axisList = this.option.yAxis;
	                } else {
	                    axisList = [this.option.yAxis];
	                }
	                for (i = 0, len = axisList.length; i < len; i++) {
	                    if (axisList[i].type  == 'category') {
	                        valueList = [];
	                        for (j = 0, k = axisList[i].data.length; j < k; j++) {
	                            valueList.push(this.getDataFromOption(axisList[i].data[j]));
	                        }
	                        content += valueList.join(', ') + '\n\n';
	                    }
	                }
	            }

	            var series = this.option.series;
	            var itemName;
	            for (i = 0, len = series.length; i < len; i++) {
	                valueList = [];
	                for (j = 0, k = series[i].data.length; j < k; j++) {
	                    data = series[i].data[j];
	                    if (series[i].type == ecConfig.CHART_TYPE_PIE
	                        || series[i].type == ecConfig.CHART_TYPE_MAP
	                    ) {
	                        itemName = (data.name || '-') + ':';
	                    }
	                    else {
	                        itemName = '';
	                    }
	                    
	                    if (series[i].type == ecConfig.CHART_TYPE_SCATTER) {
	                        data = this.getDataFromOption(data).join(', ');
	                    }
	                    valueList.push(itemName + this.getDataFromOption(data));
	                }
	                content += (series[i].name || '-') + ' : \n';
	                content += valueList.join(
	                    series[i].type == ecConfig.CHART_TYPE_SCATTER ? '\n': ', '
	                );
	                content += '\n\n';
	            }

	            return content;
	        },

	        _save : function () {
	            var customContent = this.query(
	                this.option, 'toolbox.feature.dataView.contentToOption'
	            );
	            if (typeof customContent != 'function') {
	                var text = this._textArea.value.split('\n');
	                var content = [];
	                for (var i = 0, l = text.length; i < l; i++) {
	                    text[i] = this._trim(text[i]);
	                    if (text[i] !== '') {
	                        content.push(text[i]);
	                    }
	                }
	                this._contentToOption(content);
	            }
	            else {
	                // return the textArea dom for custom contentToOption
	                customContent(this._textArea, this.option);
	            }

	            this.hide();
	            
	            var self = this;
	            setTimeout(
	                function (){
	                    self.messageCenter && self.messageCenter.dispatch(
	                        ecConfig.EVENT.DATA_VIEW_CHANGED,
	                        null,
	                        {option : self.option},
	                        self.myChart
	                    );
	                },
	                // 有动画，所以高级浏览器时间更长点
	                self.canvasSupported ? 800 : 100
	            );
	        },

	        _contentToOption : function (content) {
	            var i;
	            var j;
	            var k;
	            var len;
	            var data;
	            var axisList = [];

	            var contentIdx = 0;
	            var contentValueList;
	            var value;

	            if (this.option.xAxis) {
	                if (this.option.xAxis instanceof Array) {
	                    axisList = this.option.xAxis;
	                } else {
	                    axisList = [this.option.xAxis];
	                }
	                for (i = 0, len = axisList.length; i < len; i++) {
	                    // 横纵默认为类目
	                    if ((axisList[i].type || 'category') == 'category'
	                    ) {
	                        contentValueList = content[contentIdx].split(',');
	                        for (j = 0, k = axisList[i].data.length; j < k; j++) {
	                            value = this._trim(contentValueList[j] || '');
	                            data = axisList[i].data[j];
	                            if (typeof axisList[i].data[j].value != 'undefined'
	                            ) {
	                                axisList[i].data[j].value = value;
	                            }
	                            else {
	                                axisList[i].data[j] = value;
	                            }
	                        }
	                        contentIdx++;
	                    }
	                }
	            }

	            if (this.option.yAxis) {
	                if (this.option.yAxis instanceof Array) {
	                    axisList = this.option.yAxis;
	                } else {
	                    axisList = [this.option.yAxis];
	                }
	                for (i = 0, len = axisList.length; i < len; i++) {
	                    if (axisList[i].type  == 'category') {
	                        contentValueList = content[contentIdx].split(',');
	                        for (j = 0, k = axisList[i].data.length; j < k; j++) {
	                            value = this._trim(contentValueList[j] || '');
	                            data = axisList[i].data[j];
	                            if (typeof axisList[i].data[j].value != 'undefined'
	                            ) {
	                                axisList[i].data[j].value = value;
	                            }
	                            else {
	                                axisList[i].data[j] = value;
	                            }
	                        }
	                        contentIdx++;
	                    }
	                }
	            }

	            var series = this.option.series;
	            for (i = 0, len = series.length; i < len; i++) {
	                contentIdx++;
	                if (series[i].type == ecConfig.CHART_TYPE_SCATTER) {
	                    for (var j = 0, k = series[i].data.length; j < k; j++) {
	                        contentValueList = content[contentIdx];
	                        value = contentValueList.replace(' ','').split(',');
	                        if (typeof series[i].data[j].value != 'undefined'
	                        ) {
	                            series[i].data[j].value = value;
	                        }
	                        else {
	                            series[i].data[j] = value;
	                        }
	                        contentIdx++;
	                    }
	                }
	                else {
	                    contentValueList = content[contentIdx].split(',');
	                    for (var j = 0, k = series[i].data.length; j < k; j++) {
	                        value = (contentValueList[j] || '').replace(/.*:/,'');
	                        value = this._trim(value);
	                        value = (value != '-' && value !== '')
	                                ? (value - 0)
	                                : '-';
	                        if (typeof series[i].data[j].value != 'undefined'
	                        ) {
	                            series[i].data[j].value = value;
	                        }
	                        else {
	                            series[i].data[j] = value;
	                        }
	                    }
	                    contentIdx++;
	                }
	            }
	        },

	        _trim : function (str){
	            var trimer = new RegExp(
	                '(^[\\s\\t\\xa0\\u3000]+)|([\\u3000\\xa0\\s\\t]+\x24)', 'g'
	            );
	            return str.replace(trimer, '');
	        },

	        // 阻塞zrender事件
	        _stop : function (e){
	            e = e || window.event;
	            if (e.stopPropagation) {
	                e.stopPropagation();
	            }
	            else {
	                e.cancelBubble = true;
	            }
	        },

	        /**
	         * zrender事件响应：窗口大小改变
	         */
	        resize : function () {
	            this._zrHeight = this.zr.getHeight();
	            this._zrWidth = this.zr.getWidth();
	            if (this._tDom.offsetHeight > 10) {
	                this._sizeCssText = 'width:' + this._zrWidth + 'px;'
	                               + 'height:' + this._zrHeight + 'px;'
	                               + 'background-color:#fff;';
	                this._tDom.style.cssText = this._gCssText + this._sizeCssText;
	                this._textArea.style.cssText = 'display:block;margin:0 0 8px 0;'
	                                        + 'padding:4px 6px;overflow:auto;'
	                                        + 'width:100%;'
	                                        + 'height:' + (this._zrHeight - 100) + 'px;';
	            }
	        },

	        /**
	         * 释放后实例不可用，重载基类方法
	         */
	        dispose : function () {
	            if (window.removeEventListener) {
	                this._tDom.removeEventListener('click', this._stop);
	                this._tDom.removeEventListener('mousewheel', this._stop);
	                this._tDom.removeEventListener('mousemove', this._stop);
	                this._tDom.removeEventListener('mousedown', this._stop);
	                this._tDom.removeEventListener('mouseup', this._stop);

	                // mobile支持
	                this._tDom.removeEventListener('touchstart', this._stop);
	                this._tDom.removeEventListener('touchmove', this._stop);
	                this._tDom.removeEventListener('touchend', this._stop);
	            }
	            else {
	                this._tDom.detachEvent('onclick', this._stop);
	                this._tDom.detachEvent('onmousewheel', this._stop);
	                this._tDom.detachEvent('onmousemove', this._stop);
	                this._tDom.detachEvent('onmousedown', this._stop);
	                this._tDom.detachEvent('onmouseup', this._stop);
	            }

	            this._buttonRefresh.onclick = null;
	            this._buttonClose.onclick = null;

	            if (this._hasShow) {
	                this._tDom.removeChild(this._textArea);
	                this._tDom.removeChild(this._buttonRefresh);
	                this._tDom.removeChild(this._buttonClose);
	            }

	            this._textArea = null;
	            this._buttonRefresh = null;
	            this._buttonClose = null;

	            this.dom.firstChild.removeChild(this._tDom);
	            this._tDom = null;
	        }
	    };
	    
	    zrUtil.inherits(DataView, Base);
	    
	    __webpack_require__(516).define('dataView', DataView);
	    
	    return DataView;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 516 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * echart组件库
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (/*require*/) {     // component
	    var self = {};

	    var _componentLibrary = {};     // echart组件库

	    /**
	     * 定义图形实现
	     * @param {Object} name
	     * @param {Object} clazz 图形实现
	     */
	    self.define = function (name, clazz) {
	        _componentLibrary[name] = clazz;
	        return self;
	    };

	    /**
	     * 获取图形实现
	     * @param {Object} name
	     */
	    self.get = function (name) {
	        return _componentLibrary[name];
	    };
	    
	    return self;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 517 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * echarts组件：图表标题
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	    var Base = __webpack_require__(508);
	    
	    // 图形依赖
	    var TextShape = __webpack_require__(470);
	    var RectangleShape = __webpack_require__(476);
	    
	    var ecConfig = __webpack_require__(455);
	    // 图表标题
	    ecConfig.title = {
	        zlevel: 0,                  // 一级层叠
	        z: 6,                       // 二级层叠
	        show: true,
	        text: '',
	        // link: null,             // 超链接跳转
	        // target: null,           // 仅支持self | blank
	        subtext: '',
	        // sublink: null,          // 超链接跳转
	        // subtarget: null,        // 仅支持self | blank
	        x: 'left',                 // 水平安放位置，默认为左对齐，可选为：
	                                   // 'center' ¦ 'left' ¦ 'right'
	                                   // ¦ {number}（x坐标，单位px）
	        y: 'top',                  // 垂直安放位置，默认为全图顶端，可选为：
	                                   // 'top' ¦ 'bottom' ¦ 'center'
	                                   // ¦ {number}（y坐标，单位px）
	        //textAlign: null          // 水平对齐方式，默认根据x设置自动调整
	        backgroundColor: 'rgba(0,0,0,0)',
	        borderColor: '#ccc',       // 标题边框颜色
	        borderWidth: 0,            // 标题边框线宽，单位px，默认为0（无边框）
	        padding: 5,                // 标题内边距，单位px，默认各方向内边距为5，
	                                   // 接受数组分别设定上右下左边距，同css
	        itemGap: 5,                // 主副标题纵向间隔，单位px，默认为10，
	        textStyle: {
	            fontSize: 18,
	            fontWeight: 'bolder',
	            color: '#333'          // 主标题文字颜色
	        },
	        subtextStyle: {
	            color: '#aaa'          // 副标题文字颜色
	        }
	    };
	    
	    var zrUtil = __webpack_require__(456);
	    var zrArea = __webpack_require__(471);
	    var zrColor = __webpack_require__(475);
	    
	    /**
	     * 构造函数
	     * @param {Object} messageCenter echart消息中心
	     * @param {ZRender} zr zrender实例
	     * @param {Object} option 图表参数
	     */
	    function Title(ecTheme, messageCenter, zr, option, myChart) {
	        Base.call(this, ecTheme, messageCenter, zr, option, myChart);
	        
	        this.refresh(option);
	    }
	    
	    Title.prototype = {
	        type: ecConfig.COMPONENT_TYPE_TITLE,
	        _buildShape: function () {
	            if (!this.titleOption.show) {
	                return;
	            }
	            // 标题元素组的位置参数，通过计算所得x, y, width, height
	            this._itemGroupLocation = this._getItemGroupLocation();

	            this._buildBackground();
	            this._buildItem();

	            for (var i = 0, l = this.shapeList.length; i < l; i++) {
	                this.zr.addShape(this.shapeList[i]);
	            }
	        },

	        /**
	         * 构建所有标题元素
	         */
	        _buildItem: function () {
	            var text = this.titleOption.text;
	            var link = this.titleOption.link;
	            var target = this.titleOption.target;
	            var subtext = this.titleOption.subtext;
	            var sublink = this.titleOption.sublink;
	            var subtarget = this.titleOption.subtarget;
	            var font = this.getFont(this.titleOption.textStyle);
	            var subfont = this.getFont(this.titleOption.subtextStyle);
	            
	            var x = this._itemGroupLocation.x;
	            var y = this._itemGroupLocation.y;
	            var width = this._itemGroupLocation.width;
	            var height = this._itemGroupLocation.height;
	            
	            var textShape = {
	                zlevel: this.getZlevelBase(),
	                z: this.getZBase(),
	                style: {
	                    y: y,
	                    color: this.titleOption.textStyle.color,
	                    text: text,
	                    textFont: font,
	                    textBaseline: 'top'
	                },
	                highlightStyle: {
	                    color: zrColor.lift(this.titleOption.textStyle.color, 1),
	                    brushType: 'fill'
	                },
	                hoverable: false
	            };
	            if (link) {
	                textShape.hoverable = true;
	                textShape.clickable = true;
	                textShape.onclick = function (){
	                    if (!target || target != 'self') {
	                        window.open(link);
	                    }
	                    else {
	                        window.location = link;
	                    }
	                };
	            }
	            
	            var subtextShape = {
	                zlevel: this.getZlevelBase(),
	                z: this.getZBase(),
	                style: {
	                    y: y + height,
	                    color: this.titleOption.subtextStyle.color,
	                    text: subtext,
	                    textFont: subfont,
	                    textBaseline: 'bottom'
	                },
	                highlightStyle: {
	                    color: zrColor.lift(this.titleOption.subtextStyle.color, 1),
	                    brushType: 'fill'
	                },
	                hoverable: false
	            };
	            if (sublink) {
	                subtextShape.hoverable = true;
	                subtextShape.clickable = true;
	                subtextShape.onclick = function (){
	                    if (!subtarget || subtarget != 'self') {
	                        window.open(sublink);
	                    }
	                    else {
	                        window.location = sublink;
	                    }
	                };
	            }

	            switch (this.titleOption.x) {
	                case 'center' :
	                    textShape.style.x = subtextShape.style.x = x + width / 2;
	                    textShape.style.textAlign = subtextShape.style.textAlign 
	                                              = 'center';
	                    break;
	                case 'left' :
	                    textShape.style.x = subtextShape.style.x = x;
	                    textShape.style.textAlign = subtextShape.style.textAlign 
	                                              = 'left';
	                    break;
	                case 'right' :
	                    textShape.style.x = subtextShape.style.x = x + width;
	                    textShape.style.textAlign = subtextShape.style.textAlign 
	                                              = 'right';
	                    break;
	                default :
	                    x = this.titleOption.x - 0;
	                    x = isNaN(x) ? 0 : x;
	                    textShape.style.x = subtextShape.style.x = x;
	                    break;
	            }
	            
	            if (this.titleOption.textAlign) {
	                textShape.style.textAlign = subtextShape.style.textAlign 
	                                          = this.titleOption.textAlign;
	            }

	            this.shapeList.push(new TextShape(textShape));
	            subtext !== '' && this.shapeList.push(new TextShape(subtextShape));
	        },

	        _buildBackground: function () {
	            var padding = this.reformCssArray(this.titleOption.padding);

	            this.shapeList.push(new RectangleShape({
	                zlevel: this.getZlevelBase(),
	                z: this.getZBase(),
	                hoverable :false,
	                style: {
	                    x: this._itemGroupLocation.x - padding[3],
	                    y: this._itemGroupLocation.y - padding[0],
	                    width: this._itemGroupLocation.width + padding[3] + padding[1],
	                    height: this._itemGroupLocation.height + padding[0] + padding[2],
	                    brushType: this.titleOption.borderWidth === 0 ? 'fill' : 'both',
	                    color: this.titleOption.backgroundColor,
	                    strokeColor: this.titleOption.borderColor,
	                    lineWidth: this.titleOption.borderWidth
	                }
	            }));
	        },

	        /**
	         * 根据选项计算标题实体的位置坐标
	         */
	        _getItemGroupLocation: function () {
	            var padding = this.reformCssArray(this.titleOption.padding);
	            var text = this.titleOption.text;
	            var subtext = this.titleOption.subtext;
	            var font = this.getFont(this.titleOption.textStyle);
	            var subfont = this.getFont(this.titleOption.subtextStyle);
	            
	            var totalWidth = Math.max(
	                    zrArea.getTextWidth(text, font),
	                    zrArea.getTextWidth(subtext, subfont)
	                );
	            var totalHeight = zrArea.getTextHeight(text, font)
	                              + (subtext === ''
	                                 ? 0
	                                 : (this.titleOption.itemGap
	                                    + zrArea.getTextHeight(subtext, subfont))
	                                );

	            var x;
	            var zrWidth = this.zr.getWidth();
	            switch (this.titleOption.x) {
	                case 'center' :
	                    x = Math.floor((zrWidth - totalWidth) / 2);
	                    break;
	                case 'left' :
	                    x = padding[3] + this.titleOption.borderWidth;
	                    break;
	                case 'right' :
	                    x = zrWidth
	                        - totalWidth
	                        - padding[1]
	                        - this.titleOption.borderWidth;
	                    break;
	                default :
	                    x = this.titleOption.x - 0;
	                    x = isNaN(x) ? 0 : x;
	                    break;
	            }

	            var y;
	            var zrHeight = this.zr.getHeight();
	            switch (this.titleOption.y) {
	                case 'top' :
	                    y = padding[0] + this.titleOption.borderWidth;
	                    break;
	                case 'bottom' :
	                    y = zrHeight
	                        - totalHeight
	                        - padding[2]
	                        - this.titleOption.borderWidth;
	                    break;
	                case 'center' :
	                    y = Math.floor((zrHeight - totalHeight) / 2);
	                    break;
	                default :
	                    y = this.titleOption.y - 0;
	                    y = isNaN(y) ? 0 : y;
	                    break;
	            }

	            return {
	                x: x,
	                y: y,
	                width: totalWidth,
	                height: totalHeight
	            };
	        },
	        
	        /**
	         * 刷新
	         */
	        refresh: function (newOption) {
	            if (newOption) {
	                this.option = newOption;

	                this.option.title = this.reformOption(this.option.title);
	                this.titleOption = this.option.title;
	                this.titleOption.textStyle = this.getTextStyle(
	                    this.titleOption.textStyle
	                );
	                this.titleOption.subtextStyle = this.getTextStyle(
	                    this.titleOption.subtextStyle
	                );
	            }
	            
	            this.clear();
	            this._buildShape();
	        }
	    };
	    
	    zrUtil.inherits(Title, Base);
	    
	    __webpack_require__(516).define('title', Title);
	    
	    return Title;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));




/***/ },
/* 518 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * echarts组件：提示框
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	    var Base = __webpack_require__(508);
	    
	    // 图形依赖
	    var CrossShape = __webpack_require__(519);
	    var LineShape = __webpack_require__(493);
	    var RectangleShape = __webpack_require__(476);
	    var rectangleInstance = new RectangleShape({});
	    
	    var ecConfig = __webpack_require__(455);
	    // 提示框
	    ecConfig.tooltip = {
	        zlevel: 1,                  // 一级层叠，频繁变化的tooltip指示器在pc上独立一层
	        z: 8,                       // 二级层叠
	        show: true,
	        showContent: true,         // tooltip主体内容
	        trigger: 'item',           // 触发类型，默认数据触发，见下图，可选为：'item' ¦ 'axis'
	        // position: null          // 位置 {Array} | {Function}
	        // formatter: null         // 内容格式器：{string}（Template） ¦ {Function}
	        islandFormatter: '{a} <br/>{b} : {c}',  // 数据孤岛内容格式器
	        showDelay: 20,             // 显示延迟，添加显示延迟可以避免频繁切换，单位ms
	        hideDelay: 100,            // 隐藏延迟，单位ms
	        transitionDuration: 0.4,   // 动画变换时间，单位s
	        enterable: false,
	        backgroundColor: 'rgba(0,0,0,0.7)',     // 提示背景颜色，默认为透明度为0.7的黑色
	        borderColor: '#333',       // 提示边框颜色
	        borderRadius: 4,           // 提示边框圆角，单位px，默认为4
	        borderWidth: 0,            // 提示边框线宽，单位px，默认为0（无边框）
	        padding: 5,                // 提示内边距，单位px，默认各方向内边距为5，
	                                   // 接受数组分别设定上右下左边距，同css
	        axisPointer: {             // 坐标轴指示器，坐标轴触发有效
	            type: 'line',          // 默认为直线，可选为：'line' | 'shadow' | 'cross'
	            lineStyle: {           // 直线指示器样式设置
	                color: '#48b',
	                width: 2,
	                type: 'solid'
	            },
	            crossStyle: {
	                color: '#1e90ff',
	                width: 1,
	                type: 'dashed'
	            },
	            shadowStyle: {                      // 阴影指示器样式设置
	                color: 'rgba(150,150,150,0.3)', // 阴影颜色
	                width: 'auto',                  // 阴影大小
	                type: 'default'
	            }
	        },
	        textStyle: {
	            color: '#fff'
	        }
	    };

	    var ecData = __webpack_require__(503);
	    var zrConfig = __webpack_require__(463);
	    var zrEvent = __webpack_require__(458);
	    var zrArea = __webpack_require__(471);
	    var zrColor = __webpack_require__(475);
	    var zrUtil = __webpack_require__(456);
	    var zrShapeBase = __webpack_require__(473);

	    /**
	     * 构造函数
	     * @param {Object} messageCenter echart消息中心
	     * @param {ZRender} zr zrender实例
	     * @param {Object} option 提示框参数
	     * @param {HtmlElement} dom 目标对象
	     * @param {ECharts} myChart 当前图表实例
	     */
	    function Tooltip(ecTheme, messageCenter, zr, option, myChart) {
	        Base.call(this, ecTheme, messageCenter, zr, option, myChart);
	        
	        this.dom = myChart.dom;
	        
	        var self = this;
	        self._onmousemove = function (param) {
	            return self.__onmousemove(param);
	        };
	        self._onglobalout = function (param) {
	            return self.__onglobalout(param);
	        };
	        
	        this.zr.on(zrConfig.EVENT.MOUSEMOVE, self._onmousemove);
	        this.zr.on(zrConfig.EVENT.GLOBALOUT, self._onglobalout);

	        self._hide = function (param) {
	            return self.__hide(param);
	        };
	        self._tryShow = function(param) {
	            return self.__tryShow(param);
	        };
	        self._refixed = function(param) {
	            return self.__refixed(param);
	        };
	        
	        self._setContent = function(ticket, res) {
	            return self.__setContent(ticket, res);
	        };
	        
	        this._tDom = this._tDom || document.createElement('div');
	        // 避免拖拽时页面选中的尴尬
	        this._tDom.onselectstart = function() {
	            return false;
	        };
	        this._tDom.onmouseover = function() {
	            self._mousein = true;
	        };
	        this._tDom.onmouseout = function() {
	            self._mousein = false;
	        };
	        this._tDom.className = 'echarts-tooltip';
	        this._tDom.style.position = 'absolute';  // 不是多余的，别删！
	        this.hasAppend = false;
	        
	        this._axisLineShape && this.zr.delShape(this._axisLineShape.id);
	        this._axisLineShape = new LineShape({
	            zlevel: this.getZlevelBase(),
	            z: this.getZBase(),
	            invisible: true,
	            hoverable: false
	        });
	        this.shapeList.push(this._axisLineShape);
	        this.zr.addShape(this._axisLineShape);
	        
	        this._axisShadowShape && this.zr.delShape(this._axisShadowShape.id);
	        this._axisShadowShape = new LineShape({
	            zlevel: this.getZlevelBase(),
	            z: 1,                      // grid上，chart下
	            invisible: true,
	            hoverable: false
	        });
	        this.shapeList.push(this._axisShadowShape);
	        this.zr.addShape(this._axisShadowShape);
	        
	        this._axisCrossShape && this.zr.delShape(this._axisCrossShape.id);
	        this._axisCrossShape = new CrossShape({
	            zlevel: this.getZlevelBase(),
	            z: this.getZBase(),
	            invisible: true,
	            hoverable: false
	        });
	        this.shapeList.push(this._axisCrossShape);
	        this.zr.addShape(this._axisCrossShape);
	        
	        this.showing = false;
	        this.refresh(option);
	    }
	    
	    Tooltip.prototype = {
	        type: ecConfig.COMPONENT_TYPE_TOOLTIP,
	        // 通用样式
	        _gCssText: 'position:absolute;display:block;border-style:solid;white-space:nowrap;',
	        /**
	         * 根据配置设置dom样式
	         */
	        _style: function (opt) {
	            if (!opt) {
	                return '';
	            }
	            var cssText = [];
	            if (opt.transitionDuration) {
	                var transitionText = 'left ' + opt.transitionDuration + 's,'
	                                    + 'top ' + opt.transitionDuration + 's';
	                cssText.push(
	                    'transition:' + transitionText
	                );
	                cssText.push(
	                    '-moz-transition:' + transitionText
	                );
	                cssText.push(
	                    '-webkit-transition:' + transitionText
	                );
	                cssText.push(
	                    '-o-transition:' + transitionText
	                );
	            }

	            if (opt.backgroundColor) {
	                // for sb ie~
	                cssText.push(
	                    'background-Color:' + zrColor.toHex(
	                        opt.backgroundColor
	                    )
	                );
	                cssText.push('filter:alpha(opacity=70)');
	                cssText.push('background-Color:' + opt.backgroundColor);
	            }

	            if (opt.borderWidth != null) {
	                cssText.push('border-width:' + opt.borderWidth + 'px');
	            }

	            if (opt.borderColor != null) {
	                cssText.push('border-color:' + opt.borderColor);
	            }

	            if (opt.borderRadius != null) {
	                cssText.push(
	                    'border-radius:' + opt.borderRadius + 'px'
	                );
	                cssText.push(
	                    '-moz-border-radius:' + opt.borderRadius + 'px'
	                );
	                cssText.push(
	                    '-webkit-border-radius:' + opt.borderRadius + 'px'
	                );
	                cssText.push(
	                    '-o-border-radius:' + opt.borderRadius + 'px'
	                );
	            }

	            var textStyle = opt.textStyle;
	            if (textStyle) {
	                textStyle.color && cssText.push('color:' + textStyle.color);
	                textStyle.decoration && cssText.push(
	                    'text-decoration:' + textStyle.decoration
	                );
	                textStyle.align && cssText.push(
	                    'text-align:' + textStyle.align
	                );
	                textStyle.fontFamily && cssText.push(
	                    'font-family:' + textStyle.fontFamily
	                );
	                textStyle.fontSize && cssText.push(
	                    'font-size:' + textStyle.fontSize + 'px'
	                );
	                textStyle.fontSize && cssText.push(
	                    'line-height:' + Math.round(textStyle.fontSize*3/2) + 'px'
	                );
	                textStyle.fontStyle && cssText.push(
	                    'font-style:' + textStyle.fontStyle
	                );
	                textStyle.fontWeight && cssText.push(
	                    'font-weight:' + textStyle.fontWeight
	                );
	            }


	            var padding = opt.padding;
	            if (padding != null) {
	                padding = this.reformCssArray(padding);
	                cssText.push(
	                    'padding:' + padding[0] + 'px '
	                               + padding[1] + 'px '
	                               + padding[2] + 'px '
	                               + padding[3] + 'px'
	                );
	            }

	            cssText = cssText.join(';') + ';';

	            return cssText;
	        },
	        
	        __hide: function () {
	            this._lastDataIndex = -1;
	            this._lastSeriesIndex = -1;
	            this._lastItemTriggerId = -1;
	            if (this._tDom) {
	                this._tDom.style.display = 'none';
	            }
	            var needRefresh = false;
	            if (!this._axisLineShape.invisible) {
	                this._axisLineShape.invisible = true;
	                this.zr.modShape(this._axisLineShape.id);
	                needRefresh = true;
	            }
	            if (!this._axisShadowShape.invisible) {
	                this._axisShadowShape.invisible = true;
	                this.zr.modShape(this._axisShadowShape.id);
	                needRefresh = true;
	            }
	            if (!this._axisCrossShape.invisible) {
	                this._axisCrossShape.invisible = true;
	                this.zr.modShape(this._axisCrossShape.id);
	                needRefresh = true;
	            }
	            if (this._lastTipShape && this._lastTipShape.tipShape.length > 0) {
	                this.zr.delShape(this._lastTipShape.tipShape);
	                this._lastTipShape = false;
	                this.shapeList.length = 2;
	            }
	            needRefresh && this.zr.refreshNextFrame();
	            this.showing = false;
	        },
	        
	        _show: function (position, x, y, specialCssText) {
	            var domHeight = this._tDom.offsetHeight;
	            var domWidth = this._tDom.offsetWidth;
	            if (position) {
	                if (typeof position === 'function') {
	                    position = position([x, y]);
	                }
	                if (position instanceof Array) {
	                    x = position[0];
	                    y = position[1];
	                }
	            }
	            if (x + domWidth > this._zrWidth) {
	                // 太靠右
	                //x = this._zrWidth - domWidth;
	                x -= (domWidth + 40);
	            }
	            if (y + domHeight > this._zrHeight) {
	                // 太靠下
	                //y = this._zrHeight - domHeight;
	                y -= (domHeight - 20);
	            }
	            if (y < 20) {
	                y = 0;
	            }
	            this._tDom.style.cssText = this._gCssText
	                                  + this._defaultCssText
	                                  + (specialCssText ? specialCssText : '')
	                                  + 'left:' + x + 'px;top:' + y + 'px;';
	            
	            if (domHeight < 10 || domWidth < 10) {
	                // this._zrWidth - x < 100 || this._zrHeight - y < 100
	                setTimeout(this._refixed, 20);
	            }
	            this.showing = true;
	        },
	        
	        __refixed: function () {
	            if (this._tDom) {
	                var cssText = '';
	                var domHeight = this._tDom.offsetHeight;
	                var domWidth = this._tDom.offsetWidth;
	                if (this._tDom.offsetLeft + domWidth > this._zrWidth) {
	                    cssText += 'left:' + (this._zrWidth - domWidth - 20) + 'px;';
	                }
	                if (this._tDom.offsetTop + domHeight > this._zrHeight) {
	                    cssText += 'top:' + (this._zrHeight - domHeight - 10) + 'px;';
	                }
	                if (cssText !== '') {
	                    this._tDom.style.cssText += cssText;
	                }
	            }
	        },
	        
	        __tryShow: function () {
	            var needShow;
	            var trigger;
	            if (!this._curTarget) {
	                // 坐标轴事件
	                this._findPolarTrigger() || this._findAxisTrigger();
	            }
	            else {
	                // 数据项事件
	                if (this._curTarget._type === 'island' && this.option.tooltip.show) {
	                    this._showItemTrigger();
	                    return;
	                }
	                var serie = ecData.get(this._curTarget, 'series');
	                var data = ecData.get(this._curTarget, 'data');
	                needShow = this.deepQuery(
	                    [data, serie, this.option],
	                    'tooltip.show'
	                );
	                if (serie == null || data == null || !needShow) {
	                    // 不响应tooltip的数据对象延时隐藏
	                    clearTimeout(this._hidingTicket);
	                    clearTimeout(this._showingTicket);
	                    this._hidingTicket = setTimeout(this._hide, this._hideDelay);
	                }
	                else {
	                    trigger = this.deepQuery(
	                        [data, serie, this.option],
	                        'tooltip.trigger'
	                    );
	                    
	                    trigger === 'axis'
	                                ? this._showAxisTrigger(
	                                      serie.xAxisIndex, serie.yAxisIndex,
	                                      ecData.get(this._curTarget, 'dataIndex')
	                                  )
	                                : this._showItemTrigger();
	                }
	            }
	        },

	        /**
	         * 直角系 
	         */
	        _findAxisTrigger: function () {
	            if (!this.component.xAxis || !this.component.yAxis) {
	                this._hidingTicket = setTimeout(this._hide, this._hideDelay);
	                return;
	            }
	            var series = this.option.series;
	            var xAxisIndex;
	            var yAxisIndex;
	            for (var i = 0, l = series.length; i < l; i++) {
	                // 找到第一个axis触发tooltip的系列
	                if (this.deepQuery([series[i], this.option], 'tooltip.trigger') === 'axis') {
	                    xAxisIndex = series[i].xAxisIndex || 0;
	                    yAxisIndex = series[i].yAxisIndex || 0;
	                    if (this.component.xAxis.getAxis(xAxisIndex)
	                        && this.component.xAxis.getAxis(xAxisIndex).type
	                           === ecConfig.COMPONENT_TYPE_AXIS_CATEGORY
	                    ) {
	                        // 横轴为类目轴
	                        this._showAxisTrigger(xAxisIndex, yAxisIndex,
	                            this._getNearestDataIndex(
	                                'x', this.component.xAxis.getAxis(xAxisIndex)
	                            )
	                        );
	                        return;
	                    } 
	                    else if (this.component.yAxis.getAxis(yAxisIndex)
	                             && this.component.yAxis.getAxis(yAxisIndex).type
	                                === ecConfig.COMPONENT_TYPE_AXIS_CATEGORY
	                    ) {
	                        // 纵轴为类目轴
	                        this._showAxisTrigger(xAxisIndex, yAxisIndex,
	                            this._getNearestDataIndex(
	                                'y', this.component.yAxis.getAxis(yAxisIndex)
	                            )
	                        );
	                        return;
	                    }
	                    else {
	                        // 双数值轴
	                        this._showAxisTrigger(xAxisIndex, yAxisIndex, -1);
	                        return;
	                    }
	                }
	            }
	            if (this.option.tooltip.axisPointer.type === 'cross') {
	                this._showAxisTrigger(-1, -1, -1);
	            }
	        },
	        
	        /**
	         * 极坐标 
	         */
	        _findPolarTrigger: function () {
	            if (!this.component.polar) {
	                return false;
	            }
	            var x = zrEvent.getX(this._event);
	            var y = zrEvent.getY(this._event);
	            var polarIndex = this.component.polar.getNearestIndex([x, y]);
	            var valueIndex;
	            if (polarIndex) {
	                valueIndex = polarIndex.valueIndex;
	                polarIndex = polarIndex.polarIndex;
	            }
	            else {
	                polarIndex = -1;
	            }
	            
	            if (polarIndex != -1) {
	                return this._showPolarTrigger(polarIndex, valueIndex);
	            }
	            
	            return false;
	        },
	        
	        /**
	         * 根据坐标轴事件带的属性获取最近的axisDataIndex
	         */
	        _getNearestDataIndex: function (direction, categoryAxis) {
	            var dataIndex = -1;
	            var x = zrEvent.getX(this._event);
	            var y = zrEvent.getY(this._event);
	            if (direction === 'x') {
	                // 横轴为类目轴
	                var left;
	                var right;
	                var xEnd = this.component.grid.getXend();
	                var curCoord = categoryAxis.getCoordByIndex(dataIndex);
	                while (curCoord < xEnd) {
	                    right = curCoord;
	                    if (curCoord <= x) {
	                        left = curCoord;
	                    }
	                    else {
	                        break;
	                    }
	                    curCoord = categoryAxis.getCoordByIndex(++dataIndex);
	                }
	                if (dataIndex <= 0) {
	                    dataIndex = 0;
	                }
	                else if (x - left <= right - x) {
	                    dataIndex -= 1;
	                }
	                else {
	                    // 离右边近，看是否为最后一个
	                    if (categoryAxis.getNameByIndex(dataIndex) == null) {
	                        dataIndex -= 1;
	                    }
	                }
	                return dataIndex;
	            }
	            else {
	                // 纵轴为类目轴
	                var top;
	                var bottom;
	                var yStart = this.component.grid.getY();
	                var curCoord = categoryAxis.getCoordByIndex(dataIndex);
	                while (curCoord > yStart) {
	                    top = curCoord;
	                    if (curCoord >= y) {
	                        bottom = curCoord;
	                    }
	                    else {
	                        break;
	                    }
	                    curCoord = categoryAxis.getCoordByIndex(++dataIndex);
	                }

	                if (dataIndex <= 0) {
	                    dataIndex = 0;
	                }
	                else if (y - top >= bottom - y) {
	                    dataIndex -= 1;
	                }
	                else {
	                    // 离上方边近，看是否为最后一个
	                    if (categoryAxis.getNameByIndex(dataIndex) == null) {
	                        dataIndex -= 1;
	                    }
	                }
	                return dataIndex;
	            }
	            return -1;
	        },

	        /**
	         * 直角系 
	         */
	        _showAxisTrigger: function (xAxisIndex, yAxisIndex, dataIndex) {
	            !this._event.connectTrigger && this.messageCenter.dispatch(
	                ecConfig.EVENT.TOOLTIP_IN_GRID,
	                this._event,
	                null,
	                this.myChart
	            );
	            if (this.component.xAxis == null
	                || this.component.yAxis == null
	                || xAxisIndex == null
	                || yAxisIndex == null
	                // || dataIndex < 0
	            ) {
	                // 不响应tooltip的数据对象延时隐藏
	                clearTimeout(this._hidingTicket);
	                clearTimeout(this._showingTicket);
	                this._hidingTicket = setTimeout(this._hide, this._hideDelay);
	                return;
	            }
	            var series = this.option.series;
	            var seriesArray = [];
	            var seriesIndex = [];
	            var categoryAxis;

	            var formatter;
	            var position;
	            var showContent;
	            var specialCssText = '';
	            if (this.option.tooltip.trigger === 'axis') {
	                if (!this.option.tooltip.show) {
	                    return;
	                }
	                formatter = this.option.tooltip.formatter;
	                position = this.option.tooltip.position;
	            }

	            var axisLayout = xAxisIndex != -1
	                             && this.component.xAxis.getAxis(xAxisIndex).type
	                                === ecConfig.COMPONENT_TYPE_AXIS_CATEGORY
	                             ? 'xAxis'      // 横轴为类目轴，找到所有用这条横轴并且axis触发的系列数据
	                             : yAxisIndex != -1
	                               && this.component.yAxis.getAxis(yAxisIndex).type
	                                  === ecConfig.COMPONENT_TYPE_AXIS_CATEGORY
	                               ? 'yAxis'    // 纵轴为类目轴，找到所有用这条纵轴并且axis触发的系列数据
	                               : false;
	            var x;
	            var y;
	            if (axisLayout) {
	                var axisIndex = axisLayout == 'xAxis' ? xAxisIndex : yAxisIndex;
	                categoryAxis = this.component[axisLayout].getAxis(axisIndex);
	                for (var i = 0, l = series.length; i < l; i++) {
	                    if (!this._isSelected(series[i].name)) {
	                        continue;
	                    }
	                    if (series[i][axisLayout + 'Index'] === axisIndex
	                        && this.deepQuery([series[i], this.option], 'tooltip.trigger') === 'axis'
	                    ) {
	                        showContent = this.query(series[i], 'tooltip.showContent') 
	                                      || showContent;
	                        formatter = this.query(series[i], 'tooltip.formatter') 
	                                    || formatter;
	                        position = this.query(series[i], 'tooltip.position') 
	                                   || position;
	                        
	                        specialCssText += this._style(this.query(series[i], 'tooltip'));
	                        if (series[i].stack != null && axisLayout == 'xAxis') {
	                            seriesArray.unshift(series[i]);
	                            seriesIndex.unshift(i);
	                        }
	                        else {
	                            seriesArray.push(series[i]);
	                            seriesIndex.push(i);
	                        }
	                    }
	                }
	                
	                // 寻找高亮元素
	                this.messageCenter.dispatch(
	                    ecConfig.EVENT.TOOLTIP_HOVER,
	                    this._event,
	                    {
	                        seriesIndex: seriesIndex,
	                        dataIndex: dataIndex
	                    },
	                    this.myChart
	                );
	                
	                var rect;
	                if (axisLayout == 'xAxis') {
	                    x = this.subPixelOptimize(
	                        categoryAxis.getCoordByIndex(dataIndex),
	                        this._axisLineWidth
	                    );
	                    y = zrEvent.getY(this._event);
	                    rect = [
	                        x, this.component.grid.getY(), 
	                        x, this.component.grid.getYend()
	                    ];
	                }
	                else {
	                    x = zrEvent.getX(this._event);
	                    y = this.subPixelOptimize(
	                        categoryAxis.getCoordByIndex(dataIndex),
	                        this._axisLineWidth
	                    );
	                    rect = [
	                        this.component.grid.getX(), y, 
	                        this.component.grid.getXend(), y
	                    ];
	                }
	                this._styleAxisPointer(
	                    seriesArray,
	                    rect[0], rect[1], rect[2], rect[3],
	                    categoryAxis.getGap(), x, y
	                );
	            }
	            else {
	                // 双数值轴
	                x = zrEvent.getX(this._event);
	                y = zrEvent.getY(this._event);
	                this._styleAxisPointer(
	                    series,
	                    this.component.grid.getX(), y, 
	                    this.component.grid.getXend(), y,
	                    0, x, y
	                );
	                if (dataIndex >= 0) {
	                    this._showItemTrigger(true);
	                }
	                else {
	                    clearTimeout(this._hidingTicket);
	                    clearTimeout(this._showingTicket);
	                    this._tDom.style.display = 'none';
	                }
	            }

	            if (seriesArray.length > 0) {
	                // 复位item trigger和axis trigger间短距离来回变换时的不响应
	                this._lastItemTriggerId = -1;
	                // 相同dataIndex seriesIndex时不再触发内容更新
	                if (this._lastDataIndex != dataIndex || this._lastSeriesIndex != seriesIndex[0]) {
	                    this._lastDataIndex = dataIndex;
	                    this._lastSeriesIndex = seriesIndex[0];
	                    var data;
	                    var value;
	                    if (typeof formatter === 'function') {
	                        var params = [];
	                        for (var i = 0, l = seriesArray.length; i < l; i++) {
	                            data = seriesArray[i].data[dataIndex];
	                            value = this.getDataFromOption(data, '-');
	                            
	                            params.push({
	                                seriesIndex: seriesIndex[i],
	                                seriesName: seriesArray[i].name || '',
	                                series: seriesArray[i],
	                                dataIndex: dataIndex,
	                                data: data,
	                                name: categoryAxis.getNameByIndex(dataIndex),
	                                value: value,
	                                // 向下兼容
	                                0: seriesArray[i].name || '',
	                                1: categoryAxis.getNameByIndex(dataIndex),
	                                2: value,
	                                3: data
	                            });
	                        }
	                        this._curTicket = 'axis:' + dataIndex;
	                        this._tDom.innerHTML = formatter.call(
	                            this.myChart, params, this._curTicket, this._setContent
	                        );
	                    }
	                    else if (typeof formatter === 'string') {
	                        this._curTicket = NaN;
	                        formatter = formatter.replace('{a}','{a0}')
	                                             .replace('{b}','{b0}')
	                                             .replace('{c}','{c0}');
	                        for (var i = 0, l = seriesArray.length; i < l; i++) {
	                            formatter = formatter.replace(
	                                '{a' + i + '}',
	                                this._encodeHTML(seriesArray[i].name || '')
	                            );
	                            formatter = formatter.replace(
	                                '{b' + i + '}',
	                                this._encodeHTML(categoryAxis.getNameByIndex(dataIndex))
	                            );
	                            data = seriesArray[i].data[dataIndex];
	                            data = this.getDataFromOption(data, '-');
	                            formatter = formatter.replace(
	                                '{c' + i + '}',
	                                data instanceof Array 
	                                ? data : this.numAddCommas(data)
	                            );
	                        }
	                        this._tDom.innerHTML = formatter;
	                    }
	                    else {
	                        this._curTicket = NaN;
	                        formatter = this._encodeHTML(
	                            categoryAxis.getNameByIndex(dataIndex)
	                        );
	    
	                        for (var i = 0, l = seriesArray.length; i < l; i++) {
	                            formatter += '<br/>' 
	                                         + this._encodeHTML(seriesArray[i].name || '')
	                                         + ' : ';
	                            data = seriesArray[i].data[dataIndex];
	                            data = this.getDataFromOption(data, '-');
	                            formatter += data instanceof Array 
	                                         ? data : this.numAddCommas(data);
	                        }
	                        this._tDom.innerHTML = formatter;
	                    }
	                }

	                // don't modify, just false, showContent == undefined == true
	                if (showContent === false || !this.option.tooltip.showContent) {
	                    // 只用tooltip的行为，不显示主体
	                    return;
	                }
	                
	                if (!this.hasAppend) {
	                    this._tDom.style.left = this._zrWidth / 2 + 'px';
	                    this._tDom.style.top = this._zrHeight / 2 + 'px';
	                    this.dom.firstChild.appendChild(this._tDom);
	                    this.hasAppend = true;
	                }
	                this._show(position, x + 10, y + 10, specialCssText);
	            }
	        },
	        
	        /**
	         * 极坐标 
	         */
	        _showPolarTrigger: function (polarIndex, dataIndex) {
	            if (this.component.polar == null
	                || polarIndex == null
	                || dataIndex == null
	                || dataIndex < 0
	            ) {
	                return false;
	            }
	            var series = this.option.series;
	            var seriesArray = [];
	            var seriesIndex = [];

	            var formatter;
	            var position;
	            var showContent;
	            var specialCssText = '';
	            if (this.option.tooltip.trigger === 'axis') {
	                if (!this.option.tooltip.show) {
	                    return false;
	                }
	                formatter = this.option.tooltip.formatter;
	                position = this.option.tooltip.position;
	            }
	            var indicatorName = this.option.polar[polarIndex].indicator[dataIndex].text;

	            // 找到所有用这个极坐标并且axis触发的系列数据
	            for (var i = 0, l = series.length; i < l; i++) {
	                if (!this._isSelected(series[i].name)) {
	                    continue;
	                }
	                if (series[i].polarIndex === polarIndex
	                    && this.deepQuery([series[i], this.option], 'tooltip.trigger') === 'axis'
	                ) {
	                    showContent = this.query(series[i], 'tooltip.showContent') 
	                                  || showContent;
	                    formatter = this.query(series[i], 'tooltip.formatter') 
	                                || formatter;
	                    position = this.query(series[i], 'tooltip.position') 
	                               || position;
	                    specialCssText += this._style(this.query(series[i], 'tooltip'));
	                    seriesArray.push(series[i]);
	                    seriesIndex.push(i);
	                }
	            }
	            if (seriesArray.length > 0) {
	                var polarData;
	                var data;
	                var value;
	                var params = [];

	                for (var i = 0, l = seriesArray.length; i < l; i++) {
	                    polarData = seriesArray[i].data;
	                    for (var j = 0, k = polarData.length; j < k; j++) {
	                        data = polarData[j];
	                        if (!this._isSelected(data.name)) {
	                            continue;
	                        }
	                        data = data != null
	                               ? data
	                               : {name:'', value: {dataIndex:'-'}};
	                        value = this.getDataFromOption(data.value[dataIndex]);
	                        params.push({
	                            seriesIndex: seriesIndex[i],
	                            seriesName: seriesArray[i].name || '',
	                            series: seriesArray[i],
	                            dataIndex: dataIndex,
	                            data: data,
	                            name: data.name,
	                            indicator: indicatorName,
	                            value: value,
	                            // 向下兼容
	                            0: seriesArray[i].name || '',
	                            1: data.name,
	                            2: value,
	                            3: indicatorName
	                        });
	                    }
	                }
	                if (params.length <= 0) {
	                    return;
	                }
	                // 复位item trigger和axis trigger间短距离来回变换时的不响应
	                this._lastItemTriggerId = -1;

	                // 相同dataIndex seriesIndex时不再触发内容更新
	                if (this._lastDataIndex != dataIndex || this._lastSeriesIndex != seriesIndex[0]) {
	                    this._lastDataIndex = dataIndex;
	                    this._lastSeriesIndex = seriesIndex[0];
	                    if (typeof formatter === 'function') {
	                        this._curTicket = 'axis:' + dataIndex;
	                        this._tDom.innerHTML = formatter.call(
	                            this.myChart, params, this._curTicket, this._setContent
	                        );
	                    }
	                    else if (typeof formatter === 'string') {
	                        formatter = formatter.replace('{a}','{a0}')
	                                             .replace('{b}','{b0}')
	                                             .replace('{c}','{c0}')
	                                             .replace('{d}','{d0}');
	                        for (var i = 0, l = params.length; i < l; i++) {
	                            formatter = formatter.replace(
	                                '{a' + i + '}',
	                                this._encodeHTML(params[i].seriesName)
	                            );
	                            formatter = formatter.replace(
	                                '{b' + i + '}',
	                                this._encodeHTML(params[i].name)
	                            );
	                            formatter = formatter.replace(
	                                '{c' + i + '}',
	                                this.numAddCommas(params[i].value)
	                            );
	                            formatter = formatter.replace(
	                                '{d' + i + '}',
	                                this._encodeHTML(params[i].indicator)
	                            );
	                        }
	                        this._tDom.innerHTML = formatter;
	                    }
	                    else {
	                        formatter = this._encodeHTML(params[0].name) + '<br/>' 
	                                    + this._encodeHTML(params[0].indicator) + ' : ' 
	                                    + this.numAddCommas(params[0].value);
	                        for (var i = 1, l = params.length; i < l; i++) {
	                            formatter += '<br/>' + this._encodeHTML(params[i].name) 
	                                         + '<br/>';
	                            formatter += this._encodeHTML(params[i].indicator) + ' : ' 
	                                         + this.numAddCommas(params[i].value);
	                        }
	                        this._tDom.innerHTML = formatter;
	                    }
	                }

	                // don't modify, just false, showContent == undefined == true
	                if (showContent === false || !this.option.tooltip.showContent) {
	                    // 只用tooltip的行为，不显示主体
	                    return;
	                }
	                
	                if (!this.hasAppend) {
	                    this._tDom.style.left = this._zrWidth / 2 + 'px';
	                    this._tDom.style.top = this._zrHeight / 2 + 'px';
	                    this.dom.firstChild.appendChild(this._tDom);
	                    this.hasAppend = true;
	                }
	                this._show(
	                    position,
	                    zrEvent.getX(this._event), 
	                    zrEvent.getY(this._event), 
	                    specialCssText
	                );
	                return true;
	            }
	        },
	        
	        /**
	         * @parma {boolean} axisTrigger 
	         */
	        _showItemTrigger: function (axisTrigger) {
	            if (!this._curTarget) {
	                return;
	            }
	            var serie = ecData.get(this._curTarget, 'series');
	            var seriesIndex = ecData.get(this._curTarget, 'seriesIndex');
	            var data = ecData.get(this._curTarget, 'data');
	            var dataIndex = ecData.get(this._curTarget, 'dataIndex');
	            var name = ecData.get(this._curTarget, 'name');
	            var value = ecData.get(this._curTarget, 'value');
	            var special = ecData.get(this._curTarget, 'special');
	            var special2 = ecData.get(this._curTarget, 'special2');
	            var queryTarget = [data, serie, this.option];
	            // 从低优先级往上找到trigger为item的formatter和样式
	            var formatter;
	            var position;
	            var showContent;
	            var specialCssText = '';
	            if (this._curTarget._type != 'island') {
	                // 全局
	                var trigger = axisTrigger ? 'axis' : 'item';
	                if (this.option.tooltip.trigger === trigger) {
	                    formatter = this.option.tooltip.formatter;
	                    position = this.option.tooltip.position;
	                }
	                // 系列
	                if (this.query(serie, 'tooltip.trigger') === trigger) {
	                    showContent = this.query(serie, 'tooltip.showContent') || showContent;
	                    formatter = this.query(serie, 'tooltip.formatter') || formatter;
	                    position = this.query(serie, 'tooltip.position') || position;
	                    specialCssText += this._style(this.query(serie, 'tooltip'));
	                }
	                // 数据项
	                showContent = this.query(data, 'tooltip.showContent') || showContent;
	                formatter = this.query(data, 'tooltip.formatter') || formatter;
	                position = this.query(data, 'tooltip.position') || position;
	                specialCssText += this._style(this.query(data, 'tooltip'));
	            }
	            else {
	                this._lastItemTriggerId = NaN;
	                showContent = this.deepQuery(queryTarget, 'tooltip.showContent');
	                formatter = this.deepQuery(queryTarget, 'tooltip.islandFormatter');
	                position = this.deepQuery(queryTarget, 'tooltip.islandPosition');
	            }

	            // 复位item trigger和axis trigger间短距离来回变换时的不响应
	            this._lastDataIndex = -1;
	            this._lastSeriesIndex = -1;

	            // 相同dataIndex seriesIndex时不再触发内容更新
	            if (this._lastItemTriggerId !== this._curTarget.id) {
	                this._lastItemTriggerId = this._curTarget.id;
	                if (typeof formatter === 'function') {
	                    this._curTicket = (serie.name || '') + ':' + dataIndex;
	                    this._tDom.innerHTML = formatter.call(
	                        this.myChart,
	                        {
	                            seriesIndex: seriesIndex,
	                            seriesName: serie.name || '',
	                            series: serie,
	                            dataIndex: dataIndex,
	                            data: data,
	                            name: name,
	                            value: value,
	                            percent: special,   // 饼图
	                            indicator: special, // 雷达图
	                            value2: special2,
	                            indicator2: special2,
	                            // 向下兼容
	                            0: serie.name || '',
	                            1: name,
	                            2: value,
	                            3: special,
	                            4: special2,
	                            5: data,
	                            6: seriesIndex,
	                            7: dataIndex
	                        },
	                        this._curTicket,
	                        this._setContent
	                    );
	                }
	                else if (typeof formatter === 'string') {
	                    this._curTicket = NaN;
	                    formatter = formatter.replace('{a}', '{a0}')
	                                         .replace('{b}', '{b0}')
	                                         .replace('{c}', '{c0}');
	                    formatter = formatter.replace('{a0}', this._encodeHTML(serie.name || ''))
	                                         .replace('{b0}', this._encodeHTML(name))
	                                         .replace(
	                                             '{c0}',
	                                             value instanceof Array ? value : this.numAddCommas(value)
	                                         );
	    
	                    formatter = formatter.replace('{d}', '{d0}')
	                                         .replace('{d0}', special || '');
	                    formatter = formatter.replace('{e}', '{e0}')
	                                         .replace(
	                                             '{e0}',
	                                             ecData.get(this._curTarget, 'special2') || ''
	                                         );
	    
	                    this._tDom.innerHTML = formatter;
	                }
	                else {
	                    this._curTicket = NaN;
	                    if (serie.type === ecConfig.CHART_TYPE_RADAR && special) {
	                        this._tDom.innerHTML = this._itemFormatter.radar.call(
	                            this, serie, name, value, special
	                        );
	                    }
	                    // chord 处理暂时跟 force 一样
	                    // else if (serie.type === ecConfig.CHART_TYPE_CHORD) {
	                    //     this._tDom.innerHTML = this._itemFormatter.chord.call(
	                    //         this, serie, name, value, special, special2
	                    //     );
	                    // }
	                    else if (serie.type === ecConfig.CHART_TYPE_EVENTRIVER) {
	                        this._tDom.innerHTML = this._itemFormatter.eventRiver.call(
	                            this, serie, name, value, data
	                        );
	                    }
	                    else {
	                        this._tDom.innerHTML = ''
	                            + (serie.name != null ? (this._encodeHTML(serie.name) + '<br/>') : '')
	                            + (name === '' ? '' : (this._encodeHTML(name) + ' : '))
	                            + (value instanceof Array ? value : this.numAddCommas(value));
	                    }
	                }
	            }

	            var x = zrEvent.getX(this._event);
	            var y = zrEvent.getY(this._event);
	            if (this.deepQuery(queryTarget, 'tooltip.axisPointer.show') 
	                && this.component.grid
	            ) {
	                this._styleAxisPointer(
	                    [serie],
	                    this.component.grid.getX(), y, 
	                    this.component.grid.getXend(), y,
	                    0, x, y
	                );
	            }
	            else {
	                this._hide();
	            }
	            
	            // don't modify, just false, showContent == undefined == true
	            if (showContent === false || !this.option.tooltip.showContent) {
	                // 只用tooltip的行为，不显示主体
	                return;
	            }
	            
	            if (!this.hasAppend) {
	                this._tDom.style.left = this._zrWidth / 2 + 'px';
	                this._tDom.style.top = this._zrHeight / 2 + 'px';
	                this.dom.firstChild.appendChild(this._tDom);
	                this.hasAppend = true;
	            }
	            
	            this._show(position, x + 20, y - 20, specialCssText);
	        },

	        _itemFormatter: {
	            radar: function(serie, name, value, indicator){
	                var html = '';
	                html += this._encodeHTML(name === '' ? (serie.name || '') : name);
	                html += html === '' ? '' : '<br />';
	                for (var i = 0 ; i < indicator.length; i ++) {
	                    html += this._encodeHTML(indicator[i].text) + ' : ' 
	                            + this.numAddCommas(value[i]) + '<br />';
	                }
	                return html;
	            },
	            chord: function(serie, name, value, special, special2) {
	                if (special2 == null) {
	                    // 外环上
	                    return this._encodeHTML(name) + ' (' + this.numAddCommas(value) + ')';
	                }
	                else {
	                    var name1 = this._encodeHTML(name);
	                    var name2 = this._encodeHTML(special);
	                    // 内部弦上
	                    return ''
	                        + (serie.name != null ? (this._encodeHTML(serie.name) + '<br/>') : '')
	                        + name1 + ' -> ' + name2 
	                        + ' (' + this.numAddCommas(value) + ')'
	                        + '<br />'
	                        + name2 + ' -> ' + name1
	                        + ' (' + this.numAddCommas(special2) + ')';
	                }
	            },
	            eventRiver: function(serie, name, value, data) {
	                var html = '';
	                html += this._encodeHTML(serie.name === '' ? '' : (serie.name + ' : ') );
	                html += this._encodeHTML(name);
	                html += html === '' ? '' : '<br />';
	                data = data.evolution;
	                for (var i = 0, l = data.length; i < l; i++) {
	                    html += '<div style="padding-top:5px;">';
	                    if (!data[i].detail) {
	                        continue;
	                    }
	                    if (data[i].detail.img) {
	                        html += '<img src="' + data[i].detail.img 
	                                + '" style="float:left;width:40px;height:40px;">';
	                    }
	                    html += '<div style="margin-left:45px;">' + data[i].time + '<br/>';
	                    html += '<a href="' + data[i].detail.link + '" target="_blank">';
	                    html += data[i].detail.text + '</a></div>';
	                    html += '</div>';
	                }
	                return html;
	            }
	        },
	        
	        /**
	         * 设置坐标轴指示器样式 
	         */
	        _styleAxisPointer: function (seriesArray, xStart, yStart, xEnd, yEnd, gap, x, y) {
	            if (seriesArray.length > 0) {
	                var queryTarget;
	                var curType;
	                var axisPointer = this.option.tooltip.axisPointer;
	                var pointType = axisPointer.type;
	                var style = {
	                    line: {},
	                    cross: {},
	                    shadow: {}
	                };
	                for (var pType in style) {
	                    style[pType].color = axisPointer[pType + 'Style'].color;
	                    style[pType].width = axisPointer[pType + 'Style'].width;
	                    style[pType].type = axisPointer[pType + 'Style'].type;
	                }
	                for (var i = 0, l = seriesArray.length; i < l; i++) {
	                    //if (this.deepQuery([seriesArray[i], this.option], 'tooltip.trigger') === 'axis') {
	                        queryTarget = seriesArray[i];
	                        curType = this.query(queryTarget, 'tooltip.axisPointer.type');
	                        pointType = curType || pointType; 
	                        if (curType) {
	                            style[curType].color = this.query(
	                                queryTarget,
	                                'tooltip.axisPointer.' + curType + 'Style.color'
	                            ) || style[curType].color;
	                            style[curType].width = this.query(
	                                queryTarget,
	                                'tooltip.axisPointer.' + curType + 'Style.width'
	                            ) || style[curType].width;
	                            style[curType].type = this.query(
	                                queryTarget,
	                                'tooltip.axisPointer.' + curType + 'Style.type'
	                            ) || style[curType].type;
	                        }
	                    //}
	                }
	                
	                if (pointType === 'line') {
	                    var lineWidth = style.line.width;
	                    var isVertical = xStart == xEnd;
	                    this._axisLineShape.style = {
	                        xStart: isVertical ? this.subPixelOptimize(xStart, lineWidth) : xStart,
	                        yStart: isVertical ? yStart : this.subPixelOptimize(yStart, lineWidth),
	                        xEnd: isVertical ? this.subPixelOptimize(xEnd, lineWidth) : xEnd,
	                        yEnd: isVertical ? yEnd : this.subPixelOptimize(yEnd, lineWidth),
	                        strokeColor: style.line.color,
	                        lineWidth: lineWidth,
	                        lineType: style.line.type
	                    };
	                    this._axisLineShape.invisible = false;
	                    this.zr.modShape(this._axisLineShape.id);
	                }
	                else if (pointType === 'cross') {
	                    var crossWidth = style.cross.width;
	                    this._axisCrossShape.style = {
	                        brushType: 'stroke',
	                        rect: this.component.grid.getArea(),
	                        x: this.subPixelOptimize(x, crossWidth),
	                        y: this.subPixelOptimize(y, crossWidth),
	                        text: ('( ' 
	                               + this.component.xAxis.getAxis(0).getValueFromCoord(x)
	                               + ' , '
	                               + this.component.yAxis.getAxis(0).getValueFromCoord(y) 
	                               + ' )'
	                              ).replace('  , ', ' ').replace(' ,  ', ' '),
	                        textPosition: 'specific',
	                        strokeColor: style.cross.color,
	                        lineWidth: crossWidth,
	                        lineType: style.cross.type
	                    };
	                    if (this.component.grid.getXend() - x > 100) {          // 右侧有空间
	                        this._axisCrossShape.style.textAlign = 'left';
	                        this._axisCrossShape.style.textX = x + 10;
	                    }
	                    else {
	                        this._axisCrossShape.style.textAlign = 'right';
	                        this._axisCrossShape.style.textX = x - 10;
	                    }
	                    if (y - this.component.grid.getY() > 50) {             // 上方有空间
	                        this._axisCrossShape.style.textBaseline = 'bottom';
	                        this._axisCrossShape.style.textY = y - 10;
	                    }
	                    else {
	                        this._axisCrossShape.style.textBaseline = 'top';
	                        this._axisCrossShape.style.textY = y + 10;
	                    }
	                    this._axisCrossShape.invisible = false;
	                    this.zr.modShape(this._axisCrossShape.id);
	                }
	                else if (pointType === 'shadow') {
	                    if (style.shadow.width == null 
	                        || style.shadow.width === 'auto'
	                        || isNaN(style.shadow.width)
	                    ) {
	                        style.shadow.width = gap;
	                    }
	                    if (xStart === xEnd) {
	                        // 纵向
	                        if (Math.abs(this.component.grid.getX() - xStart) < 2) {
	                            // 最左边
	                            style.shadow.width /= 2;
	                            xStart = xEnd = xEnd + style.shadow.width / 2;
	                        }
	                        else if (Math.abs(this.component.grid.getXend() - xStart) < 2) {
	                            // 最右边
	                            style.shadow.width /= 2;
	                            xStart = xEnd = xEnd - style.shadow.width / 2;
	                        }
	                    }
	                    else if (yStart === yEnd) {
	                        // 横向
	                        if (Math.abs(this.component.grid.getY() - yStart) < 2) {
	                            // 最上边
	                            style.shadow.width /= 2;
	                            yStart = yEnd = yEnd + style.shadow.width / 2;
	                        }
	                        else if (Math.abs(this.component.grid.getYend() - yStart) < 2) {
	                            // 最右边
	                            style.shadow.width /= 2;
	                            yStart = yEnd = yEnd - style.shadow.width / 2;
	                        }
	                    }
	                    this._axisShadowShape.style = {
	                        xStart: xStart,
	                        yStart: yStart,
	                        xEnd: xEnd,
	                        yEnd: yEnd,
	                        strokeColor: style.shadow.color,
	                        lineWidth: style.shadow.width
	                    };
	                    this._axisShadowShape.invisible = false;
	                    this.zr.modShape(this._axisShadowShape.id);
	                }
	                this.zr.refreshNextFrame();
	            }
	        },

	        __onmousemove: function (param) {
	            clearTimeout(this._hidingTicket);
	            clearTimeout(this._showingTicket);
	            if (this._mousein && this._enterable) {
	                return;
	            }
	            var target = param.target;
	            var mx = zrEvent.getX(param.event);
	            var my = zrEvent.getY(param.event);
	            if (!target) {
	                // 判断是否落到直角系里，axis触发的tooltip
	                this._curTarget = false;
	                this._event = param.event;
	                // this._event._target = this._event.target || this._event.toElement;
	                this._event.zrenderX = mx;
	                this._event.zrenderY = my;
	                if (this._needAxisTrigger 
	                    && this.component.grid 
	                    && zrArea.isInside(rectangleInstance, this.component.grid.getArea(), mx, my)
	                ) {
	                    this._showingTicket = setTimeout(this._tryShow, this._showDelay);
	                }
	                else if (this._needAxisTrigger 
	                        && this.component.polar 
	                        && this.component.polar.isInside([mx, my]) != -1
	                ) {
	                    this._showingTicket = setTimeout(this._tryShow, this._showDelay);
	                }
	                else {
	                    !this._event.connectTrigger && this.messageCenter.dispatch(
	                        ecConfig.EVENT.TOOLTIP_OUT_GRID,
	                        this._event,
	                        null,
	                        this.myChart
	                    );
	                    this._hidingTicket = setTimeout(this._hide, this._hideDelay);
	                }
	            }
	            else {
	                this._curTarget = target;
	                this._event = param.event;
	                // this._event._target = this._event.target || this._event.toElement;
	                this._event.zrenderX = mx;
	                this._event.zrenderY = my;
	                var polarIndex;
	                if (this._needAxisTrigger 
	                    && this.component.polar 
	                    && (polarIndex = this.component.polar.isInside([mx, my])) != -1
	                ) {
	                    // 看用这个polar的系列数据是否是axis触发，如果是设置_curTarget为nul
	                    var series = this.option.series;
	                    for (var i = 0, l = series.length; i < l; i++) {
	                        if (series[i].polarIndex === polarIndex
	                            && this.deepQuery(
	                                   [series[i], this.option], 'tooltip.trigger'
	                               ) === 'axis'
	                        ) {
	                            this._curTarget = null;
	                            break;
	                        }
	                    }
	                   
	                }
	                this._showingTicket = setTimeout(this._tryShow, this._showDelay);
	            }
	        },

	        /**
	         * zrender事件响应：鼠标离开绘图区域
	         */
	        __onglobalout: function () {
	            clearTimeout(this._hidingTicket);
	            clearTimeout(this._showingTicket);
	            this._hidingTicket = setTimeout(this._hide, this._hideDelay);
	        },
	        
	        /**
	         * 异步回调填充内容
	         */
	        __setContent: function (ticket, content) {
	            if (!this._tDom) {
	                return;
	            }
	            if (ticket === this._curTicket) {
	                this._tDom.innerHTML = content;
	            }
	            
	            setTimeout(this._refixed, 20);
	        },

	        ontooltipHover: function (param, tipShape) {
	            if (!this._lastTipShape // 不存在或者存在但dataIndex发生变化才需要重绘
	                || (this._lastTipShape && this._lastTipShape.dataIndex != param.dataIndex)
	            ) {
	                if (this._lastTipShape && this._lastTipShape.tipShape.length > 0) {
	                    this.zr.delShape(this._lastTipShape.tipShape);
	                    this.shapeList.length = 2;
	                }
	                for (var i = 0, l = tipShape.length; i < l; i++) {
	                    tipShape[i].zlevel = this.getZlevelBase();
	                    tipShape[i].z = this.getZBase();
	                    
	                    tipShape[i].style = zrShapeBase.prototype.getHighlightStyle(
	                        tipShape[i].style,
	                        tipShape[i].highlightStyle
	                    );
	                    tipShape[i].draggable = false;
	                    tipShape[i].hoverable = false;
	                    tipShape[i].clickable = false;
	                    tipShape[i].ondragend = null;
	                    tipShape[i].ondragover = null;
	                    tipShape[i].ondrop = null;
	                    this.shapeList.push(tipShape[i]);
	                    this.zr.addShape(tipShape[i]);
	                }
	                this._lastTipShape = {
	                    dataIndex: param.dataIndex,
	                    tipShape: tipShape
	                };
	            }
	        },
	        
	        ondragend: function () {
	            this._hide();
	        },
	        
	        /**
	         * 图例选择
	         */
	        onlegendSelected: function (param) {
	            this._selectedMap = param.selected;
	        },
	        
	        _setSelectedMap: function () {
	            if (this.component.legend) {
	                this._selectedMap = zrUtil.clone(this.component.legend.getSelectedMap());
	            }
	            else {
	                this._selectedMap = {};
	            }
	        },
	        
	        _isSelected: function (itemName) {
	            if (this._selectedMap[itemName] != null) {
	                return this._selectedMap[itemName];
	            }
	            else {
	                return true; // 没在legend里定义的都为true啊~
	            }
	        },

	        /**
	         * 模拟tooltip hover方法
	         * {object} params  参数
	         *          {seriesIndex: 0, seriesName:'', dataInex:0} line、bar、scatter、k、radar
	         *          {seriesIndex: 0, seriesName:'', name:''} map、pie、chord
	         */
	        showTip: function (params) {
	            if (!params) {
	                return;
	            }
	            
	            var seriesIndex;
	            var series = this.option.series;
	            if (params.seriesIndex != null) {
	                seriesIndex = params.seriesIndex;
	            }
	            else {
	                var seriesName = params.seriesName;
	                for (var i = 0, l = series.length; i < l; i++) {
	                    if (series[i].name === seriesName) {
	                        seriesIndex = i;
	                        break;
	                    }
	                }
	            }
	            
	            var serie = series[seriesIndex];
	            if (serie == null) {
	                return;
	            }
	            var chart = this.myChart.chart[serie.type];
	            var isAxisTrigger = this.deepQuery(
	                                    [serie, this.option], 'tooltip.trigger'
	                                ) === 'axis';
	            
	            if (!chart) {
	                return;
	            }
	            
	            if (isAxisTrigger) {
	                // axis trigger
	                var dataIndex = params.dataIndex;
	                switch (chart.type) {
	                    case ecConfig.CHART_TYPE_LINE :
	                    case ecConfig.CHART_TYPE_BAR :
	                    case ecConfig.CHART_TYPE_K :
	                    case ecConfig.CHART_TYPE_RADAR :
	                        if (this.component.polar == null 
	                            || serie.data[0].value.length <= dataIndex
	                        ) {
	                            return;
	                        }
	                        var polarIndex = serie.polarIndex || 0;
	                        var vector = this.component.polar.getVector(
	                            polarIndex, dataIndex, 'max'
	                        );
	                        this._event = {
	                            zrenderX: vector[0],
	                            zrenderY: vector[1]
	                        };
	                        this._showPolarTrigger(
	                            polarIndex, 
	                            dataIndex
	                        );
	                        break;
	                }
	            }
	            else {
	                // item trigger
	                var shapeList = chart.shapeList;
	                var x;
	                var y;
	                switch (chart.type) {
	                    case ecConfig.CHART_TYPE_LINE :
	                    case ecConfig.CHART_TYPE_BAR :
	                    case ecConfig.CHART_TYPE_K :
	                    case ecConfig.CHART_TYPE_TREEMAP :
	                    case ecConfig.CHART_TYPE_SCATTER :
	                        var dataIndex = params.dataIndex;
	                        for (var i = 0, l = shapeList.length; i < l; i++) {
	                            if (shapeList[i]._mark == null
	                                && ecData.get(shapeList[i], 'seriesIndex') == seriesIndex
	                                && ecData.get(shapeList[i], 'dataIndex') == dataIndex
	                            ) {
	                                this._curTarget = shapeList[i];
	                                x = shapeList[i].style.x;
	                                y = chart.type != ecConfig.CHART_TYPE_K 
	                                    ? shapeList[i].style.y : shapeList[i].style.y[0];
	                                break;
	                            }
	                        }
	                        break;
	                    case ecConfig.CHART_TYPE_RADAR :
	                        var dataIndex = params.dataIndex;
	                        for (var i = 0, l = shapeList.length; i < l; i++) {
	                            if (shapeList[i].type === 'polygon'
	                                && ecData.get(shapeList[i], 'seriesIndex') == seriesIndex
	                                && ecData.get(shapeList[i], 'dataIndex') == dataIndex
	                            ) {
	                                this._curTarget = shapeList[i];
	                                var vector = this.component.polar.getCenter(
	                                    serie.polarIndex || 0
	                                );
	                                x = vector[0];
	                                y = vector[1];
	                                break;
	                            }
	                        }
	                        break;
	                    case ecConfig.CHART_TYPE_PIE :
	                        var name = params.name;
	                        for (var i = 0, l = shapeList.length; i < l; i++) {
	                            if (shapeList[i].type === 'sector'
	                                && ecData.get(shapeList[i], 'seriesIndex') == seriesIndex
	                                && ecData.get(shapeList[i], 'name') == name
	                            ) {
	                                this._curTarget = shapeList[i];
	                                var style = this._curTarget.style;
	                                var midAngle = (style.startAngle + style.endAngle) 
	                                                / 2 * Math.PI / 180;
	                                x = this._curTarget.style.x + Math.cos(midAngle) * style.r / 1.5;
	                                y = this._curTarget.style.y - Math.sin(midAngle) * style.r / 1.5;
	                                break;
	                            }
	                        }
	                        break;
	                    case ecConfig.CHART_TYPE_MAP :
	                        var name = params.name;
	                        var mapType = serie.mapType;
	                        for (var i = 0, l = shapeList.length; i < l; i++) {
	                            if (shapeList[i].type === 'text'
	                                && shapeList[i]._mapType === mapType
	                                && shapeList[i].style._name === name
	                            ) {
	                                this._curTarget = shapeList[i];
	                                x = this._curTarget.style.x + this._curTarget.position[0];
	                                y = this._curTarget.style.y + this._curTarget.position[1];
	                                break;
	                            }
	                        }
	                        break;
	                    case ecConfig.CHART_TYPE_CHORD:
	                        var name = params.name;
	                        for (var i = 0, l = shapeList.length; i < l; i++) {
	                            if (shapeList[i].type === 'sector'
	                                && ecData.get(shapeList[i], 'name') == name
	                            ) {
	                                this._curTarget = shapeList[i];
	                                var style = this._curTarget.style;
	                                var midAngle = (style.startAngle + style.endAngle) 
	                                                / 2 * Math.PI / 180;
	                                x = this._curTarget.style.x + Math.cos(midAngle) * (style.r - 2);
	                                y = this._curTarget.style.y - Math.sin(midAngle) * (style.r - 2);
	                                this.zr.trigger(
	                                    zrConfig.EVENT.MOUSEMOVE,
	                                    {
	                                        zrenderX: x,
	                                        zrenderY: y
	                                    }
	                                );
	                                return;
	                            }
	                        }
	                        break;
	                    case ecConfig.CHART_TYPE_FORCE:
	                        var name = params.name;
	                        for (var i = 0, l = shapeList.length; i < l; i++) {
	                            if (shapeList[i].type === 'circle'
	                                && ecData.get(shapeList[i], 'name') == name
	                            ) {
	                                this._curTarget = shapeList[i];
	                                x = this._curTarget.position[0];
	                                y = this._curTarget.position[1];
	                                break;
	                            }
	                        }
	                        break;
	                }
	                if (x != null && y != null) {
	                    this._event = {
	                        zrenderX: x,
	                        zrenderY: y
	                    };
	                    this.zr.addHoverShape(this._curTarget);
	                    this.zr.refreshHover();
	                    this._showItemTrigger();
	                }
	            }
	        },
	        
	        /**
	         * 关闭，公开接口 
	         */
	        hideTip: function () {
	            this._hide();
	        },
	        
	        /**
	         * 刷新
	         */
	        refresh: function (newOption) {
	            // this._selectedMap;
	            // this._defaultCssText;    // css样式缓存
	            // this._needAxisTrigger;   // 坐标轴触发
	            // this._curTarget;
	            // this._event;
	            // this._curTicket;         // 异步回调标识，用来区分多个请求
	            
	            // 缓存一些高宽数据
	            this._zrHeight = this.zr.getHeight();
	            this._zrWidth = this.zr.getWidth();
	            
	            if (this._lastTipShape && this._lastTipShape.tipShape.length > 0) {
	                this.zr.delShape(this._lastTipShape.tipShape);
	            }
	            this._lastTipShape = false;
	            this.shapeList.length = 2;
	            
	            this._lastDataIndex = -1;
	            this._lastSeriesIndex = -1;
	            this._lastItemTriggerId = -1;
	            
	            if (newOption) {
	                this.option = newOption;
	                this.option.tooltip = this.reformOption(this.option.tooltip);
	                
	                this.option.tooltip.textStyle = zrUtil.merge(
	                    this.option.tooltip.textStyle,
	                    this.ecTheme.textStyle
	                );
	                this._needAxisTrigger = false;
	                if (this.option.tooltip.trigger === 'axis') {
	                    this._needAxisTrigger = true;
	                }
	    
	                var series = this.option.series;
	                for (var i = 0, l = series.length; i < l; i++) {
	                    if (this.query(series[i], 'tooltip.trigger') === 'axis') {
	                        this._needAxisTrigger = true;
	                        break;
	                    }
	                }
	                // this._hidingTicket;
	                // this._showingTicket;
	                this._showDelay = this.option.tooltip.showDelay; // 显示延迟
	                this._hideDelay = this.option.tooltip.hideDelay; // 隐藏延迟
	                this._defaultCssText = this._style(this.option.tooltip);
	                
	                this._setSelectedMap();
	                this._axisLineWidth = this.option.tooltip.axisPointer.lineStyle.width;
	                this._enterable = this.option.tooltip.enterable;

	                if (! this._enterable && this._tDom.className.indexOf(zrConfig.elementClassName) < 0) {
	                    this._tDom.className += ' ' + zrConfig.elementClassName;
	                }
	            }
	            if (this.showing) {
	                var self = this;
	                setTimeout(function(){
	                    self.zr.trigger(zrConfig.EVENT.MOUSEMOVE, self.zr.handler._event);
	                },50);
	            }
	        },

	        /**
	         * 释放后实例不可用，重载基类方法
	         */
	        onbeforDispose: function () {
	            if (this._lastTipShape && this._lastTipShape.tipShape.length > 0) {
	                this.zr.delShape(this._lastTipShape.tipShape);
	            }
	            clearTimeout(this._hidingTicket);
	            clearTimeout(this._showingTicket);
	            this.zr.un(zrConfig.EVENT.MOUSEMOVE, this._onmousemove);
	            this.zr.un(zrConfig.EVENT.GLOBALOUT, this._onglobalout);
	            
	            if (this.hasAppend && !!this.dom.firstChild) {
	                this.dom.firstChild.removeChild(this._tDom);
	            }
	            this._tDom = null;
	        },
	        
	        /**
	         * html转码的方法
	         */
	        _encodeHTML: function (source) {
	            return String(source)
	                        .replace(/&/g, '&amp;')
	                        .replace(/</g, '&lt;')
	                        .replace(/>/g, '&gt;')
	                        .replace(/"/g, '&quot;')
	                        .replace(/'/g, '&#39;');
	        }
	    };
	    
	    zrUtil.inherits(Tooltip, Base);
	    
	    __webpack_require__(516).define('tooltip', Tooltip);

	    return Tooltip;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 519 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * zrender
	 *
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 * shape类：十字准星
	 * 可配图形属性：
	   {
	       // 基础属性
	       shape  : 'cross',       // 必须，shape类标识，需要显式指定
	       id     : {string},       // 必须，图形唯一标识，可通过'zrender/tool/guid'方法生成
	       zlevel : {number},       // 默认为0，z层level，决定绘画在哪层canvas中
	       invisible : {boolean},   // 默认为false，是否可见

	       // 样式属性，默认状态样式样式属性
	       style  : {
	           rect      : {Object},  // 必须，对角框
	           x         : {number},  // 必须，横坐标
	           y         : {number},  // 必须，纵坐标
	       },

	       // 样式属性，高亮样式属性，当不存在highlightStyle时使用基于默认样式扩展显示
	       highlightStyle : {
	           // 同style
	       }

	       // 交互属性，详见shape.Base

	       // 事件属性，详见shape.Base
	   }
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	    var Base = __webpack_require__(473);
	    var LineShape = __webpack_require__(493);
	    var zrUtil = __webpack_require__(456);

	    function Cross(options) {
	        Base.call(this, options);
	    }

	    Cross.prototype =  {
	        type : 'cross',

	        /**
	         * 创建矩形路径
	         * @param {Context2D} ctx Canvas 2D上下文
	         * @param {Object} style 样式
	         */
	        buildPath : function (ctx, style) {
	            var rect = style.rect;
	            style.xStart = rect.x;
	            style.xEnd = rect.x + rect.width;
	            style.yStart = style.yEnd = style.y;
	            LineShape.prototype.buildPath(ctx, style);
	            style.xStart = style.xEnd = style.x;
	            style.yStart = rect.y;
	            style.yEnd = rect.y + rect.height;
	            LineShape.prototype.buildPath(ctx, style);
	        },

	        /**
	         * 返回矩形区域，用于局部刷新和文字定位
	         * @param {Object} style
	         */
	        getRect : function (style) {
	            return style.rect;
	        },

	        isCover : __webpack_require__(500)
	    };

	    zrUtil.inherits(Cross, Base);

	    return Cross;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 520 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * echarts组件：图例
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	    var Base = __webpack_require__(508);
	    
	    // 图形依赖
	    var TextShape = __webpack_require__(470);
	    var RectangleShape = __webpack_require__(476);
	    var SectorShape = __webpack_require__(522);
	    //var BeziercurveShape = require('zrender/shape/Beziercurve');
	    var IconShape = __webpack_require__(486);
	    var CandleShape = __webpack_require__(521);
	    
	    var ecConfig = __webpack_require__(455);
	     // 图例
	    ecConfig.legend = {
	        zlevel: 0,                  // 一级层叠
	        z: 4,                       // 二级层叠
	        show: true,
	        orient: 'horizontal',      // 布局方式，默认为水平布局，可选为：
	                                   // 'horizontal' ¦ 'vertical'
	        x: 'center',               // 水平安放位置，默认为全图居中，可选为：
	                                   // 'center' ¦ 'left' ¦ 'right'
	                                   // ¦ {number}（x坐标，单位px）
	        y: 'top',                  // 垂直安放位置，默认为全图顶端，可选为：
	                                   // 'top' ¦ 'bottom' ¦ 'center'
	                                   // ¦ {number}（y坐标，单位px）
	        backgroundColor: 'rgba(0,0,0,0)',
	        borderColor: '#ccc',       // 图例边框颜色
	        borderWidth: 0,            // 图例边框线宽，单位px，默认为0（无边框）
	        padding: 5,                // 图例内边距，单位px，默认各方向内边距为5，
	                                   // 接受数组分别设定上右下左边距，同css
	        itemGap: 10,               // 各个item之间的间隔，单位px，默认为10，
	                                   // 横向布局时为水平间隔，纵向布局时为纵向间隔
	        itemWidth: 20,             // 图例图形宽度
	        itemHeight: 14,            // 图例图形高度
	        textStyle: {
	            color: '#333'          // 图例文字颜色
	        },
	        selectedMode: true         // 选择模式，默认开启图例开关
	        // selected: null,         // 配置默认选中状态，可配合LEGEND.SELECTED事件做动态数据载入
	        // data: [],               // 图例内容（详见legend.data，数组中每一项代表一个item
	    };

	    var zrUtil = __webpack_require__(456);
	    var zrArea = __webpack_require__(471);

	    /**
	     * 构造函数
	     * @param {Object} messageCenter echart消息中心
	     * @param {ZRender} zr zrender实例
	     * @param {Object} option 图表参数
	     */
	    function Legend(ecTheme, messageCenter, zr, option, myChart) {
	        if (!this.query(option, 'legend.data')) {
	            console.error('option.legend.data has not been defined.');
	            return;
	        }
	        
	        Base.call(this, ecTheme, messageCenter, zr, option, myChart);
	        
	        var self = this;
	        self._legendSelected = function (param) {
	            self.__legendSelected(param);
	        };
	        self._dispatchHoverLink = function(param) {
	            return self.__dispatchHoverLink(param);
	        };
	        
	        this._colorIndex = 0;
	        this._colorMap = {};
	        this._selectedMap = {};
	        this._hasDataMap = {};
	        
	        this.refresh(option);
	    }
	    
	    Legend.prototype = {
	        type: ecConfig.COMPONENT_TYPE_LEGEND,
	        _buildShape: function () {
	            if (!this.legendOption.show) {
	                return;
	            }
	            // 图例元素组的位置参数，通过计算所得x, y, width, height
	            this._itemGroupLocation = this._getItemGroupLocation();

	            this._buildBackground();
	            this._buildItem();

	            for (var i = 0, l = this.shapeList.length; i < l; i++) {
	                this.zr.addShape(this.shapeList[i]);
	            }
	        },

	        /**
	         * 构建所有图例元素
	         */
	        _buildItem: function () {
	            var data = this.legendOption.data;
	            var dataLength = data.length;
	            var itemName;
	            var itemType;
	            var itemShape;
	            var textShape;
	            var textStyle  = this.legendOption.textStyle;
	            var dataTextStyle;
	            var dataFont;
	            var formattedName;

	            var zrWidth = this.zr.getWidth();
	            var zrHeight = this.zr.getHeight();
	            var lastX = this._itemGroupLocation.x;
	            var lastY = this._itemGroupLocation.y;
	            var itemWidth = this.legendOption.itemWidth;
	            var itemHeight = this.legendOption.itemHeight;
	            var itemGap = this.legendOption.itemGap;
	            var color;

	            if (this.legendOption.orient === 'vertical' && this.legendOption.x === 'right') {
	                lastX = this._itemGroupLocation.x
	                        + this._itemGroupLocation.width
	                        - itemWidth;
	            }

	            for (var i = 0; i < dataLength; i++) {
	                dataTextStyle = zrUtil.merge(
	                    data[i].textStyle || {},
	                    textStyle
	                );
	                dataFont = this.getFont(dataTextStyle);
	                
	                itemName = this._getName(data[i]);
	                formattedName = this._getFormatterName(itemName);
	                if (itemName === '') { // 别帮我代码优化
	                    if (this.legendOption.orient === 'horizontal') {
	                        lastX = this._itemGroupLocation.x;
	                        lastY += itemHeight + itemGap;
	                    }
	                    else {
	                        this.legendOption.x === 'right'
	                            ? lastX -= this._itemGroupLocation.maxWidth + itemGap
	                            : lastX += this._itemGroupLocation.maxWidth + itemGap;
	                        lastY = this._itemGroupLocation.y;
	                    }
	                    continue;
	                }
	                itemType = data[i].icon || this._getSomethingByName(itemName).type;
	                
	                color = this.getColor(itemName);

	                if (this.legendOption.orient === 'horizontal') {
	                    if (zrWidth - lastX < 200   // 最后200px做分行预判
	                        && (itemWidth + 5 + zrArea.getTextWidth(formattedName, dataFont)
	                            // 分行的最后一个不用算itemGap
	                            + (i === dataLength - 1 || data[i + 1] === '' ? 0 : itemGap)
	                           ) >= zrWidth - lastX
	                    ) {
	                        lastX = this._itemGroupLocation.x;
	                        lastY += itemHeight + itemGap;
	                    }
	                }
	                else {
	                    if (zrHeight - lastY < 200   // 最后200px做分行预判
	                        && (itemHeight
	                            // 分行的最后一个不用算itemGap
	                            + (i === dataLength - 1 || data[i + 1] === '' ? 0 : itemGap)
	                           ) 
	                           >= zrHeight - lastY
	                    ) {
	                        this.legendOption.x === 'right'
	                        ? lastX -= this._itemGroupLocation.maxWidth + itemGap
	                        : lastX += this._itemGroupLocation.maxWidth + itemGap;
	                        lastY = this._itemGroupLocation.y;
	                    }
	                }

	                // 图形
	                itemShape = this._getItemShapeByType(
	                    lastX, lastY,
	                    itemWidth, itemHeight,
	                    (this._selectedMap[itemName] && this._hasDataMap[itemName] ? color : '#ccc'),
	                    itemType,
	                    color
	                );
	                itemShape._name = itemName;
	                itemShape = new IconShape(itemShape);

	                // 文字
	                textShape = {
	                    // shape: 'text',
	                    zlevel: this.getZlevelBase(),
	                    z: this.getZBase(),
	                    style: {
	                        x: lastX + itemWidth + 5,
	                        y: lastY + itemHeight / 2,
	                        color: this._selectedMap[itemName]
	                                ? (dataTextStyle.color === 'auto' ? color : dataTextStyle.color)
	                                : '#ccc',
	                        text: formattedName,
	                        textFont: dataFont,
	                        textBaseline: 'middle'
	                    },
	                    highlightStyle: {
	                        color: color,
	                        brushType: 'fill'
	                    },
	                    hoverable: !!this.legendOption.selectedMode,
	                    clickable: !!this.legendOption.selectedMode
	                };

	                if (this.legendOption.orient === 'vertical'
	                    && this.legendOption.x === 'right'
	                ) {
	                    textShape.style.x -= (itemWidth + 10);
	                    textShape.style.textAlign = 'right';
	                }

	                textShape._name = itemName;
	                textShape = new TextShape(textShape);
	                
	                if (this.legendOption.selectedMode) {
	                    itemShape.onclick = textShape.onclick = this._legendSelected;
	                    itemShape.onmouseover =  textShape.onmouseover = this._dispatchHoverLink;
	                    itemShape.hoverConnect = textShape.id;
	                    textShape.hoverConnect = itemShape.id;
	                }
	                this.shapeList.push(itemShape);
	                this.shapeList.push(textShape);

	                if (this.legendOption.orient === 'horizontal') {
	                    lastX += itemWidth + 5
	                             + zrArea.getTextWidth(formattedName, dataFont)
	                             + itemGap;
	                }
	                else {
	                    lastY += itemHeight + itemGap;
	                }
	            }
	        
	            if (this.legendOption.orient === 'horizontal'
	                && this.legendOption.x === 'center'
	                && lastY != this._itemGroupLocation.y
	            ) {
	                // 多行橫排居中优化
	                this._mLineOptimize();
	            }
	        },
	        
	        _getName: function(data) {
	            return typeof data.name != 'undefined' ? data.name : data;
	        },

	        _getFormatterName: function(itemName) {
	            var formatter = this.legendOption.formatter;
	            var formattedName;
	            if (typeof formatter === 'function') {
	                formattedName = formatter.call(this.myChart, itemName);
	            }
	            else if (typeof formatter === 'string') {
	                formattedName = formatter.replace('{name}', itemName);
	            }
	            else {
	                formattedName = itemName;
	            }
	            return formattedName;
	        },

	        _getFormatterNameFromData: function(data) {
	            var itemName = this._getName(data);
	            return this._getFormatterName(itemName);
	        },
	        
	        // 多行橫排居中优化
	        _mLineOptimize: function () {
	            var lineOffsetArray = []; // 每行宽度
	            var lastX = this._itemGroupLocation.x;
	            for (var i = 2, l = this.shapeList.length; i < l; i++) {
	                if (this.shapeList[i].style.x === lastX) {
	                    lineOffsetArray.push(
	                        (
	                            this._itemGroupLocation.width 
	                            - (
	                                this.shapeList[i - 1].style.x
	                                + zrArea.getTextWidth(
	                                      this.shapeList[i - 1].style.text,
	                                      this.shapeList[i - 1].style.textFont
	                                  )
	                                - lastX
	                            )
	                        ) / 2
	                    );
	                }
	                else if (i === l - 1) {
	                    lineOffsetArray.push(
	                        (
	                            this._itemGroupLocation.width 
	                            - (
	                                this.shapeList[i].style.x
	                                + zrArea.getTextWidth(
	                                      this.shapeList[i].style.text,
	                                      this.shapeList[i].style.textFont
	                                  )
	                                - lastX
	                            )
	                        ) / 2
	                    );
	                }
	            }
	            var curLineIndex = -1;
	            for (var i = 1, l = this.shapeList.length; i < l; i++) {
	                if (this.shapeList[i].style.x === lastX) {
	                    curLineIndex++;
	                }
	                if (lineOffsetArray[curLineIndex] === 0) {
	                    continue;
	                }
	                else {
	                    this.shapeList[i].style.x += lineOffsetArray[curLineIndex];
	                }
	            }
	        },

	        _buildBackground: function () {
	            var padding = this.reformCssArray(this.legendOption.padding);

	            this.shapeList.push(new RectangleShape({
	                zlevel: this.getZlevelBase(),
	                z: this.getZBase(),
	                hoverable :false,
	                style: {
	                    x: this._itemGroupLocation.x - padding[3],
	                    y: this._itemGroupLocation.y - padding[0],
	                    width: this._itemGroupLocation.width + padding[3] + padding[1],
	                    height: this._itemGroupLocation.height + padding[0] + padding[2],
	                    brushType: this.legendOption.borderWidth === 0 ? 'fill' : 'both',
	                    color: this.legendOption.backgroundColor,
	                    strokeColor: this.legendOption.borderColor,
	                    lineWidth: this.legendOption.borderWidth
	                }
	            }));
	        },

	        /**
	         * 根据选项计算图例实体的位置坐标
	         */
	        _getItemGroupLocation: function () {
	            var data = this.legendOption.data;
	            var dataLength = data.length;
	            var itemGap = this.legendOption.itemGap;
	            var itemWidth = this.legendOption.itemWidth + 5; // 5px是图形和文字的间隔，不可配
	            var itemHeight = this.legendOption.itemHeight;
	            var textStyle  = this.legendOption.textStyle;
	            var font = this.getFont(textStyle);
	            var totalWidth = 0;
	            var totalHeight = 0;
	            var padding = this.reformCssArray(this.legendOption.padding);
	            var zrWidth = this.zr.getWidth() - padding[1] - padding[3];
	            var zrHeight = this.zr.getHeight() - padding[0] - padding[2];
	            
	            var temp = 0; // 宽高计算，用于多行判断
	            var maxWidth = 0; // 垂直布局有用
	            if (this.legendOption.orient === 'horizontal') {
	                // 水平布局，计算总宽度
	                totalHeight = itemHeight;
	                for (var i = 0; i < dataLength; i++) {
	                    if (this._getName(data[i]) === '') {
	                        temp -= itemGap;
	                        totalWidth = Math.max(totalWidth, temp);
	                        totalHeight += itemHeight + itemGap;
	                        temp = 0;
	                        continue;
	                    }
	                    var tempTextWidth = zrArea.getTextWidth(
	                        this._getFormatterNameFromData(data[i]),
	                        data[i].textStyle 
	                        ? this.getFont(zrUtil.merge(
	                            data[i].textStyle || {},
	                            textStyle
	                          ))
	                        : font
	                    );
	                    if (temp + itemWidth + tempTextWidth + itemGap > zrWidth) {
	                        // new line
	                        temp -= itemGap;  // 减去最后一个的itemGap
	                        totalWidth = Math.max(totalWidth, temp);
	                        totalHeight += itemHeight + itemGap;
	                        temp = 0;
	                    }
	                    else {
	                        temp += itemWidth + tempTextWidth + itemGap;
	                        totalWidth = Math.max(totalWidth, temp - itemGap);
	                    }
	                }
	            }
	            else {
	                // 垂直布局，计算总高度
	                for (var i = 0; i < dataLength; i++) {
	                    maxWidth = Math.max(
	                        maxWidth,
	                        zrArea.getTextWidth(
	                            this._getFormatterNameFromData(data[i]),
	                            data[i].textStyle 
	                            ? this.getFont(zrUtil.merge(
	                                  data[i].textStyle || {},
	                                  textStyle
	                              ))
	                            : font
	                        )
	                    );
	                }
	                maxWidth += itemWidth;
	                totalWidth = maxWidth;
	                for (var i = 0; i < dataLength; i++) {
	                    if (this._getName(data[i]) === '') {
	                        totalWidth += maxWidth + itemGap;
	                        temp -= itemGap;  // 减去最后一个的itemGap
	                        totalHeight = Math.max(totalHeight, temp);
	                        temp = 0;
	                        continue;
	                    }
	                    if (temp + itemHeight + itemGap > zrHeight) {
	                        // new line
	                        totalWidth += maxWidth + itemGap;
	                        temp -= itemGap;  // 减去最后一个的itemGap
	                        totalHeight = Math.max(totalHeight, temp);
	                        temp = 0;
	                    }
	                    else {
	                        temp += itemHeight + itemGap;
	                        totalHeight = Math.max(totalHeight, temp - itemGap);
	                    }
	                }
	            }

	            zrWidth = this.zr.getWidth();
	            zrHeight = this.zr.getHeight();
	            var x;
	            switch (this.legendOption.x) {
	                case 'center' :
	                    x = Math.floor((zrWidth - totalWidth) / 2);
	                    break;
	                case 'left' :
	                    x = padding[3] + this.legendOption.borderWidth;
	                    break;
	                case 'right' :
	                    x = zrWidth
	                        - totalWidth
	                        - padding[1]
	                        - padding[3]
	                        - this.legendOption.borderWidth * 2;
	                    break;
	                default :
	                    x = this.parsePercent(this.legendOption.x, zrWidth);
	                    break;
	            }
	            
	            var y;
	            switch (this.legendOption.y) {
	                case 'top' :
	                    y = padding[0] + this.legendOption.borderWidth;
	                    break;
	                case 'bottom' :
	                    y = zrHeight
	                        - totalHeight
	                        - padding[0]
	                        - padding[2]
	                        - this.legendOption.borderWidth * 2;
	                    break;
	                case 'center' :
	                    y = Math.floor((zrHeight - totalHeight) / 2);
	                    break;
	                default :
	                    y = this.parsePercent(this.legendOption.y, zrHeight);
	                    break;
	            }

	            return {
	                x: x,
	                y: y,
	                width: totalWidth,
	                height: totalHeight,
	                maxWidth: maxWidth
	            };
	        },

	        /**
	         * 根据名称返回series数据或data
	         */
	        _getSomethingByName: function (name) {
	            var series = this.option.series;
	            var data;
	            for (var i = 0, l = series.length; i < l; i++) {
	                if (series[i].name === name) {
	                    // 系列名称优先
	                    return {
	                        type: series[i].type,
	                        series: series[i],
	                        seriesIndex: i,
	                        data: null,
	                        dataIndex: -1
	                    };
	                }

	                if (
	                    series[i].type === ecConfig.CHART_TYPE_PIE 
	                    || series[i].type === ecConfig.CHART_TYPE_RADAR
	                    || series[i].type === ecConfig.CHART_TYPE_CHORD
	                    || series[i].type === ecConfig.CHART_TYPE_FORCE
	                    || series[i].type === ecConfig.CHART_TYPE_FUNNEL
	                    || series[i].type === ecConfig.CHART_TYPE_TREEMAP
	                ) {
	                    data = series[i].categories || series[i].data || series[i].nodes;

	                    for (var j = 0, k = data.length; j < k; j++) {
	                        if (data[j].name === name) {
	                            return {
	                                type: series[i].type,
	                                series: series[i],
	                                seriesIndex: i,
	                                data: data[j],
	                                dataIndex: j
	                            };
	                        }
	                    }
	                }
	            }
	            return {
	                type: 'bar',
	                series: null,
	                seriesIndex: -1,
	                data: null,
	                dataIndex: -1
	            };
	        },
	        
	        _getItemShapeByType: function (x, y, width, height, color, itemType, defaultColor) {
	            var highlightColor = color === '#ccc' ? defaultColor : color;
	            var itemShape = {
	                zlevel: this.getZlevelBase(),
	                z: this.getZBase(),
	                style: {
	                    iconType: 'legendicon' + itemType,
	                    x: x,
	                    y: y,
	                    width: width,
	                    height: height,
	                    color: color,
	                    strokeColor: color,
	                    lineWidth: 2
	                },
	                highlightStyle: {
	                    color: highlightColor,
	                    strokeColor: highlightColor,
	                    lineWidth: 1
	                },
	                hoverable: this.legendOption.selectedMode,
	                clickable: this.legendOption.selectedMode
	            };
	            
	            var imageLocation;
	            if (itemType.match('image')) {
	                var imageLocation = itemType.replace(
	                    new RegExp('^image:\\/\\/'), ''
	                );
	                itemType = 'image';
	            }
	            // 特殊设置
	            switch (itemType) {
	                case 'line':
	                    itemShape.style.brushType = 'stroke';
	                    itemShape.highlightStyle.lineWidth = 3;
	                    break;
	                case 'radar':
	                case 'venn':
	                case 'tree':
	                case 'treemap':
	                case 'scatter':
	                    itemShape.highlightStyle.lineWidth = 3;
	                    break;
	                case 'k':
	                    itemShape.style.brushType = 'both';
	                    itemShape.highlightStyle.lineWidth = 3;
	                    itemShape.highlightStyle.color =
	                    itemShape.style.color = this.deepQuery(
	                        [this.ecTheme, ecConfig], 'k.itemStyle.normal.color'
	                    ) || '#fff';
	                    itemShape.style.strokeColor = color != '#ccc' 
	                        ? (
	                            this.deepQuery(
	                                [this.ecTheme, ecConfig], 'k.itemStyle.normal.lineStyle.color'
	                            ) || '#ff3200'
	                        )
	                        : color;
	                    break;
	                case 'image':
	                    itemShape.style.iconType = 'image';
	                    itemShape.style.image = imageLocation;
	                    if (color === '#ccc') {
	                        itemShape.style.opacity = 0.5;
	                    }
	                    break;
	            }
	            return itemShape;
	        },

	        __legendSelected: function (param) {
	            var itemName = param.target._name;
	            if (this.legendOption.selectedMode === 'single') {
	                for (var k in this._selectedMap) {
	                    this._selectedMap[k] = false;
	                }
	            }
	            this._selectedMap[itemName] = !this._selectedMap[itemName];
	            this.messageCenter.dispatch(
	                ecConfig.EVENT.LEGEND_SELECTED,
	                param.event,
	                {
	                    selected: this._selectedMap,
	                    target: itemName
	                },
	                this.myChart
	            );
	        },
	        
	        /**
	         * 产生hover link事件 
	         */
	        __dispatchHoverLink : function(param) {
	            this.messageCenter.dispatch(
	                ecConfig.EVENT.LEGEND_HOVERLINK,
	                param.event,
	                {
	                    target: param.target._name
	                },
	                this.myChart
	            );
	            return;
	        },
	        
	        /**
	         * 刷新
	         */
	        refresh: function (newOption) {
	            if (newOption) {
	                this.option = newOption || this.option;
	                this.option.legend = this.reformOption(this.option.legend);
	                this.legendOption = this.option.legend;
	                
	                var data = this.legendOption.data || [];
	                var itemName;
	                var something;
	                var color;
	                var queryTarget;
	                if (this.legendOption.selected) {
	                    for (var k in this.legendOption.selected) {
	                        this._selectedMap[k] = typeof this._selectedMap[k] != 'undefined'
	                                               ? this._selectedMap[k]
	                                               : this.legendOption.selected[k];
	                    }
	                }
	                for (var i = 0, dataLength = data.length; i < dataLength; i++) {
	                    itemName = this._getName(data[i]);
	                    if (itemName === '') {
	                        continue;
	                    }
	                    something = this._getSomethingByName(itemName);
	                    if (!something.series) {
	                        this._hasDataMap[itemName] = false;
	                    } 
	                    else {
	                        this._hasDataMap[itemName] = true;
	                        if (something.data
	                            && (something.type === ecConfig.CHART_TYPE_PIE
	                                || something.type === ecConfig.CHART_TYPE_FORCE
	                                || something.type === ecConfig.CHART_TYPE_FUNNEL)
	                        ) {
	                            queryTarget = [something.data, something.series];
	                        }
	                        else {
	                            queryTarget = [something.series];
	                        }
	                        
	                        color = this.getItemStyleColor(
	                            this.deepQuery(queryTarget, 'itemStyle.normal.color'),
	                            something.seriesIndex,
	                            something.dataIndex,
	                            something.data
	                        );
	                        if (color && something.type != ecConfig.CHART_TYPE_K) {
	                            this.setColor(itemName, color);
	                        }
	                        this._selectedMap[itemName] = 
	                            this._selectedMap[itemName] != null
	                            ? this._selectedMap[itemName] : true; 
	                    }
	                }
	            }
	            this.clear();
	            this._buildShape();
	        },
	        
	        getRelatedAmount: function(name) {
	            var amount = 0;
	            var series = this.option.series;
	            var data;
	            for (var i = 0, l = series.length; i < l; i++) {
	                if (series[i].name === name) {
	                    // 系列名称优先
	                    amount++;
	                }

	                if (
	                    series[i].type === ecConfig.CHART_TYPE_PIE 
	                    || series[i].type === ecConfig.CHART_TYPE_RADAR
	                    || series[i].type === ecConfig.CHART_TYPE_CHORD
	                    || series[i].type === ecConfig.CHART_TYPE_FORCE
	                    || series[i].type === ecConfig.CHART_TYPE_FUNNEL
	                ) {
	                    data = series[i].type != ecConfig.CHART_TYPE_FORCE
	                           ? series[i].data         // 饼图、雷达图、和弦图得查找里面的数据名字
	                           : series[i].categories;  // 力导布局查找categories配置
	                    for (var j = 0, k = data.length; j < k; j++) {
	                        if (data[j].name === name && data[j].value != '-') {
	                            amount++;
	                        }
	                    }
	                }
	            }
	            return amount;
	        },

	        setColor: function (legendName, color) {
	            this._colorMap[legendName] = color;
	        },

	        getColor: function (legendName) {
	            if (!this._colorMap[legendName]) {
	                this._colorMap[legendName] = this.zr.getColor(this._colorIndex++);
	            }
	            return this._colorMap[legendName];
	        },
	        
	        hasColor: function (legendName) {
	            return this._colorMap[legendName] ? this._colorMap[legendName] : false;
	        },

	        add: function (name, color){
	            var data = this.legendOption.data;
	            for (var i = 0, dataLength = data.length; i < dataLength; i++) {
	                if (this._getName(data[i]) === name) {
	                    // 已有就不重复加了
	                    return;
	                }
	            }
	            this.legendOption.data.push(name);
	            this.setColor(name,color);
	            this._selectedMap[name] = true;
	            this._hasDataMap[name] = true;
	        },

	        del: function (name){
	            var data = this.legendOption.data;
	            for (var i = 0, dataLength = data.length; i < dataLength; i++) {
	                if (this._getName(data[i]) === name) {
	                    return this.legendOption.data.splice(i, 1);
	                }
	            }
	        },
	        
	        /**
	         * 特殊图形元素回调设置
	         * @param {Object} name
	         * @param {Object} itemShape
	         */
	        getItemShape: function (name) {
	            if (name == null) {
	                return;
	            }
	            var shape;
	            for (var i = 0, l = this.shapeList.length; i < l; i++) {
	                shape = this.shapeList[i];
	                if (shape._name === name && shape.type != 'text') {
	                    return shape;
	                }
	            }
	        },
	        
	        /**
	         * 特殊图形元素回调设置
	         * @param {Object} name
	         * @param {Object} itemShape
	         */
	        setItemShape: function (name, itemShape) {
	            var shape;
	            for (var i = 0, l = this.shapeList.length; i < l; i++) {
	                shape = this.shapeList[i];
	                if (shape._name === name && shape.type != 'text') {
	                    if (!this._selectedMap[name]) {
	                        itemShape.style.color = '#ccc';
	                        itemShape.style.strokeColor = '#ccc';
	                    }
	                    this.zr.modShape(shape.id, itemShape);
	                }
	            }
	        },

	        isSelected: function (itemName) {
	            if (typeof this._selectedMap[itemName] != 'undefined') {
	                return this._selectedMap[itemName];
	            }
	            else {
	                // 没在legend里定义的都为true啊~
	                return true;
	            }
	        },
	        
	        getSelectedMap: function () {
	            return this._selectedMap;
	        },
	        
	        setSelected: function(itemName, selectStatus) {
	            if (this.legendOption.selectedMode === 'single') {
	                for (var k in this._selectedMap) {
	                    this._selectedMap[k] = false;
	                }
	            }
	            this._selectedMap[itemName] = selectStatus;
	            this.messageCenter.dispatch(
	                ecConfig.EVENT.LEGEND_SELECTED,
	                null,
	                {
	                    selected: this._selectedMap,
	                    target: itemName
	                },
	                this.myChart
	            );
	        },
	        
	        /**
	         * 图例选择
	         */
	        onlegendSelected: function (param, status) {
	            var legendSelected = param.selected;
	            for (var itemName in legendSelected) {
	                if (this._selectedMap[itemName] != legendSelected[itemName]) {
	                    // 有一项不一致都需要重绘
	                    status.needRefresh = true;
	                }
	                this._selectedMap[itemName] = legendSelected[itemName];
	            }
	            return;
	        }
	    };
	    
	    var legendIcon = {
	        line: function (ctx, style) {
	            var dy = style.height / 2;
	            ctx.moveTo(style.x,     style.y + dy);
	            ctx.lineTo(style.x + style.width,style.y + dy);
	        },
	        
	        pie: function (ctx, style) {
	            var x = style.x;
	            var y = style.y;
	            var width = style.width;
	            var height = style.height;
	            SectorShape.prototype.buildPath(ctx, {
	                x: x + width / 2,
	                y: y + height + 2,
	                r: height,
	                r0: 6,
	                startAngle: 45,
	                endAngle: 135
	            });
	        },
	        
	        eventRiver: function (ctx, style) {
	            var x = style.x;
	            var y = style.y;
	            var width = style.width;
	            var height = style.height;
	            ctx.moveTo(x, y + height);
	            ctx.bezierCurveTo(
	                x + width, y + height, x, y + 4, x + width, y + 4
	            );
	            ctx.lineTo(x + width, y);
	            ctx.bezierCurveTo(
	                x, y, x + width, y + height - 4, x, y + height - 4
	            );
	            ctx.lineTo(x, y + height);
	        },
	        
	        k: function (ctx, style) {
	            var x = style.x;
	            var y = style.y;
	            var width = style.width;
	            var height = style.height;
	            CandleShape.prototype.buildPath(ctx, {
	                x: x + width / 2,
	                y: [y + 1, y + 1, y + height - 6, y + height],
	                width: width - 6
	            });
	        },
	        
	        bar: function (ctx, style) {
	            var x = style.x;
	            var y = style.y +1;
	            var width = style.width;
	            var height = style.height - 2;
	            var r = 3;
	            
	            ctx.moveTo(x + r, y);
	            ctx.lineTo(x + width - r, y);
	            ctx.quadraticCurveTo(
	                x + width, y, x + width, y + r
	            );
	            ctx.lineTo(x + width, y + height - r);
	            ctx.quadraticCurveTo(
	                x + width, y + height, x + width - r, y + height
	            );
	            ctx.lineTo(x + r, y + height);
	            ctx.quadraticCurveTo(
	                x, y + height, x, y + height - r
	            );
	            ctx.lineTo(x, y + r);
	            ctx.quadraticCurveTo(x, y, x + r, y);
	        },
	        
	        force: function (ctx, style) {
	            IconShape.prototype.iconLibrary.circle(ctx, style);
	        },
	        
	        radar: function (ctx, style) {
	            var n = 6;
	            var x = style.x + style.width / 2;
	            var y = style.y + style.height / 2;
	            var r = style.height / 2;

	            var dStep = 2 * Math.PI / n;
	            var deg = -Math.PI / 2;
	            var xStart = x + r * Math.cos(deg);
	            var yStart = y + r * Math.sin(deg);
	            
	            ctx.moveTo(xStart, yStart);
	            deg += dStep;
	            for (var i = 0, end = n - 1; i < end; i ++) {
	                ctx.lineTo(x + r * Math.cos(deg), y + r * Math.sin(deg));
	                deg += dStep;
	            }
	            ctx.lineTo(xStart, yStart);
	        }
	    };
	    legendIcon.chord = legendIcon.pie;
	    legendIcon.map = legendIcon.bar;
	    
	    for (var k in legendIcon) {
	        IconShape.prototype.iconLibrary['legendicon' + k] = legendIcon[k];
	    }
	    
	    zrUtil.inherits(Legend, Base);
	    
	    __webpack_require__(516).define('legend', Legend);
	    
	    return Legend;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));




/***/ },
/* 521 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * zrender
	 *
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 * shape类：蜡烛
	 * 可配图形属性：
	   {
	       // 基础属性
	       shape  : 'candle',       // 必须，shape类标识，需要显式指定
	       id     : {string},       // 必须，图形唯一标识，可通过'zrender/tool/guid'方法生成
	       zlevel : {number},       // 默认为0，z层level，决定绘画在哪层canvas中
	       invisible : {boolean},   // 默认为false，是否可见

	       // 样式属性，默认状态样式样式属性
	       style  : {
	           x             : {number},  // 必须，横坐标
	           y             : {Array},   // 必须，纵坐标数组
	       },

	       // 样式属性，高亮样式属性，当不存在highlightStyle时使用基于默认样式扩展显示
	       highlightStyle : {
	           // 同style
	       }

	       // 交互属性，详见shape.Base

	       // 事件属性，详见shape.Base
	   }
	         例子：
	   {
	       shape  : 'candle',
	       id     : '123456',
	       zlevel : 1,
	       style  : {
	           x : 200,
	           y : [100,123,90,125],
	           width : 150,
	           color : '#eee',
	           text : 'Baidu'
	       },
	       myName : 'kener',  // 可自带任何有效自定义属性

	       clickable : true,
	       onClick : function (eventPacket) {
	           alert(eventPacket.target.myName);
	       }
	   }
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	    var Base = __webpack_require__(473);
	    var zrUtil = __webpack_require__(456);

	    function Candle(options) {
	        Base.call(this, options);
	    }

	    Candle.prototype =  {
	        type: 'candle',
	        _numberOrder : function (a, b) {
	            return b - a;
	        },

	        /**
	         * 创建矩形路径
	         * @param {Context2D} ctx Canvas 2D上下文
	         * @param {Object} style 样式
	         */
	        buildPath : function (ctx, style) {
	            var yList = zrUtil.clone(style.y).sort(this._numberOrder);

	            ctx.moveTo(style.x, yList[3]);
	            ctx.lineTo(style.x, yList[2]);
	            ctx.moveTo(style.x - style.width / 2, yList[2]);
	            ctx.rect(
	                style.x - style.width / 2,
	                yList[2],
	                style.width,
	                yList[1] - yList[2]
	            );
	            ctx.moveTo(style.x, yList[1]);
	            ctx.lineTo(style.x, yList[0]);
	        },

	        /**
	         * 返回矩形区域，用于局部刷新和文字定位
	         * @param {Object} style
	         */
	        getRect : function (style) {
	            if (!style.__rect) {
	                var lineWidth = 0;
	                if (style.brushType == 'stroke' || style.brushType == 'fill') {
	                    lineWidth = style.lineWidth || 1;
	                }

	                var yList = zrUtil.clone(style.y).sort(this._numberOrder);
	                style.__rect = {
	                    x : Math.round(style.x - style.width / 2 - lineWidth / 2),
	                    y : Math.round(yList[3] - lineWidth / 2),
	                    width : style.width + lineWidth,
	                    height : yList[0] - yList[3] + lineWidth
	                };
	            }

	            return style.__rect;
	        },


	        isCover : __webpack_require__(500)
	    };

	    zrUtil.inherits(Candle, Base);

	    return Candle;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 522 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * 扇形
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 * @module zrender/shape/Sector
	 * @example
	 *     var Sector = require('zrender/shape/Sector');
	 *     var shape = new Sector({
	 *         style: {
	 *             x: 100,
	 *             y: 100,
	 *             r: 60,
	 *             r0: 30,
	 *             startAngle: 0,
	 *             endEngle: 180
	 *         } 
	 *     });
	 *     zr.addShape(shape);
	 */

	/**
	 * @typedef {Object} ISectorStyle
	 * @property {number} x 圆心x坐标
	 * @property {number} y 圆心y坐标
	 * @property {number} r 外圆半径
	 * @property {number} [r0=0] 内圆半径，指定后将出现内弧，同时扇边长度为`r - r0`
	 * @property {number} startAngle 起始角度，`[0, 360)`
	 * @property {number} endAngle 结束角度，`(0, 360]`
	 * @property {boolean} [clockWise=false] 是否是顺时针
	 * @property {string} [brushType='fill']
	 * @property {string} [color='#000000'] 填充颜色
	 * @property {string} [strokeColor='#000000'] 描边颜色
	 * @property {string} [lineCape='butt'] 线帽样式，可以是 butt, round, square
	 * @property {number} [lineWidth=1] 描边宽度
	 * @property {number} [opacity=1] 绘制透明度
	 * @property {number} [shadowBlur=0] 阴影模糊度，大于0有效
	 * @property {string} [shadowColor='#000000'] 阴影颜色
	 * @property {number} [shadowOffsetX=0] 阴影横向偏移
	 * @property {number} [shadowOffsetY=0] 阴影纵向偏移
	 * @property {string} [text] 图形中的附加文本
	 * @property {string} [textColor='#000000'] 文本颜色
	 * @property {string} [textFont] 附加文本样式，eg:'bold 18px verdana'
	 * @property {string} [textPosition='end'] 附加文本位置, 可以是 inside, left, right, top, bottom
	 * @property {string} [textAlign] 默认根据textPosition自动设置，附加文本水平对齐。
	 *                                可以是start, end, left, right, center
	 * @property {string} [textBaseline] 默认根据textPosition自动设置，附加文本垂直对齐。
	 *                                可以是top, bottom, middle, alphabetic, hanging, ideographic
	 */

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {

	        var math = __webpack_require__(488);
	        var computeBoundingBox = __webpack_require__(523);
	        var vec2 = __webpack_require__(466);
	        var Base = __webpack_require__(473);
	        
	        var min0 = vec2.create();
	        var min1 = vec2.create();
	        var max0 = vec2.create();
	        var max1 = vec2.create();
	        /**
	         * @alias module:zrender/shape/Sector
	         * @constructor
	         * @extends module:zrender/shape/Base
	         * @param {Object} options
	         */
	        var Sector = function (options) {
	            Base.call(this, options);
	            /**
	             * 扇形绘制样式
	             * @name module:zrender/shape/Sector#style
	             * @type {module:zrender/shape/Sector~ISectorStyle}
	             */
	            /**
	             * 扇形高亮绘制样式
	             * @name module:zrender/shape/Sector#highlightStyle
	             * @type {module:zrender/shape/Sector~ISectorStyle}
	             */
	        };

	        Sector.prototype = {
	            type: 'sector',

	            /**
	             * 创建扇形路径
	             * @param {CanvasRenderingContext2D} ctx
	             * @param {module:zrender/shape/Sector~ISectorStyle} style
	             */
	            buildPath : function (ctx, style) {
	                var x = style.x;   // 圆心x
	                var y = style.y;   // 圆心y
	                var r0 = style.r0 || 0;     // 形内半径[0,r)
	                var r = style.r;            // 扇形外半径(0,r]
	                var startAngle = style.startAngle;          // 起始角度[0,360)
	                var endAngle = style.endAngle;              // 结束角度(0,360]
	                var clockWise = style.clockWise || false;

	                startAngle = math.degreeToRadian(startAngle);
	                endAngle = math.degreeToRadian(endAngle);

	                if (!clockWise) {
	                    // 扇形默认是逆时针方向，Y轴向上
	                    // 这个跟arc的标准不一样，为了兼容echarts
	                    startAngle = -startAngle;
	                    endAngle = -endAngle;
	                }

	                var unitX = math.cos(startAngle);
	                var unitY = math.sin(startAngle);
	                ctx.moveTo(
	                    unitX * r0 + x,
	                    unitY * r0 + y
	                );

	                ctx.lineTo(
	                    unitX * r + x,
	                    unitY * r + y
	                );

	                ctx.arc(x, y, r, startAngle, endAngle, !clockWise);

	                ctx.lineTo(
	                    math.cos(endAngle) * r0 + x,
	                    math.sin(endAngle) * r0 + y
	                );

	                if (r0 !== 0) {
	                    ctx.arc(x, y, r0, endAngle, startAngle, clockWise);
	                }

	                ctx.closePath();

	                return;
	            },

	            /**
	             * 返回扇形包围盒矩形
	             * @param {module:zrender/shape/Sector~ISectorStyle} style
	             * @return {module:zrender/shape/Base~IBoundingRect}
	             */
	            getRect : function (style) {
	                if (style.__rect) {
	                    return style.__rect;
	                }
	                
	                var x = style.x;   // 圆心x
	                var y = style.y;   // 圆心y
	                var r0 = style.r0 || 0;     // 形内半径[0,r)
	                var r = style.r;            // 扇形外半径(0,r]
	                var startAngle = math.degreeToRadian(style.startAngle);
	                var endAngle = math.degreeToRadian(style.endAngle);
	                var clockWise = style.clockWise;

	                if (!clockWise) {
	                    startAngle = -startAngle;
	                    endAngle = -endAngle;
	                }

	                if (r0 > 1) {
	                    computeBoundingBox.arc(
	                        x, y, r0, startAngle, endAngle, !clockWise, min0, max0
	                    );   
	                } else {
	                    min0[0] = max0[0] = x;
	                    min0[1] = max0[1] = y;
	                }
	                computeBoundingBox.arc(
	                    x, y, r, startAngle, endAngle, !clockWise, min1, max1
	                );

	                vec2.min(min0, min0, min1);
	                vec2.max(max0, max0, max1);
	                style.__rect = {
	                    x: min0[0],
	                    y: min0[1],
	                    width: max0[0] - min0[0],
	                    height: max0[1] - min0[1]
	                };
	                return style.__rect;
	            }
	        };


	        __webpack_require__(456).inherits(Sector, Base);
	        return Sector;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 523 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *         pissang(https://github.com/pissang)
	 *         errorrik (errorrik@gmail.com)
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	        var vec2 = __webpack_require__(466);
	        var curve = __webpack_require__(472);

	        /**
	         * 从顶点数组中计算出最小包围盒，写入`min`和`max`中
	         * @module zrender/tool/computeBoundingBox
	         * @param {Array<Object>} points 顶点数组
	         * @param {number} min
	         * @param {number} max
	         */
	        function computeBoundingBox(points, min, max) {
	            if (points.length === 0) {
	                return;
	            }
	            var left = points[0][0];
	            var right = points[0][0];
	            var top = points[0][1];
	            var bottom = points[0][1];
	            
	            for (var i = 1; i < points.length; i++) {
	                var p = points[i];
	                if (p[0] < left) {
	                    left = p[0];
	                }
	                if (p[0] > right) {
	                    right = p[0];
	                }
	                if (p[1] < top) {
	                    top = p[1];
	                }
	                if (p[1] > bottom) {
	                    bottom = p[1];
	                }
	            }

	            min[0] = left;
	            min[1] = top;
	            max[0] = right;
	            max[1] = bottom;
	        }

	        /**
	         * 从三阶贝塞尔曲线(p0, p1, p2, p3)中计算出最小包围盒，写入`min`和`max`中
	         * @memberOf module:zrender/tool/computeBoundingBox
	         * @param {Array.<number>} p0
	         * @param {Array.<number>} p1
	         * @param {Array.<number>} p2
	         * @param {Array.<number>} p3
	         * @param {Array.<number>} min
	         * @param {Array.<number>} max
	         */
	        function computeCubeBezierBoundingBox(p0, p1, p2, p3, min, max) {
	            var xDim = [];
	            curve.cubicExtrema(p0[0], p1[0], p2[0], p3[0], xDim);
	            for (var i = 0; i < xDim.length; i++) {
	                xDim[i] = curve.cubicAt(p0[0], p1[0], p2[0], p3[0], xDim[i]);
	            }
	            var yDim = [];
	            curve.cubicExtrema(p0[1], p1[1], p2[1], p3[1], yDim);
	            for (var i = 0; i < yDim.length; i++) {
	                yDim[i] = curve.cubicAt(p0[1], p1[1], p2[1], p3[1], yDim[i]);
	            }

	            xDim.push(p0[0], p3[0]);
	            yDim.push(p0[1], p3[1]);

	            var left = Math.min.apply(null, xDim);
	            var right = Math.max.apply(null, xDim);
	            var top = Math.min.apply(null, yDim);
	            var bottom = Math.max.apply(null, yDim);

	            min[0] = left;
	            min[1] = top;
	            max[0] = right;
	            max[1] = bottom;
	        }

	        /**
	         * 从二阶贝塞尔曲线(p0, p1, p2)中计算出最小包围盒，写入`min`和`max`中
	         * @memberOf module:zrender/tool/computeBoundingBox
	         * @param {Array.<number>} p0
	         * @param {Array.<number>} p1
	         * @param {Array.<number>} p2
	         * @param {Array.<number>} min
	         * @param {Array.<number>} max
	         */
	        function computeQuadraticBezierBoundingBox(p0, p1, p2, min, max) {
	            // Find extremities, where derivative in x dim or y dim is zero
	            var t1 = curve.quadraticExtremum(p0[0], p1[0], p2[0]);
	            var t2 = curve.quadraticExtremum(p0[1], p1[1], p2[1]);

	            t1 = Math.max(Math.min(t1, 1), 0);
	            t2 = Math.max(Math.min(t2, 1), 0);

	            var ct1 = 1 - t1;
	            var ct2 = 1 - t2;

	            var x1 = ct1 * ct1 * p0[0] 
	                     + 2 * ct1 * t1 * p1[0] 
	                     + t1 * t1 * p2[0];
	            var y1 = ct1 * ct1 * p0[1] 
	                     + 2 * ct1 * t1 * p1[1] 
	                     + t1 * t1 * p2[1];

	            var x2 = ct2 * ct2 * p0[0] 
	                     + 2 * ct2 * t2 * p1[0] 
	                     + t2 * t2 * p2[0];
	            var y2 = ct2 * ct2 * p0[1] 
	                     + 2 * ct2 * t2 * p1[1] 
	                     + t2 * t2 * p2[1];
	            min[0] = Math.min(p0[0], p2[0], x1, x2);
	            min[1] = Math.min(p0[1], p2[1], y1, y2);
	            max[0] = Math.max(p0[0], p2[0], x1, x2);
	            max[1] = Math.max(p0[1], p2[1], y1, y2);
	        }

	        var start = vec2.create();
	        var end = vec2.create();
	        var extremity = vec2.create();
	        /**
	         * 从圆弧中计算出最小包围盒，写入`min`和`max`中
	         * @method
	         * @memberOf module:zrender/tool/computeBoundingBox
	         * @param {Array.<number>} center 圆弧中心点
	         * @param {number} radius 圆弧半径
	         * @param {number} startAngle 圆弧开始角度
	         * @param {number} endAngle 圆弧结束角度
	         * @param {number} anticlockwise 是否是顺时针
	         * @param {Array.<number>} min
	         * @param {Array.<number>} max
	         */
	        var computeArcBoundingBox = function (
	            x, y, r, startAngle, endAngle, anticlockwise, min, max
	        ) { 
	            if (Math.abs(startAngle - endAngle) >= Math.PI * 2) {
	                // Is a circle
	                min[0] = x - r;
	                min[1] = y - r;
	                max[0] = x + r;
	                max[1] = y + r;
	                return;
	            }

	            start[0] = Math.cos(startAngle) * r + x;
	            start[1] = Math.sin(startAngle) * r + y;

	            end[0] = Math.cos(endAngle) * r + x;
	            end[1] = Math.sin(endAngle) * r + y;

	            vec2.min(min, start, end);
	            vec2.max(max, start, end);
	            
	            // Thresh to [0, Math.PI * 2]
	            startAngle = startAngle % (Math.PI * 2);
	            if (startAngle < 0) {
	                startAngle = startAngle + Math.PI * 2;
	            }
	            endAngle = endAngle % (Math.PI * 2);
	            if (endAngle < 0) {
	                endAngle = endAngle + Math.PI * 2;
	            }

	            if (startAngle > endAngle && !anticlockwise) {
	                endAngle += Math.PI * 2;
	            } else if (startAngle < endAngle && anticlockwise) {
	                startAngle += Math.PI * 2;
	            }
	            if (anticlockwise) {
	                var tmp = endAngle;
	                endAngle = startAngle;
	                startAngle = tmp;
	            }

	            // var number = 0;
	            // var step = (anticlockwise ? -Math.PI : Math.PI) / 2;
	            for (var angle = 0; angle < endAngle; angle += Math.PI / 2) {
	                if (angle > startAngle) {
	                    extremity[0] = Math.cos(angle) * r + x;
	                    extremity[1] = Math.sin(angle) * r + y;

	                    vec2.min(min, extremity, min);
	                    vec2.max(max, extremity, max);
	                }
	            }
	        };

	        computeBoundingBox.cubeBezier = computeCubeBezierBoundingBox;
	        computeBoundingBox.quadraticBezier = computeQuadraticBezierBoundingBox;
	        computeBoundingBox.arc = computeArcBoundingBox;

	        return computeBoundingBox;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 524 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * echarts组件：时间轴组件
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	    var Base = __webpack_require__(508);
	    
	    // 图形依赖
	    var RectangleShape = __webpack_require__(476);
	    var IconShape = __webpack_require__(486);
	    var ChainShape = __webpack_require__(525);
	    
	    var ecConfig = __webpack_require__(455);
	    ecConfig.timeline = {
	        zlevel: 0,                  // 一级层叠
	        z: 4,                       // 二级层叠
	        show: true,
	        type: 'time',  // 模式是时间类型，支持 number
	        notMerge: false,
	        realtime: true,
	        x: 80,
	        // y: {number},
	        x2: 80,
	        y2: 0,
	        // width: {totalWidth} - x - x2,
	        height: 50,
	        backgroundColor: 'rgba(0,0,0,0)',   // 时间轴背景颜色
	        borderColor: '#ccc',               // 时间轴边框颜色
	        borderWidth: 0,                    // 时间轴边框线宽，单位px，默认为0（无边框）
	        padding: 5,                        // 时间轴内边距，单位px，默认各方向内边距为5，
	        controlPosition: 'left',           // 'right' | 'none'
	        autoPlay: false,
	        loop: true,
	        playInterval: 2000,                // 播放时间间隔，单位ms
	        lineStyle: {
	            width: 1,
	            color: '#666',
	            type: 'dashed'
	        },
	        label: {                            // 文本标签
	            show: true,
	            interval: 'auto',
	            rotate: 0,
	            // formatter: null,
	            textStyle: {                    // 其余属性默认使用全局文本样式，详见TEXTSTYLE
	                color: '#333'
	            }
	        },
	        checkpointStyle: {
	            symbol: 'auto',
	            symbolSize: 'auto',
	            color: 'auto',
	            borderColor: 'auto',
	            borderWidth: 'auto',
	            label: {                            // 文本标签
	                show: false,
	                textStyle: {                    // 其余属性默认使用全局文本样式，详见TEXTSTYLE
	                    color: 'auto'
	                }
	            }
	        },
	        controlStyle: {
	            itemSize: 15,
	            itemGap: 5,
	            normal: { color: '#333'},
	            emphasis: { color: '#1e90ff'}
	        },
	        symbol: 'emptyDiamond',
	        symbolSize: 4,
	        currentIndex: 0
	        // data: []
	    };

	    var zrUtil = __webpack_require__(456);
	    var zrArea = __webpack_require__(471);
	    var zrEvent = __webpack_require__(458);

	    /**
	     * 构造函数
	     * @param {Object} messageCenter echart消息中心
	     * @param {ZRender} zr zrender实例
	     * @param {Object} option 图表参数
	     */
	    function Timeline(ecTheme, messageCenter, zr, option, myChart) {
	        Base.call(this, ecTheme, messageCenter, zr, option, myChart);

	        var self = this;
	        self._onclick = function(param) {
	            return self.__onclick(param);
	        };
	        self._ondrift = function (dx, dy) {
	            return self.__ondrift(this, dx, dy);
	        };
	        self._ondragend = function () {
	            return self.__ondragend();
	        };
	        self._setCurrentOption = function() {
	            var timelineOption = self.timelineOption;
	            self.currentIndex %= timelineOption.data.length;
	            // console.log(self.currentIndex);
	            var curOption = self.options[self.currentIndex] || {};
	            self.myChart._setOption(curOption, timelineOption.notMerge, true);
	            
	            self.messageCenter.dispatch(
	                ecConfig.EVENT.TIMELINE_CHANGED,
	                null,
	                {
	                    currentIndex: self.currentIndex,
	                    data: timelineOption.data[self.currentIndex].name != null
	                          ? timelineOption.data[self.currentIndex].name
	                          : timelineOption.data[self.currentIndex]
	                },
	                self.myChart
	            );
	        };
	        self._onFrame = function() {
	            self._setCurrentOption();
	            self._syncHandleShape();
	            
	            if (self.timelineOption.autoPlay) {
	                self.playTicket = setTimeout(
	                    function() {
	                        self.currentIndex += 1;
	                        if (!self.timelineOption.loop
	                            && self.currentIndex >= self.timelineOption.data.length
	                        ) {
	                            self.currentIndex = self.timelineOption.data.length - 1;
	                            self.stop();
	                            return;
	                        }
	                        self._onFrame();
	                    },
	                    self.timelineOption.playInterval
	                );
	            }
	        };

	        this.setTheme(false);
	        this.options = this.option.options;
	        this.currentIndex = this.timelineOption.currentIndex % this.timelineOption.data.length;
	        
	        if (!this.timelineOption.notMerge && this.currentIndex !== 0) {
	            /*
	            for (var i = 1, l = this.timelineOption.data.length; i < l; i++) {
	                this.options[i] = zrUtil.merge(
	                    this.options[i], this.options[i - 1]
	                );
	            }
	            */
	           this.options[this.currentIndex] = zrUtil.merge(
	               this.options[this.currentIndex], this.options[0]
	           );
	        }
	        
	        if (this.timelineOption.show) {
	            this._buildShape();
	            this._syncHandleShape();
	        }
	        
	        this._setCurrentOption();
	        
	        if (this.timelineOption.autoPlay) {
	            var self = this;
	            this.playTicket = setTimeout(
	                function() {
	                    self.play();
	                },
	                this.ecTheme.animationDuration != null
	                ? this.ecTheme.animationDuration
	                : ecConfig.animationDuration
	            );
	        }
	    }
	    
	    Timeline.prototype = {
	        type: ecConfig.COMPONENT_TYPE_TIMELINE,
	        _buildShape: function () {
	            // 位置参数，通过计算所得x, y, width, height
	            this._location = this._getLocation();
	            this._buildBackground();
	            this._buildControl();
	            this._chainPoint = this._getChainPoint();
	            if (this.timelineOption.label.show) {
	                // 标签显示的挑选间隔
	                var interval = this._getInterval();
	                for (var i = 0, len = this._chainPoint.length; i < len; i += interval) {
	                    this._chainPoint[i].showLabel = true;
	                }
	            }
	            this._buildChain();
	            this._buildHandle();

	            for (var i = 0, l = this.shapeList.length; i < l; i++) {
	                this.zr.addShape(this.shapeList[i]);
	            }
	        },

	        /**
	         * 根据选项计算实体的位置坐标
	         */
	        _getLocation: function () {
	            var timelineOption = this.timelineOption;
	            var padding = this.reformCssArray(this.timelineOption.padding);
	            
	            // 水平布局
	            var zrWidth = this.zr.getWidth();
	            var x = this.parsePercent(timelineOption.x, zrWidth);
	            var x2 = this.parsePercent(timelineOption.x2, zrWidth);
	            var width;
	            if (timelineOption.width == null) {
	                width = zrWidth - x - x2;
	                x2 = zrWidth - x2;
	            }
	            else {
	                width = this.parsePercent(timelineOption.width, zrWidth);
	                x2 = x + width;
	            }

	            var zrHeight = this.zr.getHeight();
	            var height = this.parsePercent(timelineOption.height, zrHeight);
	            var y;
	            var y2;
	            if (timelineOption.y != null) {
	                y = this.parsePercent(timelineOption.y, zrHeight);
	                y2 = y + height;
	            }
	            else {
	                y2 = zrHeight - this.parsePercent(timelineOption.y2, zrHeight);
	                y = y2 - height;
	            }

	            return {
	                x: x + padding[3],
	                y: y + padding[0],
	                x2: x2 - padding[1],
	                y2: y2 - padding[2],
	                width: width - padding[1] - padding[3],
	                height: height - padding[0] - padding[2]
	            };
	        },

	        _getReformedLabel: function (idx) {
	            var timelineOption = this.timelineOption;
	            var data = timelineOption.data[idx].name != null
	                       ? timelineOption.data[idx].name
	                       : timelineOption.data[idx];
	            var formatter = timelineOption.data[idx].formatter 
	                            || timelineOption.label.formatter;
	            if (formatter) {
	                if (typeof formatter === 'function') {
	                    data = formatter.call(this.myChart, data);
	                }
	                else if (typeof formatter === 'string') {
	                    data = formatter.replace('{value}', data);
	                }
	            }
	            return data;
	        },
	        
	        /**
	         * 计算标签显示挑选间隔
	         */
	        _getInterval: function () {
	            var chainPoint = this._chainPoint;
	            var timelineOption = this.timelineOption;
	            var interval   = timelineOption.label.interval;
	            if (interval === 'auto') {
	                // 麻烦的自适应计算
	                var fontSize = timelineOption.label.textStyle.fontSize;
	                var data = timelineOption.data;
	                var dataLength = timelineOption.data.length;

	                // 横向
	                if (dataLength > 3) {
	                    var isEnough = false;
	                    var labelSpace;
	                    var labelSize;
	                    interval = 0;
	                    while (!isEnough && interval < dataLength) {
	                        interval++;
	                        isEnough = true;
	                        for (var i = interval; i < dataLength; i += interval) {
	                            labelSpace = chainPoint[i].x - chainPoint[i - interval].x;
	                            if (timelineOption.label.rotate !== 0) {
	                                // 有旋转
	                                labelSize = fontSize;
	                            }
	                            else if (data[i].textStyle) {
	                                labelSize = zrArea.getTextWidth(
	                                    chainPoint[i].name,
	                                    chainPoint[i].textFont
	                                );
	                            }
	                            else {
	                                // 不定义data级特殊文本样式，用fontSize优化getTextWidth
	                                var label = chainPoint[i].name + '';
	                                var wLen = (label.match(/\w/g) || '').length;
	                                var oLen = label.length - wLen;
	                                labelSize = wLen * fontSize * 2 / 3 + oLen * fontSize;
	                            }

	                            if (labelSpace < labelSize) {
	                                // 放不下，中断循环让interval++
	                                isEnough = false;
	                                break;
	                            }
	                        }
	                    }
	                }
	                else {
	                    // 少于3个则全部显示
	                    interval = 1;
	                }
	            }
	            else {
	                // 用户自定义间隔
	                interval = interval - 0 + 1;
	            }

	            return interval;
	        },
	        
	        /**
	         * 根据选项计算时间链条上的坐标及symbolList
	         */
	        _getChainPoint: function() {
	            var timelineOption = this.timelineOption;
	            var symbol = timelineOption.symbol.toLowerCase();
	            var symbolSize = timelineOption.symbolSize;
	            var rotate = timelineOption.label.rotate;
	            var textStyle = timelineOption.label.textStyle;
	            var textFont = this.getFont(textStyle);
	            var dataTextStyle;
	            var data = timelineOption.data;
	            var x = this._location.x;
	            var y = this._location.y + this._location.height / 4 * 3;
	            var width = this._location.x2 - this._location.x;
	            var len = data.length;
	            
	            function _getName(i) {
	                return (data[i].name != null ? data[i].name : data[i] + '');
	            }
	            var xList = [];
	            if (len > 1) {
	                var boundaryGap = width / len;
	                boundaryGap = boundaryGap > 50 ? 50 : (boundaryGap < 20 ? 5 : boundaryGap);
	                width -= boundaryGap * 2;
	                if (timelineOption.type === 'number') {
	                    // 平均分布
	                    for (var i = 0; i < len; i++) {
	                        xList.push(x + boundaryGap + width / (len - 1) * i);
	                    }
	                }
	                else {
	                    // 时间比例
	                    xList[0] = new Date(_getName(0).replace(/-/g, '/'));
	                    xList[len - 1] = new Date(_getName(len - 1).replace(/-/g, '/')) - xList[0];
	                    for (var i = 1; i < len; i++) {
	                        xList[i] =  x + boundaryGap 
	                                    + width 
	                                      * (new Date(_getName(i).replace(/-/g, '/')) - xList[0]) 
	                                      / xList[len - 1];
	                    }
	                    xList[0] = x + boundaryGap;
	                }
	            }
	            else {
	                xList.push(x + width / 2);
	            }
	            
	            var list = [];
	            var curSymbol;
	            var n;
	            var isEmpty;
	            var textAlign;
	            var rotation;
	            for (var i = 0; i < len; i++) {
	                x = xList[i];
	                curSymbol = (data[i].symbol && data[i].symbol.toLowerCase()) || symbol;
	                if (curSymbol.match('empty')) {
	                    curSymbol = curSymbol.replace('empty', '');
	                    isEmpty = true;
	                }
	                else {
	                    isEmpty = false;
	                }
	                if (curSymbol.match('star')) {
	                    n = (curSymbol.replace('star','') - 0) || 5;
	                    curSymbol = 'star';
	                }
	                
	                dataTextStyle = data[i].textStyle 
	                                ? zrUtil.merge(data[i].textStyle || {}, textStyle)
	                                : textStyle;
	                
	                textAlign = dataTextStyle.align || 'center';
	                
	                if (rotate) {
	                    textAlign = rotate > 0 ? 'right' : 'left';
	                    rotation = [rotate * Math.PI / 180, x, y - 5];
	                }
	                else {
	                    rotation = false;
	                }
	                
	                list.push({
	                    x: x,
	                    n: n,
	                    isEmpty: isEmpty,
	                    symbol: curSymbol,
	                    symbolSize: data[i].symbolSize || symbolSize,
	                    color: data[i].color,
	                    borderColor: data[i].borderColor,
	                    borderWidth: data[i].borderWidth,
	                    name: this._getReformedLabel(i),
	                    textColor: dataTextStyle.color,
	                    textAlign: textAlign,
	                    textBaseline: dataTextStyle.baseline || 'middle',
	                    textX: x,
	                    textY: y - (rotate ? 5 : 0),
	                    textFont: data[i].textStyle ? this.getFont(dataTextStyle) : textFont,
	                    rotation: rotation,
	                    showLabel: false
	                });
	            }
	            
	            return list;
	        },
	        
	        _buildBackground: function () {
	            var timelineOption = this.timelineOption;
	            var padding = this.reformCssArray(this.timelineOption.padding);
	            var width = this._location.width;
	            var height = this._location.height;
	            
	            if (timelineOption.borderWidth !== 0 
	                || timelineOption.backgroundColor.replace(/\s/g,'') != 'rgba(0,0,0,0)'
	            ) {
	                // 背景
	                this.shapeList.push(new RectangleShape({
	                    zlevel: this.getZlevelBase(),
	                    z: this.getZBase(),
	                    hoverable :false,
	                    style: {
	                        x: this._location.x - padding[3],
	                        y: this._location.y - padding[0],
	                        width: width + padding[1] + padding[3],
	                        height: height + padding[0] + padding[2],
	                        brushType: timelineOption.borderWidth === 0 ? 'fill' : 'both',
	                        color: timelineOption.backgroundColor,
	                        strokeColor: timelineOption.borderColor,
	                        lineWidth: timelineOption.borderWidth
	                    }
	                }));
	            }
	        },

	        _buildControl: function() {
	            var self = this;
	            var timelineOption = this.timelineOption;
	            var lineStyle = timelineOption.lineStyle;
	            var controlStyle = timelineOption.controlStyle;
	            if (timelineOption.controlPosition === 'none') {
	                return;
	            }
	            var iconSize = controlStyle.itemSize;
	            var iconGap = controlStyle.itemGap;
	            var x;
	            if (timelineOption.controlPosition === 'left') {
	                x = this._location.x;
	                this._location.x += (iconSize + iconGap) * 3;
	            }
	            else {
	                x = this._location.x2 - ((iconSize + iconGap) * 3 - iconGap);
	                this._location.x2 -= (iconSize + iconGap) * 3;
	            }
	            
	            var y = this._location.y;
	            var iconStyle = {
	                zlevel: this.getZlevelBase(),
	                z: this.getZBase() + 1,
	                style: {
	                    iconType: 'timelineControl',
	                    symbol: 'last',
	                    x: x,
	                    y: y,
	                    width: iconSize,
	                    height: iconSize,
	                    brushType: 'stroke',
	                    color: controlStyle.normal.color,
	                    strokeColor: controlStyle.normal.color,
	                    lineWidth: lineStyle.width
	                },
	                highlightStyle: {
	                    color: controlStyle.emphasis.color,
	                    strokeColor: controlStyle.emphasis.color,
	                    lineWidth: lineStyle.width + 1
	                },
	                clickable: true
	            };
	            
	            this._ctrLastShape = new IconShape(iconStyle);
	            this._ctrLastShape.onclick = function() {
	                self.last();
	            };
	            this.shapeList.push(this._ctrLastShape);
	            
	            x += iconSize + iconGap;
	            this._ctrPlayShape = new IconShape(zrUtil.clone(iconStyle));
	            this._ctrPlayShape.style.brushType = 'fill';
	            this._ctrPlayShape.style.symbol = 'play';
	            this._ctrPlayShape.style.status = this.timelineOption.autoPlay ? 'playing' : 'stop';
	            this._ctrPlayShape.style.x = x;
	            this._ctrPlayShape.onclick = function() {
	                if (self._ctrPlayShape.style.status === 'stop') {
	                    self.play();
	                }
	                else {
	                    self.stop();
	                }
	            };
	            this.shapeList.push(this._ctrPlayShape);
	            
	            x += iconSize + iconGap;
	            this._ctrNextShape = new IconShape(zrUtil.clone(iconStyle));
	            this._ctrNextShape.style.symbol = 'next';
	            this._ctrNextShape.style.x = x;
	            this._ctrNextShape.onclick = function() {
	                self.next();
	            };
	            this.shapeList.push(this._ctrNextShape);
	        },
	        
	        /**
	         * 构建时间轴
	         */
	        _buildChain: function () {
	            var timelineOption = this.timelineOption;
	            var lineStyle = timelineOption.lineStyle;
	            this._timelineShae = {
	                zlevel: this.getZlevelBase(),
	                z: this.getZBase(),
	                style: {
	                    x: this._location.x,
	                    y: this.subPixelOptimize(this._location.y, lineStyle.width),
	                    width: this._location.x2 - this._location.x,
	                    height: this._location.height,
	                    chainPoint: this._chainPoint,
	                    brushType:'both',
	                    strokeColor: lineStyle.color,
	                    lineWidth: lineStyle.width,
	                    lineType: lineStyle.type
	                },
	                hoverable: false,
	                clickable: true,
	                onclick: this._onclick
	            };

	            this._timelineShae = new ChainShape(this._timelineShae);
	            this.shapeList.push(this._timelineShae);
	        },

	        /**
	         * 构建拖拽手柄
	         */
	        _buildHandle: function () {
	            var curPoint = this._chainPoint[this.currentIndex];
	            var symbolSize = curPoint.symbolSize + 1;
	            symbolSize = symbolSize < 5 ? 5 : symbolSize;
	            
	            this._handleShape = {
	                zlevel: this.getZlevelBase(),
	                z: this.getZBase() + 1,
	                hoverable: false,
	                draggable: true,
	                style: {
	                    iconType: 'diamond',
	                    n: curPoint.n,
	                    x: curPoint.x - symbolSize,
	                    y: this._location.y + this._location.height / 4 - symbolSize,
	                    width: symbolSize * 2,
	                    height: symbolSize * 2,
	                    brushType:'both',
	                    textPosition: 'specific',
	                    textX: curPoint.x,
	                    textY: this._location.y - this._location.height / 4,
	                    textAlign: 'center',
	                    textBaseline: 'middle'
	                },
	                highlightStyle: {},
	                ondrift: this._ondrift,
	                ondragend: this._ondragend
	            };
	            
	            this._handleShape = new IconShape(this._handleShape);
	            this.shapeList.push(this._handleShape);
	        },
	        
	        /**
	         * 同步拖拽图形样式 
	         */
	        _syncHandleShape: function() {
	            if (!this.timelineOption.show) {
	                return;
	            }
	            
	            var timelineOption = this.timelineOption;
	            var cpStyle = timelineOption.checkpointStyle;
	            var curPoint = this._chainPoint[this.currentIndex];

	            this._handleShape.style.text = cpStyle.label.show ? curPoint.name : '';
	            this._handleShape.style.textFont = curPoint.textFont;
	            
	            this._handleShape.style.n = curPoint.n;
	            if (cpStyle.symbol === 'auto') {
	                this._handleShape.style.iconType = curPoint.symbol != 'none' 
	                                                   ? curPoint.symbol : 'diamond';
	            }
	            else {
	                this._handleShape.style.iconType = cpStyle.symbol;
	                if (cpStyle.symbol.match('star')) {
	                    this._handleShape.style.n = (cpStyle.symbol.replace('star','') - 0) || 5;
	                    this._handleShape.style.iconType = 'star';
	                }
	            }
	            
	            var symbolSize;
	            if (cpStyle.symbolSize === 'auto') {
	                symbolSize = curPoint.symbolSize + 2;
	                symbolSize = symbolSize < 5 ? 5 : symbolSize;
	            }
	            else {
	                symbolSize = cpStyle.symbolSize - 0;
	            }
	            
	            this._handleShape.style.color = cpStyle.color === 'auto'
	                                            ? (curPoint.color 
	                                               ? curPoint.color 
	                                               : timelineOption.controlStyle.emphasis.color
	                                              )
	                                            : cpStyle.color;
	            this._handleShape.style.textColor = cpStyle.label.textStyle.color === 'auto'
	                                                ? this._handleShape.style.color
	                                                : cpStyle.label.textStyle.color;
	            this._handleShape.highlightStyle.strokeColor = 
	            this._handleShape.style.strokeColor = cpStyle.borderColor === 'auto'
	                                ? (curPoint.borderColor ? curPoint.borderColor : '#fff')
	                                : cpStyle.borderColor;
	            this._handleShape.style.lineWidth = cpStyle.borderWidth === 'auto'
	                                ? (curPoint.borderWidth ? curPoint.borderWidth : 0)
	                                : (cpStyle.borderWidth - 0);
	            this._handleShape.highlightStyle.lineWidth = this._handleShape.style.lineWidth + 1;
	            
	            this.zr.animate(this._handleShape.id, 'style')
	                .when(
	                    500,
	                    {
	                        x: curPoint.x - symbolSize,
	                        textX: curPoint.x,
	                        y: this._location.y + this._location.height / 4 - symbolSize,
	                        width: symbolSize * 2,
	                        height: symbolSize * 2
	                    }
	                )
	                .start('ExponentialOut');
	        },

	        _findChainIndex: function(x) {
	            var chainPoint = this._chainPoint;
	            var len = chainPoint.length;
	            if (x <= chainPoint[0].x) {
	                return 0;
	            }
	            else if (x >= chainPoint[len - 1].x) {
	                return len - 1;
	            }
	            for (var i = 0; i < len - 1; i++) {
	                if (x >= chainPoint[i].x && x <= chainPoint[i + 1].x) {
	                    // catch you！
	                    return (Math.abs(x - chainPoint[i].x) < Math.abs(x - chainPoint[i + 1].x))
	                           ? i : (i + 1);
	                }
	            }
	        },
	        
	        __onclick: function(param) {
	            var x = zrEvent.getX(param.event);
	            var newIndex =  this._findChainIndex(x);
	            if (newIndex === this.currentIndex) {
	                return true; // 啥事都没发生
	            }
	            
	            this.currentIndex = newIndex;
	            this.timelineOption.autoPlay && this.stop(); // 停止自动播放
	            clearTimeout(this.playTicket);
	            this._onFrame();
	        },
	        
	        /**
	         * 拖拽范围控制
	         */
	        __ondrift: function (shape, dx) {
	            this.timelineOption.autoPlay && this.stop(); // 停止自动播放
	            
	            var chainPoint = this._chainPoint;
	            var len = chainPoint.length;
	            var newIndex;
	            if (shape.style.x + dx <= chainPoint[0].x - chainPoint[0].symbolSize) {
	                shape.style.x = chainPoint[0].x - chainPoint[0].symbolSize;
	                newIndex = 0;
	            }
	            else if (shape.style.x + dx >= chainPoint[len - 1].x - chainPoint[len - 1].symbolSize) {
	                shape.style.x = chainPoint[len - 1].x - chainPoint[len - 1].symbolSize;
	                newIndex = len - 1;
	            }
	            else {
	                shape.style.x += dx;
	                newIndex = this._findChainIndex(shape.style.x);
	            }
	            var curPoint = chainPoint[newIndex];
	            var symbolSize = curPoint.symbolSize + 2;
	            shape.style.iconType = curPoint.symbol;
	            shape.style.n = curPoint.n;
	            shape.style.textX = shape.style.x + symbolSize / 2;
	            shape.style.y = this._location.y + this._location.height / 4 - symbolSize;
	            shape.style.width = symbolSize * 2;
	            shape.style.height = symbolSize * 2;
	            shape.style.text = curPoint.name;
	            
	            //console.log(newIndex)
	            if (newIndex === this.currentIndex) {
	                return true; // 啥事都没发生
	            }
	            
	            this.currentIndex = newIndex;
	            if (this.timelineOption.realtime) {
	                clearTimeout(this.playTicket);
	                var self = this;
	                this.playTicket = setTimeout(function() {
	                    self._setCurrentOption();
	                },200);
	            }

	            return true;
	        },
	        
	        __ondragend: function () {
	            this.isDragend = true;
	        },
	        
	        /**
	         * 数据项被拖拽出去
	         */
	        ondragend: function (param, status) {
	            if (!this.isDragend || !param.target) {
	                // 没有在当前实例上发生拖拽行为则直接返回
	                return;
	            }
	            !this.timelineOption.realtime && this._setCurrentOption();
	            
	            // 别status = {}赋值啊！！
	            status.dragOut = true;
	            status.dragIn = true;
	            status.needRefresh = false; // 会有消息触发fresh，不用再刷一遍
	            // 处理完拖拽事件后复位
	            this.isDragend = false;
	            this._syncHandleShape();
	            return;
	        },
	        
	        last: function () {
	            this.timelineOption.autoPlay && this.stop(); // 停止自动播放
	            
	            this.currentIndex -= 1;
	            if (this.currentIndex < 0) {
	                this.currentIndex = this.timelineOption.data.length - 1;
	            }
	            this._onFrame();
	            
	            return this.currentIndex;
	        },
	        
	        next: function () {
	            this.timelineOption.autoPlay && this.stop(); // 停止自动播放
	            
	            this.currentIndex += 1;
	            if (this.currentIndex >= this.timelineOption.data.length) {
	                this.currentIndex = 0;
	            }
	            this._onFrame();
	            
	            return this.currentIndex;
	        },
	        
	        play: function (targetIndex, autoPlay) {
	            if (this._ctrPlayShape && this._ctrPlayShape.style.status != 'playing') {
	                this._ctrPlayShape.style.status = 'playing';
	                this.zr.modShape(this._ctrPlayShape.id);
	                this.zr.refreshNextFrame();
	            }
	            
	            
	            this.timelineOption.autoPlay = autoPlay != null ? autoPlay : true;
	            
	            if (!this.timelineOption.autoPlay) {
	                clearTimeout(this.playTicket);
	            }
	            
	            this.currentIndex = targetIndex != null ? targetIndex : (this.currentIndex + 1);
	            if (this.currentIndex >= this.timelineOption.data.length) {
	                this.currentIndex = 0;
	            }
	            this._onFrame();
	            
	            return this.currentIndex;
	        },
	        
	        stop: function () {
	            if (this._ctrPlayShape && this._ctrPlayShape.style.status != 'stop') {
	                this._ctrPlayShape.style.status = 'stop';
	                this.zr.modShape(this._ctrPlayShape.id);
	                this.zr.refreshNextFrame();
	            }
	            
	            this.timelineOption.autoPlay = false;
	            
	            clearTimeout(this.playTicket);
	            
	            return this.currentIndex;
	        },
	        
	        /**
	         * 避免dataZoom带来两次refresh，不设refresh接口，resize重复一下buildshape逻辑 
	         */
	        resize: function () {
	            if (this.timelineOption.show) {
	                this.clear();
	                this._buildShape();
	                this._syncHandleShape();
	            }
	        },
	        
	        setTheme: function(needRefresh) {
	            this.timelineOption = this.reformOption(zrUtil.clone(this.option.timeline));
	            // 通用字体设置
	            this.timelineOption.label.textStyle = this.getTextStyle(
	                this.timelineOption.label.textStyle
	            );
	            this.timelineOption.checkpointStyle.label.textStyle = this.getTextStyle(
	                this.timelineOption.checkpointStyle.label.textStyle
	            );
	            if (!this.myChart.canvasSupported) {
	                // 不支持Canvas的强制关闭实时动画
	                this.timelineOption.realtime = false;
	            }
	            
	            if (this.timelineOption.show && needRefresh) {
	                this.clear();
	                this._buildShape();
	                this._syncHandleShape();
	            }
	        },
	        
	        /**
	         * 释放后实例不可用，重载基类方法
	         */
	        onbeforDispose: function () {
	            clearTimeout(this.playTicket);
	        }
	    };
	    
	    function timelineControl(ctx, style) {
	        var lineWidth = 2;//style.lineWidth;
	        var x = style.x + lineWidth;
	        var y = style.y + lineWidth + 2;
	        var width = style.width - lineWidth;
	        var height = style.height - lineWidth;
	        
	        
	        var symbol = style.symbol;
	        if (symbol === 'last') {
	            ctx.moveTo(x + width - 2, y + height / 3);
	            ctx.lineTo(x + width - 2, y);
	            ctx.lineTo(x + 2, y + height / 2);
	            ctx.lineTo(x + width - 2, y + height);
	            ctx.lineTo(x + width - 2, y + height / 3 * 2);
	            ctx.moveTo(x, y);
	            ctx.lineTo(x, y);
	        } 
	        else if (symbol === 'next') {
	            ctx.moveTo(x + 2, y + height / 3);
	            ctx.lineTo(x + 2, y);
	            ctx.lineTo(x + width - 2, y + height / 2);
	            ctx.lineTo(x + 2, y + height);
	            ctx.lineTo(x + 2, y + height / 3 * 2);
	            ctx.moveTo(x, y);
	            ctx.lineTo(x, y);
	        }
	        else if (symbol === 'play') {
	            if (style.status === 'stop') {
	                ctx.moveTo(x + 2, y);
	                ctx.lineTo(x + width - 2, y + height / 2);
	                ctx.lineTo(x + 2, y + height);
	                ctx.lineTo(x + 2, y);
	            }
	            else {
	                var delta = style.brushType === 'both' ? 2 : 3;
	                ctx.rect(x + 2, y, delta, height);
	                ctx.rect(x + width - delta - 2, y, delta, height);
	            }
	        }
	        else if (symbol.match('image')) {
	            var imageLocation = '';
	            imageLocation = symbol.replace(
	                    new RegExp('^image:\\/\\/'), ''
	                );
	            symbol = IconShape.prototype.iconLibrary.image;
	            symbol(ctx, {
	                x: x,
	                y: y,
	                width: width,
	                height: height,
	                image: imageLocation
	            });
	        }
	    }
	    IconShape.prototype.iconLibrary['timelineControl'] = timelineControl;
	    
	    zrUtil.inherits(Timeline, Base);
	    
	    __webpack_require__(516).define('timeline', Timeline);
	    
	    return Timeline;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 525 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * zrender
	 *
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 * shape类：时间轴线
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	    var Base = __webpack_require__(473);
	    var IconShape = __webpack_require__(486);

	    var dashedLineTo = __webpack_require__(494);
	    var zrUtil = __webpack_require__(456);
	    var matrix = __webpack_require__(467);

	    function Chain(options) {
	        Base.call(this, options);
	    }

	    Chain.prototype =  {
	        type : 'chain',

	        /**
	         * 画刷
	         * @param ctx       画布句柄
	         * @param e         形状实体
	         * @param isHighlight   是否为高亮状态
	         * @param updateCallback 需要异步加载资源的shape可以通过这个callback(e)
	         *                       让painter更新视图，base.brush没用，需要的话重载brush
	         */
	        brush : function (ctx, isHighlight) {
	            var style = this.style;

	            if (isHighlight) {
	                // 根据style扩展默认高亮样式
	                style = this.getHighlightStyle(
	                    style,
	                    this.highlightStyle || {}
	                );
	            }

	            ctx.save();
	            this.setContext(ctx, style);

	            // 设置transform
	            this.setTransform(ctx);

	            ctx.save();
	            ctx.beginPath();
	            this.buildLinePath(ctx, style);
	            ctx.stroke();
	            ctx.restore();
	            
	            this.brushSymbol(ctx, style);

	            ctx.restore();
	            return;
	        },

	        /**
	         * 创建线条路径
	         * @param {Context2D} ctx Canvas 2D上下文
	         * @param {Object} style 样式
	         */
	        buildLinePath : function (ctx, style) {
	            var x = style.x;
	            var y = style.y + 5;
	            var width = style.width;
	            var height = style.height / 2 - 10;

	            ctx.moveTo(x, y);
	            ctx.lineTo(x, y + height);
	            ctx.moveTo(x + width, y);
	            ctx.lineTo(x + width, y + height);

	            ctx.moveTo(x, y + height / 2);
	            if (!style.lineType || style.lineType == 'solid') {
	                ctx.lineTo(x + width, y + height / 2);
	            }
	            else if (style.lineType == 'dashed' || style.lineType == 'dotted') {
	                var dashLength = (style.lineWidth || 1)
	                             * (style.lineType == 'dashed' ? 5 : 1);
	                dashedLineTo(ctx, x, y + height / 2, x + width, y + height / 2, dashLength);
	            }
	        },

	        /**
	         * 标线始末标注
	         */
	        brushSymbol : function (ctx, style) {
	            var y = style.y + style.height / 4;
	            ctx.save();

	            var chainPoint = style.chainPoint;
	            var curPoint;
	            for (var idx = 0, l = chainPoint.length; idx < l; idx++) {
	                curPoint = chainPoint[idx];
	                if (curPoint.symbol != 'none') {
	                    ctx.beginPath();
	                    var symbolSize = curPoint.symbolSize;
	                    IconShape.prototype.buildPath(
	                        ctx,
	                        {
	                            iconType : curPoint.symbol,
	                            x : curPoint.x - symbolSize,
	                            y : y - symbolSize,
	                            width : symbolSize * 2,
	                            height : symbolSize * 2,
	                            n : curPoint.n
	                        }
	                    );
	                    ctx.fillStyle = curPoint.isEmpty ? '#fff' : style.strokeColor;
	                    ctx.closePath();
	                    ctx.fill();
	                    ctx.stroke();
	                }

	                if (curPoint.showLabel) {
	                    ctx.font = curPoint.textFont;
	                    ctx.fillStyle = curPoint.textColor;
	                    ctx.textAlign = curPoint.textAlign;
	                    ctx.textBaseline = curPoint.textBaseline;
	                    if (curPoint.rotation) {
	                        ctx.save();
	                        this._updateTextTransform(ctx, curPoint.rotation);
	                        ctx.fillText(curPoint.name, curPoint.textX, curPoint.textY);
	                        ctx.restore();
	                    }
	                    else {
	                        ctx.fillText(curPoint.name, curPoint.textX, curPoint.textY);
	                    }
	                }
	            }

	            ctx.restore();
	        },

	        _updateTextTransform : function (ctx, rotation) {
	            var _transform = matrix.create();
	            matrix.identity(_transform);

	            if (rotation[0] !== 0) {
	                var originX = rotation[1] || 0;
	                var originY = rotation[2] || 0;
	                if (originX || originY) {
	                    matrix.translate(
	                        _transform, _transform, [-originX, -originY]
	                    );
	                }
	                matrix.rotate(_transform, _transform, rotation[0]);
	                if (originX || originY) {
	                    matrix.translate(
	                        _transform, _transform, [originX, originY]
	                    );
	                }
	            }

	            // 保存这个变换矩阵
	            ctx.transform.apply(ctx, _transform);
	        },

	        isCover : function (x, y) {
	            var rect = this.style;
	            if (x >= rect.x
	                && x <= (rect.x + rect.width)
	                && y >= rect.y
	                && y <= (rect.y + rect.height)
	            ) {
	                // 矩形内
	                return true;
	            }
	            else {
	                return false;
	            }
	        }
	    };

	    zrUtil.inherits(Chain, Base);

	    return Chain;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 526 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	        var Base = __webpack_require__(469);
	        var util = __webpack_require__(456);
	        var zrColor = __webpack_require__(475);
	        var RectangleShape = __webpack_require__(476);

	        function Bar(options) {
	            Base.call(this, options);
	        }
	        util.inherits(Bar, Base);

	        
	        /**
	         * 进度条
	         * 
	         * @param {Object} addShapeHandle
	         * @param {Object} refreshHandle
	         */
	        Bar.prototype._start = function (addShapeHandle, refreshHandle) {
	            // 特效默认配置
	            var options = util.merge(
	                this.options,
	                {
	                    textStyle : {
	                        color : '#888'
	                    },
	                    backgroundColor : 'rgba(250, 250, 250, 0.8)',
	                    effectOption : {
	                        x : 0,
	                        y : this.canvasHeight / 2 - 30,
	                        width : this.canvasWidth,
	                        height : 5,
	                        brushType : 'fill',
	                        timeInterval : 100
	                    }
	                }
	            );

	            var textShape = this.createTextShape(options.textStyle);
	            var background = this.createBackgroundShape(options.backgroundColor);

	            var effectOption = options.effectOption;

	            // 初始化动画元素
	            var barShape = new RectangleShape({
	                highlightStyle : util.clone(effectOption)
	            });

	            barShape.highlightStyle.color =
	                effectOption.color
	                || zrColor.getLinearGradient(
	                    effectOption.x,
	                    effectOption.y,
	                    effectOption.x + effectOption.width,
	                    effectOption.y + effectOption.height,
	                    [ [ 0, '#ff6400' ], [ 0.5, '#ffe100' ], [ 1, '#b1ff00' ] ]
	                );

	            if (options.progress != null) {
	                // 指定进度
	                addShapeHandle(background);

	                barShape.highlightStyle.width =
	                    this.adjust(options.progress, [ 0, 1 ])
	                    * options.effectOption.width;
	                    
	                addShapeHandle(barShape);
	                addShapeHandle(textShape);

	                refreshHandle();
	                return;
	            }
	            else {
	                // 循环显示
	                barShape.highlightStyle.width = 0;
	                return setInterval(
	                    function () {
	                        addShapeHandle(background);

	                        if (barShape.highlightStyle.width < effectOption.width) {
	                            barShape.highlightStyle.width += 8;
	                        }
	                        else {
	                            barShape.highlightStyle.width = 0;
	                        }
	                        addShapeHandle(barShape);
	                        addShapeHandle(textShape);
	                        refreshHandle();
	                    },
	                    effectOption.timeInterval
	                );
	            }
	        };

	        return Bar;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 527 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	        var Base = __webpack_require__(469);
	        var util = __webpack_require__(456);
	        var zrColor = __webpack_require__(475);
	        var CircleShape = __webpack_require__(506);

	        function Bubble(options) {
	            Base.call(this, options);
	        }
	        util.inherits(Bubble, Base);

	        /**
	         * 泡泡
	         *
	         * @param {Object} addShapeHandle
	         * @param {Object} refreshHandle
	         */
	        Bubble.prototype._start = function (addShapeHandle, refreshHandle) {
	            
	            // 特效默认配置
	            var options = util.merge(
	                this.options,
	                {
	                    textStyle : {
	                        color : '#888'
	                    },
	                    backgroundColor : 'rgba(250, 250, 250, 0.8)',
	                    effect : {
	                        n : 50,
	                        lineWidth : 2,
	                        brushType : 'stroke',
	                        color : 'random',
	                        timeInterval : 100
	                    }
	                }
	            );

	            var textShape = this.createTextShape(options.textStyle);
	            var background = this.createBackgroundShape(options.backgroundColor);

	            var effectOption = options.effect;
	            var n = effectOption.n;
	            var brushType = effectOption.brushType;
	            var lineWidth = effectOption.lineWidth;

	            var shapeList = [];
	            var canvasWidth = this.canvasWidth;
	            var canvasHeight = this.canvasHeight;
	            
	            // 初始化动画元素
	            for (var i = 0; i < n; i++) {
	                var color = effectOption.color == 'random'
	                    ? zrColor.alpha(zrColor.random(), 0.3)
	                    : effectOption.color;

	                shapeList[i] = new CircleShape({
	                    highlightStyle : {
	                        x : Math.ceil(Math.random() * canvasWidth),
	                        y : Math.ceil(Math.random() * canvasHeight),
	                        r : Math.ceil(Math.random() * 40),
	                        brushType : brushType,
	                        color : color,
	                        strokeColor : color,
	                        lineWidth : lineWidth
	                    },
	                    animationY : Math.ceil(Math.random() * 20)
	                });
	            }
	            
	            return setInterval(
	                function () {
	                    addShapeHandle(background);
	                    
	                    for (var i = 0; i < n; i++) {
	                        var style = shapeList[i].highlightStyle;

	                        if (style.y - shapeList[i].animationY + style.r <= 0) {
	                            shapeList[i].highlightStyle.y = canvasHeight + style.r;
	                            shapeList[i].highlightStyle.x = Math.ceil(
	                                Math.random() * canvasWidth
	                            );
	                        }
	                        shapeList[i].highlightStyle.y -=
	                            shapeList[i].animationY;

	                        addShapeHandle(shapeList[i]);
	                    }

	                    addShapeHandle(textShape);
	                    refreshHandle();
	                },
	                effectOption.timeInterval
	            );
	        };

	        return Bubble;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 528 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	        var Base = __webpack_require__(469);
	        var util = __webpack_require__(456);
	        var zrColor = __webpack_require__(475);
	        var LineShape = __webpack_require__(493);

	        function DynamicLine(options) {
	            Base.call(this, options);
	        }
	        util.inherits(DynamicLine, Base);


	        /**
	         * 动态线
	         * 
	         * @param {Object} addShapeHandle
	         * @param {Object} refreshHandle
	         */
	        DynamicLine.prototype._start = function (addShapeHandle, refreshHandle) {
	            // 特效默认配置
	            var options = util.merge(
	                this.options,
	                {
	                    textStyle : {
	                        color : '#fff'
	                    },
	                    backgroundColor : 'rgba(0, 0, 0, 0.8)',
	                    effectOption : {
	                        n : 30,
	                        lineWidth : 1,
	                        color : 'random',
	                        timeInterval : 100
	                    }
	                }
	            );

	            var textShape = this.createTextShape(options.textStyle);
	            var background = this.createBackgroundShape(options.backgroundColor);

	            var effectOption = options.effectOption;
	            var n = effectOption.n;
	            var lineWidth = effectOption.lineWidth;

	            var shapeList = [];
	            var canvasWidth = this.canvasWidth;
	            var canvasHeight = this.canvasHeight;
	            
	            // 初始化动画元素
	            for (var i = 0; i < n; i++) {
	                var xStart = -Math.ceil(Math.random() * 1000);
	                var len = Math.ceil(Math.random() * 400);
	                var pos = Math.ceil(Math.random() * canvasHeight);

	                var color = effectOption.color == 'random'
	                    ? zrColor.random()
	                    : effectOption.color;
	                
	                shapeList[i] = new LineShape({
	                    highlightStyle : {
	                        xStart : xStart,
	                        yStart : pos,
	                        xEnd : xStart + len,
	                        yEnd : pos,
	                        strokeColor : color,
	                        lineWidth : lineWidth
	                    },
	                    animationX : Math.ceil(Math.random() * 100),
	                    len : len
	                });
	            }
	            
	            return setInterval(
	                function() {
	                    addShapeHandle(background);
	                    
	                    for (var i = 0; i < n; i++) {
	                        var style = shapeList[i].highlightStyle;

	                        if (style.xStart >= canvasWidth) {
	                            
	                            shapeList[i].len = Math.ceil(Math.random() * 400);
	                            style.xStart = -400;
	                            style.xEnd = -400 + shapeList[i].len;
	                            style.yStart = Math.ceil(Math.random() * canvasHeight);
	                            style.yEnd = style.yStart;
	                        }

	                        style.xStart += shapeList[i].animationX;
	                        style.xEnd += shapeList[i].animationX;

	                        addShapeHandle(shapeList[i]);
	                    }

	                    addShapeHandle(textShape);
	                    refreshHandle();
	                },
	                effectOption.timeInterval
	            );
	        };

	        return DynamicLine;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 529 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	        var Base = __webpack_require__(469);
	        var util = __webpack_require__(456);
	        var zrColor = __webpack_require__(475);
	        var RingShape = __webpack_require__(530);
	        var SectorShape = __webpack_require__(522);

	        function Ring(options) {
	            Base.call(this, options);
	        }
	        util.inherits(Ring, Base);


	        /**
	         * 圆环
	         * 
	         * @param {Object} addShapeHandle
	         * @param {Object} refreshHandle
	         */
	        Ring.prototype._start = function (addShapeHandle, refreshHandle) {
	            
	            // 特效默认配置
	            var options = util.merge(
	                this.options,
	                {
	                    textStyle : {
	                        color : '#07a'
	                    },
	                    backgroundColor : 'rgba(250, 250, 250, 0.8)',
	                    effect : {
	                        x : this.canvasWidth / 2,
	                        y : this.canvasHeight / 2,
	                        r0 : 60,
	                        r : 100,
	                        color : '#bbdcff',
	                        brushType: 'fill',
	                        textPosition : 'inside',
	                        textFont : 'normal 30px verdana',
	                        textColor : 'rgba(30, 144, 255, 0.6)',
	                        timeInterval : 100
	                    }
	                }
	            );

	            var effectOption = options.effect;

	            var textStyle = options.textStyle;
	            if (textStyle.x == null) {
	                textStyle.x = effectOption.x;
	            }
	            if (textStyle.y == null) {
	                textStyle.y = (effectOption.y + (effectOption.r0 + effectOption.r) / 2 - 5);
	            }
	            
	            var textShape = this.createTextShape(options.textStyle);
	            var background = this.createBackgroundShape(options.backgroundColor);

	            var x = effectOption.x;
	            var y = effectOption.y;
	            var r0 = effectOption.r0 + 6;
	            var r = effectOption.r - 6;
	            var color = effectOption.color;
	            var darkColor = zrColor.lift(color, 0.1);

	            var shapeRing = new RingShape({
	                highlightStyle : util.clone(effectOption)
	            });

	            // 初始化动画元素
	            var shapeList = [];
	            var clolrList = zrColor.getGradientColors(
	                [ '#ff6400', '#ffe100', '#97ff00' ], 25
	            );
	            var preAngle = 15;
	            var endAngle = 240;

	            for (var i = 0; i < 16; i++) {
	                shapeList.push(new SectorShape({
	                    highlightStyle  : {
	                        x : x,
	                        y : y,
	                        r0 : r0,
	                        r : r,
	                        startAngle : endAngle - preAngle,
	                        endAngle : endAngle,
	                        brushType: 'fill',
	                        color : darkColor
	                    },
	                    _color : zrColor.getLinearGradient(
	                        x + r0 * Math.cos(endAngle, true),
	                        y - r0 * Math.sin(endAngle, true),
	                        x + r0 * Math.cos(endAngle - preAngle, true),
	                        y - r0 * Math.sin(endAngle - preAngle, true),
	                        [
	                            [ 0, clolrList[i * 2] ],
	                            [ 1, clolrList[i * 2 + 1] ]
	                        ]
	                    )
	                }));
	                endAngle -= preAngle;
	            }
	            endAngle = 360;
	            for (var i = 0; i < 4; i++) {
	                shapeList.push(new SectorShape({
	                    highlightStyle  : {
	                        x : x,
	                        y : y,
	                        r0 : r0,
	                        r : r,
	                        startAngle : endAngle - preAngle,
	                        endAngle : endAngle,
	                        brushType: 'fill',
	                        color : darkColor
	                    },
	                    _color : zrColor.getLinearGradient(
	                        x + r0 * Math.cos(endAngle, true),
	                        y - r0 * Math.sin(endAngle, true),
	                        x + r0 * Math.cos(endAngle - preAngle, true),
	                        y - r0 * Math.sin(endAngle - preAngle, true),
	                        [
	                            [ 0, clolrList[i * 2 + 32] ],
	                            [ 1, clolrList[i * 2 + 33] ]
	                        ]
	                    )
	                }));
	                endAngle -= preAngle;
	            }

	            var n = 0;
	            if (options.progress != null) {
	                // 指定进度
	                addShapeHandle(background);

	                n = this.adjust(options.progress, [ 0, 1 ]).toFixed(2) * 100 / 5;
	                shapeRing.highlightStyle.text = n * 5 + '%';
	                addShapeHandle(shapeRing);

	                for (var i = 0; i < 20; i++) {
	                    shapeList[i].highlightStyle.color = i < n
	                        ? shapeList[i]._color : darkColor;
	                    addShapeHandle(shapeList[i]);
	                }

	                addShapeHandle(textShape);
	                refreshHandle();
	                return;
	            }

	            // 循环显示
	            return setInterval(
	                function() {
	                    addShapeHandle(background);

	                    n += n >= 20 ? -20 : 1;

	                    // shapeRing.highlightStyle.text = n * 5 + '%';
	                    addShapeHandle(shapeRing);

	                    for (var i = 0; i < 20; i++) {
	                        shapeList[i].highlightStyle.color = i < n
	                            ? shapeList[i]._color : darkColor;
	                        addShapeHandle(shapeList[i]);
	                    }

	                    addShapeHandle(textShape);
	                    refreshHandle();
	                },
	                effectOption.timeInterval
	            );
	        };

	        return Ring;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 530 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * 圆环
	 * @module zrender/shape/Ring
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 * @example
	 *     var Ring = require('zrender/shape/Ring');
	 *     var shape = new Ring({
	 *         style: {
	 *             x: 100,
	 *             y: 100,
	 *             r0: 30,
	 *             r: 50
	 *         }
	 *     });
	 *     zr.addShape(shape);
	 */

	/**
	 * @typedef {Object} IRingStyle
	 * @property {number} x 圆心x坐标
	 * @property {number} y 圆心y坐标
	 * @property {number} r0 内圆半径
	 * @property {number} r 外圆半径
	 * @property {string} [color='#000000'] 填充颜色
	 * @property {string} [strokeColor='#000000'] 描边颜色
	 * @property {string} [lineCape='butt'] 线帽样式，可以是 butt, round, square
	 * @property {number} [lineWidth=1] 描边宽度
	 * @property {number} [opacity=1] 绘制透明度
	 * @property {number} [shadowBlur=0] 阴影模糊度，大于0有效
	 * @property {string} [shadowColor='#000000'] 阴影颜色
	 * @property {number} [shadowOffsetX=0] 阴影横向偏移
	 * @property {number} [shadowOffsetY=0] 阴影纵向偏移
	 * @property {string} [text] 图形中的附加文本
	 * @property {string} [textColor='#000000'] 文本颜色
	 * @property {string} [textFont] 附加文本样式，eg:'bold 18px verdana'
	 * @property {string} [textPosition='end'] 附加文本位置, 可以是 inside, left, right, top, bottom
	 * @property {string} [textAlign] 默认根据textPosition自动设置，附加文本水平对齐。
	 *                                可以是start, end, left, right, center
	 * @property {string} [textBaseline] 默认根据textPosition自动设置，附加文本垂直对齐。
	 *                                可以是top, bottom, middle, alphabetic, hanging, ideographic
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	        var Base = __webpack_require__(473);
	        
	        /**
	         * @alias module:zrender/shape/Ring
	         * @constructor
	         * @extends module:zrender/shape/Base
	         * @param {Object} options
	         */
	        var Ring = function (options) {
	            Base.call(this, options);
	            /**
	             * 圆环绘制样式
	             * @name module:zrender/shape/Ring#style
	             * @type {module:zrender/shape/Ring~IRingStyle}
	             */
	            /**
	             * 圆环高亮绘制样式
	             * @name module:zrender/shape/Ring#highlightStyle
	             * @type {module:zrender/shape/Ring~IRingStyle}
	             */
	        };

	        Ring.prototype = {
	            type: 'ring',

	            /**
	             * 创建圆环路径
	             * @param {CanvasRenderingContext2D} ctx
	             * @param {module:zrender/shape/Ring~IRingStyle} style
	             */
	            buildPath : function (ctx, style) {
	                // 非零环绕填充优化
	                ctx.arc(style.x, style.y, style.r, 0, Math.PI * 2, false);
	                ctx.moveTo(style.x + style.r0, style.y);
	                ctx.arc(style.x, style.y, style.r0, 0, Math.PI * 2, true);
	                return;
	            },

	            /**
	             * 计算返回圆环包围盒矩阵
	             * @param {module:zrender/shape/Ring~IRingStyle} style
	             * @return {module:zrender/shape/Base~IBoundingRect}
	             */
	            getRect : function (style) {
	                if (style.__rect) {
	                    return style.__rect;
	                }
	                
	                var lineWidth;
	                if (style.brushType == 'stroke' || style.brushType == 'fill') {
	                    lineWidth = style.lineWidth || 1;
	                }
	                else {
	                    lineWidth = 0;
	                }
	                style.__rect = {
	                    x : Math.round(style.x - style.r - lineWidth / 2),
	                    y : Math.round(style.y - style.r - lineWidth / 2),
	                    width : style.r * 2 + lineWidth,
	                    height : style.r * 2 + lineWidth
	                };
	                
	                return style.__rect;
	            }
	        };

	        __webpack_require__(456).inherits(Ring, Base);
	        return Ring;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 531 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	        var Base = __webpack_require__(469);
	        var util = __webpack_require__(456);
	        var zrColor = __webpack_require__(475);
	        var zrArea = __webpack_require__(471);
	        var SectorShape = __webpack_require__(522);

	        function Spin(options) {
	            Base.call(this, options);
	        }
	        util.inherits(Spin, Base);

	        /**
	         * 旋转
	         * 
	         * @param {Object} addShapeHandle
	         * @param {Object} refreshHandle
	         */
	        Spin.prototype._start = function (addShapeHandle, refreshHandle) {
	            var options = util.merge(
	                this.options,
	                {
	                    textStyle : {
	                        color : '#fff',
	                        textAlign : 'start'
	                    },
	                    backgroundColor : 'rgba(0, 0, 0, 0.8)'
	                }
	            );
	            var textShape = this.createTextShape(options.textStyle);
	            
	            var textGap = 10;
	            var textWidth = zrArea.getTextWidth(
	                textShape.highlightStyle.text, textShape.highlightStyle.textFont
	            );
	            var textHeight = zrArea.getTextHeight(
	                textShape.highlightStyle.text, textShape.highlightStyle.textFont
	            );
	            
	            // 特效默认配置
	            var effectOption =  util.merge(
	                this.options.effect || {},
	                {
	                    r0 : 9,
	                    r : 15,
	                    n : 18,
	                    color : '#fff',
	                    timeInterval : 100
	                }
	            );
	            
	            var location = this.getLocation(
	                this.options.textStyle,
	                textWidth + textGap + effectOption.r * 2,
	                Math.max(effectOption.r * 2, textHeight)
	            );
	            effectOption.x = location.x + effectOption.r;
	            effectOption.y = textShape.highlightStyle.y = location.y + location.height / 2;
	            textShape.highlightStyle.x = effectOption.x + effectOption.r + textGap;
	            
	            var background = this.createBackgroundShape(options.backgroundColor);
	            var n = effectOption.n;
	            var x = effectOption.x;
	            var y = effectOption.y;
	            var r0 = effectOption.r0;
	            var r = effectOption.r;
	            var color = effectOption.color;

	            // 初始化动画元素
	            var shapeList = [];
	            var preAngle = Math.round(180 / n);
	            for (var i = 0; i < n; i++) {
	                shapeList[i] = new SectorShape({
	                    highlightStyle  : {
	                        x : x,
	                        y : y,
	                        r0 : r0,
	                        r : r,
	                        startAngle : preAngle * i * 2,
	                        endAngle : preAngle * i * 2 + preAngle,
	                        color : zrColor.alpha(color, (i + 1) / n),
	                        brushType: 'fill'
	                    }
	                });
	            }

	            var pos = [ 0, x, y ];

	            return setInterval(
	                function() {
	                    addShapeHandle(background);
	                    pos[0] -= 0.3;
	                    for (var i = 0; i < n; i++) {
	                        shapeList[i].rotation = pos;
	                        addShapeHandle(shapeList[i]);
	                    }

	                    addShapeHandle(textShape);
	                    refreshHandle();
	                },
	                effectOption.timeInterval
	            );
	        };

	        return Spin;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 532 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	        var Base = __webpack_require__(469);
	        var util = __webpack_require__(456);
	        var zrArea = __webpack_require__(471);
	        var RingShape = __webpack_require__(530);
	        var DropletShape = __webpack_require__(491);
	        var CircleShape = __webpack_require__(506);

	        function Whirling(options) {
	            Base.call(this, options);
	        }
	        util.inherits(Whirling, Base);

	        /**
	         * 旋转水滴
	         * 
	         * @param {Object} addShapeHandle
	         * @param {Object} refreshHandle
	         */
	        Whirling.prototype._start = function (addShapeHandle, refreshHandle) {
	            var options = util.merge(
	                this.options,
	                {
	                    textStyle : {
	                        color : '#888',
	                        textAlign : 'start'
	                    },
	                    backgroundColor : 'rgba(250, 250, 250, 0.8)'
	                }
	            );
	            var textShape = this.createTextShape(options.textStyle);
	            
	            var textGap = 10;
	            var textWidth = zrArea.getTextWidth(
	                textShape.highlightStyle.text, textShape.highlightStyle.textFont
	            );
	            var textHeight = zrArea.getTextHeight(
	                textShape.highlightStyle.text, textShape.highlightStyle.textFont
	            );
	            
	            // 特效默认配置
	            var effectOption = util.merge(
	                this.options.effect || {},
	                {
	                    r : 18,
	                    colorIn : '#fff',
	                    colorOut : '#555',
	                    colorWhirl : '#6cf',
	                    timeInterval : 50
	                }
	            );
	            
	            var location = this.getLocation(
	                this.options.textStyle,
	                textWidth + textGap + effectOption.r * 2,
	                Math.max(effectOption.r * 2, textHeight)
	            );
	            effectOption.x = location.x + effectOption.r;
	            effectOption.y = textShape.highlightStyle.y = location.y + location.height / 2;
	            textShape.highlightStyle.x = effectOption.x + effectOption.r + textGap;
	            
	            var background = this.createBackgroundShape(options.backgroundColor);
	            // 初始化动画元素
	            var droplet = new DropletShape({
	                highlightStyle : {
	                    a : Math.round(effectOption.r / 2),
	                    b : Math.round(effectOption.r - effectOption.r / 6),
	                    brushType : 'fill',
	                    color : effectOption.colorWhirl
	                }
	            });
	            var circleIn = new CircleShape({
	                highlightStyle : {
	                    r : Math.round(effectOption.r / 6),
	                    brushType : 'fill',
	                    color : effectOption.colorIn
	                }
	            });
	            var circleOut = new RingShape({
	                highlightStyle : {
	                    r0 : Math.round(effectOption.r - effectOption.r / 3),
	                    r : effectOption.r,
	                    brushType : 'fill',
	                    color : effectOption.colorOut
	                }
	            });

	            var pos = [ 0, effectOption.x, effectOption.y ];

	            droplet.highlightStyle.x
	                = circleIn.highlightStyle.x
	                = circleOut.highlightStyle.x
	                = pos[1];
	            droplet.highlightStyle.y
	                = circleIn.highlightStyle.y
	                = circleOut.highlightStyle.y
	                = pos[2];

	            return setInterval(
	                function() {
	                    addShapeHandle(background);
	                    addShapeHandle(circleOut);
	                    pos[0] -= 0.3;
	                    droplet.rotation = pos;
	                    addShapeHandle(droplet);
	                    addShapeHandle(circleIn);
	                    addShapeHandle(textShape);
	                    refreshHandle();
	                },
	                effectOption.timeInterval
	            );
	        };

	        return Whirling;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 533 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {

	var theme = {
	    // 默认色板
	    color: [
	        '#2ec7c9','#b6a2de','#5ab1ef','#ffb980','#d87a80',
	        '#8d98b3','#e5cf0d','#97b552','#95706d','#dc69aa',
	        '#07a2a4','#9a7fd1','#588dd5','#f5994e','#c05050',
	        '#59678c','#c9ab00','#7eb00a','#6f5553','#c14089'
	    ],

	    // 图表标题
	    title: {
	        textStyle: {
	            fontWeight: 'normal',
	            color: '#008acd'          // 主标题文字颜色
	        }
	    },
	    
	    // 值域
	    dataRange: {
	        itemWidth: 15,
	        color: ['#5ab1ef','#e0ffff']
	    },

	    // 工具箱
	    toolbox: {
	        color : ['#1e90ff', '#1e90ff', '#1e90ff', '#1e90ff'],
	        effectiveColor : '#ff4500'
	    },

	    // 提示框
	    tooltip: {
	        backgroundColor: 'rgba(50,50,50,0.5)',     // 提示背景颜色，默认为透明度为0.7的黑色
	        axisPointer : {            // 坐标轴指示器，坐标轴触发有效
	            type : 'line',         // 默认为直线，可选为：'line' | 'shadow'
	            lineStyle : {          // 直线指示器样式设置
	                color: '#008acd'
	            },
	            crossStyle: {
	                color: '#008acd'
	            },
	            shadowStyle : {                     // 阴影指示器样式设置
	                color: 'rgba(200,200,200,0.2)'
	            }
	        }
	    },

	    // 区域缩放控制器
	    dataZoom: {
	        dataBackgroundColor: '#efefff',            // 数据背景颜色
	        fillerColor: 'rgba(182,162,222,0.2)',   // 填充颜色
	        handleColor: '#008acd'    // 手柄颜色
	    },

	    // 网格
	    grid: {
	        borderColor: '#eee'
	    },

	    // 类目轴
	    categoryAxis: {
	        axisLine: {            // 坐标轴线
	            lineStyle: {       // 属性lineStyle控制线条样式
	                color: '#008acd'
	            }
	        },
	        splitLine: {           // 分隔线
	            lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式
	                color: ['#eee']
	            }
	        }
	    },

	    // 数值型坐标轴默认参数
	    valueAxis: {
	        axisLine: {            // 坐标轴线
	            lineStyle: {       // 属性lineStyle控制线条样式
	                color: '#008acd'
	            }
	        },
	        splitArea : {
	            show : true,
	            areaStyle : {
	                color: ['rgba(250,250,250,0.1)','rgba(200,200,200,0.1)']
	            }
	        },
	        splitLine: {           // 分隔线
	            lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式
	                color: ['#eee']
	            }
	        }
	    },

	    polar : {
	        axisLine: {            // 坐标轴线
	            lineStyle: {       // 属性lineStyle控制线条样式
	                color: '#ddd'
	            }
	        },
	        splitArea : {
	            show : true,
	            areaStyle : {
	                color: ['rgba(250,250,250,0.2)','rgba(200,200,200,0.2)']
	            }
	        },
	        splitLine : {
	            lineStyle : {
	                color : '#ddd'
	            }
	        }
	    },

	    timeline : {
	        lineStyle : {
	            color : '#008acd'
	        },
	        controlStyle : {
	            normal : { color : '#008acd'},
	            emphasis : { color : '#008acd'}
	        },
	        symbol : 'emptyCircle',
	        symbolSize : 3
	    },

	    // 柱形图默认参数
	    bar: {
	        itemStyle: {
	            normal: {
	                barBorderRadius: 5
	            },
	            emphasis: {
	                barBorderRadius: 5
	            }
	        }
	    },

	    // 折线图默认参数
	    line: {
	        smooth : true,
	        symbol: 'emptyCircle',  // 拐点图形类型
	        symbolSize: 3           // 拐点图形大小
	    },
	    
	    // K线图默认参数
	    k: {
	        itemStyle: {
	            normal: {
	                color: '#d87a80',       // 阳线填充颜色
	                color0: '#2ec7c9',      // 阴线填充颜色
	                lineStyle: {
	                    color: '#d87a80',   // 阳线边框颜色
	                    color0: '#2ec7c9'   // 阴线边框颜色
	                }
	            }
	        }
	    },
	    
	    // 散点图默认参数
	    scatter: {
	        symbol: 'circle',    // 图形类型
	        symbolSize: 4        // 图形大小，半宽（半径）参数，当图形为方向或菱形则总宽度为symbolSize * 2
	    },

	    // 雷达图默认参数
	    radar : {
	        symbol: 'emptyCircle',    // 图形类型
	        symbolSize:3
	        //symbol: null,         // 拐点图形类型
	        //symbolRotate : null,  // 图形旋转控制
	    },

	    map: {
	        itemStyle: {
	            normal: {
	                areaStyle: {
	                    color: '#ddd'
	                },
	                label: {
	                    textStyle: {
	                        color: '#d87a80'
	                    }
	                }
	            },
	            emphasis: {                 // 也是选中样式
	                areaStyle: {
	                    color: '#fe994e'
	                }
	            }
	        }
	    },
	    
	    force : {
	        itemStyle: {
	            normal: {
	                linkStyle : {
	                    color : '#1e90ff'
	                }
	            }
	        }
	    },

	    chord : {
	        itemStyle : {
	            normal : {
	                borderWidth: 1,
	                borderColor: 'rgba(128, 128, 128, 0.5)',
	                chordStyle : {
	                    lineStyle : {
	                        color : 'rgba(128, 128, 128, 0.5)'
	                    }
	                }
	            },
	            emphasis : {
	                borderWidth: 1,
	                borderColor: 'rgba(128, 128, 128, 0.5)',
	                chordStyle : {
	                    lineStyle : {
	                        color : 'rgba(128, 128, 128, 0.5)'
	                    }
	                }
	            }
	        }
	    },

	    gauge : {
	        axisLine: {            // 坐标轴线
	            lineStyle: {       // 属性lineStyle控制线条样式
	                color: [[0.2, '#2ec7c9'],[0.8, '#5ab1ef'],[1, '#d87a80']], 
	                width: 10
	            }
	        },
	        axisTick: {            // 坐标轴小标记
	            splitNumber: 10,   // 每份split细分多少段
	            length :15,        // 属性length控制线长
	            lineStyle: {       // 属性lineStyle控制线条样式
	                color: 'auto'
	            }
	        },
	        splitLine: {           // 分隔线
	            length :22,         // 属性length控制线长
	            lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式
	                color: 'auto'
	            }
	        },
	        pointer : {
	            width : 5
	        }
	    },
	    
	    textStyle: {
	        fontFamily: '微软雅黑, Arial, Verdana, sans-serif'
	    }
	};

	    return theme;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 534 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {

	var theme = {
	    // 默认色板
	    color: [
	        '#C1232B','#B5C334','#FCCE10','#E87C25','#27727B',
	        '#FE8463','#9BCA63','#FAD860','#F3A43B','#60C0DD',
	        '#D7504B','#C6E579','#F4E001','#F0805A','#26C0C0'
	    ],

	    // 图表标题
	    title: {
	        textStyle: {
	            fontWeight: 'normal',
	            color: '#27727B'          // 主标题文字颜色
	        }
	    },

	    // 值域
	    dataRange: {
	        x:'right',
	        y:'center',
	        itemWidth: 5,
	        itemHeight:25,
	        color:['#C1232B','#FCCE10']
	    },

	    toolbox: {
	        color : [
	            '#C1232B','#B5C334','#FCCE10','#E87C25','#27727B',
	            '#FE8463','#9BCA63','#FAD860','#F3A43B','#60C0DD'
	        ],
	        effectiveColor : '#ff4500'
	    },

	    // 提示框
	    tooltip: {
	        backgroundColor: 'rgba(50,50,50,0.5)',     // 提示背景颜色，默认为透明度为0.7的黑色
	        axisPointer : {            // 坐标轴指示器，坐标轴触发有效
	            type : 'line',         // 默认为直线，可选为：'line' | 'shadow'
	            lineStyle : {          // 直线指示器样式设置
	                color: '#27727B',
	                type: 'dashed'
	            },
	            crossStyle: {
	                color: '#27727B'
	            },
	            shadowStyle : {                     // 阴影指示器样式设置
	                color: 'rgba(200,200,200,0.3)'
	            }
	        }
	    },

	    // 区域缩放控制器
	    dataZoom: {
	        dataBackgroundColor: 'rgba(181,195,52,0.3)',            // 数据背景颜色
	        fillerColor: 'rgba(181,195,52,0.2)',   // 填充颜色
	        handleColor: '#27727B'    // 手柄颜色
	    },

	    // 网格
	    grid: {
	        borderWidth:0
	    },

	    // 类目轴
	    categoryAxis: {
	        axisLine: {            // 坐标轴线
	            lineStyle: {       // 属性lineStyle控制线条样式
	                color: '#27727B'
	            }
	        },
	        splitLine: {           // 分隔线
	            show: false
	        }
	    },

	    // 数值型坐标轴默认参数
	    valueAxis: {
	        axisLine: {            // 坐标轴线
	            show: false
	        },
	        splitArea : {
	            show: false
	        },
	        splitLine: {           // 分隔线
	            lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式
	                color: ['#ccc'],
	                type: 'dashed'
	            }
	        }
	    },

	    polar : {
	        axisLine: {            // 坐标轴线
	            lineStyle: {       // 属性lineStyle控制线条样式
	                color: '#ddd'
	            }
	        },
	        splitArea : {
	            show : true,
	            areaStyle : {
	                color: ['rgba(250,250,250,0.2)','rgba(200,200,200,0.2)']
	            }
	        },
	        splitLine : {
	            lineStyle : {
	                color : '#ddd'
	            }
	        }
	    },

	    timeline : {
	        lineStyle : {
	            color : '#27727B'
	        },
	        controlStyle : {
	            normal : { color : '#27727B'},
	            emphasis : { color : '#27727B'}
	        },
	        symbol : 'emptyCircle',
	        symbolSize : 3
	    },

	    // 折线图默认参数
	    line: {
	        itemStyle: {
	            normal: {
	                borderWidth:2,
	                borderColor:'#fff',
	                lineStyle: {
	                    width: 3
	                }
	            },
	            emphasis: {
	                borderWidth:0
	            }
	        },
	        symbol: 'circle',  // 拐点图形类型
	        symbolSize: 3.5           // 拐点图形大小
	    },

	    // K线图默认参数
	    k: {
	        itemStyle: {
	            normal: {
	                color: '#C1232B',       // 阳线填充颜色
	                color0: '#B5C334',      // 阴线填充颜色
	                lineStyle: {
	                    width: 1,
	                    color: '#C1232B',   // 阳线边框颜色
	                    color0: '#B5C334'   // 阴线边框颜色
	                }
	            }
	        }
	    },

	    // 散点图默认参数
	    scatter: {
	        itemStyle: {
	            normal: {
	                borderWidth:1,
	                borderColor:'rgba(200,200,200,0.5)'
	            },
	            emphasis: {
	                borderWidth:0
	            }
	        },
	        symbol: 'star4',    // 图形类型
	        symbolSize: 4        // 图形大小，半宽（半径）参数，当图形为方向或菱形则总宽度为symbolSize * 2
	    },

	    // 雷达图默认参数
	    radar : {
	        symbol: 'emptyCircle',    // 图形类型
	        symbolSize:3
	        //symbol: null,         // 拐点图形类型
	        //symbolRotate : null,  // 图形旋转控制
	    },

	    map: {
	        itemStyle: {
	            normal: {
	                areaStyle: {
	                    color: '#ddd'
	                },
	                label: {
	                    textStyle: {
	                        color: '#C1232B'
	                    }
	                }
	            },
	            emphasis: {                 // 也是选中样式
	                areaStyle: {
	                    color: '#fe994e'
	                },
	                label: {
	                    textStyle: {
	                        color: 'rgb(100,0,0)'
	                    }
	                }
	            }
	        }
	    },

	    force : {
	        itemStyle: {
	            normal: {
	                linkStyle : {
	                    color : '#27727B'
	                }
	            }
	        }
	    },

	    chord : {
	        itemStyle : {
	            normal : {
	                borderWidth: 1,
	                borderColor: 'rgba(128, 128, 128, 0.5)',
	                chordStyle : {
	                    lineStyle : {
	                        color : 'rgba(128, 128, 128, 0.5)'
	                    }
	                }
	            },
	            emphasis : {
	                borderWidth: 1,
	                borderColor: 'rgba(128, 128, 128, 0.5)',
	                chordStyle : {
	                    lineStyle : {
	                        color : 'rgba(128, 128, 128, 0.5)'
	                    }
	                }
	            }
	        }
	    },

	    gauge : {
	        center:['50%','80%'],
	        radius:'100%',
	        startAngle: 180,
	        endAngle : 0,
	        axisLine: {            // 坐标轴线
	            show: true,        // 默认显示，属性show控制显示与否
	            lineStyle: {       // 属性lineStyle控制线条样式
	                color: [[0.2, '#B5C334'],[0.8, '#27727B'],[1, '#C1232B']],
	                width: '40%'
	            }
	        },
	        axisTick: {            // 坐标轴小标记
	            splitNumber: 2,   // 每份split细分多少段
	            length: 5,        // 属性length控制线长
	            lineStyle: {       // 属性lineStyle控制线条样式
	                color: '#fff'
	            }
	        },
	        axisLabel: {           // 坐标轴文本标签，详见axis.axisLabel
	            textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
	                color: '#fff',
	                fontWeight:'bolder'
	            }
	        },
	        splitLine: {           // 分隔线
	            length: '5%',         // 属性length控制线长
	            lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式
	                color: '#fff'
	            }
	        },
	        pointer : {
	            width : '40%',
	            length: '80%',
	            color: '#fff'
	        },
	        title : {
	          offsetCenter: [0, -20],       // x, y，单位px
	          textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
	            color: 'auto',
	            fontSize: 20
	          }
	        },
	        detail : {
	            offsetCenter: [0, 0],       // x, y，单位px
	            textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
	                color: 'auto',
	                fontSize: 40
	            }
	        }
	    },

	    textStyle: {
	        fontFamily: '微软雅黑, Arial, Verdana, sans-serif'
	    }
	};

	    return theme;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 535 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * echarts图表类：折线图
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	    var ChartBase = __webpack_require__(485);
	    
	    // 图形依赖
	    var PolylineShape = __webpack_require__(501);
	    var IconShape = __webpack_require__(486);
	    var HalfSmoothPolygonShape = __webpack_require__(538);
	    // 组件依赖
	    __webpack_require__(539);
	    __webpack_require__(544);
	    __webpack_require__(536);
	    
	    var ecConfig = __webpack_require__(455);
	    // 折线图默认参数
	    ecConfig.line = {
	        zlevel: 0,                  // 一级层叠
	        z: 2,                       // 二级层叠
	        clickable: true,
	        legendHoverLink: true,
	        // stack: null
	        xAxisIndex: 0,
	        yAxisIndex: 0,
	        // 'nearest', 'min', 'max', 'average'
	        dataFilter: 'nearest',
	        itemStyle: {
	            normal: {
	                // color: 各异,
	                label: {
	                    show: false
	                    // formatter: 标签文本格式器，同Tooltip.formatter，不支持异步回调
	                    // position: 默认自适应，水平布局为'top'，垂直布局为'right'，可选为
	                    //           'inside'|'left'|'right'|'top'|'bottom'
	                    // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE
	                },
	                lineStyle: {
	                    width: 2,
	                    type: 'solid',
	                    shadowColor: 'rgba(0,0,0,0)', //默认透明
	                    shadowBlur: 0,
	                    shadowOffsetX: 0,
	                    shadowOffsetY: 0
	                }
	            },
	            emphasis: {
	                // color: 各异,
	                label: {
	                    show: false
	                    // formatter: 标签文本格式器，同Tooltip.formatter，不支持异步回调
	                    // position: 默认自适应，水平布局为'top'，垂直布局为'right'，可选为
	                    //           'inside'|'left'|'right'|'top'|'bottom'
	                    // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE
	                }
	            }
	        },
	        // smooth: false,
	        // symbol: null,         // 拐点图形类型
	        symbolSize: 2,           // 拐点图形大小
	        // symbolRotate: null,   // 拐点图形旋转控制
	        showAllSymbol: false     // 标志图形默认只有主轴显示（随主轴标签间隔隐藏策略）
	    };

	    var ecData = __webpack_require__(503);
	    var zrUtil = __webpack_require__(456);
	    var zrColor = __webpack_require__(475);
	    
	    /**
	     * 构造函数
	     * @param {Object} messageCenter echart消息中心
	     * @param {ZRender} zr zrender实例
	     * @param {Object} series 数据
	     * @param {Object} component 组件
	     */
	    function Line(ecTheme, messageCenter, zr, option, myChart){
	        // 图表基类
	        ChartBase.call(this, ecTheme, messageCenter, zr, option, myChart);

	        this.refresh(option);
	    }
	    
	    Line.prototype = {
	        type: ecConfig.CHART_TYPE_LINE,
	        /**
	         * 绘制图形
	         */
	        _buildShape: function () {
	            this.finalPLMap = {}; // 完成的point list(PL)
	            this._buildPosition();
	        },

	        /**
	         * 构建类目轴为水平方向的折线图系列
	         */
	        _buildHorizontal: function (seriesArray, maxDataLength, locationMap, xMarkMap) {
	            var series = this.series;
	            // 确定类目轴和数值轴，同一方向随便找一个即可
	            var seriesIndex = locationMap[0][0];
	            var serie = series[seriesIndex];
	            var categoryAxis = this.component.xAxis.getAxis(serie.xAxisIndex || 0);
	            var valueAxis;  // 数值轴各异

	            var x;
	            var y;
	            var lastYP; // 正向堆积处理
	            var baseYP;
	            var lastYN; // 负向堆积处理
	            var baseYN;
	            //var this.finalPLMap = {}; // 完成的point list(PL)
	            var curPLMap = {};   // 正在记录的point list(PL)
	            var data;
	            var value;
	            for (var i = 0, l = maxDataLength; i < l; i++) {
	                if (categoryAxis.getNameByIndex(i) == null) {
	                    // 系列数据超出类目轴长度
	                    break;
	                }
	                x = categoryAxis.getCoordByIndex(i);
	                for (var j = 0, k = locationMap.length; j < k; j++) {
	                    // 堆积数据用第一条valueAxis
	                    valueAxis = this.component.yAxis.getAxis(
	                        series[locationMap[j][0]].yAxisIndex || 0
	                    );
	                    baseYP = lastYP = baseYN = lastYN = valueAxis.getCoord(0);
	                    for (var m = 0, n = locationMap[j].length; m < n; m++) {
	                        seriesIndex = locationMap[j][m];
	                        serie = series[seriesIndex];
	                        data = serie.data[i];
	                        value = this.getDataFromOption(data, '-');
	                        curPLMap[seriesIndex] = curPLMap[seriesIndex] || [];
	                        xMarkMap[seriesIndex] = xMarkMap[seriesIndex] 
	                                                || {
	                                                    min: Number.POSITIVE_INFINITY,
	                                                    max: Number.NEGATIVE_INFINITY,
	                                                    sum: 0,
	                                                    counter: 0,
	                                                    average: 0
	                                                };
	                        if (value === '-') {
	                            // 空数据则把正在记录的curPLMap添加到finalPLMap中
	                            if (curPLMap[seriesIndex].length > 0) {
	                                this.finalPLMap[seriesIndex] =
	                                    this.finalPLMap[seriesIndex] || [];

	                                this.finalPLMap[seriesIndex].push(
	                                    curPLMap[seriesIndex]
	                                );

	                                curPLMap[seriesIndex] = [];
	                            }
	                            continue;
	                        }
	                        //y = valueAxis.getCoord(value);
	                        if (value >= 0) {
	                            // 正向堆积
	                            lastYP -= m > 0
	                                      ? valueAxis.getCoordSize(value)
	                                      : (baseYP - valueAxis.getCoord(value));
	                            y = lastYP;
	                        }
	                        else if (value < 0){
	                            // 负向堆积
	                            lastYN += m > 0 
	                                      ? valueAxis.getCoordSize(value)
	                                      : (valueAxis.getCoord(value) - baseYN);
	                            y = lastYN;
	                        }
	                        curPLMap[seriesIndex].push(
	                            [x, y, i, categoryAxis.getNameByIndex(i), x, baseYP]
	                        );
	                        
	                        if (xMarkMap[seriesIndex].min > value) {
	                            xMarkMap[seriesIndex].min = value;
	                            xMarkMap[seriesIndex].minY = y;
	                            xMarkMap[seriesIndex].minX = x;
	                        }
	                        if (xMarkMap[seriesIndex].max < value) {
	                            xMarkMap[seriesIndex].max = value;
	                            xMarkMap[seriesIndex].maxY = y;
	                            xMarkMap[seriesIndex].maxX = x;
	                        }
	                        xMarkMap[seriesIndex].sum += value;
	                        xMarkMap[seriesIndex].counter++;
	                    }
	                }
	                // 补充空数据的拖拽提示
	                lastYP = this.component.grid.getY();
	                var symbolSize;
	                for (var j = 0, k = locationMap.length; j < k; j++) {
	                    for (var m = 0, n = locationMap[j].length; m < n; m++) {
	                        seriesIndex = locationMap[j][m];
	                        serie = series[seriesIndex];
	                        data = serie.data[i];
	                        value = this.getDataFromOption(data, '-');
	                        if (value != '-') {
	                            // 只关心空数据
	                            continue;
	                        }
	                        if (this.deepQuery([data, serie, this.option], 'calculable')) {
	                            symbolSize = this.deepQuery(
	                                [data, serie],
	                                'symbolSize'
	                            );
	                            lastYP += symbolSize * 2 + 5;
	                            y = lastYP;
	                            this.shapeList.push(this._getCalculableItem(
	                                seriesIndex, i, categoryAxis.getNameByIndex(i),
	                                x, y, 'horizontal'
	                            ));
	                        }
	                    }
	                }
	            }
	            
	            // 把剩余未完成的curPLMap全部添加到finalPLMap中
	            for (var sId in curPLMap) {
	                if (curPLMap[sId].length > 0) {
	                    this.finalPLMap[sId] = this.finalPLMap[sId] || [];
	                    this.finalPLMap[sId].push(curPLMap[sId]);
	                    curPLMap[sId] = [];
	                }
	            }
	            
	            this._calculMarkMapXY(xMarkMap, locationMap, 'y');
	            
	            this._buildBorkenLine(seriesArray, this.finalPLMap, categoryAxis, 'horizontal');
	        },

	        /**
	         * 构建类目轴为垂直方向的折线图系列
	         */
	        _buildVertical: function (seriesArray, maxDataLength, locationMap, xMarkMap) {
	            var series = this.series;
	            // 确定类目轴和数值轴，同一方向随便找一个即可
	            var seriesIndex = locationMap[0][0];
	            var serie = series[seriesIndex];
	            var categoryAxis = this.component.yAxis.getAxis(serie.yAxisIndex || 0);
	            var valueAxis;  // 数值轴各异

	            var x;
	            var y;
	            var lastXP; // 正向堆积处理
	            var baseXP;
	            var lastXN; // 负向堆积处理
	            var baseXN;
	            //var this.finalPLMap = {}; // 完成的point list(PL)
	            var curPLMap = {};   // 正在记录的point list(PL)
	            var data;
	            var value;
	            for (var i = 0, l = maxDataLength; i < l; i++) {
	                if (categoryAxis.getNameByIndex(i) == null) {
	                    // 系列数据超出类目轴长度
	                    break;
	                }
	                y = categoryAxis.getCoordByIndex(i);
	                for (var j = 0, k = locationMap.length; j < k; j++) {
	                    // 堆积数据用第一条valueAxis
	                    valueAxis = this.component.xAxis.getAxis(
	                        series[locationMap[j][0]].xAxisIndex || 0
	                    );
	                    baseXP = lastXP = baseXN = lastXN = valueAxis.getCoord(0);
	                    for (var m = 0, n = locationMap[j].length; m < n; m++) {
	                        seriesIndex = locationMap[j][m];
	                        serie = series[seriesIndex];
	                        data = serie.data[i];
	                        value = this.getDataFromOption(data, '-');
	                        curPLMap[seriesIndex] = curPLMap[seriesIndex] || [];
	                        xMarkMap[seriesIndex] = xMarkMap[seriesIndex] 
	                                                || {
	                                                    min: Number.POSITIVE_INFINITY,
	                                                    max: Number.NEGATIVE_INFINITY,
	                                                    sum: 0,
	                                                    counter: 0,
	                                                    average: 0
	                                                };
	                        if (value === '-') {
	                            // 空数据则把正在记录的curPLMap添加到finalPLMap中
	                            if (curPLMap[seriesIndex].length > 0) {
	                                this.finalPLMap[seriesIndex] =
	                                    this.finalPLMap[seriesIndex] || [];

	                                this.finalPLMap[seriesIndex].push(
	                                    curPLMap[seriesIndex]
	                                );

	                                curPLMap[seriesIndex] = [];
	                            }
	                            continue;
	                        }
	                        //x = valueAxis.getCoord(value);
	                        if (value >= 0) {
	                            // 正向堆积
	                            lastXP += m > 0
	                                      ? valueAxis.getCoordSize(value)
	                                      : (valueAxis.getCoord(value) - baseXP);
	                            x = lastXP;
	                        }
	                        else if (value < 0){
	                            // 负向堆积
	                            lastXN -= m > 0
	                                      ? valueAxis.getCoordSize(value)
	                                      : (baseXN - valueAxis.getCoord(value));
	                            x = lastXN;
	                        }
	                        curPLMap[seriesIndex].push(
	                            [x, y, i, categoryAxis.getNameByIndex(i), baseXP, y]
	                        );
	                        
	                        if (xMarkMap[seriesIndex].min > value) {
	                            xMarkMap[seriesIndex].min = value;
	                            xMarkMap[seriesIndex].minX = x;
	                            xMarkMap[seriesIndex].minY = y;
	                        }
	                        if (xMarkMap[seriesIndex].max < value) {
	                            xMarkMap[seriesIndex].max = value;
	                            xMarkMap[seriesIndex].maxX = x;
	                            xMarkMap[seriesIndex].maxY = y;
	                        }
	                        xMarkMap[seriesIndex].sum += value;
	                        xMarkMap[seriesIndex].counter++;
	                    }
	                }
	                // 补充空数据的拖拽提示
	                lastXP = this.component.grid.getXend();
	                var symbolSize;
	                for (var j = 0, k = locationMap.length; j < k; j++) {
	                    for (var m = 0, n = locationMap[j].length; m < n; m++) {
	                        seriesIndex = locationMap[j][m];
	                        serie = series[seriesIndex];
	                        data = serie.data[i];
	                        value = this.getDataFromOption(data, '-');
	                        if (value != '-') {
	                            // 只关心空数据
	                            continue;
	                        }
	                        if (this.deepQuery([data, serie, this.option], 'calculable')) {
	                            symbolSize = this.deepQuery(
	                                [data, serie],
	                                'symbolSize'
	                            );
	                            lastXP -= symbolSize * 2 + 5;
	                            x = lastXP;
	                            this.shapeList.push(this._getCalculableItem(
	                                seriesIndex, i, categoryAxis.getNameByIndex(i),
	                                x, y, 'vertical'
	                            ));
	                        }
	                    }
	                }
	            }

	            // 把剩余未完成的curPLMap全部添加到finalPLMap中
	            for (var sId in curPLMap) {
	                if (curPLMap[sId].length > 0) {
	                    this.finalPLMap[sId] = this.finalPLMap[sId] || [];
	                    this.finalPLMap[sId].push(curPLMap[sId]);
	                    curPLMap[sId] = [];
	                }
	            }
	            
	            this._calculMarkMapXY(xMarkMap, locationMap, 'x');
	            
	            this._buildBorkenLine(seriesArray, this.finalPLMap, categoryAxis, 'vertical');
	        },

	        /**
	         * 构建双数值轴折线图 
	         */
	        _buildOther: function(seriesArray, maxDataLength, locationMap, xMarkMap) {
	            var series = this.series;
	            var curPLMap = {};   // 正在记录的point list(PL)
	            var xAxis;
	            
	            for (var j = 0, k = locationMap.length; j < k; j++) {
	                for (var m = 0, n = locationMap[j].length; m < n; m++) {
	                    var seriesIndex = locationMap[j][m];
	                    var serie = series[seriesIndex];
	                    xAxis = this.component.xAxis.getAxis(serie.xAxisIndex || 0);
	                    var yAxis = this.component.yAxis.getAxis(serie.yAxisIndex || 0);
	                    var baseY = yAxis.getCoord(0);
	                    
	                    curPLMap[seriesIndex] = curPLMap[seriesIndex] || [];
	                    xMarkMap[seriesIndex] = xMarkMap[seriesIndex] 
	                                            || {
	                                                min0: Number.POSITIVE_INFINITY,
	                                                min1: Number.POSITIVE_INFINITY,
	                                                max0: Number.NEGATIVE_INFINITY,
	                                                max1: Number.NEGATIVE_INFINITY,
	                                                sum0: 0,
	                                                sum1: 0,
	                                                counter0: 0,
	                                                counter1: 0,
	                                                average0: 0,
	                                                average1: 0
	                                            };
	                    
	                    for (var i = 0, l = serie.data.length; i < l; i++) {
	                        var data = serie.data[i];
	                        var value = this.getDataFromOption(data, '-');
	                        if (!(value instanceof Array)) {
	                            continue;
	                        }
	                        
	                        var x = xAxis.getCoord(value[0]);
	                        var y = yAxis.getCoord(value[1]);
	                        curPLMap[seriesIndex].push(
	                            // x, y, dataIndex, name, 填充用
	                            [x, y, i, value[0], x, baseY]
	                        );
	                        
	                        if (xMarkMap[seriesIndex].min0 > value[0]) {
	                            xMarkMap[seriesIndex].min0 = value[0];
	                            xMarkMap[seriesIndex].minY0 = y;
	                            xMarkMap[seriesIndex].minX0 = x;
	                        }
	                        if (xMarkMap[seriesIndex].max0 < value[0]) {
	                            xMarkMap[seriesIndex].max0 = value[0];
	                            xMarkMap[seriesIndex].maxY0 = y;
	                            xMarkMap[seriesIndex].maxX0 = x;
	                        }
	                        xMarkMap[seriesIndex].sum0 += value[0];
	                        xMarkMap[seriesIndex].counter0++;
	                        
	                        if (xMarkMap[seriesIndex].min1 > value[1]) {
	                            xMarkMap[seriesIndex].min1 = value[1];
	                            xMarkMap[seriesIndex].minY1 = y;
	                            xMarkMap[seriesIndex].minX1 = x;
	                        }
	                        if (xMarkMap[seriesIndex].max1 < value[1]) {
	                            xMarkMap[seriesIndex].max1 = value[1];
	                            xMarkMap[seriesIndex].maxY1 = y;
	                            xMarkMap[seriesIndex].maxX1 = x;
	                        }
	                        xMarkMap[seriesIndex].sum1 += value[1];
	                        xMarkMap[seriesIndex].counter1++;
	                    }
	                }
	            }
	            
	            // 把剩余未完成的curPLMap全部添加到finalPLMap中
	            for (var sId in curPLMap) {
	                if (curPLMap[sId].length > 0) {
	                    this.finalPLMap[sId] = this.finalPLMap[sId] || [];
	                    this.finalPLMap[sId].push(curPLMap[sId]);
	                    curPLMap[sId] = [];
	                }
	            }
	            
	            this._calculMarkMapXY(xMarkMap, locationMap, 'xy');
	            
	            this._buildBorkenLine(seriesArray, this.finalPLMap, xAxis, 'other');
	        },
	        
	        /**
	         * 生成折线和折线上的拐点
	         */
	        _buildBorkenLine: function (seriesArray, pointList, categoryAxis, curOrient) {
	            var orient = curOrient == 'other' ? 'horizontal' : curOrient;
	            var series = this.series;
	            var data;
	            
	            // 堆积层叠需求，反顺序构建
	            for (var sIdx = seriesArray.length - 1; sIdx >= 0; sIdx--) {
	                var seriesIndex = seriesArray[sIdx];
	                var serie = series[seriesIndex];
	                var seriesPL = pointList[seriesIndex];
	                if (serie.type === this.type && seriesPL != null) {
	                    var bbox = this._getBbox(seriesIndex, orient);
	                    var defaultColor = this._sIndex2ColorMap[seriesIndex];
	                    // 折线相关，多级控制
	                    var lineWidth = this.query(
	                        serie, 'itemStyle.normal.lineStyle.width'
	                    );
	                    var lineType = this.query(
	                        serie, 'itemStyle.normal.lineStyle.type'
	                    );
	                    var lineColor = this.query(
	                        serie, 'itemStyle.normal.lineStyle.color'
	                    );
	                    var normalColor = this.getItemStyleColor(
	                        this.query(serie, 'itemStyle.normal.color'), seriesIndex, -1
	                    );

	                    // 填充相关
	                    var isFill = this.query(serie, 'itemStyle.normal.areaStyle') != null;
	                    var fillNormalColor = this.query(
	                        serie, 'itemStyle.normal.areaStyle.color'
	                    );

	                    for (var i = 0, l = seriesPL.length; i < l; i++) {
	                        var singlePL = seriesPL[i];
	                        var isLarge = curOrient != 'other' && this._isLarge(orient, singlePL);
	                        if (!isLarge) { // 非大数据模式才显示拐点symbol
	                            for (var j = 0, k = singlePL.length; j < k; j++) {
	                                data = serie.data[singlePL[j][2]];
	                                if (this.deepQuery([data, serie, this.option], 'calculable') // 可计算
	                                    || this.deepQuery([data, serie], 'showAllSymbol')        // 全显示
	                                    || (categoryAxis.type === 'categoryAxis'                 // 主轴非空
	                                        && categoryAxis.isMainAxis(singlePL[j][2])
	                                        && this.deepQuery([data, serie], 'symbol') != 'none'
	                                       )
	                                ) {
	                                    this.shapeList.push(this._getSymbol(
	                                        seriesIndex,
	                                        singlePL[j][2], // dataIndex
	                                        singlePL[j][3], // name
	                                        singlePL[j][0], // x
	                                        singlePL[j][1], // y
	                                        orient
	                                    ));
	                                }
	                            }
	                        }
	                        else {
	                            // 大数据模式截取pointList
	                            singlePL = this._getLargePointList(
	                                orient, singlePL, serie.dataFilter
	                            );
	                        }

	                        // 折线图
	                        var polylineShape = new PolylineShape({
	                            zlevel: serie.zlevel,
	                            z: serie.z,
	                            style: {
	                                miterLimit: lineWidth,
	                                pointList: singlePL,
	                                strokeColor: lineColor
	                                             || normalColor 
	                                             || defaultColor,
	                                lineWidth: lineWidth,
	                                lineType: lineType,
	                                smooth: this._getSmooth(serie.smooth),
	                                smoothConstraint: bbox,
	                                shadowColor: this.query(
	                                  serie,
	                                  'itemStyle.normal.lineStyle.shadowColor'
	                                ),
	                                shadowBlur: this.query(
	                                  serie,
	                                  'itemStyle.normal.lineStyle.shadowBlur'
	                                ),
	                                shadowOffsetX: this.query(
	                                  serie,
	                                  'itemStyle.normal.lineStyle.shadowOffsetX'
	                                ),
	                                shadowOffsetY: this.query(
	                                  serie,
	                                  'itemStyle.normal.lineStyle.shadowOffsetY'
	                                )
	                            },
	                            hoverable: false,
	                            _main: true,
	                            _seriesIndex: seriesIndex,
	                            _orient: orient
	                        });
	                        
	                        ecData.pack(
	                            polylineShape,
	                            series[seriesIndex], seriesIndex,
	                            0, i, series[seriesIndex].name
	                        );
	                        
	                        this.shapeList.push(polylineShape);
	                        
	                        if (isFill) {
	                            var halfSmoothPolygonShape = new HalfSmoothPolygonShape({
	                                zlevel: serie.zlevel,
	                                z: serie.z,
	                                style: {
	                                    miterLimit: lineWidth,
	                                    pointList: zrUtil.clone(singlePL).concat([
	                                        [
	                                            singlePL[singlePL.length - 1][4],
	                                            singlePL[singlePL.length - 1][5]
	                                        ],
	                                        [
	                                            singlePL[0][4],
	                                            singlePL[0][5]
	                                        ]
	                                    ]),
	                                    brushType: 'fill',
	                                    smooth: this._getSmooth(serie.smooth),
	                                    smoothConstraint: bbox,
	                                    color: fillNormalColor
	                                           ? fillNormalColor
	                                           : zrColor.alpha(defaultColor,0.5)
	                                },
	                                highlightStyle: {
	                                    brushType: 'fill'
	                                },
	                                hoverable: false,
	                                _main: true,
	                                _seriesIndex: seriesIndex,
	                                _orient: orient
	                            });
	                            ecData.pack(
	                                halfSmoothPolygonShape,
	                                series[seriesIndex], seriesIndex,
	                                0, i, series[seriesIndex].name
	                            );
	                            this.shapeList.push(halfSmoothPolygonShape);
	                        }
	                    }
	                }
	            }
	        },
	        
	        _getBbox: function(seriesIndex, orient) {
	            var bbox = this.component.grid.getBbox();
	            var xMarkMap = this.xMarkMap[seriesIndex];
	            if (xMarkMap.minX0 != null) {
	                return [
	                    [
	                        Math.min(xMarkMap.minX0, xMarkMap.maxX0, xMarkMap.minX1, xMarkMap.maxX1),
	                        Math.min(xMarkMap.minY0, xMarkMap.maxY0, xMarkMap.minY1, xMarkMap.maxY1)
	                    ],
	                    [
	                        Math.max(xMarkMap.minX0, xMarkMap.maxX0, xMarkMap.minX1, xMarkMap.maxX1),
	                        Math.max(xMarkMap.minY0, xMarkMap.maxY0, xMarkMap.minY1, xMarkMap.maxY1)
	                    ]
	                ];
	            }
	            else if (orient === 'horizontal') {
	                bbox[0][1] = Math.min(xMarkMap.minY, xMarkMap.maxY);
	                bbox[1][1] = Math.max(xMarkMap.minY, xMarkMap.maxY);
	            }
	            else {
	                bbox[0][0] = Math.min(xMarkMap.minX, xMarkMap.maxX);
	                bbox[1][0] = Math.max(xMarkMap.minX, xMarkMap.maxX);
	            }
	            return bbox;
	        },
	        
	        _isLarge: function(orient, singlePL) {
	            if (singlePL.length < 2) {
	                return false;
	            }
	            else {
	                return orient === 'horizontal'
	                       ? (Math.abs(singlePL[0][0] - singlePL[1][0]) < 0.5)
	                       : (Math.abs(singlePL[0][1] - singlePL[1][1]) < 0.5);
	            }
	        },
	        
	        /**
	         * 大规模pointList优化 
	         */
	        _getLargePointList: function(orient, singlePL, filter) {
	            var total;
	            if (orient === 'horizontal') {
	                total = this.component.grid.getWidth();
	            }
	            else {
	                total = this.component.grid.getHeight();
	            }
	            
	            var len = singlePL.length;
	            var newList = [];

	            if (typeof(filter) != 'function') {
	                switch (filter) {
	                    case 'min':
	                        filter = function (arr) {
	                            return Math.max.apply(null, arr);
	                        };
	                        break;
	                    case 'max':
	                        filter = function (arr) {
	                            return Math.min.apply(null, arr);
	                        };
	                        break;
	                    case 'average':
	                        filter = function (arr) {
	                            var total = 0;
	                            for (var i = 0; i < arr.length; i++) {
	                                total += arr[i];
	                            }
	                            return total / arr.length;
	                        };
	                        break;
	                    default:
	                        filter = function (arr) {
	                            return arr[0];
	                        }
	                }
	            }

	            var windowData = [];
	            for (var i = 0; i < total; i++) {
	                var idx0 = Math.floor(len / total * i);
	                var idx1 = Math.min(Math.floor(len / total * (i + 1)), len);
	                if (idx1 <= idx0) {
	                    continue;
	                }

	                for (var j = idx0; j < idx1; j++) {
	                    windowData[j - idx0] = orient === 'horizontal'
	                        ? singlePL[j][1] : singlePL[j][0];
	                }

	                windowData.length = idx1 - idx0;
	                var filteredVal = filter(windowData);
	                var nearestIdx = -1;
	                var minDist = Infinity;
	                // 寻找值最相似的点，使用其其它属性
	                for (var j = idx0; j < idx1; j++) {
	                    var val = orient === 'horizontal'
	                        ? singlePL[j][1] : singlePL[j][0];
	                    var dist = Math.abs(val - filteredVal);
	                    if (dist < minDist) {
	                        nearestIdx = j;
	                        minDist = dist;
	                    }
	                }

	                var newItem = singlePL[nearestIdx].slice();
	                if (orient === 'horizontal') {
	                    newItem[1] = filteredVal;
	                }
	                else {
	                    newItem[0] = filteredVal;
	                }
	                newList.push(newItem);
	            }
	            return newList;
	        },

	        _getSmooth: function (isSmooth/*, pointList, orient*/) {
	            if (isSmooth) {
	                /* 不科学啊，发现0.3通用了
	                var delta;
	                if (orient === 'horizontal') {
	                    delta = Math.abs(pointList[0][0] - pointList[1][0]);
	                }
	                else {
	                    delta = Math.abs(pointList[0][1] - pointList[1][1]);
	                }
	                */
	                return 0.3;
	            }
	            else {
	                return 0;
	            }
	        },

	        /**
	         * 生成空数据所需的可计算提示图形
	         */
	        _getCalculableItem: function (seriesIndex, dataIndex, name, x, y, orient) {
	            var series = this.series;
	            var color = series[seriesIndex].calculableHolderColor
	                        || this.ecTheme.calculableHolderColor
	                        || ecConfig.calculableHolderColor;

	            var itemShape = this._getSymbol(
	                seriesIndex, dataIndex, name,
	                x, y, orient
	            );
	            itemShape.style.color = color;
	            itemShape.style.strokeColor = color;
	            itemShape.rotation = [0,0];
	            itemShape.hoverable = false;
	            itemShape.draggable = false;
	            itemShape.style.text = undefined;

	            return itemShape;
	        },

	        /**
	         * 生成折线图上的拐点图形
	         */
	        _getSymbol: function (seriesIndex, dataIndex, name, x, y, orient) {
	            var series = this.series;
	            var serie = series[seriesIndex];
	            var data = serie.data[dataIndex];
	            
	            var itemShape = this.getSymbolShape(
	                serie, seriesIndex, data, dataIndex, name, 
	                x, y,
	                this._sIndex2ShapeMap[seriesIndex], 
	                this._sIndex2ColorMap[seriesIndex],
	                '#fff',
	                orient === 'vertical' ? 'horizontal' : 'vertical' // 翻转
	            );
	            itemShape.zlevel = serie.zlevel;
	            itemShape.z = serie.z + 1;
	            
	            if (this.deepQuery([data, serie, this.option], 'calculable')) {
	                this.setCalculable(itemShape);
	                itemShape.draggable = true;
	            }
	            
	            return itemShape;
	        },

	        // 位置转换
	        getMarkCoord: function (seriesIndex, mpData) {
	            var serie = this.series[seriesIndex];
	            var xMarkMap = this.xMarkMap[seriesIndex];
	            var xAxis = this.component.xAxis.getAxis(serie.xAxisIndex);
	            var yAxis = this.component.yAxis.getAxis(serie.yAxisIndex);
	            
	            if (mpData.type
	                && (mpData.type === 'max' || mpData.type === 'min' || mpData.type === 'average')
	            ) {
	                // 特殊值内置支持
	                var valueIndex = mpData.valueIndex != null 
	                                 ? mpData.valueIndex 
	                                 : xMarkMap.maxX0 != null 
	                                   ? '1' : '';
	                return [
	                    xMarkMap[mpData.type + 'X' + valueIndex],
	                    xMarkMap[mpData.type + 'Y' + valueIndex],
	                    xMarkMap[mpData.type + 'Line' + valueIndex],
	                    xMarkMap[mpData.type + valueIndex]
	                ];
	            }
	            
	            return [
	                typeof mpData.xAxis != 'string' && xAxis.getCoordByIndex
	                    ? xAxis.getCoordByIndex(mpData.xAxis || 0)
	                    : xAxis.getCoord(mpData.xAxis || 0),
	                
	                typeof mpData.yAxis != 'string' && yAxis.getCoordByIndex
	                    ? yAxis.getCoordByIndex(mpData.yAxis || 0)
	                    : yAxis.getCoord(mpData.yAxis || 0)
	            ];
	        },
	        
	        /**
	         * 刷新
	         */
	        refresh: function (newOption) {
	            if (newOption) {
	                this.option = newOption;
	                this.series = newOption.series;
	            }
	            
	            this.backupShapeList();
	            this._buildShape();
	        },
	        
	        ontooltipHover: function (param, tipShape) {
	            var seriesIndex = param.seriesIndex;
	            var dataIndex = param.dataIndex;
	            var seriesPL;
	            var singlePL;
	            var len = seriesIndex.length;
	            while (len--) {
	                seriesPL = this.finalPLMap[seriesIndex[len]];
	                if (seriesPL) {
	                    for (var i = 0, l = seriesPL.length; i < l; i++) {
	                        singlePL = seriesPL[i];
	                        for (var j = 0, k = singlePL.length; j < k; j++) {
	                            if (dataIndex === singlePL[j][2]) {
	                                tipShape.push(this._getSymbol(
	                                    seriesIndex[len],   // seriesIndex
	                                    singlePL[j][2],     // dataIndex
	                                    singlePL[j][3],     // name
	                                    singlePL[j][0],     // x
	                                    singlePL[j][1],     // y
	                                    'horizontal'
	                                ));
	                            }
	                        }
	                    }
	                }
	            }
	        },

	        /**
	         * 动态数据增加动画 
	         */
	        addDataAnimation: function (params, done) {
	            var series = this.series;
	            var aniMap = {}; // seriesIndex索引参数
	            for (var i = 0, l = params.length; i < l; i++) {
	                aniMap[params[i][0]] = params[i];
	            }
	            var x;
	            var dx;
	            var y;
	            var dy;
	            var seriesIndex;
	            var pointList;
	            var isHorizontal; // 是否横向布局， isHorizontal;

	            var aniCount = 0;
	            function animationDone() {
	                aniCount--;
	                if (aniCount === 0) {
	                    done && done();
	                }
	            }
	            function animationDuring(target) {
	                // 强制更新曲线控制点
	                target.style.controlPointList = null;
	            }

	            for (var i = this.shapeList.length - 1; i >= 0; i--) {
	                seriesIndex = this.shapeList[i]._seriesIndex;
	                if (aniMap[seriesIndex] && !aniMap[seriesIndex][3]) {
	                    // 有数据删除才有移动的动画
	                    if (this.shapeList[i]._main && this.shapeList[i].style.pointList.length > 1) {
	                        pointList = this.shapeList[i].style.pointList;
	                        // 主线动画
	                        dx = Math.abs(pointList[0][0] - pointList[1][0]);
	                        dy = Math.abs(pointList[0][1] - pointList[1][1]);
	                        isHorizontal = this.shapeList[i]._orient === 'horizontal';
	                            
	                        if (aniMap[seriesIndex][2]) {
	                            // 队头加入删除末尾
	                            if (this.shapeList[i].type === 'half-smooth-polygon') {
	                                //区域图
	                                var len = pointList.length;
	                                this.shapeList[i].style.pointList[len - 3] = pointList[len - 2];
	                                this.shapeList[i].style.pointList[len - 3][isHorizontal ? 0 : 1]
	                                    = pointList[len - 4][isHorizontal ? 0 : 1];
	                                this.shapeList[i].style.pointList[len - 2] = pointList[len - 1];
	                            }
	                            this.shapeList[i].style.pointList.pop();
	                            isHorizontal ? (x = dx, y = 0) : (x = 0, y = -dy);
	                        }
	                        else {
	                            // 队尾加入删除头部
	                            this.shapeList[i].style.pointList.shift();
	                            if (this.shapeList[i].type === 'half-smooth-polygon') {
	                                //区域图
	                                var targetPoint =this.shapeList[i].style.pointList.pop();
	                                isHorizontal
	                                ? (targetPoint[0] = pointList[0][0])
	                                : (targetPoint[1] = pointList[0][1]);
	                                this.shapeList[i].style.pointList.push(targetPoint);
	                            }
	                            isHorizontal ? (x = -dx, y = 0) : (x = 0, y = dy);
	                        }
	                        this.shapeList[i].style.controlPointList = null;
	                        
	                        this.zr.modShape(this.shapeList[i]);
	                    }
	                    else {
	                        // 拐点动画
	                        if (aniMap[seriesIndex][2] 
	                            && this.shapeList[i]._dataIndex 
	                                === series[seriesIndex].data.length - 1
	                        ) {
	                            // 队头加入删除末尾
	                            this.zr.delShape(this.shapeList[i].id);
	                            continue;
	                        }
	                        else if (!aniMap[seriesIndex][2] 
	                                 && this.shapeList[i]._dataIndex === 0
	                        ) {
	                            // 队尾加入删除头部
	                            this.zr.delShape(this.shapeList[i].id);
	                            continue;
	                        }
	                    }
	                    this.shapeList[i].position = [0, 0];

	                    aniCount++;
	                    this.zr.animate(this.shapeList[i].id, '')
	                        .when(
	                            this.query(this.option, 'animationDurationUpdate'),
	                            { position: [ x, y ] }
	                        )
	                        .during(animationDuring)
	                        .done(animationDone)
	                        .start();
	                }
	            }

	            // 没有动画
	            if (!aniCount) {
	                done && done();
	            }
	        }
	    };

	    function legendLineIcon(ctx, style, refreshNextFrame) {
	        var x = style.x;
	        var y = style.y;
	        var width = style.width;
	        var height = style.height;
	        
	        var dy = height / 2;
	        
	        if (style.symbol.match('empty')) {
	            ctx.fillStyle = '#fff';
	        }
	        style.brushType = 'both';
	        
	        var symbol = style.symbol.replace('empty', '').toLowerCase();
	        if (symbol.match('star')) {
	            dy = (symbol.replace('star','') - 0) || 5;
	            y -= 1;
	            symbol = 'star';
	        } 
	        else if (symbol === 'rectangle' || symbol === 'arrow') {
	            x += (width - height) / 2;
	            width = height;
	        }
	        
	        var imageLocation = '';
	        if (symbol.match('image')) {
	            imageLocation = symbol.replace(
	                    new RegExp('^image:\\/\\/'), ''
	                );
	            symbol = 'image';
	            x += Math.round((width - height) / 2) - 1;
	            width = height = height + 2;
	        }
	        symbol = IconShape.prototype.iconLibrary[symbol];
	        
	        if (symbol) {
	            var x2 = style.x;
	            var y2 = style.y;
	            ctx.moveTo(x2, y2 + dy);
	            ctx.lineTo(x2 + 5, y2 + dy);
	            ctx.moveTo(x2 + style.width - 5, y2 + dy);
	            ctx.lineTo(x2 + style.width, y2 + dy);
	            var self = this;
	            symbol(
	                ctx,
	                {
	                    x: x + 4,
	                    y: y + 4,
	                    width: width - 8,
	                    height: height - 8,
	                    n: dy,
	                    image: imageLocation
	                },
	                function () {
	                    self.modSelf();
	                    refreshNextFrame();
	                }
	            );
	        }
	        else {
	            ctx.moveTo(x, y + dy);
	            ctx.lineTo(x + width, y + dy);
	        }
	    }
	    IconShape.prototype.iconLibrary['legendLineIcon'] = legendLineIcon;
	    
	    zrUtil.inherits(Line, ChartBase);
	    
	    // 图表注册
	    __webpack_require__(454).define('line', Line);
	    
	    return Line;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 536 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * echarts组件：数据区域缩放
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	    var Base = __webpack_require__(508);

	    // 图形依赖
	    var RectangleShape = __webpack_require__(476);
	    var PolygonShape = __webpack_require__(497);
	    var IconShape = __webpack_require__(486);

	    var ecConfig = __webpack_require__(455);
	    // 区域缩放控制器
	    ecConfig.dataZoom = {
	        zlevel: 0,                  // 一级层叠
	        z: 4,                       // 二级层叠
	        show: false,
	        orient: 'horizontal',      // 布局方式，默认为水平布局，可选为：
	                                   // 'horizontal' ¦ 'vertical'
	        // x: {number},            // 水平安放位置，默认为根据grid参数适配，可选为：
	                                   // {number}（x坐标，单位px）
	        // y: {number},            // 垂直安放位置，默认为根据grid参数适配，可选为：
	                                   // {number}（y坐标，单位px）
	        // width: {number},        // 指定宽度，横向布局时默认为根据grid参数适配
	        // height: {number},       // 指定高度，纵向布局时默认为根据grid参数适配
	        backgroundColor: 'rgba(0,0,0,0)',       // 背景颜色
	        dataBackgroundColor: '#eee',            // 数据背景颜色
	        fillerColor: 'rgba(144,197,237,0.2)',   // 填充颜色
	        handleColor: 'rgba(70,130,180,0.8)',    // 手柄颜色
	        handleSize: 8,
	        showDetail: true,
	        // xAxisIndex: [],         // 默认控制所有横向类目
	        // yAxisIndex: [],         // 默认控制所有横向类目
	        // start: 0,               // 默认为0
	        // end: 100,               // 默认为全部 100%
	        realtime: true
	        // zoomLock: false         // 是否锁定选择区域大小
	    };

	    var ecDate = __webpack_require__(537);
	    var zrUtil = __webpack_require__(456);

	    /**
	     * 构造函数
	     * @param {Object} messageCenter echart消息中心
	     * @param {ZRender} zr zrender实例
	     * @param {Object} option 图表参数
	     * @param {Object} component 组件
	     */
	    function DataZoom(ecTheme, messageCenter, zr, option, myChart) {
	        Base.call(this, ecTheme, messageCenter, zr, option, myChart);

	        var self = this;
	        self._ondrift = function (dx, dy) {
	            return self.__ondrift(this, dx, dy);
	        };
	        self._ondragend = function () {
	            return self.__ondragend();
	        };

	        this._fillerSize = 30;       // 控件大小，水平布局为高，纵向布局为宽
	        // this._fillerShae;            // 填充
	        // this._startShape;            // 起始手柄
	        // this._endShape;              // 结束手柄
	        // this._startFrameShape;       // 起始特效边框
	        // this._endFrameShape;         // 结束特效边框
	        // this._syncTicket;
	        this._isSilence = false;
	        this._zoom = {};
	        // this._originalData;

	        this.option.dataZoom = this.reformOption(this.option.dataZoom);
	        this.zoomOption = this.option.dataZoom;
	        this._handleSize = this.zoomOption.handleSize;
	        if (!this.myChart.canvasSupported) {
	            // 不支持Canvas的强制关闭实时动画
	            this.zoomOption.realtime = false;
	        }

	        // 位置参数，通过计算所得x, y, width, height
	        this._location = this._getLocation();
	        // 缩放参数
	        this._zoom =  this._getZoom();
	        this._backupData();

	        if (this.option.dataZoom.show) {
	            this._buildShape();
	        }
	        this._syncData();
	    }

	    DataZoom.prototype = {
	        type : ecConfig.COMPONENT_TYPE_DATAZOOM,
	        _buildShape : function () {
	            this._buildBackground();
	            this._buildFiller();
	            this._buildHandle();
	            this._buildFrame();

	            for (var i = 0, l = this.shapeList.length; i < l; i++) {
	                this.zr.addShape(this.shapeList[i]);
	            }
	            this._syncFrameShape();
	        },

	        /**
	         * 根据选项计算实体的位置坐标
	         */
	        _getLocation : function () {
	            var x;
	            var y;
	            var width;
	            var height;
	            var grid = this.component.grid;

	            // 不指定则根据grid适配
	            if (this.zoomOption.orient == 'horizontal') {
	                // 水平布局
	                width = this.zoomOption.width || grid.getWidth();
	                height = this.zoomOption.height || this._fillerSize;
	                x = this.zoomOption.x != null ? this.zoomOption.x : grid.getX();
	                y = this.zoomOption.y != null ? this.zoomOption.y : (this.zr.getHeight() - height - 2);
	            }
	            else {
	                // 垂直布局
	                width = this.zoomOption.width || this._fillerSize;
	                height = this.zoomOption.height || grid.getHeight();
	                x = this.zoomOption.x != null ? this.zoomOption.x : 2;
	                y = this.zoomOption.y != null ? this.zoomOption.y : grid.getY();
	            }

	            return {
	                x : x,
	                y : y,
	                width : width,
	                height : height
	            };
	        },

	        /**
	         * 计算缩放参数
	         * 修正单坐标轴只传对象为数组。
	         */
	        _getZoom : function () {
	            var series = this.option.series;
	            var xAxis = this.option.xAxis;
	            if (xAxis && !(xAxis instanceof Array)) {
	                xAxis = [xAxis];
	                this.option.xAxis = xAxis;
	            }
	            var yAxis = this.option.yAxis;
	            if (yAxis && !(yAxis instanceof Array)) {
	                yAxis = [yAxis];
	                this.option.yAxis = yAxis;
	            }

	            var zoomSeriesIndex = [];
	            var xAxisIndex;
	            var yAxisIndex;

	            var zOptIdx = this.zoomOption.xAxisIndex;
	            if (xAxis && zOptIdx == null) {
	                xAxisIndex = [];
	                for (var i = 0, l = xAxis.length; i < l; i++) {
	                    // 横纵默认为类目轴
	                    if (xAxis[i].type == 'category' || xAxis[i].type == null) {
	                        xAxisIndex.push(i);
	                    }
	                }
	            }
	            else {
	                if (zOptIdx instanceof Array) {
	                    xAxisIndex = zOptIdx;
	                }
	                else if (zOptIdx != null) {
	                    xAxisIndex = [zOptIdx];
	                }
	                else {
	                    xAxisIndex = [];
	                }
	            }

	            zOptIdx = this.zoomOption.yAxisIndex;
	            if (yAxis && zOptIdx == null) {
	                yAxisIndex = [];
	                for (var i = 0, l = yAxis.length; i < l; i++) {
	                    if (yAxis[i].type == 'category') {
	                        yAxisIndex.push(i);
	                    }
	                }
	            }
	            else {
	                if (zOptIdx instanceof Array) {
	                    yAxisIndex = zOptIdx;
	                }
	                else if (zOptIdx != null) {
	                    yAxisIndex = [zOptIdx];
	                }
	                else {
	                    yAxisIndex = [];
	                }
	            }

	            // 找到缩放控制的所有series
	            var serie;
	            for (var i = 0, l = series.length; i < l; i++) {
	                serie = series[i];
	                if (serie.type != ecConfig.CHART_TYPE_LINE
	                    && serie.type != ecConfig.CHART_TYPE_BAR
	                    && serie.type != ecConfig.CHART_TYPE_SCATTER
	                    && serie.type != ecConfig.CHART_TYPE_K
	                ) {
	                    continue;
	                }
	                for (var j = 0, k = xAxisIndex.length; j < k; j++) {
	                    if (xAxisIndex[j] == (serie.xAxisIndex || 0)) {
	                        zoomSeriesIndex.push(i);
	                        break;
	                    }
	                }
	                for (var j = 0, k = yAxisIndex.length; j < k; j++) {
	                    if (yAxisIndex[j] == (serie.yAxisIndex || 0)) {
	                        zoomSeriesIndex.push(i);
	                        break;
	                    }
	                }
	                // 不指定接管坐标轴，则散点图、双数值轴折线图柱形图都被纳入接管范围
	                if (this.zoomOption.xAxisIndex == null
	                    && this.zoomOption.yAxisIndex == null
	                    && serie.data
	                    && this.getDataFromOption(serie.data[0]) instanceof Array
	                    && (serie.type == ecConfig.CHART_TYPE_SCATTER
	                        || serie.type == ecConfig.CHART_TYPE_LINE
	                        || serie.type == ecConfig.CHART_TYPE_BAR)
	                ) {
	                    zoomSeriesIndex.push(i);
	                }
	            }

	            var start = this._zoom.start != null
	                        ? this._zoom.start
	                        : (this.zoomOption.start != null ? this.zoomOption.start : 0);
	            var end = this._zoom.end != null
	                      ? this._zoom.end
	                      : (this.zoomOption.end != null ? this.zoomOption.end : 100);

	            if (start > end) {
	                // 大小颠倒自动翻转
	                start = start + end;
	                end = start - end;
	                start = start - end;
	            }
	            var size = Math.round(
	                (end - start) / 100
	                * (
	                    this.zoomOption.orient == 'horizontal'
	                    ? this._location.width : this._location.height
	                )
	            );
	            return {
	                start : start,
	                end : end,
	                start2 : 0,
	                end2 : 100,
	                size : size,
	                xAxisIndex : xAxisIndex,
	                yAxisIndex : yAxisIndex,
	                seriesIndex : zoomSeriesIndex,
	                scatterMap : this._zoom.scatterMap || {}
	            };
	        },

	        _backupData : function () {
	            this._originalData = {
	                xAxis : {},
	                yAxis : {},
	                series : {}
	            };
	            var xAxis = this.option.xAxis;
	            var xAxisIndex = this._zoom.xAxisIndex;
	            for (var i = 0, l = xAxisIndex.length; i < l; i++) {
	                this._originalData.xAxis[xAxisIndex[i]] = xAxis[xAxisIndex[i]].data;
	            }

	            var yAxis = this.option.yAxis;
	            var yAxisIndex = this._zoom.yAxisIndex;
	            for (var i = 0, l = yAxisIndex.length; i < l; i++) {
	                this._originalData.yAxis[yAxisIndex[i]] = yAxis[yAxisIndex[i]].data;
	            }

	            var series = this.option.series;
	            var seriesIndex = this._zoom.seriesIndex;
	            var serie;
	            for (var i = 0, l = seriesIndex.length; i < l; i++) {
	                serie = series[seriesIndex[i]];
	                this._originalData.series[seriesIndex[i]] = serie.data;
	                if (serie.data
	                    && this.getDataFromOption(serie.data[0]) instanceof Array
	                    && (serie.type == ecConfig.CHART_TYPE_SCATTER
	                        || serie.type == ecConfig.CHART_TYPE_LINE
	                        || serie.type == ecConfig.CHART_TYPE_BAR)
	                ) {
	                    this._backupScale();
	                    this._calculScatterMap(seriesIndex[i]);
	                }
	            }
	        },

	        // 不止是scatter，双数值轴也使用此方法
	        _calculScatterMap : function (seriesIndex) {
	            this._zoom.scatterMap = this._zoom.scatterMap || {};
	            this._zoom.scatterMap[seriesIndex] = this._zoom.scatterMap[seriesIndex] || {};
	            var componentLibrary = __webpack_require__(516);
	            // x轴极值
	            var Axis = componentLibrary.get('axis');
	            var axisOption = zrUtil.clone(this.option.xAxis);
	            if (axisOption[0].type == 'category') {
	                axisOption[0].type = 'value';
	            }
	            // axisOption[0].scale = true;
	            // axisOption[0].boundary = [0, 0];
	            if (axisOption[1] && axisOption[1].type == 'category') {
	                axisOption[1].type = 'value';
	            }

	            var vAxis = new Axis(
	                this.ecTheme,
	                null,   // messageCenter
	                false,  // this.zr
	                {
	                    xAxis: axisOption,
	                    series : this.option.series
	                },
	                this,
	                'xAxis'
	            );
	            var axisIndex = this.option.series[seriesIndex].xAxisIndex || 0;
	            this._zoom.scatterMap[seriesIndex].x = vAxis.getAxis(axisIndex).getExtremum();
	            vAxis.dispose();

	            // y轴极值
	            axisOption = zrUtil.clone(this.option.yAxis);
	            if (axisOption[0].type == 'category') {
	                axisOption[0].type = 'value';
	            }
	            // axisOption[0].scale = true;
	            // axisOption[1].boundary = [0, 0];
	            if (axisOption[1] && axisOption[1].type == 'category') {
	                axisOption[1].type = 'value';
	            }
	            vAxis = new Axis(
	                this.ecTheme,
	                null,   // messageCenter
	                false,  // this.zr
	                {
	                    yAxis: axisOption,
	                    series : this.option.series
	                },
	                this,
	                'yAxis'
	            );
	            axisIndex = this.option.series[seriesIndex].yAxisIndex || 0;
	            this._zoom.scatterMap[seriesIndex].y = vAxis.getAxis(axisIndex).getExtremum();
	            vAxis.dispose();
	            // console.log(this._zoom.scatterMap);
	        },

	        _buildBackground : function () {
	            var width = this._location.width;
	            var height = this._location.height;

	            // 背景
	            this.shapeList.push(new RectangleShape({
	                zlevel: this.getZlevelBase(),
	                z: this.getZBase(),
	                hoverable :false,
	                style : {
	                    x : this._location.x,
	                    y : this._location.y,
	                    width : width,
	                    height : height,
	                    color : this.zoomOption.backgroundColor
	                }
	            }));

	            // 数据阴影
	            var maxLength = 0;
	            var xAxis = this._originalData.xAxis;
	            var xAxisIndex = this._zoom.xAxisIndex;
	            for (var i = 0, l = xAxisIndex.length; i < l; i++) {
	                maxLength = Math.max(
	                    maxLength, xAxis[xAxisIndex[i]].length
	                );
	            }
	            var yAxis = this._originalData.yAxis;
	            var yAxisIndex = this._zoom.yAxisIndex;
	            for (var i = 0, l = yAxisIndex.length; i < l; i++) {
	                maxLength = Math.max(
	                    maxLength, yAxis[yAxisIndex[i]].length
	                );
	            }

	            var seriesIndex = this._zoom.seriesIndex[0];
	            var data = this._originalData.series[seriesIndex];
	            var maxValue = Number.MIN_VALUE;
	            var minValue = Number.MAX_VALUE;
	            var value;
	            for (var i = 0, l = data.length; i < l; i++) {
	                value = this.getDataFromOption(data[i], 0);
	                if (this.option.series[seriesIndex].type == ecConfig.CHART_TYPE_K) {
	                    value = value[1];   // 收盘价
	                }
	                if (isNaN(value)) {
	                    value = 0;
	                }
	                maxValue = Math.max(maxValue, value);
	                minValue = Math.min(minValue, value);
	            }
	            var valueRange = maxValue - minValue;

	            var pointList = [];
	            var x = width / (maxLength - (maxLength > 1 ? 1 : 0));
	            var y = height / (maxLength - (maxLength > 1 ? 1 : 0));
	            var step = 1;
	            if (this.zoomOption.orient == 'horizontal' && x < 1) {
	                step = Math.floor(maxLength * 3 / width);
	            }
	            else if (this.zoomOption.orient == 'vertical' && y < 1){
	                step = Math.floor(maxLength * 3 / height);
	            }

	            for (var i = 0, l = maxLength; i < l; i += step) {
	                value = this.getDataFromOption(data[i], 0);
	                if (this.option.series[seriesIndex].type == ecConfig.CHART_TYPE_K) {
	                    value = value[1];   // 收盘价
	                }
	                if (isNaN(value)) {
	                    value = 0;
	                }
	                if (this.zoomOption.orient == 'horizontal') {
	                    pointList.push([
	                        this._location.x + x * i,
	                        this._location.y + height - 1 - Math.round(
	                            (value - minValue) / valueRange * (height - 10)
	                        )
	                    ]);
	                }
	                else {
	                    pointList.push([
	                        this._location.x + 1 + Math.round(
	                            (value - minValue) / valueRange * (width - 10)
	                        ),
	                        this._location.y + y * (l - i - 1)
	                    ]);
	                }
	            }
	            if (this.zoomOption.orient == 'horizontal') {
	                pointList.push([
	                    this._location.x + width,
	                    this._location.y + height
	                ]);
	                pointList.push([
	                    this._location.x, this._location.y + height
	                ]);
	            }
	            else {
	                pointList.push([
	                    this._location.x, this._location.y
	                ]);
	                pointList.push([
	                    this._location.x, this._location.y + height
	                ]);
	            }

	            this.shapeList.push(new PolygonShape({
	                zlevel: this.getZlevelBase(),
	                z: this.getZBase(),
	                style : {
	                    pointList : pointList,
	                    color : this.zoomOption.dataBackgroundColor
	                },
	                hoverable : false
	            }));
	        },

	        /**
	         * 构建填充物
	         */
	        _buildFiller : function () {
	            this._fillerShae = {
	                zlevel: this.getZlevelBase(),
	                z: this.getZBase(),
	                draggable : true,
	                ondrift : this._ondrift,
	                ondragend : this._ondragend,
	                _type : 'filler'
	            };

	            if (this.zoomOption.orient == 'horizontal') {
	                // 横向
	                this._fillerShae.style = {
	                    x : this._location.x
	                        + Math.round(this._zoom.start / 100 * this._location.width)
	                        + this._handleSize,
	                    y : this._location.y,
	                    width : this._zoom.size - this._handleSize * 2,
	                    height : this._location.height,
	                    color : this.zoomOption.fillerColor,
	                    // strokeColor : '#fff', // this.zoomOption.handleColor,
	                    // lineWidth: 2,
	                    text : ':::',
	                    textPosition : 'inside'
	                };
	            }
	            else {
	                // 纵向
	                this._fillerShae.style ={
	                    x : this._location.x,
	                    y : this._location.y
	                        + Math.round(this._zoom.start / 100 * this._location.height)
	                        + this._handleSize,
	                    width :  this._location.width,
	                    height : this._zoom.size - this._handleSize * 2,
	                    color : this.zoomOption.fillerColor,
	                    // strokeColor : '#fff', // this.zoomOption.handleColor,
	                    // lineWidth: 2,
	                    text : '::',
	                    textPosition : 'inside'
	                };
	            }

	            this._fillerShae.highlightStyle = {
	                brushType: 'fill',
	                color : 'rgba(0,0,0,0)'
	                /*
	                color : require('zrender/tool/color').alpha(
	                            this._fillerShae.style.color, 0
	                        )
	                */
	            };
	            this._fillerShae = new RectangleShape(this._fillerShae);
	            this.shapeList.push(this._fillerShae);
	        },

	        /**
	         * 构建拖拽手柄
	         */
	        _buildHandle : function () {
	            var detail = this.zoomOption.showDetail ? this._getDetail() : {start: '',end: ''};
	            this._startShape = {
	                zlevel: this.getZlevelBase(),
	                z: this.getZBase(),
	                draggable : true,
	                style : {
	                    iconType: 'rectangle',
	                    x: this._location.x,
	                    y: this._location.y,
	                    width: this._handleSize,
	                    height: this._handleSize,
	                    color: this.zoomOption.handleColor,
	                    text: '=',
	                    textPosition: 'inside'
	                },
	                highlightStyle: {
	                    text: detail.start,
	                    brushType: 'fill',
	                    textPosition: 'left'
	                },
	                ondrift: this._ondrift,
	                ondragend: this._ondragend
	            };

	            if (this.zoomOption.orient == 'horizontal') {
	                this._startShape.style.height = this._location.height;
	                this._endShape = zrUtil.clone(this._startShape);

	                this._startShape.style.x = this._fillerShae.style.x - this._handleSize,
	                this._endShape.style.x = this._fillerShae.style.x + this._fillerShae.style.width;
	                this._endShape.highlightStyle.text = detail.end;
	                this._endShape.highlightStyle.textPosition = 'right';
	            }
	            else {
	                this._startShape.style.width = this._location.width;
	                this._endShape = zrUtil.clone(this._startShape);

	                this._startShape.style.y = this._fillerShae.style.y + this._fillerShae.style.height;
	                this._startShape.highlightStyle.textPosition = 'bottom';

	                this._endShape.style.y = this._fillerShae.style.y - this._handleSize;
	                this._endShape.highlightStyle.text = detail.end;
	                this._endShape.highlightStyle.textPosition = 'top';
	            }
	            this._startShape = new IconShape(this._startShape);
	            this._endShape = new IconShape(this._endShape);
	            this.shapeList.push(this._startShape);
	            this.shapeList.push(this._endShape);
	        },

	        /**
	         * 构建特效边框
	         */
	        _buildFrame : function () {
	            // 特效框线，亚像素优化
	            var x = this.subPixelOptimize(this._location.x, 1);
	            var y = this.subPixelOptimize(this._location.y, 1);
	            this._startFrameShape = {
	                zlevel: this.getZlevelBase(),
	                z: this.getZBase(),
	                hoverable :false,
	                style : {
	                    x : x,
	                    y : y,
	                    width : this._location.width - (x > this._location.x ? 1 : 0),
	                    height : this._location.height - (y > this._location.y ? 1 : 0),
	                    lineWidth: 1,
	                    brushType: 'stroke',
	                    strokeColor : this.zoomOption.handleColor
	                }
	            };
	            this._endFrameShape = zrUtil.clone(this._startFrameShape);

	            this._startFrameShape = new RectangleShape(this._startFrameShape);
	            this._endFrameShape = new RectangleShape(this._endFrameShape);
	            this.shapeList.push(this._startFrameShape);
	            this.shapeList.push(this._endFrameShape);
	            return;
	        },

	        _syncHandleShape : function () {
	            if (this.zoomOption.orient == 'horizontal') {
	                this._startShape.style.x = this._fillerShae.style.x - this._handleSize;
	                this._endShape.style.x = this._fillerShae.style.x + this._fillerShae.style.width;

	                this._zoom.start = (
	                    this._startShape.style.x - this._location.x
	                ) / this._location.width * 100;
	                this._zoom.end = (
	                    this._endShape.style.x + this._handleSize - this._location.x
	                ) / this._location.width * 100;
	            }
	            else {
	                this._startShape.style.y = this._fillerShae.style.y + this._fillerShae.style.height;
	                this._endShape.style.y = this._fillerShae.style.y - this._handleSize;

	                this._zoom.start = (
	                    this._location.y + this._location.height
	                    - this._startShape.style.y
	                ) / this._location.height * 100;
	                this._zoom.end = (
	                    this._location.y + this._location.height
	                    - this._endShape.style.y - this._handleSize
	                ) / this._location.height * 100;
	            }
	            this.zr.modShape(this._startShape.id);
	            this.zr.modShape(this._endShape.id);

	            // 同步边框
	            this._syncFrameShape();

	            this.zr.refreshNextFrame();
	        },

	        _syncFillerShape : function () {
	            var a;
	            var b;
	            if (this.zoomOption.orient == 'horizontal') {
	                a = this._startShape.style.x;
	                b = this._endShape.style.x;
	                this._fillerShae.style.x = Math.min(a, b) + this._handleSize;
	                this._fillerShae.style.width = Math.abs(a - b) - this._handleSize;
	                this._zoom.start = (
	                    Math.min(a, b) - this._location.x
	                ) / this._location.width * 100;
	                this._zoom.end = (
	                    Math.max(a, b) + this._handleSize - this._location.x
	                ) / this._location.width * 100;
	            }
	            else {
	                a = this._startShape.style.y;
	                b = this._endShape.style.y;
	                this._fillerShae.style.y = Math.min(a, b) + this._handleSize;
	                this._fillerShae.style.height = Math.abs(a - b) - this._handleSize;
	                this._zoom.start = (
	                    this._location.y + this._location.height - Math.max(a, b)
	                ) / this._location.height * 100;
	                this._zoom.end = (
	                    this._location.y + this._location.height - Math.min(a, b) - this._handleSize
	                ) / this._location.height * 100;
	            }

	            this.zr.modShape(this._fillerShae.id);

	            // 同步边框
	            this._syncFrameShape();

	            this.zr.refreshNextFrame();
	        },

	        _syncFrameShape : function () {
	            if (this.zoomOption.orient == 'horizontal') {
	                this._startFrameShape.style.width =
	                    this._fillerShae.style.x - this._location.x;
	                this._endFrameShape.style.x =
	                    this._fillerShae.style.x + this._fillerShae.style.width;
	                this._endFrameShape.style.width =
	                    this._location.x + this._location.width - this._endFrameShape.style.x;
	            }
	            else {
	                this._startFrameShape.style.y =
	                    this._fillerShae.style.y + this._fillerShae.style.height;
	                this._startFrameShape.style.height =
	                    this._location.y + this._location.height - this._startFrameShape.style.y;
	                this._endFrameShape.style.height =
	                    this._fillerShae.style.y - this._location.y;
	            }

	            this.zr.modShape(this._startFrameShape.id);
	            this.zr.modShape(this._endFrameShape.id);
	        },

	        _syncShape : function () {
	            if (!this.zoomOption.show) {
	                // 没有伸缩控件
	                return;
	            }
	            if (this.zoomOption.orient == 'horizontal') {
	                this._startShape.style.x = this._location.x
	                                           + this._zoom.start / 100 * this._location.width;
	                this._endShape.style.x   = this._location.x
	                                           + this._zoom.end / 100 * this._location.width
	                                           - this._handleSize;

	                this._fillerShae.style.x     = this._startShape.style.x + this._handleSize;
	                this._fillerShae.style.width = this._endShape.style.x
	                                               - this._startShape.style.x
	                                               - this._handleSize;
	            }
	            else {
	                this._startShape.style.y = this._location.y + this._location.height
	                                           - this._zoom.start / 100 * this._location.height;
	                this._endShape.style.y   = this._location.y + this._location.height
	                                           - this._zoom.end / 100 * this._location.height
	                                           - this._handleSize;

	                this._fillerShae.style.y      = this._endShape.style.y + this._handleSize;
	                this._fillerShae.style.height = this._startShape.style.y
	                                                - this._endShape.style.y
	                                                - this._handleSize;
	            }

	            this.zr.modShape(this._startShape.id);
	            this.zr.modShape(this._endShape.id);
	            this.zr.modShape(this._fillerShae.id);
	            // 同步边框
	            this._syncFrameShape();
	            this.zr.refresh();
	        },

	         _syncData : function (dispatchNow) {
	            var target;
	            var start;
	            var end;
	            var length;
	            var data;

	            for (var key in this._originalData) {
	                target = this._originalData[key];
	                for (var idx in target) {
	                    data = target[idx];
	                    if (data == null) {
	                        continue;
	                    }
	                    length = data.length;
	                    start = Math.floor(this._zoom.start / 100 * length);
	                    end = Math.ceil(this._zoom.end / 100 * length);

	                    if (!(this.getDataFromOption(data[0]) instanceof Array)
	                        || this.option[key][idx].type == ecConfig.CHART_TYPE_K
	                    ) {
	                        this.option[key][idx].data = data.slice(start, end);
	                    }
	                    else {
	                        // 散点图，双数值轴折线图柱形图特殊处理
	                        // axis.data[0]不会是Array，所以axis的情况不会走进这个分支
	                        this._setScale();
	                        this.option[key][idx].data = this._synScatterData(idx, data);
	                    }
	                }
	            }

	            if (!this._isSilence && (this.zoomOption.realtime || dispatchNow)) {
	                this.messageCenter.dispatch(
	                    ecConfig.EVENT.DATA_ZOOM,
	                    null,
	                    {zoom: this._zoom},
	                    this.myChart
	                );
	            }

	            //this.zoomOption.start = this._zoom.start;
	            //this.zoomOption.end = this._zoom.end;
	        },

	        _synScatterData : function (seriesIndex, data) {
	            if (this._zoom.start === 0
	                && this._zoom.end == 100
	                && this._zoom.start2 === 0
	                && this._zoom.end2 == 100
	            ) {
	                return data;
	            }
	            var newData = [];
	            var scale = this._zoom.scatterMap[seriesIndex];
	            var total;
	            var xStart;
	            var xEnd;
	            var yStart;
	            var yEnd;

	            if (this.zoomOption.orient == 'horizontal') {
	                total = scale.x.max - scale.x.min;
	                xStart = this._zoom.start / 100 * total + scale.x.min;
	                xEnd = this._zoom.end / 100 * total + scale.x.min;

	                total = scale.y.max - scale.y.min;
	                yStart = this._zoom.start2 / 100 * total + scale.y.min;
	                yEnd = this._zoom.end2 / 100 * total + scale.y.min;
	            }
	            else {
	                total = scale.x.max - scale.x.min;
	                xStart = this._zoom.start2 / 100 * total + scale.x.min;
	                xEnd = this._zoom.end2 / 100 * total + scale.x.min;

	                total = scale.y.max - scale.y.min;
	                yStart = this._zoom.start / 100 * total + scale.y.min;
	                yEnd = this._zoom.end / 100 * total + scale.y.min;
	            }

	            var dataMappingMethods;
	            if (dataMappingMethods = scale.x.dataMappingMethods) {
	                xStart = dataMappingMethods.coord2Value(xStart);
	                xEnd = dataMappingMethods.coord2Value(xEnd);
	            }
	            if (dataMappingMethods = scale.y.dataMappingMethods) {
	                yStart = dataMappingMethods.coord2Value(yStart);
	                yEnd = dataMappingMethods.coord2Value(yEnd);
	            }

	            // console.log(xStart,xEnd,yStart,yEnd);

	            var value;
	            for (var i = 0, l = data.length; i < l; i++) {
	                value = data[i].value || data[i];
	                if (value[0] >= xStart
	                    && value[0] <= xEnd
	                    && value[1] >= yStart
	                    && value[1] <= yEnd
	                ) {
	                    newData.push(data[i]);
	                }
	            }

	            return newData;
	        },

	        /**
	         * 发生缩放后修改axis的scale
	         */
	        _setScale: function() {
	            var needScale = this._zoom.start !== 0
	                            || this._zoom.end !== 100
	                            || this._zoom.start2 !== 0
	                            || this._zoom.end2 !== 100;
	            var axis = {
	                xAxis : this.option.xAxis,
	                yAxis : this.option.yAxis
	            };
	            for (var key in axis) {
	                for (var i = 0, l = axis[key].length; i < l; i++) {
	                    axis[key][i].scale = needScale || axis[key][i]._scale;
	                }
	            }
	        },

	        /**
	         * 备份可能存在的scale设置
	         */
	        _backupScale: function() {
	            var axis = {
	                xAxis : this.option.xAxis,
	                yAxis : this.option.yAxis
	            };
	            for (var key in axis) {
	                for (var i = 0, l = axis[key].length; i < l; i++) {
	                    axis[key][i]._scale = axis[key][i].scale;
	                }
	            }
	        },

	        /**
	         * 获取当前定位
	         */
	        _getDetail : function () {
	            var key = ['xAxis', 'yAxis'];
	            for (var i = 0, l = key.length; i < l; i++) {
	                var target = this._originalData[key[i]];
	                for (var idx in target) {
	                    var data = target[idx];
	                    if (data == null) {
	                        continue;
	                    }
	                    var length = data.length;
	                    var start = Math.floor(this._zoom.start / 100 * length);
	                    var end = Math.ceil(this._zoom.end / 100 * length);
	                    end -= end > 0 ? 1 : 0;
	                    return {
	                        start : this.getDataFromOption(data[start]),
	                        end : this.getDataFromOption(data[end])
	                    };
	                }
	            }

	            key = this.zoomOption.orient == 'horizontal' ? 'xAxis' : 'yAxis';
	            var seriesIndex = this._zoom.seriesIndex[0];
	            var axisIndex = this.option.series[seriesIndex][key + 'Index'] || 0;
	            var axisType = this.option[key][axisIndex].type;
	            var min = this._zoom.scatterMap[seriesIndex][key.charAt(0)].min;
	            var max = this._zoom.scatterMap[seriesIndex][key.charAt(0)].max;
	            var gap = max - min;

	            if (axisType == 'value') {
	                return {
	                    start : min + gap * this._zoom.start / 100,
	                    end : min + gap * this._zoom.end / 100
	                };
	            }
	            else if (axisType == 'time') {
	                // 最优解
	                max = min + gap * this._zoom.end / 100;
	                min = min + gap * this._zoom.start / 100;
	                var formatter = ecDate.getAutoFormatter(min, max).formatter;
	                return {
	                    start : ecDate.format(formatter, min),
	                    end : ecDate.format(formatter, max)
	                };
	            }

	            return {
	                start : '',
	                end : ''
	            };
	        },

	        /**
	         * 拖拽范围控制
	         */
	        __ondrift : function (shape, dx, dy) {
	            if (this.zoomOption.zoomLock) {
	                // zoomLock时把handle转成filler的拖拽
	                shape = this._fillerShae;
	            }

	            var detailSize = shape._type == 'filler' ? this._handleSize : 0;
	            if (this.zoomOption.orient == 'horizontal') {
	                if (shape.style.x + dx - detailSize <= this._location.x) {
	                    shape.style.x = this._location.x + detailSize;
	                }
	                else if (shape.style.x + dx + shape.style.width + detailSize
	                         >= this._location.x + this._location.width
	                ) {
	                    shape.style.x = this._location.x + this._location.width
	                                - shape.style.width - detailSize;
	                }
	                else {
	                    shape.style.x += dx;
	                }
	            }
	            else {
	                if (shape.style.y + dy - detailSize <= this._location.y) {
	                    shape.style.y = this._location.y + detailSize;
	                }
	                else if (shape.style.y + dy + shape.style.height + detailSize
	                         >= this._location.y + this._location.height
	                ) {
	                    shape.style.y = this._location.y + this._location.height
	                                - shape.style.height - detailSize;
	                }
	                else {
	                    shape.style.y += dy;
	                }
	            }

	            if (shape._type == 'filler') {
	                this._syncHandleShape();
	            }
	            else {
	                this._syncFillerShape();
	            }

	            if (this.zoomOption.realtime) {
	                this._syncData();
	            }

	            if (this.zoomOption.showDetail) {
	                var detail = this._getDetail();
	                this._startShape.style.text = this._startShape.highlightStyle.text = detail.start;
	                this._endShape.style.text = this._endShape.highlightStyle.text = detail.end;
	                this._startShape.style.textPosition = this._startShape.highlightStyle.textPosition;
	                this._endShape.style.textPosition = this._endShape.highlightStyle.textPosition;
	            }
	            return true;
	        },

	        __ondragend : function () {
	            if (this.zoomOption.showDetail) {
	                this._startShape.style.text = this._endShape.style.text = '=';
	                this._startShape.style.textPosition = this._endShape.style.textPosition = 'inside';
	                this.zr.modShape(this._startShape.id);
	                this.zr.modShape(this._endShape.id);
	                this.zr.refreshNextFrame();
	            }
	            this.isDragend = true;
	        },

	        /**
	         * 数据项被拖拽出去
	         */
	        ondragend : function (param, status) {
	            if (!this.isDragend || !param.target) {
	                // 没有在当前实例上发生拖拽行为则直接返回
	                return;
	            }

	            !this.zoomOption.realtime && this._syncData();

	            // 别status = {}赋值啊！！
	            status.dragOut = true;
	            status.dragIn = true;
	            if (!this._isSilence && !this.zoomOption.realtime) {
	                this.messageCenter.dispatch(
	                    ecConfig.EVENT.DATA_ZOOM,
	                    null,
	                    {zoom: this._zoom},
	                    this.myChart
	                );
	            }
	            status.needRefresh = false; // 会有消息触发fresh，不用再刷一遍
	            // 处理完拖拽事件后复位
	            this.isDragend = false;

	            return;
	        },

	        ondataZoom : function (param, status) {
	            status.needRefresh = true;
	            return;
	        },

	        absoluteZoom : function (param) {
	            this._zoom.start = param.start;
	            this._zoom.end = param.end;
	            this._zoom.start2 = param.start2;
	            this._zoom.end2 = param.end2;
	            this._syncShape();
	            this._syncData(true);
	            return;
	        },

	        rectZoom : function (param) {
	            if (!param) {
	                // 重置拖拽
	                //this.zoomOption.start =
	                //this.zoomOption.start2 =
	                this._zoom.start = this._zoom.start2 = 0;

	                //this.zoomOption.end =
	                //this.zoomOption.end2 =
	                this._zoom.end = this._zoom.end2 = 100;

	                this._syncShape();
	                this._syncData(true);
	                return this._zoom;
	            }
	            var gridArea = this.component.grid.getArea();
	            var rect = {
	                x : param.x,
	                y : param.y,
	                width : param.width,
	                height : param.height
	            };
	            // 修正方向框选
	            if (rect.width < 0) {
	                rect.x += rect.width;
	                rect.width = -rect.width;
	            }
	            if (rect.height < 0) {
	                rect.y += rect.height;
	                rect.height = -rect.height;
	            }
	            // console.log(rect,this._zoom);

	            // 剔除无效缩放
	            if (rect.x > gridArea.x + gridArea.width || rect.y > gridArea.y + gridArea.height) {
	                return false; // 无效缩放
	            }

	            // 修正框选超出
	            if (rect.x < gridArea.x) {
	                rect.x = gridArea.x;
	            }
	            if (rect.x + rect.width > gridArea.x + gridArea.width) {
	                rect.width = gridArea.x + gridArea.width - rect.x;
	            }
	            if (rect.y + rect.height > gridArea.y + gridArea.height) {
	                rect.height = gridArea.y + gridArea.height - rect.y;
	            }

	            var total;
	            var sdx = (rect.x - gridArea.x) / gridArea.width;
	            var edx = 1 - (rect.x + rect.width - gridArea.x) / gridArea.width;
	            var sdy = 1 - (rect.y + rect.height - gridArea.y) / gridArea.height;
	            var edy = (rect.y - gridArea.y) / gridArea.height;
	            // console.log('this',sdy,edy,this._zoom.start,this._zoom.end)
	            if (this.zoomOption.orient == 'horizontal') {
	                total = this._zoom.end - this._zoom.start;
	                this._zoom.start += total * sdx;
	                this._zoom.end -= total * edx;

	                total = this._zoom.end2 - this._zoom.start2;
	                this._zoom.start2 += total * sdy;
	                this._zoom.end2 -= total * edy;
	            }
	            else {
	                total = this._zoom.end - this._zoom.start;
	                this._zoom.start += total * sdy;
	                this._zoom.end -= total * edy;

	                total = this._zoom.end2 - this._zoom.start2;
	                this._zoom.start2 += total * sdx;
	                this._zoom.end2 -= total * edx;
	            }
	            //console.log(this._zoom.start,this._zoom.end,this._zoom.start2,this._zoom.end2)
	            //this.zoomOption.start = this._zoom.start;
	            //this.zoomOption.end = this._zoom.end;
	            //this.zoomOption.start2 = this._zoom.start2;
	            //this.zoomOption.end2 = this._zoom.end2;
	            //console.log(rect,gridArea,this._zoom,total)
	            this._syncShape();
	            this._syncData(true);
	            return this._zoom;
	        },

	        syncBackupData : function (curOption) {
	            var start;
	            var target = this._originalData['series'];
	            var curSeries = curOption.series;
	            var curData;
	            for (var i = 0, l = curSeries.length; i < l; i++) {
	                curData = curSeries[i].data || curSeries[i].eventList;
	                if (target[i]) {
	                    // dataZoom接管的
	                    start = Math.floor(this._zoom.start / 100 * target[i].length);
	                }
	                else {
	                    // 非dataZoom接管
	                    start = 0;
	                }
	                for (var j = 0, k = curData.length; j < k; j++) {
	                    //optionBackup.series[i].data[j + start] = curData[j];
	                    if (target[i]) {
	                        // 同步内部备份
	                        target[i][j + start] = curData[j];
	                    }
	                }
	            }
	        },

	        syncOption : function(magicOption) {
	            this.silence(true);
	            this.option = magicOption;
	            this.option.dataZoom = this.reformOption(this.option.dataZoom);
	            this.zoomOption = this.option.dataZoom;
	            if (!this.myChart.canvasSupported) {
	                // 不支持Canvas的强制关闭实时动画
	                this.zoomOption.realtime = false;
	            }

	            this.clear();
	            // 位置参数，通过计算所得x, y, width, height
	            this._location = this._getLocation();
	            // 缩放参数
	            this._zoom =  this._getZoom();

	            this._backupData();
	            if (this.option.dataZoom && this.option.dataZoom.show) {
	                this._buildShape();
	            }
	            this._syncData();

	            this.silence(false);
	        },

	        silence : function (s) {
	            this._isSilence = s;
	        },

	        getRealDataIndex : function (sIdx, dIdx) {
	            if (!this._originalData || (this._zoom.start === 0 && this._zoom.end == 100)) {
	                return dIdx;
	            }
	            var sreies = this._originalData.series;
	            if (sreies[sIdx]) {
	                return Math.floor(this._zoom.start / 100 * sreies[sIdx].length) + dIdx;
	            }
	            return -1;
	        },

	        /**
	         * 避免dataZoom带来两次refresh，不设refresh接口，resize重复一下buildshape逻辑
	         */
	        resize : function () {
	            this.clear();

	            // 位置参数，通过计算所得x, y, width, height
	            this._location = this._getLocation();
	            // 缩放参数
	            this._zoom =  this._getZoom();

	            if (this.option.dataZoom.show) {
	                this._buildShape();
	            }
	        }
	    };

	    zrUtil.inherits(DataZoom, Base);

	    __webpack_require__(516).define('dataZoom', DataZoom);

	    return DataZoom;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 537 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * echarts日期运算格式化相关
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	    var _timeGap = [
	        {formatter: 'hh : mm : ss', value: 1000},               // 1s
	        {formatter: 'hh : mm : ss', value: 1000 * 5},           // 5s
	        {formatter: 'hh : mm : ss', value: 1000 * 10},          // 10s
	        {formatter: 'hh : mm : ss', value: 1000 * 15},          // 15s
	        {formatter: 'hh : mm : ss', value: 1000 * 30},          // 30s
	        {formatter: 'hh : mm\nMM - dd', value: 60000},          // 1m
	        {formatter: 'hh : mm\nMM - dd', value: 60000 * 5},      // 5m
	        {formatter: 'hh : mm\nMM - dd', value: 60000 * 10},     // 10m
	        {formatter: 'hh : mm\nMM - dd', value: 60000 * 15},     // 15m
	        {formatter: 'hh : mm\nMM - dd', value: 60000 * 30},     // 30m
	        {formatter: 'hh : mm\nMM - dd', value: 3600000},        // 1h
	        {formatter: 'hh : mm\nMM - dd', value: 3600000 * 2},    // 2h
	        {formatter: 'hh : mm\nMM - dd', value: 3600000 * 6},    // 6h
	        {formatter: 'hh : mm\nMM - dd', value: 3600000 * 12},   // 12h
	        {formatter: 'MM - dd\nyyyy', value: 3600000 * 24},      // 1d
	        {formatter: 'week', value: 3600000 * 24 * 7},           // 7d
	        {formatter: 'month', value: 3600000 * 24 * 31},         // 1M
	        {formatter: 'quarter', value: 3600000 * 24 * 380 / 4},  // 3M
	        {formatter: 'half-year', value: 3600000 * 24 * 380 / 2},// 6M
	        {formatter: 'year', value: 3600000 * 24 * 380}          // 1Y
	    ];
	    
	    /**
	     * 获取最佳formatter
	     * @params {number} min 最小值
	     * @params {number} max 最大值
	     * @params {=number} splitNumber 分隔段数
	     */
	    function getAutoFormatter(min, max, splitNumber) {
	        splitNumber = splitNumber > 1 ? splitNumber : 2;
	        // 最优解
	        var curValue;
	        var totalGap;
	        // 目标
	        var formatter;
	        var gapValue;
	        for (var i = 0, l = _timeGap.length; i < l; i++) {
	            curValue = _timeGap[i].value;
	            totalGap = Math.ceil(max / curValue) * curValue 
	                       - Math.floor(min / curValue) * curValue;
	            if (Math.round(totalGap / curValue) <= splitNumber * 1.2) {
	                formatter =  _timeGap[i].formatter;
	                gapValue = _timeGap[i].value;
	                // console.log(formatter, gapValue,i);
	                break;
	            }
	        }
	        
	        if (formatter == null) {
	            formatter = 'year';
	            curValue = 3600000 * 24 * 367;
	            totalGap = Math.ceil(max / curValue) * curValue 
	                       - Math.floor(min / curValue) * curValue;
	            gapValue = Math.round(totalGap / (splitNumber - 1) / curValue) * curValue;
	        }
	        
	        return {
	            formatter: formatter,
	            gapValue: gapValue
	        };
	    }
	    
	    /**
	     * 一位数字补0 
	     */
	    function s2d (v) {
	        return v < 10 ? ('0' + v) : v;
	    }
	    
	    /**
	     * 百分比计算
	     */
	    function format(formatter, value) {
	        if (formatter == 'week' 
	            || formatter == 'month' 
	            || formatter == 'quarter' 
	            || formatter == 'half-year'
	            || formatter == 'year'
	        ) {
	            formatter = 'MM - dd\nyyyy';
	        }
	            
	        var date = getNewDate(value);
	        var y = date.getFullYear();
	        var M = date.getMonth() + 1;
	        var d = date.getDate();
	        var h = date.getHours();
	        var m = date.getMinutes();
	        var s = date.getSeconds();
	        
	        formatter = formatter.replace('MM', s2d(M));
	        formatter = formatter.toLowerCase();
	        formatter = formatter.replace('yyyy', y);
	        formatter = formatter.replace('yy', y % 100);
	        formatter = formatter.replace('dd', s2d(d));
	        formatter = formatter.replace('d', d);
	        formatter = formatter.replace('hh', s2d(h));
	        formatter = formatter.replace('h', h);
	        formatter = formatter.replace('mm', s2d(m));
	        formatter = formatter.replace('m', m);
	        formatter = formatter.replace('ss', s2d(s));
	        formatter = formatter.replace('s', s);

	        return formatter;
	    }
	    
	    function nextMonday(value) {
	        value = getNewDate(value);
	        value.setDate(value.getDate() + 8 - value.getDay());
	        return value;
	    }
	    
	    function nextNthPerNmonth(value, nth, nmon) {
	        value = getNewDate(value);
	        value.setMonth(Math.ceil((value.getMonth() + 1) / nmon) * nmon);
	        value.setDate(nth);
	        return value;
	    }
	    
	    function nextNthOnMonth(value, nth) {
	        return nextNthPerNmonth(value, nth, 1);
	    }
	    
	    function nextNthOnQuarterYear(value, nth) {
	        return nextNthPerNmonth(value, nth, 3);
	    }
	    
	    function nextNthOnHalfYear(value, nth) {
	        return nextNthPerNmonth(value, nth, 6);
	    }
	    
	    function nextNthOnYear(value, nth) {
	        return nextNthPerNmonth(value, nth, 12);
	    }
	    
	    function getNewDate(value) {
	        return value instanceof Date
	               ? value
	               : new Date(typeof value == 'string' ? value.replace(/-/g, '/') : value);
	    }
	    
	    return {
	        getAutoFormatter: getAutoFormatter,
	        getNewDate: getNewDate,
	        format: format,
	        nextMonday: nextMonday,
	        nextNthPerNmonth: nextNthPerNmonth,
	        nextNthOnMonth: nextNthOnMonth,
	        nextNthOnQuarterYear: nextNthOnQuarterYear,
	        nextNthOnHalfYear: nextNthOnHalfYear,
	        nextNthOnYear : nextNthOnYear
	    };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 538 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * zrender
	 *
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 * shape类：支持半平滑的polygon，折线面积图使用
	 * 可配图形属性：
	   {
	       // 基础属性
	       shape  : 'halfSmoothPolygon',      // 必须，shape类标识，需要显式指定
	       id     : {string},       // 必须，图形唯一标识，可通过'zrender/tool/guid'方法生成
	       zlevel : {number},       // 默认为0，z层level，决定绘画在哪层canvas中
	       invisible : {boolean},   // 默认为false，是否可见

	       // 样式属性，默认状态样式样式属性
	       style  : {
	           pointList     : {Array},   // 必须，多边形各个顶角坐标
	       },

	       // 样式属性，高亮样式属性，当不存在highlightStyle时使用基于默认样式扩展显示
	       highlightStyle : {
	           // 同style
	       }

	       // 交互属性，详见shape.Base

	       // 事件属性，详见shape.Base
	   }
	         例子：
	   {
	       shape  : 'halfSmoothPolygon',
	       id     : '123456',
	       zlevel : 1,
	       style  : {
	           pointList : [[10, 10], [300, 20], [298, 400], [50, 450]]
	           color : '#eee',
	           text : 'Baidu'
	       },
	       myName : 'kener',  // 可自带任何有效自定义属性

	       clickable : true,
	       onClick : function (eventPacket) {
	           alert(eventPacket.target.myName);
	       }
	   }
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	    var Base = __webpack_require__(473);
	    var smoothBezier = __webpack_require__(499);
	    var zrUtil = __webpack_require__(456);
	    
	    function HalfSmoothPolygon(options) {
	        Base.call(this, options);
	    }

	    HalfSmoothPolygon.prototype = {
	        type : 'half-smooth-polygon',
	        /**
	         * 创建多边形路径
	         * @param {Context2D} ctx Canvas 2D上下文
	         * @param {Object} style 样式
	         */
	        buildPath : function (ctx, style) {
	            var pointList = style.pointList;
	            if (pointList.length < 2) {
	                // 少于2个点就不画了~
	                return;
	            }
	            if (style.smooth) {
	                var controlPoints = smoothBezier(
	                    pointList.slice(0, -2), style.smooth, false, style.smoothConstraint
	                );

	                ctx.moveTo(pointList[0][0], pointList[0][1]);
	                var cp1;
	                var cp2;
	                var p;
	                var l = pointList.length;
	                for (var i = 0; i < l - 3; i++) {
	                    cp1 = controlPoints[i * 2];
	                    cp2 = controlPoints[i * 2 + 1];
	                    p = pointList[i + 1];
	                    ctx.bezierCurveTo(
	                        cp1[0], cp1[1], cp2[0], cp2[1], p[0], p[1]
	                    );
	                }
	                ctx.lineTo(pointList[l - 2][0], pointList[l - 2][1]);
	                ctx.lineTo(pointList[l - 1][0], pointList[l - 1][1]);
	                ctx.lineTo(pointList[0][0], pointList[0][1]);
	            } 
	            else {
	                __webpack_require__(497).prototype.buildPath(
	                    ctx, style
	                );
	            }
	            return;
	        }
	    };

	    zrUtil.inherits(HalfSmoothPolygon, Base);
	    
	    return HalfSmoothPolygon;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 539 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * echarts组件类： 坐标轴
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 * 直角坐标系中坐标轴数组，数组中每一项代表一条横轴（纵轴）坐标轴。
	 * 标准（1.0）中规定最多同时存在2条横轴和2条纵轴
	 *    单条横轴时可指定安放于grid的底部（默认）或顶部，2条同时存在时则默认第一条安放于底部，第二天安放于顶部
	 *    单条纵轴时可指定安放于grid的左侧（默认）或右侧，2条同时存在时则默认第一条安放于左侧，第二天安放于右侧。
	 * 坐标轴有两种类型，类目型和数值型（区别详见axis）：
	 *    横轴通常为类目型，但条形图时则横轴为数值型，散点图时则横纵均为数值型
	 *    纵轴通常为数值型，但条形图时则纵轴为类目型。
	 *
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	    var Base = __webpack_require__(508);

	    var LineShape = __webpack_require__(493);

	    var ecConfig = __webpack_require__(455);
	    var ecData = __webpack_require__(503);
	    var zrUtil = __webpack_require__(456);
	    var zrColor = __webpack_require__(475);

	    /**
	     * 构造函数
	     * @param {Object} messageCenter echart消息中心
	     * @param {ZRender} zr zrender实例
	     * @param {Object} option 图表选项
	     *     @param {string=} option.xAxis.type 坐标轴类型，横轴默认为类目型'category'
	     *     @param {string=} option.yAxis.type 坐标轴类型，纵轴默认为类目型'value'
	     * @param {Object} component 组件
	     * @param {string} axisType 横走or纵轴
	     */
	    function Axis(ecTheme, messageCenter, zr, option, myChart, axisType) {
	        Base.call(this, ecTheme, messageCenter, zr, option, myChart);

	        this.axisType = axisType;
	        this._axisList = [];

	        this.refresh(option);
	    }

	    Axis.prototype = {
	        type: ecConfig.COMPONENT_TYPE_AXIS,
	        axisBase: {
	            // 轴线
	            _buildAxisLine: function () {
	                var lineWidth = this.option.axisLine.lineStyle.width;
	                var halfLineWidth = lineWidth / 2;
	                var axShape = {
	                    _axisShape: 'axisLine',
	                    zlevel: this.getZlevelBase(),
	                    z: this.getZBase() + 3,
	                    hoverable: false
	                };
	                var grid = this.grid;
	                switch (this.option.position) {
	                    case 'left' :
	                        axShape.style = {
	                            xStart: grid.getX() - halfLineWidth,
	                            yStart: grid.getYend(),
	                            xEnd: grid.getX() - halfLineWidth,
	                            yEnd: grid.getY(),
	                            lineCap: 'round'
	                        };
	                        break;
	                    case 'right' :
	                        axShape.style = {
	                            xStart: grid.getXend() + halfLineWidth,
	                            yStart: grid.getYend(),
	                            xEnd: grid.getXend() + halfLineWidth,
	                            yEnd: grid.getY(),
	                            lineCap: 'round'
	                        };
	                        break;
	                    case 'bottom' :
	                        axShape.style = {
	                            xStart: grid.getX(),
	                            yStart: grid.getYend() + halfLineWidth,
	                            xEnd: grid.getXend(),
	                            yEnd: grid.getYend() + halfLineWidth,
	                            lineCap: 'round'
	                        };
	                        break;
	                    case 'top' :
	                        axShape.style = {
	                            xStart: grid.getX(),
	                            yStart: grid.getY() - halfLineWidth,
	                            xEnd: grid.getXend(),
	                            yEnd: grid.getY() - halfLineWidth,
	                            lineCap: 'round'
	                        };
	                        break;
	                }
	                var style = axShape.style;
	                if (this.option.name !== '') { // 别帮我代码规范
	                    style.text = this.option.name;
	                    style.textPosition = this.option.nameLocation;
	                    style.textFont = this.getFont(this.option.nameTextStyle);
	                    if (this.option.nameTextStyle.align) {
	                        style.textAlign = this.option.nameTextStyle.align;
	                    }
	                    if (this.option.nameTextStyle.baseline) {
	                        style.textBaseline = this.option.nameTextStyle.baseline;
	                    }
	                    if (this.option.nameTextStyle.color) {
	                        style.textColor = this.option.nameTextStyle.color;
	                    }
	                }
	                style.strokeColor = this.option.axisLine.lineStyle.color;

	                style.lineWidth = lineWidth;
	                // 亚像素优化
	                if (this.isHorizontal()) {
	                    // 横向布局，优化y
	                    style.yStart
	                        = style.yEnd
	                        = this.subPixelOptimize(style.yEnd, lineWidth);
	                }
	                else {
	                    // 纵向布局，优化x
	                    style.xStart
	                        = style.xEnd
	                        = this.subPixelOptimize(style.xEnd, lineWidth);
	                }

	                style.lineType = this.option.axisLine.lineStyle.type;

	                axShape = new LineShape(axShape);
	                this.shapeList.push(axShape);
	            },

	            _axisLabelClickable: function(clickable, axShape) {
	                if (clickable) {
	                    ecData.pack(
	                        axShape, undefined, -1, undefined, -1, axShape.style.text
	                    );
	                    axShape.hoverable = true;
	                    axShape.clickable = true;
	                    axShape.highlightStyle = {
	                        color: zrColor.lift(axShape.style.color, 1),
	                        brushType: 'fill'
	                    };
	                    return axShape;
	                }
	                else {
	                    return axShape;
	                }
	            },

	            refixAxisShape: function(zeroX, zeroY) {
	                if (!this.option.axisLine.onZero) {
	                    return;
	                }
	                var tickLength;
	                if (this.isHorizontal() && zeroY != null) {
	                    // 横向布局调整纵向y
	                    for (var i = 0, l = this.shapeList.length; i < l; i++) {
	                        if (this.shapeList[i]._axisShape === 'axisLine') {
	                            this.shapeList[i].style.yStart
	                                = this.shapeList[i].style.yEnd
	                                = this.subPixelOptimize(
	                                    zeroY, this.shapeList[i].stylelineWidth
	                                );
	                            this.zr.modShape(this.shapeList[i].id);
	                        }
	                        else if (this.shapeList[i]._axisShape === 'axisTick') {
	                            tickLength = this.shapeList[i].style.yEnd
	                                         - this.shapeList[i].style.yStart;
	                            this.shapeList[i].style.yStart = zeroY - tickLength;
	                            this.shapeList[i].style.yEnd = zeroY;
	                            this.zr.modShape(this.shapeList[i].id);
	                        }
	                    }
	                }
	                if (!this.isHorizontal() && zeroX != null) {
	                    // 纵向布局调整横向x
	                    for (var i = 0, l = this.shapeList.length; i < l; i++) {
	                        if (this.shapeList[i]._axisShape === 'axisLine') {
	                            this.shapeList[i].style.xStart
	                                = this.shapeList[i].style.xEnd
	                                = this.subPixelOptimize(
	                                    zeroX, this.shapeList[i].stylelineWidth
	                                );
	                            this.zr.modShape(this.shapeList[i].id);
	                        }
	                        else if (this.shapeList[i]._axisShape === 'axisTick') {
	                            tickLength = this.shapeList[i].style.xEnd
	                                         - this.shapeList[i].style.xStart;
	                            this.shapeList[i].style.xStart = zeroX;
	                            this.shapeList[i].style.xEnd = zeroX + tickLength;
	                            this.zr.modShape(this.shapeList[i].id);
	                        }
	                    }
	                }
	            },

	            getPosition: function () {
	                return this.option.position;
	            },

	            isHorizontal: function() {
	                return this.option.position === 'bottom' || this.option.position === 'top';
	            }
	        },
	        /**
	         * 参数修正&默认值赋值，重载基类方法
	         * @param {Object} opt 参数
	         */
	        reformOption: function (opt) {
	            // 不写或传了个空数值默认为数值轴
	            if (!opt || (opt instanceof Array && opt.length === 0)) {
	                opt = [ { type: ecConfig.COMPONENT_TYPE_AXIS_VALUE } ];
	            }
	            else if (!(opt instanceof Array)){
	                opt = [opt];
	            }

	            // 最多两条，其他参数忽略
	            if (opt.length > 2) {
	                opt = [opt[0], opt[1]];
	            }

	            if (this.axisType === 'xAxis') {
	                // 横轴位置默认配置
	                if (!opt[0].position            // 没配置或配置错
	                    || (opt[0].position != 'bottom' && opt[0].position != 'top')
	                ) {
	                    opt[0].position = 'bottom';
	                }
	                if (opt.length > 1) {
	                    opt[1].position = opt[0].position === 'bottom' ? 'top' : 'bottom';
	                }

	                for (var i = 0, l = opt.length; i < l; i++) {
	                    // 坐标轴类型，横轴默认为类目型'category'
	                    opt[i].type = opt[i].type || 'category';
	                    // 标识轴类型&索引
	                    opt[i].xAxisIndex = i;
	                    opt[i].yAxisIndex = -1;
	                }
	            }
	            else {
	                // 纵轴位置默认配置
	                if (!opt[0].position            // 没配置或配置错
	                    || (opt[0].position != 'left'  && opt[0].position != 'right')
	                ) {
	                    opt[0].position = 'left';
	                }

	                if (opt.length > 1) {
	                    opt[1].position = opt[0].position === 'left' ? 'right' : 'left';
	                }

	                for (var i = 0, l = opt.length; i < l; i++) {
	                    // 坐标轴类型，纵轴默认为数值型'value'
	                    opt[i].type = opt[i].type || 'value';
	                    // 标识轴类型&索引
	                    opt[i].xAxisIndex = -1;
	                    opt[i].yAxisIndex = i;
	                }
	            }

	            return opt;
	        },

	        /**
	         * 刷新
	         */
	        refresh: function (newOption) {
	            var axisOption;
	            if (newOption) {
	                this.option = newOption;
	                if (this.axisType === 'xAxis') {
	                    this.option.xAxis = this.reformOption(newOption.xAxis);
	                    axisOption = this.option.xAxis;
	                }
	                else {
	                    this.option.yAxis = this.reformOption(newOption.yAxis);
	                    axisOption = this.option.yAxis;
	                }
	                this.series = newOption.series;
	            }

	            var CategoryAxis = __webpack_require__(540);
	            var ValueAxis = __webpack_require__(541);
	            var len = Math.max((axisOption && axisOption.length || 0), this._axisList.length);
	            for (var i = 0; i < len; i++) {
	                if (this._axisList[i]   // 已有实例
	                    && newOption        // 非空刷新
	                    && (!axisOption[i] || this._axisList[i].type != axisOption[i].type) // 类型不匹配
	                ) {
	                    this._axisList[i].dispose && this._axisList[i].dispose();
	                    this._axisList[i] = false;
	                }

	                if (this._axisList[i]) {
	                    this._axisList[i].refresh && this._axisList[i].refresh(
	                        axisOption ? axisOption[i] : false,
	                        this.series
	                    );
	                }
	                else if (axisOption && axisOption[i]) {
	                    this._axisList[i] = axisOption[i].type === 'category'
	                        ? new CategoryAxis(
	                               this.ecTheme, this.messageCenter, this.zr,
	                               axisOption[i], this.myChart, this.axisBase
	                           )
	                        : new ValueAxis(
	                               this.ecTheme, this.messageCenter, this.zr,
	                               axisOption[i], this.myChart, this.axisBase,
	                               this.series
	                        );
	                }
	            }
	        },

	        /**
	         * 根据值换算位置
	         * @param {number} idx 坐标轴索引0~1
	         */
	        getAxis: function (idx) {
	            return this._axisList[idx];
	        },

	        getAxisCount: function () {
	            return this._axisList.length;
	        },

	        clear: function () {
	            for (var i = 0, l = this._axisList.length; i < l; i++) {
	                this._axisList[i].dispose && this._axisList[i].dispose();
	            }
	            this._axisList = [];
	        }
	    };

	    zrUtil.inherits(Axis, Base);

	    __webpack_require__(516).define('axis', Axis);

	    return Axis;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 540 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * echarts组件： 类目轴
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	    var Base = __webpack_require__(508);
	    
	    // 图形依赖
	    var TextShape = __webpack_require__(470);
	    var LineShape = __webpack_require__(493);
	    var RectangleShape = __webpack_require__(476);
	    
	    var ecConfig = __webpack_require__(455);
	    // 类目轴
	    ecConfig.categoryAxis =  {
	        zlevel: 0,                  // 一级层叠
	        z: 0,                       // 二级层叠
	        show: true,
	        position: 'bottom',    // 位置
	        name: '',              // 坐标轴名字，默认为空
	        nameLocation: 'end',   // 坐标轴名字位置，支持'start' | 'end'
	        nameTextStyle: {},     // 坐标轴文字样式，默认取全局样式
	        boundaryGap: true,     // 类目起始和结束两端空白策略
	        axisLine: {            // 坐标轴线
	            show: true,        // 默认显示，属性show控制显示与否
	            onZero: true,
	            lineStyle: {       // 属性lineStyle控制线条样式
	                color: '#48b',
	                width: 2,
	                type: 'solid'
	            }
	        },
	        axisTick: {            // 坐标轴小标记
	            show: true,        // 属性show控制显示与否，默认不显示
	            interval: 'auto',
	            inside: false,    // 控制小标记是否在grid里 
	            // onGap: null,
	            length :5,         // 属性length控制线长
	            lineStyle: {       // 属性lineStyle控制线条样式
	                color: '#333',
	                width: 1
	            }
	        },
	        axisLabel: {           // 坐标轴文本标签，详见axis.axisLabel
	            show: true,
	            interval: 'auto',
	            rotate: 0,
	            margin: 8,
	            // clickable: false,
	            // formatter: null,
	            textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
	                color: '#333'
	            }
	        },
	        splitLine: {           // 分隔线
	            show: true,        // 默认显示，属性show控制显示与否
	            // onGap: null,
	            lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式
	                color: ['#ccc'],
	                width: 1,
	                type: 'solid'
	            }
	        },
	        splitArea: {           // 分隔区域
	            show: false,       // 默认不显示，属性show控制显示与否
	            // onGap: null,
	            areaStyle: {       // 属性areaStyle（详见areaStyle）控制区域样式
	                color: ['rgba(250,250,250,0.3)','rgba(200,200,200,0.3)']
	            }
	        }
	    };

	    var zrUtil = __webpack_require__(456);
	    var zrArea = __webpack_require__(471);
	    
	    /**
	     * 构造函数
	     * @param {Object} messageCenter echart消息中心
	     * @param {ZRender} zr zrender实例
	     * @param {Object} option 类目轴参数
	     * @param {Grid} component 组件
	     */
	    function CategoryAxis(ecTheme, messageCenter, zr, option, myChart, axisBase) {
	        if (option.data.length < 1) {
	            console.error('option.data.length < 1.');
	            return;
	        }
	        
	        Base.call(this, ecTheme, messageCenter, zr, option, myChart);
	        
	        this.grid = this.component.grid;
	        
	        for (var method in axisBase) {
	            this[method] = axisBase[method];
	        }
	        
	        this.refresh(option);
	    }
	    
	    CategoryAxis.prototype = {
	        type : ecConfig.COMPONENT_TYPE_AXIS_CATEGORY,
	        _getReformedLabel : function (idx) {
	            var data = this.getDataFromOption(this.option.data[idx]);
	            var formatter = this.option.data[idx].formatter 
	                            || this.option.axisLabel.formatter;
	            if (formatter) {
	                if (typeof formatter == 'function') {
	                    data = formatter.call(this.myChart, data);
	                }
	                else if (typeof formatter == 'string') {
	                    data = formatter.replace('{value}', data);
	                }
	            }
	            return data;
	        },
	        
	        /**
	         * 计算标签显示挑选间隔
	         */
	        _getInterval : function () {
	            var interval   = this.option.axisLabel.interval;
	            if (interval == 'auto') {
	                // 麻烦的自适应计算
	                var fontSize = this.option.axisLabel.textStyle.fontSize;
	                var data = this.option.data;
	                var dataLength = this.option.data.length;

	                if (this.isHorizontal()) {
	                    // 横向
	                    if (dataLength > 3) {
	                        var gap = this.getGap();
	                        var isEnough = false;
	                        var labelSpace;
	                        var labelSize;
	                        var step = Math.floor(0.5 / gap);
	                        step = step < 1 ? 1 : step;
	                        interval = Math.floor(15 / gap);
	                        while (!isEnough && interval < dataLength) {
	                            interval += step;
	                            isEnough = true;
	                            labelSpace = Math.floor(gap * interval); // 标签左右至少间隔为3px
	                            for (var i = Math.floor((dataLength - 1)/ interval) * interval; 
	                                 i >= 0; i -= interval
	                             ) {
	                                if (this.option.axisLabel.rotate !== 0) {
	                                    // 有旋转
	                                    labelSize = fontSize;
	                                }
	                                else if (data[i].textStyle) {
	                                    labelSize = zrArea.getTextWidth(
	                                        this._getReformedLabel(i),
	                                        this.getFont(
	                                            zrUtil.merge(
	                                                data[i].textStyle,
	                                                this.option.axisLabel.textStyle
	                                           )
	                                        )
	                                    );
	                                }
	                                else {
	                                    /*
	                                    labelSize = zrArea.getTextWidth(
	                                        this._getReformedLabel(i),
	                                        font
	                                    );
	                                    */
	                                    // 不定义data级特殊文本样式，用fontSize优化getTextWidth
	                                    var label = this._getReformedLabel(i) + '';
	                                    var wLen = (label.match(/\w/g) || '').length;
	                                    var oLen = label.length - wLen;
	                                    labelSize = wLen * fontSize * 2 / 3 + oLen * fontSize;
	                                }

	                                if (labelSpace < labelSize) {
	                                    // 放不下，中断循环让interval++
	                                    isEnough = false;
	                                    break;
	                                }
	                            }
	                        }
	                    }
	                    else {
	                        // 少于3个则全部显示
	                        interval = 1;
	                    }
	                }
	                else {
	                    // 纵向
	                    if (dataLength > 3) {
	                        var gap = this.getGap();
	                        interval = Math.floor(11 / gap);
	                        // 标签上下至少间隔为3px
	                        while ((gap * interval - 6) < fontSize
	                                && interval < dataLength
	                        ) {
	                            interval++;
	                        }
	                    }
	                    else {
	                        // 少于3个则全部显示
	                        interval = 1;
	                    }
	                }
	            }
	            else {
	                // 用户自定义间隔，支持funtion
	                interval = typeof interval == 'function' ? 1 : (interval - 0 + 1);
	            }

	            return interval;
	        },
	        
	        /**
	         * 绘制图形
	         */
	        _buildShape : function () {
	            // 标签显示的挑选间隔
	            this._interval = this._getInterval();
	            if (!this.option.show) {
	                return;
	            }
	            this.option.splitArea.show && this._buildSplitArea();
	            this.option.splitLine.show && this._buildSplitLine();
	            this.option.axisLine.show && this._buildAxisLine();
	            this.option.axisTick.show && this._buildAxisTick();
	            this.option.axisLabel.show && this._buildAxisLabel();

	            for (var i = 0, l = this.shapeList.length; i < l; i++) {
	                this.zr.addShape(this.shapeList[i]);
	            }
	        },

	        // 小标记
	        _buildAxisTick : function () {
	            var axShape;
	            var data       = this.option.data;
	            var dataLength = this.option.data.length;
	            var tickOption = this.option.axisTick;
	            var length     = tickOption.length;
	            var color      = tickOption.lineStyle.color;
	            var lineWidth  = tickOption.lineStyle.width;
	            var intervalFunction = typeof tickOption.interval == 'function'
	                                   ? tickOption.interval 
	                                   : tickOption.interval == 'auto'
	                                     ? typeof this.option.axisLabel.interval == 'function'
	                                       ? this.option.axisLabel.interval : false
	                                     : false;
	            var interval   = intervalFunction
	                             ? 1
	                             : tickOption.interval == 'auto' 
	                               ? this._interval
	                               : (tickOption.interval - 0 + 1);
	            var onGap      = tickOption.onGap;
	            var optGap     = onGap 
	                             ? (this.getGap() / 2) 
	                             : typeof onGap == 'undefined'
	                                   ? (this.option.boundaryGap ? (this.getGap() / 2) : 0)
	                                   : 0;
	            var startIndex = optGap > 0 ? -interval : 0;                       
	            if (this.isHorizontal()) {
	                // 横向
	                var yPosition = this.option.position == 'bottom'
	                        ? (tickOption.inside 
	                           ? (this.grid.getYend() - length - 1) : (this.grid.getYend() + 1))
	                        : (tickOption.inside 
	                           ? (this.grid.getY() + 1) : (this.grid.getY() - length - 1));
	                var x;
	                for (var i = startIndex; i < dataLength; i += interval) {
	                    if (intervalFunction && !intervalFunction(i, data[i])) {
	                        // 回调并且回调返回false则跳过渲染
	                        continue;
	                    }
	                    // 亚像素优化
	                    x = this.subPixelOptimize(
	                        this.getCoordByIndex(i) + (i >= 0 ? optGap : 0), lineWidth
	                    );
	                    axShape = {
	                        _axisShape : 'axisTick',
	                        zlevel: this.getZlevelBase(),
	                        z: this.getZBase(),
	                        hoverable : false,
	                        style : {
	                            xStart : x,
	                            yStart : yPosition,
	                            xEnd : x,
	                            yEnd : yPosition + length,
	                            strokeColor : color,
	                            lineWidth : lineWidth
	                        }
	                    };
	                    this.shapeList.push(new LineShape(axShape));
	                }
	            }
	            else {
	                // 纵向
	                var xPosition = this.option.position == 'left'
	                    ? (tickOption.inside 
	                       ? (this.grid.getX() + 1) : (this.grid.getX() - length - 1))
	                    : (tickOption.inside 
	                       ? (this.grid.getXend() - length - 1) : (this.grid.getXend() + 1));
	                        
	                var y;
	                for (var i = startIndex; i < dataLength; i += interval) {
	                    if (intervalFunction && !intervalFunction(i, data[i])) {
	                        // 回调并且回调返回false则中断渲染
	                        continue;
	                    }
	                    // 亚像素优化
	                    y = this.subPixelOptimize(
	                        this.getCoordByIndex(i) - (i >= 0 ? optGap : 0), lineWidth
	                    );
	                    axShape = {
	                        _axisShape : 'axisTick',
	                        zlevel: this.getZlevelBase(),
	                        z: this.getZBase(),
	                        hoverable : false,
	                        style : {
	                            xStart : xPosition,
	                            yStart : y,
	                            xEnd : xPosition + length,
	                            yEnd : y,
	                            strokeColor : color,
	                            lineWidth : lineWidth
	                        }
	                    };
	                    this.shapeList.push(new LineShape(axShape));
	                }
	            }
	        },

	        // 坐标轴文本
	        _buildAxisLabel : function () {
	            var axShape;
	            var data       = this.option.data;
	            var dataLength = this.option.data.length;
	            var labelOption = this.option.axisLabel;
	            var rotate     = labelOption.rotate;
	            var margin     = labelOption.margin;
	            var clickable  = labelOption.clickable;
	            var textStyle  = labelOption.textStyle;
	            var intervalFunction = typeof labelOption.interval == 'function'
	                                   ? labelOption.interval : false;
	            var dataTextStyle;

	            if (this.isHorizontal()) {
	                // 横向
	                var yPosition;
	                var baseLine;
	                if (this.option.position == 'bottom') {
	                    yPosition = this.grid.getYend() + margin;
	                    baseLine = 'top';
	                }
	                else {
	                    yPosition = this.grid.getY() - margin;
	                    baseLine = 'bottom';
	                }

	                for (var i = 0; i < dataLength; i += this._interval) {
	                    if ((intervalFunction && !intervalFunction(i, data[i])) 
	                        // 回调并且回调返回false则中断渲染
	                        || this._getReformedLabel(i) === '' // 空文本优化
	                    ) {
	                        continue;
	                    }
	                    dataTextStyle = zrUtil.merge(
	                        data[i].textStyle || {},
	                        textStyle
	                    );
	                    axShape = {
	                        // shape : 'text',
	                        zlevel: this.getZlevelBase(),
	                        z: this.getZBase() + 3,
	                        hoverable : false,
	                        style : {
	                            x : this.getCoordByIndex(i),
	                            y : yPosition,
	                            color : dataTextStyle.color,
	                            text : this._getReformedLabel(i),
	                            textFont : this.getFont(dataTextStyle),
	                            textAlign : dataTextStyle.align || 'center',
	                            textBaseline : dataTextStyle.baseline || baseLine
	                        }
	                    };
	                    if (rotate) {
	                        axShape.style.textAlign = rotate > 0
	                                                  ? (this.option.position == 'bottom'
	                                                    ? 'right' : 'left')
	                                                  : (this.option.position == 'bottom'
	                                                    ? 'left' : 'right');
	                        axShape.rotation = [
	                            rotate * Math.PI / 180,
	                            axShape.style.x,
	                            axShape.style.y
	                        ];
	                    }
	                    this.shapeList.push(new TextShape(
	                        this._axisLabelClickable(clickable, axShape)
	                    ));
	                }
	            }
	            else {
	                // 纵向
	                var xPosition;
	                var align;
	                if (this.option.position == 'left') {
	                    xPosition = this.grid.getX() - margin;
	                    align = 'right';
	                }
	                else {
	                    xPosition = this.grid.getXend() + margin;
	                    align = 'left';
	                }

	                for (var i = 0; i < dataLength; i += this._interval) {
	                    if ((intervalFunction && !intervalFunction(i, data[i])) 
	                        // 回调并且回调返回false则中断渲染
	                        || this._getReformedLabel(i) === '' // 空文本优化
	                    ) {
	                        continue;
	                    }
	                    dataTextStyle = zrUtil.merge(
	                        data[i].textStyle || {},
	                        textStyle
	                    );
	                    axShape = {
	                        // shape : 'text',
	                        zlevel: this.getZlevelBase(),
	                        z: this.getZBase() + 3,
	                        hoverable : false,
	                        style : {
	                            x : xPosition,
	                            y : this.getCoordByIndex(i),
	                            color : dataTextStyle.color,
	                            text : this._getReformedLabel(i),
	                            textFont : this.getFont(dataTextStyle),
	                            textAlign : dataTextStyle.align || align,
	                            textBaseline : dataTextStyle.baseline 
	                                           || (i === 0 && this.option.name !== '')
	                                               ? 'bottom'
	                                               : (i == (dataLength - 1) 
	                                                  && this.option.name !== '')
	                                                 ? 'top'
	                                                 : 'middle'
	                        }
	                    };
	                    
	                    if (rotate) {
	                        axShape.rotation = [
	                            rotate * Math.PI / 180,
	                            axShape.style.x,
	                            axShape.style.y
	                        ];
	                    }
	                    this.shapeList.push(new TextShape(
	                        this._axisLabelClickable(clickable, axShape)
	                    ));
	                }
	            }
	        },
	        
	        _buildSplitLine : function () {
	            var axShape;
	            var data        = this.option.data;
	            var dataLength  = this.option.data.length;
	            var sLineOption = this.option.splitLine;
	            var lineType    = sLineOption.lineStyle.type;
	            var lineWidth   = sLineOption.lineStyle.width;
	            var color       = sLineOption.lineStyle.color;
	            color = color instanceof Array ? color : [color];
	            var colorLength = color.length;
	            
	            // splitLine随axisLable
	            var intervalFunction = typeof this.option.axisLabel.interval == 'function'
	                                   ? this.option.axisLabel.interval : false;

	            var onGap      = sLineOption.onGap;
	            var optGap     = onGap 
	                             ? (this.getGap() / 2) 
	                             : typeof onGap == 'undefined'
	                                   ? (this.option.boundaryGap ? (this.getGap() / 2) : 0)
	                                   : 0;
	            dataLength -= (onGap || (typeof onGap == 'undefined' && this.option.boundaryGap)) 
	                          ? 1 : 0;
	            if (this.isHorizontal()) {
	                // 横向
	                var sy = this.grid.getY();
	                var ey = this.grid.getYend();
	                var x;

	                for (var i = 0; i < dataLength; i += this._interval) {
	                    if (intervalFunction && !intervalFunction(i, data[i])) {
	                        // 回调并且回调返回false则跳过渲染
	                        continue;
	                    }
	                    // 亚像素优化
	                    x = this.subPixelOptimize(
	                        this.getCoordByIndex(i) + optGap, lineWidth
	                    );
	                    axShape = {
	                        // shape : 'line',
	                        zlevel: this.getZlevelBase(),
	                        z: this.getZBase(),
	                        hoverable : false,
	                        style : {
	                            xStart : x,
	                            yStart : sy,
	                            xEnd : x,
	                            yEnd : ey,
	                            strokeColor : color[(i / this._interval) % colorLength],
	                            lineType : lineType,
	                            lineWidth : lineWidth
	                        }
	                    };
	                    this.shapeList.push(new LineShape(axShape));
	                }

	            }
	            else {
	                // 纵向
	                var sx = this.grid.getX();
	                var ex = this.grid.getXend();
	                var y;

	                for (var i = 0; i < dataLength; i += this._interval) {
	                    if (intervalFunction && !intervalFunction(i, data[i])) {
	                        // 回调并且回调返回false则跳过渲染
	                        continue;
	                    }
	                    // 亚像素优化
	                    y = this.subPixelOptimize(
	                        this.getCoordByIndex(i) - optGap, lineWidth
	                    );
	                    axShape = {
	                        // shape : 'line',
	                        zlevel: this.getZlevelBase(),
	                        z: this.getZBase(),
	                        hoverable : false,
	                        style : {
	                            xStart : sx,
	                            yStart : y,
	                            xEnd : ex,
	                            yEnd : y,
	                            strokeColor : color[(i / this._interval) % colorLength],
	                            lineType : lineType,
	                            lineWidth : lineWidth
	                        }
	                    };
	                    this.shapeList.push(new LineShape(axShape));
	                }
	            }
	        },

	        _buildSplitArea : function () {
	            var axShape;
	            var data        = this.option.data;
	            var sAreaOption = this.option.splitArea;
	            var color = sAreaOption.areaStyle.color;
	            if (!(color instanceof Array)) {
	                // 非数组一律认为是单一颜色的字符串，单一颜色则用一个背景，颜色错误不负责啊！！！
	                axShape = {
	                    // shape : 'rectangle',
	                    zlevel: this.getZlevelBase(),
	                    z: this.getZBase(),
	                    hoverable : false,
	                    style : {
	                        x : this.grid.getX(),
	                        y : this.grid.getY(),
	                        width : this.grid.getWidth(),
	                        height : this.grid.getHeight(),
	                        color : color
	                        // type : this.option.splitArea.areaStyle.type,
	                    }
	                };
	                this.shapeList.push(new RectangleShape(axShape));
	            }
	            else {
	                // 多颜色
	                var colorLength = color.length;
	                var dataLength  = this.option.data.length;

	                // splitArea随axisLable
	                var intervalFunction = typeof this.option.axisLabel.interval == 'function'
	                                       ? this.option.axisLabel.interval : false;
	        
	                var onGap      = sAreaOption.onGap;
	                var optGap     = onGap 
	                                 ? (this.getGap() / 2) 
	                                 : typeof onGap == 'undefined'
	                                       ? (this.option.boundaryGap ? (this.getGap() / 2) : 0)
	                                       : 0;
	                if (this.isHorizontal()) {
	                    // 横向
	                    var y = this.grid.getY();
	                    var height = this.grid.getHeight();
	                    var lastX = this.grid.getX();
	                    var curX;
	    
	                    for (var i = 0; i <= dataLength; i += this._interval) {
	                        if (intervalFunction && !intervalFunction(i, data[i]) && i < dataLength) {
	                            // 回调并且回调返回false则跳过渲染
	                            continue;
	                        }
	                        curX = i < dataLength
	                               ? (this.getCoordByIndex(i) + optGap)
	                               : this.grid.getXend();
	                        axShape = {
	                            // shape : 'rectangle',
	                            zlevel: this.getZlevelBase(),
	                            z: this.getZBase(),
	                            hoverable : false,
	                            style : {
	                                x : lastX,
	                                y : y,
	                                width : curX - lastX,
	                                height : height,
	                                color : color[(i / this._interval) % colorLength]
	                                // type : this.option.splitArea.areaStyle.type,
	                            }
	                        };
	                        this.shapeList.push(new RectangleShape(axShape));
	                        lastX = curX;
	                    }
	                }
	                else {
	                    // 纵向
	                    var x = this.grid.getX();
	                    var width = this.grid.getWidth();
	                    var lastYend = this.grid.getYend();
	                    var curY;
	    
	                    for (var i = 0; i <= dataLength; i += this._interval) {
	                        if (intervalFunction && !intervalFunction(i, data[i]) && i < dataLength) {
	                            // 回调并且回调返回false则跳过渲染
	                            continue;
	                        }
	                        curY = i < dataLength
	                               ? (this.getCoordByIndex(i) - optGap)
	                               : this.grid.getY();
	                        axShape = {
	                            // shape : 'rectangle',
	                            zlevel: this.getZlevelBase(),
	                            z: this.getZBase(),
	                            hoverable : false,
	                            style : {
	                                x : x,
	                                y : curY,
	                                width : width,
	                                height : lastYend - curY,
	                                color : color[(i / this._interval) % colorLength]
	                                // type : this.option.splitArea.areaStyle.type
	                            }
	                        };
	                        this.shapeList.push(new RectangleShape(axShape));
	                        lastYend = curY;
	                    }
	                }
	            }
	        },

	        /**
	         * 刷新
	         */
	        refresh : function (newOption) {
	            if (newOption) {
	                this.option = this.reformOption(newOption);
	                // 通用字体设置
	                this.option.axisLabel.textStyle = this.getTextStyle(
	                    this.option.axisLabel.textStyle
	                );
	            }
	            this.clear();
	            this._buildShape();
	        },

	        /**
	         * 返回间隔
	         */
	        getGap : function () {
	            var dataLength = this.option.data.length;
	            var total = this.isHorizontal()
	                        ? this.grid.getWidth()
	                        : this.grid.getHeight();
	            if (this.option.boundaryGap) {              // 留空
	                return total / dataLength;
	            }
	            else {                                      // 顶头
	                return total / (dataLength > 1 ? (dataLength - 1) : 1);
	            }
	        },

	        // 根据值换算位置
	        getCoord : function (value) {
	            var data = this.option.data;
	            var dataLength = data.length;
	            var gap = this.getGap();
	            var position = this.option.boundaryGap ? (gap / 2) : 0;

	            for (var i = 0; i < dataLength; i++) {
	                if (this.getDataFromOption(data[i]) == value) {
	                    if (this.isHorizontal()) {
	                        // 横向
	                        position = this.grid.getX() + position;
	                    }
	                    else {
	                        // 纵向
	                        position = this.grid.getYend() - position;
	                    }
	                    
	                    return position;
	                    // Math.floor可能引起一些偏差，但性能会更好
	                    /* 准确更重要
	                    return (i === 0 || i == dataLength - 1)
	                           ? position
	                           : Math.floor(position);
	                    */
	                }
	                position += gap;
	            }
	        },

	        // 根据类目轴数据索引换算位置
	        getCoordByIndex : function (dataIndex) {
	            if (dataIndex < 0) {
	                if (this.isHorizontal()) {
	                    return this.grid.getX();
	                }
	                else {
	                    return this.grid.getYend();
	                }
	            }
	            else if (dataIndex > this.option.data.length - 1) {
	                if (this.isHorizontal()) {
	                    return this.grid.getXend();
	                }
	                else {
	                    return this.grid.getY();
	                }
	            }
	            else {
	                var gap = this.getGap();
	                var position = this.option.boundaryGap ? (gap / 2) : 0;
	                position += dataIndex * gap;
	                
	                if (this.isHorizontal()) {
	                    // 横向
	                    position = this.grid.getX() + position;
	                }
	                else {
	                    // 纵向
	                    position = this.grid.getYend() - position;
	                }
	                
	                return position;
	                /* 准确更重要
	                return (dataIndex === 0 || dataIndex == this.option.data.length - 1)
	                       ? position
	                       : Math.floor(position);
	                */
	            }
	        },

	        // 根据类目轴数据索引换算类目轴名称
	        getNameByIndex : function (dataIndex) {
	            return this.getDataFromOption(this.option.data[dataIndex]);
	        },
	        
	        // 根据类目轴名称换算类目轴数据索引
	        getIndexByName : function (name) {
	            var data = this.option.data;
	            var dataLength = data.length;

	            for (var i = 0; i < dataLength; i++) {
	                if (this.getDataFromOption(data[i]) == name) {
	                    return i;
	                }
	            }
	            
	            return -1;
	        },
	        
	        // 根据位置换算值
	        getValueFromCoord : function() {
	            return '';
	        },

	        /**
	         * 根据类目轴数据索引返回是否为主轴线
	         * @param {number} dataIndex 类目轴数据索引
	         * @return {boolean} 是否为主轴
	         */
	        isMainAxis : function (dataIndex) {
	            return dataIndex % this._interval === 0;
	        }
	    };
	    
	    zrUtil.inherits(CategoryAxis, Base);
	    
	    __webpack_require__(516).define('categoryAxis', CategoryAxis);
	    
	    return CategoryAxis;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 541 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * echarts组件： 数值轴
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	    var Base = __webpack_require__(508);

	    // 图形依赖
	    var TextShape = __webpack_require__(470);
	    var LineShape = __webpack_require__(493);
	    var RectangleShape = __webpack_require__(476);

	    var ecConfig = __webpack_require__(455);
	    // 数值型坐标轴默认参数
	    ecConfig.valueAxis = {
	        zlevel: 0,                  // 一级层叠
	        z: 0,                       // 二级层叠
	        show: true,
	        position: 'left',      // 位置
	        name: '',              // 坐标轴名字，默认为空
	        nameLocation: 'end',   // 坐标轴名字位置，支持'start' | 'end'
	        nameTextStyle: {},     // 坐标轴文字样式，默认取全局样式
	        boundaryGap: [0, 0],   // 数值起始和结束两端空白策略
	        // min: null,          // 最小值
	        // max: null,          // 最大值
	        // scale: false,       // 脱离0值比例，放大聚焦到最终_min，_max区间
	        // splitNumber: 5,        // 分割段数，默认为5
	        axisLine: {            // 坐标轴线
	            show: true,        // 默认显示，属性show控制显示与否
	            onZero: true,
	            lineStyle: {       // 属性lineStyle控制线条样式
	                color: '#48b',
	                width: 2,
	                type: 'solid'
	            }
	        },
	        axisTick: {            // 坐标轴小标记
	            show: false,       // 属性show控制显示与否，默认不显示
	            inside: false,     // 控制小标记是否在grid里
	            length :5,         // 属性length控制线长
	            lineStyle: {       // 属性lineStyle控制线条样式
	                color: '#333',
	                width: 1
	            }
	        },
	        axisLabel: {           // 坐标轴文本标签，详见axis.axisLabel
	            show: true,
	            rotate: 0,
	            margin: 8,
	            // clickable: false,
	            // formatter: null,
	            textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
	                color: '#333'
	            }
	        },
	        splitLine: {           // 分隔线
	            show: true,        // 默认显示，属性show控制显示与否
	            lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式
	                color: ['#ccc'],
	                width: 1,
	                type: 'solid'
	            }
	        },
	        splitArea: {           // 分隔区域
	            show: false,       // 默认不显示，属性show控制显示与否
	            areaStyle: {       // 属性areaStyle（详见areaStyle）控制区域样式
	                color: ['rgba(250,250,250,0.3)','rgba(200,200,200,0.3)']
	            }
	        }
	    };

	    var ecDate = __webpack_require__(537);
	    var zrUtil = __webpack_require__(456);

	    /**
	     * 构造函数
	     * @param {Object} messageCenter echart消息中心
	     * @param {ZRender} zr zrender实例
	     * @param {Object} option 类目轴参数
	     * @param {Object} component 组件
	     * @param {Array} series 数据对象
	     */
	    function ValueAxis(ecTheme, messageCenter, zr, option, myChart, axisBase, series) {
	        if (!series || series.length === 0) {
	            console.err('option.series.length == 0.');
	            return;
	        }

	        Base.call(this, ecTheme, messageCenter, zr, option, myChart);

	        this.series = series;
	        this.grid = this.component.grid;

	        for (var method in axisBase) {
	            this[method] = axisBase[method];
	        }

	        this.refresh(option, series);
	    }

	    ValueAxis.prototype = {
	        type: ecConfig.COMPONENT_TYPE_AXIS_VALUE,

	        _buildShape: function () {
	            this._hasData = false;
	            this._calculateValue();
	            if (!this._hasData || !this.option.show) {
	                return;
	            }

	            this.option.splitArea.show && this._buildSplitArea();
	            this.option.splitLine.show && this._buildSplitLine();
	            this.option.axisLine.show && this._buildAxisLine();
	            this.option.axisTick.show && this._buildAxisTick();
	            this.option.axisLabel.show && this._buildAxisLabel();

	            for (var i = 0, l = this.shapeList.length; i < l; i++) {
	                this.zr.addShape(this.shapeList[i]);
	            }
	        },

	        // 小标记
	        _buildAxisTick: function () {
	            var axShape;
	            var data       = this._valueList;
	            var dataLength = this._valueList.length;
	            var tickOption = this.option.axisTick;
	            var length     = tickOption.length;
	            var color      = tickOption.lineStyle.color;
	            var lineWidth  = tickOption.lineStyle.width;

	            if (this.isHorizontal()) {
	                // 横向
	                var yPosition = this.option.position === 'bottom'
	                        ? (tickOption.inside
	                           ? (this.grid.getYend() - length - 1) : (this.grid.getYend()) + 1)
	                        : (tickOption.inside
	                           ? (this.grid.getY() + 1) : (this.grid.getY() - length - 1));
	                var x;
	                for (var i = 0; i < dataLength; i++) {
	                    // 亚像素优化
	                    x = this.subPixelOptimize(this.getCoord(data[i]), lineWidth);
	                    axShape = {
	                        _axisShape: 'axisTick',
	                        zlevel: this.getZlevelBase(),
	                        z: this.getZBase(),
	                        hoverable: false,
	                        style: {
	                            xStart: x,
	                            yStart: yPosition,
	                            xEnd: x,
	                            yEnd: yPosition + length,
	                            strokeColor: color,
	                            lineWidth: lineWidth
	                        }
	                    };
	                    this.shapeList.push(new LineShape(axShape));
	                }
	            }
	            else {
	                // 纵向
	                var xPosition = this.option.position === 'left'
	                    ? (tickOption.inside
	                       ? (this.grid.getX() + 1) : (this.grid.getX() - length - 1))
	                    : (tickOption.inside
	                       ? (this.grid.getXend() - length - 1) : (this.grid.getXend() + 1));

	                var y;
	                for (var i = 0; i < dataLength; i++) {
	                    // 亚像素优化
	                    y = this.subPixelOptimize(this.getCoord(data[i]), lineWidth);
	                    axShape = {
	                        _axisShape: 'axisTick',
	                        zlevel: this.getZlevelBase(),
	                        z: this.getZBase(),
	                        hoverable: false,
	                        style: {
	                            xStart: xPosition,
	                            yStart: y,
	                            xEnd: xPosition + length,
	                            yEnd: y,
	                            strokeColor: color,
	                            lineWidth: lineWidth
	                        }
	                    };
	                    this.shapeList.push(new LineShape(axShape));
	                }
	            }
	        },

	        // 坐标轴文本
	        _buildAxisLabel: function () {
	            var axShape;
	            var data       = this._valueList;
	            var dataLength = this._valueList.length;
	            var rotate     = this.option.axisLabel.rotate;
	            var margin     = this.option.axisLabel.margin;
	            var clickable  = this.option.axisLabel.clickable;
	            var textStyle  = this.option.axisLabel.textStyle;

	            if (this.isHorizontal()) {
	                // 横向
	                var yPosition;
	                var baseLine;
	                if (this.option.position === 'bottom') {
	                    yPosition = this.grid.getYend() + margin;
	                    baseLine = 'top';
	                }
	                else {
	                    yPosition = this.grid.getY() - margin;
	                    baseLine = 'bottom';
	                }

	                for (var i = 0; i < dataLength; i++) {
	                    axShape = {
	                        zlevel: this.getZlevelBase(),
	                        z: this.getZBase() +3,
	                        hoverable: false,
	                        style: {
	                            x: this.getCoord(data[i]),
	                            y: yPosition,
	                            color: typeof textStyle.color === 'function'
	                                   ? textStyle.color(data[i]) : textStyle.color,
	                            text: this._valueLabel[i],
	                            textFont: this.getFont(textStyle),
	                            textAlign: textStyle.align || 'center',
	                            textBaseline: textStyle.baseline || baseLine
	                        }
	                    };
	                    if (rotate) {
	                        axShape.style.textAlign = rotate > 0
	                                                  ? (this.option.position === 'bottom'
	                                                    ? 'right' : 'left')
	                                                  : (this.option.position === 'bottom'
	                                                    ? 'left' : 'right');
	                        axShape.rotation = [
	                            rotate * Math.PI / 180,
	                            axShape.style.x,
	                            axShape.style.y
	                        ];
	                    }
	                    this.shapeList.push(new TextShape(
	                        this._axisLabelClickable(clickable, axShape)
	                    ));
	                }
	            }
	            else {
	                // 纵向
	                var xPosition;
	                var align;
	                if (this.option.position === 'left') {
	                    xPosition = this.grid.getX() - margin;
	                    align = 'right';
	                }
	                else {
	                    xPosition = this.grid.getXend() + margin;
	                    align = 'left';
	                }

	                for (var i = 0; i < dataLength; i++) {
	                    axShape = {
	                        zlevel: this.getZlevelBase(),
	                        z: this.getZBase() + 3,
	                        hoverable: false,
	                        style: {
	                            x: xPosition,
	                            y: this.getCoord(data[i]),
	                            color: typeof textStyle.color === 'function'
	                                   ? textStyle.color(data[i]) : textStyle.color,
	                            text: this._valueLabel[i],
	                            textFont: this.getFont(textStyle),
	                            textAlign: textStyle.align || align,
	                            textBaseline: textStyle.baseline
	                                          || (
	                                              (i === 0 && this.option.name !== '')
	                                              ? 'bottom'
	                                                : (i === dataLength - 1 && this.option.name !== '') ? 'top' : 'middle'
	                                          )
	                        }
	                    };

	                    if (rotate) {
	                        axShape.rotation = [
	                            rotate * Math.PI / 180,
	                            axShape.style.x,
	                            axShape.style.y
	                        ];
	                    }
	                    this.shapeList.push(new TextShape(
	                        this._axisLabelClickable(clickable, axShape)
	                    ));
	                }
	            }
	        },

	        _buildSplitLine: function () {
	            var axShape;
	            var data        = this._valueList;
	            var dataLength  = this._valueList.length;
	            var sLineOption = this.option.splitLine;
	            var lineType    = sLineOption.lineStyle.type;
	            var lineWidth   = sLineOption.lineStyle.width;
	            var color       = sLineOption.lineStyle.color;
	            color = color instanceof Array ? color : [color];
	            var colorLength = color.length;

	            if (this.isHorizontal()) {
	                // 横向
	                var sy = this.grid.getY();
	                var ey = this.grid.getYend();
	                var x;

	                for (var i = 0; i < dataLength; i++) {
	                    // 亚像素优化
	                    x = this.subPixelOptimize(this.getCoord(data[i]), lineWidth);
	                    axShape = {
	                        zlevel: this.getZlevelBase(),
	                        z: this.getZBase(),
	                        hoverable: false,
	                        style: {
	                            xStart: x,
	                            yStart: sy,
	                            xEnd: x,
	                            yEnd: ey,
	                            strokeColor: color[i % colorLength],
	                            lineType: lineType,
	                            lineWidth: lineWidth
	                        }
	                    };
	                    this.shapeList.push(new LineShape(axShape));
	                }

	            }
	            else {
	                // 纵向
	                var sx = this.grid.getX();
	                var ex = this.grid.getXend();
	                var y;

	                for (var i = 0; i < dataLength; i++) {
	                    // 亚像素优化
	                    y = this.subPixelOptimize(this.getCoord(data[i]), lineWidth);
	                    axShape = {
	                        zlevel: this.getZlevelBase(),
	                        z: this.getZBase(),
	                        hoverable: false,
	                        style: {
	                            xStart: sx,
	                            yStart: y,
	                            xEnd: ex,
	                            yEnd: y,
	                            strokeColor: color[i % colorLength],
	                            lineType: lineType,
	                            lineWidth: lineWidth
	                        }
	                    };
	                    this.shapeList.push(new LineShape(axShape));
	                }
	            }
	        },

	        _buildSplitArea: function () {
	            var axShape;
	            var color = this.option.splitArea.areaStyle.color;

	            if (!(color instanceof Array)) {
	                // 非数组一律认为是单一颜色的字符串，单一颜色则用一个背景，颜色错误不负责啊！！！
	                axShape = {
	                    zlevel: this.getZlevelBase(),
	                    z: this.getZBase(),
	                    hoverable: false,
	                    style: {
	                        x: this.grid.getX(),
	                        y: this.grid.getY(),
	                        width: this.grid.getWidth(),
	                        height: this.grid.getHeight(),
	                        color: color
	                        // type: this.option.splitArea.areaStyle.type,
	                    }
	                };
	                this.shapeList.push(new RectangleShape(axShape));
	            }
	            else {
	                // 多颜色
	                var colorLength = color.length;
	                var data        = this._valueList;
	                var dataLength  = this._valueList.length;

	                if (this.isHorizontal()) {
	                    // 横向
	                    var y = this.grid.getY();
	                    var height = this.grid.getHeight();
	                    var lastX = this.grid.getX();
	                    var curX;

	                    for (var i = 0; i <= dataLength; i++) {
	                        curX = i < dataLength
	                               ? this.getCoord(data[i])
	                               : this.grid.getXend();
	                        axShape = {
	                            zlevel: this.getZlevelBase(),
	                            z: this.getZBase(),
	                            hoverable: false,
	                            style: {
	                                x: lastX,
	                                y: y,
	                                width: curX - lastX,
	                                height: height,
	                                color: color[i % colorLength]
	                                // type: this.option.splitArea.areaStyle.type,
	                            }
	                        };
	                        this.shapeList.push(new RectangleShape(axShape));
	                        lastX = curX;
	                    }
	                }
	                else {
	                    // 纵向
	                    var x = this.grid.getX();
	                    var width = this.grid.getWidth();
	                    var lastYend = this.grid.getYend();
	                    var curY;

	                    for (var i = 0; i <= dataLength; i++) {
	                        curY = i < dataLength
	                               ? this.getCoord(data[i])
	                               : this.grid.getY();
	                        axShape = {
	                            zlevel: this.getZlevelBase(),
	                            z: this.getZBase(),
	                            hoverable: false,
	                            style: {
	                                x: x,
	                                y: curY,
	                                width: width,
	                                height: lastYend - curY,
	                                color: color[i % colorLength]
	                                // type: this.option.splitArea.areaStyle.type
	                            }
	                        };
	                        this.shapeList.push(new RectangleShape(axShape));
	                        lastYend = curY;
	                    }
	                }
	            }
	        },

	        /**
	         * 极值计算
	         */
	        _calculateValue: function () {
	            if (isNaN(this.option.min - 0) || isNaN(this.option.max - 0)) {
	                // 有一个没指定都得算
	                // 数据整形
	                var data = {};          // 整形后数据抽取
	                var xIdx;
	                var yIdx;
	                var legend = this.component.legend;
	                for (var i = 0, l = this.series.length; i < l; i++) {
	                    if (this.series[i].type != ecConfig.CHART_TYPE_LINE
	                        && this.series[i].type != ecConfig.CHART_TYPE_BAR
	                        && this.series[i].type != ecConfig.CHART_TYPE_SCATTER
	                        && this.series[i].type != ecConfig.CHART_TYPE_K
	                        && this.series[i].type != ecConfig.CHART_TYPE_EVENTRIVER
	                    ) {
	                        // 非坐标轴支持的不算极值
	                        continue;
	                    }
	                    // 请允许我写开，跟上面一个不是一样东西
	                    if (legend && !legend.isSelected(this.series[i].name)){
	                        continue;
	                    }

	                    // 不指定默认为第一轴线
	                    xIdx = this.series[i].xAxisIndex || 0;
	                    yIdx = this.series[i].yAxisIndex || 0;
	                    if ((this.option.xAxisIndex != xIdx)
	                        && (this.option.yAxisIndex != yIdx)
	                    ) {
	                        // 不是自己的数据不计算极值
	                        continue;
	                    }

	                    this._calculSum(data, i);
	                }

	                // 找极值
	                var oriData;            // 原始数据
	                for (var i in data){
	                    oriData = data[i];
	                    for (var j = 0, k = oriData.length; j < k; j++) {
	                        if (!isNaN(oriData[j])){
	                            this._hasData = true;
	                            this._min = oriData[j];
	                            this._max = oriData[j];
	                            break;
	                        }
	                    }
	                    if (this._hasData) {
	                        break;
	                    }
	                }
	                for (var i in data){
	                    oriData = data[i];
	                    for (var j = 0, k = oriData.length; j < k; j++) {
	                        if (!isNaN(oriData[j])){
	                            this._min = Math.min(this._min, oriData[j]);
	                            this._max = Math.max(this._max, oriData[j]);
	                        }
	                    }
	                }

	                // console.log(this._min,this._max,'vvvvv111111',this.option.type)
	                // log情况暂时禁用boundaryGap。
	                var boundaryGap = this.option.type !== 'log' ? this.option.boundaryGap : [0, 0];
	                var gap = Math.abs(this._max - this._min);
	                this._min = isNaN(this.option.min - 0)
	                       ? (this._min - Math.abs(gap * boundaryGap[0]))
	                       : (this.option.min - 0);    // 指定min忽略boundaryGay[0]

	                this._max = isNaN(this.option.max - 0)
	                       ? (this._max + Math.abs(gap * boundaryGap[1]))
	                       : (this.option.max - 0);    // 指定max忽略boundaryGay[1]
	                if (this._min === this._max) {
	                    if (this._max === 0) {
	                        // 修复全0数据
	                        this._max = 1;
	                    }
	                    // 修复最大值==最小值时数据整形
	                    else if (this._max > 0) {
	                        this._min = this._max / this.option.splitNumber != null ? this.option.splitNumber : 5;
	                    }
	                    else { // this._max < 0
	                        this._max = this._max / this.option.splitNumber != null ? this.option.splitNumber : 5;
	                    }
	                }

	                if (this.option.type === 'time') {
	                    this._reformTimeValue();
	                }
	                else if (this.option.type === 'log') {
	                    this._reformLogValue();
	                }
	                else {
	                    this._reformValue(this.option.scale);
	                }
	            }
	            else {
	                this._hasData = true;
	                // 用户指定min max就不多管闲事了
	                this._min = this.option.min - 0;    // 指定min忽略boundaryGay[0]
	                this._max = this.option.max - 0;    // 指定max忽略boundaryGay[1]

	                if (this.option.type === 'time') {
	                    this._reformTimeValue();
	                }
	                else if (this.option.type === 'log') {
	                    this._reformLogValue();
	                }
	                else {
	                    this._customerValue();
	                }
	            }
	        },

	        /**
	         * 内部使用，计算某系列下的堆叠和
	         */
	        _calculSum: function (data, i) {
	            var key = this.series[i].name || 'kener';
	            var value;
	            var oriData;
	            if (!this.series[i].stack) {
	                data[key] = data[key] || [];
	                if (this.series[i].type != ecConfig.CHART_TYPE_EVENTRIVER) {
	                    oriData = this.series[i].data;
	                    for (var j = 0, k = oriData.length; j < k; j++) {
	                        value = this.getDataFromOption(oriData[j]);
	                        if (this.series[i].type === ecConfig.CHART_TYPE_K) {
	                            data[key].push(value[0]);
	                            data[key].push(value[1]);
	                            data[key].push(value[2]);
	                            data[key].push(value[3]);
	                        }
	                        else if (value instanceof Array) {
	                            // scatter 、 不等距 line bar
	                            if (this.option.xAxisIndex != -1) {
	                                data[key].push(
	                                    this.option.type != 'time'
	                                    ? value[0] : ecDate.getNewDate(value[0])
	                                );
	                            }
	                            if (this.option.yAxisIndex != -1) {
	                                data[key].push(
	                                    this.option.type != 'time'
	                                    ? value[1] : ecDate.getNewDate(value[1])
	                                );
	                            }
	                        }
	                        else {
	                            data[key].push(value);
	                        }
	                    }
	                }
	                else {
	                    // eventRiver
	                    oriData = this.series[i].data;
	                    for (var j = 0, k = oriData.length; j < k; j++) {
	                        var evolution = oriData[j].evolution;
	                        for (var m = 0, n = evolution.length; m < n; m++) {
	                            data[key].push(ecDate.getNewDate(evolution[m].time));
	                        }
	                    }
	                }
	            }
	            else {
	                // 堆积数据，需要区分正负向堆积
	                var keyP = '__Magic_Key_Positive__' + this.series[i].stack;
	                var keyN = '__Magic_Key_Negative__' + this.series[i].stack;
	                data[keyP] = data[keyP] || [];
	                data[keyN] = data[keyN] || [];
	                data[key] = data[key] || [];  // scale下还需要记录每一个量
	                oriData = this.series[i].data;
	                for (var j = 0, k = oriData.length; j < k; j++) {
	                    value = this.getDataFromOption(oriData[j]);
	                    if (value === '-') {
	                        continue;
	                    }
	                    value = value - 0;
	                    if (value >= 0) {
	                        if (data[keyP][j] != null) {
	                            data[keyP][j] += value;
	                        }
	                        else {
	                            data[keyP][j] = value;
	                        }
	                    }
	                    else {
	                        if (data[keyN][j] != null) {
	                            data[keyN][j] += value;
	                        }
	                        else {
	                            data[keyN][j] = value;
	                        }
	                    }
	                    if (this.option.scale) {
	                        data[key].push(value);
	                    }
	                }
	            }
	        },

	        /**
	         * 找到原始数据的极值后根据选项整形最终 this._min / this._max / this._valueList
	         * 如果你不知道这个“整形”的用义，请不要试图去理解和修改这个方法！找我也没用，我相信我已经记不起来！
	         * 如果你有更简洁的数学推导欢迎重写，后果自负~
	         *
	         * by kener.linfeng@gmail.com 2013-1-8
	         * --------
	         * 感谢谢世威(https://github.com/i6ma)，终于有人改这个方法了
	         * by Kener 2014-11-6
	         */
	        _reformValue: function (scale) {
	            var smartSteps = __webpack_require__(542);
	            var splitNumber = this.option.splitNumber;

	            // 非scale下双正，修正最小值为0
	            if (!scale && this._min >= 0 && this._max >= 0) {
	                this._min = 0;
	            }
	            // 非scale下双负，修正最大值为0
	            if (!scale && this._min <= 0 && this._max <= 0) {
	                this._max = 0;
	            }

	            var stepOpt = smartSteps(this._min, this._max, splitNumber);
	            splitNumber = splitNumber != null ? splitNumber : stepOpt.secs;
	            //this.option.splitNumber = splitNumber;
	            this._min = stepOpt.min;
	            this._max = stepOpt.max;
	            this._valueList = stepOpt.pnts;
	            this._reformLabelData();
	        },

	        /**
	         * 格式化时间值
	         */
	        _reformTimeValue : function() {
	            var splitNumber = this.option.splitNumber != null ? this.option.splitNumber : 5;

	            // 最优解
	            var curValue = ecDate.getAutoFormatter(this._min, this._max, splitNumber);
	            // 目标
	            var formatter = curValue.formatter;
	            var gapValue = curValue.gapValue;

	            this._valueList = [ecDate.getNewDate(this._min)];
	            var startGap;
	            switch (formatter) {
	                case 'week' :
	                    startGap = ecDate.nextMonday(this._min);
	                    break;
	                case 'month' :
	                    startGap = ecDate.nextNthOnMonth(this._min, 1);
	                    break;
	                case 'quarter' :
	                    startGap = ecDate.nextNthOnQuarterYear(this._min, 1);
	                    break;
	                case 'half-year' :
	                    startGap = ecDate.nextNthOnHalfYear(this._min, 1);
	                    break;
	                case 'year' :
	                    startGap = ecDate.nextNthOnYear(this._min, 1);
	                    break;
	                default :
	                    // 大于2小时需要考虑时区不能直接取整
	                    if (gapValue <= 3600000 * 2) {
	                        startGap = (Math.floor(this._min / gapValue) + 1) * gapValue;
	                    }
	                    else {
	                        startGap = ecDate.getNewDate(this._min - (-gapValue));
	                        startGap.setHours(Math.round(startGap.getHours() / 6) * 6);
	                        startGap.setMinutes(0);
	                        startGap.setSeconds(0);
	                    }
	                    break;
	            }

	            if (startGap - this._min < gapValue / 2) {
	                startGap -= -gapValue;
	            }

	            // console.log(startGap,gapValue,this._min, this._max,formatter)
	            curValue = ecDate.getNewDate(startGap);
	            splitNumber *= 1.5;
	            while (splitNumber-- >= 0) {
	                if (formatter == 'month'
	                    || formatter == 'quarter'
	                    || formatter == 'half-year'
	                    || formatter == 'year'
	                ) {
	                    curValue.setDate(1);
	                }
	                if (this._max - curValue < gapValue / 2) {
	                    break;
	                }
	                this._valueList.push(curValue);
	                curValue = ecDate.getNewDate(curValue - (-gapValue));
	            }
	            this._valueList.push(ecDate.getNewDate(this._max));

	            this._reformLabelData((function (formatterStr) {
	                return function (value) {
	                    return ecDate.format(formatterStr, value);
	                };
	            })(formatter));
	        },

	        _customerValue: function () {
	            var accMath = __webpack_require__(507);
	            var splitNumber = this.option.splitNumber != null ? this.option.splitNumber : 5;
	            var splitGap = (this._max - this._min) / splitNumber;

	            this._valueList = [];
	            for (var i = 0; i <= splitNumber; i++) {
	                this._valueList.push(accMath.accAdd(this._min, accMath.accMul(splitGap, i)));
	            }
	            this._reformLabelData();
	        },

	        _reformLogValue: function() {
	            // log数轴本质就是缩放，相当于默认this.option.scale === true，所以不修正_min和_max到0。
	            var thisOption = this.option;
	            var result = __webpack_require__(543)({
	                dataMin: this._min,
	                dataMax: this._max,
	                logPositive: thisOption.logPositive,
	                logLabelBase: thisOption.logLabelBase,
	                splitNumber: thisOption.splitNumber
	            });

	            this._min = result.dataMin;
	            this._max = result.dataMax;
	            this._valueList = result.tickList;
	            // {value2Coord: {Function}, coord2Value: {Function}}
	            this._dataMappingMethods = result.dataMappingMethods;

	            this._reformLabelData(result.labelFormatter);
	        },

	        _reformLabelData: function (innerFormatter) {
	            this._valueLabel = [];
	            var formatter = this.option.axisLabel.formatter;
	            if (formatter) {
	                for (var i = 0, l = this._valueList.length; i < l; i++) {
	                    if (typeof formatter === 'function') {
	                        this._valueLabel.push(
	                            innerFormatter
	                                ? formatter.call(this.myChart, this._valueList[i], innerFormatter)
	                                : formatter.call(this.myChart, this._valueList[i])
	                        );
	                    }
	                    else if (typeof formatter === 'string') {
	                        this._valueLabel.push(
	                            innerFormatter
	                                ? ecDate.format(formatter, this._valueList[i])
	                                : formatter.replace('{value}',this._valueList[i])
	                        );
	                    }
	                }
	            }
	            else {
	                for (var i = 0, l = this._valueList.length; i < l; i++) {
	                    this._valueLabel.push(
	                        innerFormatter
	                            ? innerFormatter(this._valueList[i])
	                            : this.numAddCommas(this._valueList[i]) // 每三位默认加,格式化
	                    );
	                }
	            }
	        },

	        getExtremum: function () {
	            this._calculateValue();
	            var dataMappingMethods = this._dataMappingMethods;
	            return {
	                min: this._min,
	                max: this._max,
	                dataMappingMethods: dataMappingMethods
	                    ? zrUtil.merge({}, dataMappingMethods) : null
	            };
	        },

	        /**
	         * 刷新
	         */
	        refresh: function (newOption, newSeries) {
	            if (newOption) {
	                this.option = this.reformOption(newOption);
	                // 通用字体设置
	                this.option.axisLabel.textStyle = zrUtil.merge(
	                    this.option.axisLabel.textStyle || {},
	                    this.ecTheme.textStyle
	                );
	                this.series = newSeries;
	            }
	            if (this.zr) {   // 数值轴的另外一个功能只是用来计算极值
	                this.clear();
	                this._buildShape();
	            }
	        },

	        // 根据值换算位置
	        getCoord: function (value) {
	            if (this._dataMappingMethods) {
	                value = this._dataMappingMethods.value2Coord(value);
	            }

	            value = value < this._min ? this._min : value;
	            value = value > this._max ? this._max : value;

	            var result;
	            if (!this.isHorizontal()) {
	                // 纵向
	                result = this.grid.getYend()
	                         - (value - this._min)
	                           / (this._max - this._min)
	                           * this.grid.getHeight();
	            }
	            else {
	                // 横向
	                result = this.grid.getX()
	                         + (value - this._min)
	                           / (this._max - this._min)
	                           * this.grid.getWidth();
	            }

	            return result;
	            // Math.floor可能引起一些偏差，但性能会更好
	            /* 准确更重要
	            return (value === this._min || value === this._max)
	                   ? result
	                   : Math.floor(result);
	            */
	        },

	        // 根据值换算绝对大小
	        getCoordSize: function (value) {
	            if (!this.isHorizontal()) {
	                // 纵向
	                return Math.abs(value / (this._max - this._min) * this.grid.getHeight());
	            }
	            else {
	                // 横向
	                return Math.abs(value / (this._max - this._min) * this.grid.getWidth());
	            }
	        },

	        // 根据位置换算值
	        getValueFromCoord: function(coord) {
	            var result;

	            if (!this.isHorizontal()) {
	                // 纵向
	                coord = coord < this.grid.getY() ? this.grid.getY() : coord;
	                coord = coord > this.grid.getYend() ? this.grid.getYend() : coord;
	                result = this._max
	                         - (coord - this.grid.getY())
	                           / this.grid.getHeight()
	                           * (this._max - this._min);
	            }
	            else {
	                // 横向
	                coord = coord < this.grid.getX() ? this.grid.getX() : coord;
	                coord = coord > this.grid.getXend() ? this.grid.getXend() : coord;
	                result = this._min
	                         + (coord - this.grid.getX())
	                           / this.grid.getWidth()
	                           * (this._max - this._min);
	            }

	            if (this._dataMappingMethods) {
	                result = this._dataMappingMethods.coord2Value(result);
	            }

	            return result.toFixed(2) - 0;
	        },

	        isMaindAxis : function (value) {
	            for (var i = 0, l = this._valueList.length; i < l; i++) {
	                if (this._valueList[i] === value) {
	                    return true;
	                }
	            }
	            return false;
	        }
	    };

	    zrUtil.inherits(ValueAxis, Base);

	    __webpack_require__(516).define('valueAxis', ValueAxis);

	    return ValueAxis;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));



/***/ },
/* 542 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;
	/**
	 * echarts 值轴分段刻度计算方法
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 * @author xieshiwei (谢世威, i6ma@i6ma.com)
	 *
	 */


	/**
	 * 最值、跨度、步长取近似值
	 * 注意：不适用于高精度需求，或者很多位有效数字的情况！！！
	 * @function    smartSteps
	 * @param       {Number}    min             最小值
	 * @param       {Number}    max             最大值
	 * @param       {Number}    [section]       段数只能是 [0, 99] 的整数，段数为 0 或者不指定段数时，将自动调整段数
	 * @param       {Object}    [opts]          其它扩展参数
	 * @param       {Array}     opts.steps      自定义步长备选值，如 [10, 12, 15, 20, 25, 30, 40, 50, 60, 80] ，但必须 => [10, 99]
	 * @return      {Object}    {min: 新最小值, max: 新最大值, secs: 分段数, step: 每段长, fix: 小数保留位数, pnts: [分段结果]}
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {



	var mySteps     = [10, 20, 25, 50];
	var mySections  = [4, 5, 6];

	var custOpts;
	var custSteps;
	var custSecs;
	var minLocked;
	var maxLocked;

	var MT          = Math;
	var MATH_ROUND  = MT.round;
	var MATH_FLOOR  = MT.floor;
	var MATH_CEIL   = MT.ceil;
	var MATH_ABS    = MT.abs;


	function MATH_LOG(n) {return MT.log(MATH_ABS(n)) / MT.LN10;}
	function MATH_POW(n) {return MT.pow(10, n);}
	function MATH_ISINT(n) {return n === MATH_FLOOR(n);}


	function smartSteps(min, max, section, opts) {
	    // 拿公共变量来接收 opts.steps 这个参数，就不用带着参数层层传递了，注意在函数的最终出口处释放这个值
	    custOpts    = opts || {};
	    custSteps   = custOpts.steps || mySteps;
	    custSecs    = custOpts.secs || mySections;
	    section     = MATH_ROUND(+section || 0) % 99;           // 段数限定在 [0, 99] ，0 则自适应
	    min         = +min || 0;
	    max         = +max || 0;
	    minLocked   = maxLocked = 0;
	    if ('min' in custOpts) {
	        min     = +custOpts.min || 0;
	        minLocked = 1;
	    }
	    if ('max' in custOpts) {
	        max     = +custOpts.max || 0;
	        maxLocked = 1;
	    }
	    if (min > max) {max = [min, min = max][0];}             // 最值交换
	    var span    = max - min;
	    if (minLocked && maxLocked) {
	        return bothLocked(min, max, section);               // 两个最值同时被锁定，注意差值为 0 的情况
	    }
	    if (span < (section || 5)) {                            // 跨度值小于要分的段数，步长将会小于 1
	        if (MATH_ISINT(min) && MATH_ISINT(max)) {           // 步长小于 1 同时两个最值都是整数，特别处理
	            return forInteger(min, max, section);           // 也要考虑差值为 0 的情况
	        }
	        else if (span === 0) {                              // 非整数且跨度为 0 的情况
	            return forSpan0(min, max, section);
	        }
	    }
	    return coreCalc(min, max, section);                     // 非特殊情况的计算，须确保 min < max
	}



	/**
	 * 构造返回值，处理小数精度等问题
	 * @param   {Number}    newMin      最小值
	 * @param   {Number}    newMax      最大值
	 * @param   {Number}    section     分段数
	 * @param   {Number}    [expon]     计算量级
	 * @return  {Object}                同 smartSteps
	 */
	function makeResult(newMin, newMax, section, expon) {
	    expon       = expon || 0;                               // 这是中间计算量级，受步长增长、特别是最值锁定的影响，可能会小于基准量级，因为整数部分被过度放大
	    var expStep = expNum((newMax - newMin) / section, -1);
	    var expMin  = expNum(newMin, -1, 1);                    // 锁定的最值有效数位可能很多，需要全精度保留
	    var expMax  = expNum(newMax, -1);
	    var minExp  = MT.min(expStep.e, expMin.e, expMax.e);    // 这个值实际上就是各值整数部分尾部多余的 0 的个数
	    if (expMin.c === 0) {                                   // 0 可以有任意多个尾0
	        minExp  = MT.min(expStep.e, expMax.e);
	    } else if (expMax.c === 0) {
	        minExp  = MT.min(expStep.e, expMin.e);
	    }
	    expFixTo(expStep, {c: 0, e: minExp});
	    expFixTo(expMin, expStep, 1);
	    expFixTo(expMax, expStep);
	    expon      += minExp;                                   // 最终的基准量级，在这个量级下，各值刚好能表示成整数
	    newMin      = expMin.c;
	    newMax      = expMax.c;
	    var step    = (newMax - newMin) / section;
	    var zoom    = MATH_POW(expon);
	    var fixTo   = 0;
	    var points  = [];
	    for (var i  = section + 1; i--;) {                      // 因为点数比段数多 1
	        points[i] = (newMin + step * i) * zoom;             // 如果不涉及小数问题，这里就直接使用数值型
	    }
	    if (expon   < 0) {
	        fixTo   = decimals(zoom);                           // 前面已经去掉了各值尾部多余的 0 ，所以 zoom 的小数位就是最终的 fix 位数
	        step    = +(step * zoom).toFixed(fixTo);            // toFixed 处理长尾小数问题，如：0.2 * 0.1 = 0.020000000000000004
	        newMin  = +(newMin * zoom).toFixed(fixTo);
	        newMax  = +(newMax * zoom).toFixed(fixTo);
	        for (var i = points.length; i--;) {
	            points[i] = points[i].toFixed(fixTo);           // 为保证小数点对齐，统一转为字符型
	            +points[i] === 0 && (points[i] = '0');          // 0.000 不好看
	        }
	    }
	    else {
	        newMin *= zoom;
	        newMax *= zoom;
	        step   *= zoom;
	    }
	    custSecs    = 0;
	    custSteps   = 0;
	    custOpts    = 0;
	    // 这些公共变量可能持用了对用户参数的引用，这里是函数的最终出口，释放引用

	    return {
	        min:    newMin,                 // 新最小值
	        max:    newMax,                 // 新最大值
	        secs:   section,                // 分段数
	        step:   step,                   // 每段长
	        fix:    fixTo,                  // 小数保留位数，0 则为整数
	        exp:    expon,                  // 基准量级，并非原值所在的量级，而是说在这个量级下，各值能表示成整数
	        pnts:   points                  // 分段结果，整数都是数值型，小数时为了对齐小数点，都是字符型，但其中 0 不带小数点，即没有 "0.000"
	    };
	}



	/**
	 * 量级计数法 表示数值，不适用于很大或者很小的数，0 更不行
	 * @param       {Number}    num             原数
	 * @param       {Number}    [digit = 2]     精度位数，必须 => [1, 9]
	 * @param       {Boolean}   [byFloor = 0]   默认为 0 表示近似值不小于原值，置 1 表示近似值不大于原值
	 * @return      {Object}    {c: c, e: e}    c e 都是整数，c * 10 ^ e 即为原值的近似数
	 * @description             返回值应该更详细一点：{c: c, e: e, d: d, n: n} ，其中 d 是 c 的位数，n = c * 10 ^ e ，不过目前好像不太有用
	 */
	function expNum(num, digit, byFloor) {
	    digit       = MATH_ROUND(digit % 10) || 2;
	    if (digit   < 0) {                                      // 全精度位数
	        if (MATH_ISINT(num)) {                              // 整数的全精度位数，要去掉尾 0 ，但 0 也是整数，要专门留一位精度
	            digit = ('' + MATH_ABS(num)).replace(/0+$/, '').length || 1;
	        }
	        else {                                              // 小数的全精度位数，要去掉首 0
	            num = num.toFixed(15).replace(/0+$/, '');       // toFixed 处理长尾小数
	            digit = num.replace('.', '').replace(/^[-0]+/, '').length;
	            num = +num;                                     // '' + 0.0000001 会得到 '1e-7'
	        }
	    }
	    var expon   = MATH_FLOOR(MATH_LOG(num)) - digit + 1;
	    var cNum    = +(num * MATH_POW(-expon)).toFixed(15) || 0;   // toFixed 处理长尾小数问题
	    cNum        = byFloor ? MATH_FLOOR(cNum) : MATH_CEIL(cNum); // 向上取整可能发生进位，使精度位数增加 1
	    !cNum && (expon = 0);
	    if (('' + MATH_ABS(cNum)).length > digit) {                 // 整数位数判断，字符串法比对数法快近一倍
	        expon  += 1;
	        cNum   /= 10;
	    }
	    return {
	        c: cNum,
	        e: expon
	    };
	}


	/**
	 * 将前者的指数对齐到后者，如果前者量级较小，就是强制加大指数，值误差可能严重放大，甚至值变为 0
	 */
	function expFixTo(expnum1, expnum2, byFloor) {
	    var deltaExp    = expnum2.e - expnum1.e;
	    if (deltaExp) {
	        expnum1.e  += deltaExp;                             // 指数减小时，只需将整数部分相应放大
	        expnum1.c  *= MATH_POW(-deltaExp);                  // 指数增加时，整数部分将缩小，就涉及 floor ceil 取整和变 0 问题
	        expnum1.c   = byFloor ? MATH_FLOOR(expnum1.c) : MATH_CEIL(expnum1.c);
	    }
	}


	/**
	 * 将两个量级数的指数对齐到较小者
	 */
	function expFixMin(expnum1, expnum2, byFloor) {
	    if (expnum1.e < expnum2.e) {
	        expFixTo(expnum2, expnum1, byFloor);
	    }
	    else {
	        expFixTo(expnum1, expnum2, byFloor);
	    }
	}


	/**
	 * 基于量级计数法，对原值的整数部分取近似，不适用于负数和 0
	 * @param       {Number}    num             原值
	 * @param       {Array}     [rounds]        在取近似时，提供预置选项，近似到 rounds 中的某项
	 * @return      {Object}    expNum          2 位精度的量级计数法对象，不小于原值
	 */
	function getCeil(num, rounds) {
	    rounds      = rounds || mySteps;
	    num         = expNum(num);                              // 2 位精度量级计数法
	    var cNum    = num.c;
	    var i       = 0;
	    while (cNum > rounds[i]) {                              // 在预置的近似数中，找到不小于目标 cNum 的项
	        i++;
	    }
	    if (!rounds[i]) {                                       // 如果没找到合适的预置项，一定是目标值大于全部的预置项
	        cNum   /= 10;                                       // 将目标值缩小 10 倍，重找一次定能命中
	        num.e  += 1;
	        i       = 0;
	        while (cNum > rounds[i]) {
	            i++;
	        }
	    }
	    num.c       = rounds[i];
	    return num;
	}




	/**
	 * 基于量级计数法的计算，必须 min < max
	 */
	function coreCalc(min, max, section) {
	    var step;
	    var secs    = section || +custSecs.slice(-1);
	    var expStep = getCeil((max - min) / secs, custSteps);   // 这是可能的最小步长，以它的量级作为后续计算的基准量级，以保证整数计算特性
	    var expSpan = expNum(max - min);                        // 2 位精度的最值跨度，过高的精度意味着有效数位更多
	    var expMin  = expNum(min, -1, 1);                       // 最小值向下近似，以涵盖原最小值
	    var expMax  = expNum(max, -1);     // 最大值向上近似，参数 -1 表示保留全精度，因为要注意 min = 10000001, max = 10000002 等情况
	    expFixTo(expSpan, expStep);                             // 指数对齐
	    expFixTo(expMin, expStep, 1);                           // 经过指数对齐，原最大值、最小值都有可能变为 0
	    expFixTo(expMax, expStep);
	    if (!section) {
	        secs    = look4sections(expMin, expMax);
	    }
	    else {
	        step    = look4step(expMin, expMax, secs);
	    }

	    // 如果原最值都是整数，尽量让输出值也保持整数，但原最值跨 0 的则不调整
	    if (MATH_ISINT(min) && MATH_ISINT(max) && min * max >= 0) {
	        if (max - min < secs) {                             // 再次出现跨度小于段数
	            return forInteger(min, max, secs);
	        }
	        secs = tryForInt(min, max, section, expMin, expMax, secs);
	    }
	    var arrMM   = cross0(min, max, expMin.c, expMax.c);
	    expMin.c    = arrMM[0];
	    expMax.c    = arrMM[1];
	    if (minLocked || maxLocked) {
	        singleLocked(min, max, expMin, expMax);
	    }
	    return makeResult(expMin.c, expMax.c, secs, expMax.e);
	}



	/**
	 * 在预置的可选段数中，找出一个合适的值，让跨度误差尽量小
	 */
	function look4sections(expMin, expMax) {
	    var section;
	    var tmpStep, tmpMin, tmpMax;
	    var reference   = [];
	    for (var i      = custSecs.length; i--;) {              // 逐步减小段数，步长就会渐大
	        section     = custSecs[i];
	        tmpStep     = getCeil((expMax.c - expMin.c) / section, custSteps);
	        tmpStep     = tmpStep.c * MATH_POW(tmpStep.e);      // 步长都用常规整数参与计算
	        tmpMin      = MATH_FLOOR(expMin.c / tmpStep) * tmpStep;
	        tmpMax      = MATH_CEIL(expMax.c / tmpStep) * tmpStep;
	        reference[i] = {
	            min:    tmpMin,
	            max:    tmpMax,
	            step:   tmpStep,
	            span:   tmpMax - tmpMin                         // 步长的误差被 段数 成倍放大，可能会给跨度造成更大的误差，使最后的段数大于预置的最大值
	        };
	    }
	    reference.sort(function (a, b) {
	        var delta = a.span - b.span;                        // 分段调整之后的跨度，一定不小于原跨度，所以越小越好
	        if (delta === 0) {
	            delta = a.step - b.step;                        // 跨度相同时，步长小者胜出
	        }
	        return delta;
	    });
	    reference   = reference[0];
	    section     = reference.span / reference.step;
	    expMin.c    = reference.min;
	    expMax.c    = reference.max;
	    return section < 3 ? section * 2 : section;             // 如果最终步长比最小步长大得多，段数就可能变得很小
	}


	/**
	 * 指定段数，在预置的可选步长中，找出一个合适的值，让 步长 * 段数 积刚好涵盖原最大值与最小值
	 */
	function look4step(expMin, expMax, secs) {
	    var span;
	    var tmpMax;
	    var tmpMin      = expMax.c;
	    var tmpStep     = (expMax.c - expMin.c) / secs - 1;
	    while (tmpMin   > expMin.c) {
	        tmpStep     = getCeil(tmpStep + 1, custSteps);
	        tmpStep     = tmpStep.c * MATH_POW(tmpStep.e);
	        span        = tmpStep * secs;
	        tmpMax      = MATH_CEIL(expMax.c / tmpStep) * tmpStep;
	        tmpMin      = tmpMax - span;                        // 优先保证 max 端的误差最小，试看原 min 值能否被覆盖到
	    }
	    var deltaMin    = expMin.c - tmpMin;                    // 上面的计算可能会让 min 端的误差更大，下面尝试均衡误差
	    var deltaMax    = tmpMax - expMax.c;
	    var deltaDelta  = deltaMin - deltaMax;
	    if (deltaDelta  > tmpStep * 1.1) {                      // 当 min 端的误差比 max 端大很多时，考虑将 tmpMin tmpMax 同时上移
	        deltaDelta  = MATH_ROUND(deltaDelta / tmpStep / 2) * tmpStep;
	        tmpMin     += deltaDelta;
	        tmpMax     += deltaDelta;
	    }
	    expMin.c   = tmpMin;
	    expMax.c   = tmpMax;
	    return tmpStep;
	}


	/**
	 * 原最值都是整数时，尝试让输出也保持整数
	 */
	function tryForInt(min, max, section, expMin, expMax, secs) {
	    var span = expMax.c - expMin.c;
	    var step = span / secs * MATH_POW(expMax.e);
	    if (!MATH_ISINT(step)) {                                // 原最值都是整数，但计算步长可能出现小数，如 2.5
	        step = MATH_FLOOR(step);                            // 步长总是要尽量小，以减小跨度误差，所以 2.5 可能被调整为 2 或者 3
	        span = step * secs;
	        if (span < max - min) {
	            step += 1;
	            span = step * secs;
	            if (!section && (step * (secs - 1) >= (max - min))) {
	                secs -= 1;
	                span = step * secs;
	            }
	        }
	        if (span >= max - min) {
	            var delta   = span - (max - min);               // 误差均衡
	            expMin.c    = MATH_ROUND(min - delta / 2);
	            expMax.c    = MATH_ROUND(max + delta / 2);
	            expMin.e    = 0;
	            expMax.e    = 0;
	        }
	    }
	    return secs;
	}




	/**
	 * 整数情况下，跨度小于段数的处理
	 */
	function forInteger(min, max, section) {
	    section     = section || 5;
	    if (minLocked) {
	        max     = min + section;                            // min max 没有写错，因为 min locked 所以 max 在 min 上浮动
	    }
	    else if (maxLocked) {
	        min     = max - section;
	    }
	    else {
	        var delta   = section - (max - min);                // 没有端点锁定时，向上下延展跨度
	        var newMin  = MATH_ROUND(min - delta / 2);
	        var newMax  = MATH_ROUND(max + delta / 2);
	        var arrMM   = cross0(min, max, newMin, newMax);     // 避免跨 0
	        min         = arrMM[0];
	        max         = arrMM[1];
	    }
	    return makeResult(min, max, section);
	}


	/**
	 * 非整数情况下，跨度为 0 的处理
	 */
	function forSpan0(min, max, section) {
	    section     = section || 5;
	    // delta 一定不为 0 ，因为 min === max === 0 的情况会进入 forInteger 分支
	    var delta   = MT.min(MATH_ABS(max / section), section) / 2.1;
	    if (minLocked) {
	        max     = min + delta;                              // min max 没有写错，因为 min locked 所以 max 在 min 上浮动
	    }
	    else if (maxLocked) {
	        min     = max - delta;
	    }
	    else {                                                  // 以最值为中心，上下各延展一小段
	        min     = min - delta;
	        max     = max + delta;
	    }
	    return coreCalc(min, max, section);
	}


	/**
	 * 当原始最值都在 0 的同侧时，让输出也保持在 0 的同侧
	 */
	function cross0(min, max, newMin, newMax) {
	    if (min >= 0 && newMin < 0) {
	        newMax -= newMin;
	        newMin  = 0;
	    }
	    else if (max <= 0 && newMax > 0) {
	        newMin -= newMax;
	        newMax  = 0;
	    }
	    return [newMin, newMax];
	}


	/**
	 * 取一个数的小数位数
	 * @param   {Number}    num         原数值
	 * @return  {Number}    decimals    整数则返回 0 ，小数则返回小数点后的位数
	 */
	function decimals(num) {
	    num = (+num).toFixed(15).split('.');                    // String(0.0000001) 会得到 '1e-7'
	    return num.pop().replace(/0+$/, '').length;
	}






	/**
	 * 单个最值锁定处理，只是在原计算的基础上，锁定一个，平移另一个
	 */
	function singleLocked(min, max, emin, emax) {
	    if (minLocked) {
	        var expMin  = expNum(min, 4, 1);                    // 4 位精度向下近似
	        if (emin.e  - expMin.e > 6) {                       // 如果锁定值的量级远小于基准量级，认为锁定失败，强置为 0
	            expMin  = {c: 0, e: emin.e};
	        }
	        expFixMin(emin, expMin);                            // 将指数与量级较小者对齐
	        expFixMin(emax, expMin);
	        emax.c     += expMin.c - emin.c;                    // 最大值平移
	        emin.c      = expMin.c;                             // 最小值锁定
	    }
	    else if (maxLocked) {
	        var expMax  = expNum(max, 4);                       // 4 位精度向上近似
	        if (emax.e  - expMax.e > 6) {                       // 如果锁定值的量级远小于基准量级，认为锁定失败，强置为 0
	            expMax  = {c: 0, e: emax.e};
	        }
	        expFixMin(emin, expMax);                            // 将指数与量级较小者对齐
	        expFixMin(emax, expMax);
	        emin.c     += expMax.c - emax.c;                    // 最小值平移
	        emax.c      = expMax.c;                             // 最大值锁定
	    }
	}


	/**
	 * 最小值和最大值同时被锁定的情况在这里，其它地方只考虑单边最值锁定
	 * @param   {Number}    min         锁定的最小值
	 * @param   {Number}    max         锁定的最大值
	 * @param   {Number}    [section]   段数
	 * @return  {Object}                同 smartSteps
	 */
	function bothLocked(min, max, section) {
	    var trySecs     = section ? [section] : custSecs;
	    var span        = max - min;
	    if (span       === 0) {                                 // 最大最小值都锁定到同一个值上，认为锁定失败
	        max         = expNum(max, 3);                       // 3 位精度向上近似
	        section     = trySecs[0];
	        max.c       = MATH_ROUND(max.c + section / 2);
	        return makeResult(max.c - section, max.c, section, max.e);
	    }
	    if (MATH_ABS(max / span) < 1e-6) {                      // 如果锁定值远小于跨度，也认为锁定失败，强置为 0
	        max         = 0;
	    }
	    if (MATH_ABS(min / span) < 1e-6) {
	        min         = 0;
	    }
	    var step, deltaSpan, score;
	    var scoreS      = [[5, 10], [10, 2], [50, 10], [100, 2]];
	    var reference   = [];
	    var debugLog    = [];
	    var expSpan     = expNum((max - min), 3);               // 3 位精度向上近似
	    var expMin      = expNum(min, -1, 1);
	    var expMax      = expNum(max, -1);
	    expFixTo(expMin, expSpan, 1);
	    expFixTo(expMax, expSpan);
	    span            = expMax.c - expMin.c;
	    expSpan.c       = span;
	    
	    for (var i      = trySecs.length; i--;) {
	        section     = trySecs[i];
	        step        = MATH_CEIL(span / section);
	        deltaSpan   = step * section - span;
	        score       = (deltaSpan + 3) * 3;                  // 误差越大得分越高
	        score      += (section - trySecs[0] + 2) * 2;       // 分段越多得分越高
	        if (section % 5 === 0) {                            // 段数为 5 可以减分
	            score  -= 10;
	        }
	        for (var j  = scoreS.length; j--;) {                // 好的步长是最重要的减分项
	            if (step % scoreS[j][0] === 0) {
	                score /= scoreS[j][1];
	            }
	        }
	        debugLog[i] = [section, step, deltaSpan, score].join();
	        reference[i] = {
	            secs:   section,
	            step:   step,
	            delta:  deltaSpan,
	            score:  score
	        };
	    }
	    //console.log(debugLog);
	    reference.sort(function (a, b) {return a.score - b.score;});
	    reference   = reference[0];
	    expMin.c    = MATH_ROUND(expMin.c - reference.delta / 2);
	    expMax.c    = MATH_ROUND(expMax.c + reference.delta / 2);
	    return makeResult(expMin.c, expMax.c, reference.secs, expSpan.e);
	}




	return smartSteps;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));





/***/ },
/* 543 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * Echarts, logarithmic axis reform
	 *
	 * @author sushuang (sushuang@baidu.com),
	 *         Ievgenii (@Ievgeny, ievgeny@zoomdata.com)
	 */

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function(require) {

	    // Reference
	    var number = __webpack_require__(509);
	    var Mt = Math;
	    var mathLog = Mt.log;
	    var mathPow = Mt.pow;
	    var mathAbs = Mt.abs;
	    var mathCeil = Mt.ceil;
	    var mathFloor = Mt.floor;

	    // Constant
	    var LOG_BASE = Mt.E; // It is not necessary to specify log base,
	                         // because log(logBase, x) = ln(x) / ln(logBase),
	                         // thus final result (axis tick location) is only determined by ln(x).
	    var LN10 = Mt.LN10;
	    var LN2 = Mt.LN2;
	    var LN2D10 = LN2 / LN10;
	    var EPSILON = 1e-9;
	    var DEFAULT_SPLIT_NUMBER = 5;
	    var MIN_BASE_10_SPLIT_NUMBER = 2;
	    var SUPERSCRIPTS = {
	        '0': '⁰',
	        '1': '¹',
	        '2': '²',
	        '3': '³',
	        '4': '⁴',
	        '5': '⁵',
	        '6': '⁶',
	        '7': '⁷',
	        '8': '⁸',
	        '9': '⁹',
	        '-': '⁻'
	    };

	    // Static variable
	    var logPositive;
	    var logLabelBase;
	    var logLabelMode; // enumeration:
	                      // 'plain' (i.e. axis labels are shown like 10000)
	                      // 'exponent' (i.e. axis labels are shown like 10²)
	    var lnBase;
	    var custOpts;
	    var splitNumber;
	    var logMappingOffset;
	    var absMin;
	    var absMax;
	    var tickList;

	    /**
	     * Test cases:
	     * [2, 4, 8, 16, 32, 64, 128]
	     * [0.01, 0.1, 10, 100, 1000] logLabelBase: 3
	     * [0.01, 0.1, 10, 100, 1000] logLabelBase: -12
	     * [-2, -4, -8, -16, -32, -64, -128] logLabelBase: 3
	     * [2, 4, 8, 16, '-', 64, 128]
	     * [2, 4, 8, 16, 32, 64]
	     * [2, 4, 8, 16, 32]
	     * [0.00000256, 0.0016, 0.04, 0.2]
	     * [0.1, 1, 10, 100, 1000, 10000, 100000, 1000000] splitNumber: 3
	     * [1331, 3434, 500, 1, 1212, 4]
	     * [0.14, 2, 45, 1001, 200, 0.33, 10001]
	     * [0.00001, 0.00005]
	     * [0.00001, 0.00005] boundaryGap: [0.2, 0.4]
	     * [0.001, 2, -45, 1001, 200, 0.33, 10000]
	     * [0.00000001, 0.00000012]
	     * [0.000000000000001]
	     * [0.00000001, 0.00000001]
	     * [3, 3]
	     * [12, -3, 47, 19]
	     * [12, -3, 47, 19] logPositive: false
	     * [-2, -4, -8, -16, -32, -64, -128]
	     * [-2, -4, -8, -16, -32, -64]
	     * [2, 4, 8, 16, 32] boundaryGap: [0.2, 0.4]
	     * []
	     * [0]
	     * [10, 10, 10]
	     * [0.00003, 0.00003, 0.00003]
	     * [0.00001, 0.00001, 0.00001]
	     * [-0.00001, -0.00001, -0.00001]
	     * ['-', '-']
	     * ['-', 10]
	     * logarithmic axis in scatter (try dataZoom)
	     * logarithmic axis width dataZoom component (try xAxis and yAxis)
	     */

	    /**
	     * Main function. Return data object with values for axis building.
	     *
	     * @public
	     * @param {Object} [opts] Configurable options
	     * @param {number} opts.dataMin data Minimum
	     * @param {number} opts.dataMax data Maximum
	     * @param {number=} opts.logPositive Logarithmic sign. If not specified, it will be auto-detected.
	     * @param {number=} opts.logLabelBase Logaithmic base in axis label.
	     *                                    If not specified, it will be set to 10 (and use 2 for detail)
	     * @param {number=} opts.splitNumber Number of sections perfered.
	     * @return {Object} {
	     *                      dataMin: New min,
	     *                      dataMax: New max,
	     *                      tickList: [Array of tick data]
	     *                      logPositive: Type of data sign
	     *                      dataMappingMethods: [Set of logarithmic methods]
	     *                  }
	     */
	    function smartLogSteps(opts) {
	        clearStaticVariables();
	        custOpts = opts || {};

	        reformSetting();
	        makeTicksList();

	        return [
	            makeResult(),
	            clearStaticVariables()
	        ][0];
	    }

	    /**
	     * All of static variables must be clear here.
	     */
	    function clearStaticVariables() {
	        logPositive = custOpts = logMappingOffset = lnBase =
	        absMin = absMax = splitNumber = tickList = logLabelBase = logLabelMode = null;
	    }

	    /**
	     * Determine sign (logPositive, negative) of data set, if not specified.
	     * Reform min and max of data.
	     */
	    function reformSetting() {
	        // Settings of log label base
	        logLabelBase = custOpts.logLabelBase;
	        if (logLabelBase == null) {
	            logLabelMode = 'plain';
	            logLabelBase = 10;
	            lnBase = LN10;
	        }
	        else {
	            logLabelBase = +logLabelBase;
	            if (logLabelBase < 1) { // log base less than 1 is not supported.
	                logLabelBase = 10;
	            }
	            logLabelMode = 'exponent';
	            lnBase = mathLog(logLabelBase);
	        }

	        // Settings of split number
	        splitNumber = custOpts.splitNumber;
	        splitNumber == null && (splitNumber = DEFAULT_SPLIT_NUMBER);

	        // Setting of data min and max
	        var dataMin = parseFloat(custOpts.dataMin);
	        var dataMax = parseFloat(custOpts.dataMax);

	        if (!isFinite(dataMin) && !isFinite(dataMax)) {
	            dataMin = dataMax = 1;
	        }
	        else if (!isFinite(dataMin)) {
	            dataMin = dataMax;
	        }
	        else if (!isFinite(dataMax)) {
	            dataMax = dataMin;
	        }
	        else if (dataMin > dataMax) {
	            dataMax = [dataMin, dataMin = dataMax][0]; // Exchange min, max.
	        }

	        // Settings of log positive
	        logPositive = custOpts.logPositive;
	        // If not specified, determine sign by data.
	        if (logPositive == null) {
	            // LogPositive is false when dataMax <= 0 && dataMin < 0.
	            // LogPositive is true when dataMin >= 0.
	            // LogPositive is true when dataMax >= 0 && dataMin < 0 (singular points may exists)
	            logPositive = dataMax > 0 || dataMin === 0;
	        }

	        // Settings of absMin and absMax, which must be greater than 0.
	        absMin = logPositive ? dataMin : -dataMax;
	        absMax = logPositive ? dataMax : -dataMin;
	        // FIXME
	        // If there is any data item less then zero, it is suppose to be igonred and min should be re-calculated.
	        // But it is difficult to do that in current code stucture.
	        // So refactor of xxAxis.js is desired.
	        absMin < EPSILON && (absMin = EPSILON);
	        absMax < EPSILON && (absMax = EPSILON);
	    }

	    /**
	     * Make tick list.
	     */
	    function makeTicksList() {
	        tickList = [];

	        // Estimate max exponent and min exponent
	        var maxDataLog = fixAccurate(mathLog(absMax) / lnBase);
	        var minDataLog = fixAccurate(mathLog(absMin) / lnBase);
	        var maxExpon = mathCeil(maxDataLog);
	        var minExpon = mathFloor(minDataLog);
	        var spanExpon = maxExpon - minExpon;
	        var spanDataLog = maxDataLog - minDataLog;

	        if (logLabelMode === 'exponent') {
	            baseAnalysis();
	        }
	        else { // logLabelMode === 'plain', we will self-adapter
	            !(
	                spanExpon <= MIN_BASE_10_SPLIT_NUMBER
	                && splitNumber > MIN_BASE_10_SPLIT_NUMBER
	            )
	                ? baseAnalysis() : detailAnalysis();
	        }

	        // In this situation, only draw base-10 ticks.
	        // Base-10 ticks: 10^h (i.e. 0.01, 0.1, 1, 10, 100, ...)
	        function baseAnalysis() {
	            if (spanExpon < splitNumber) {
	                splitNumber = spanExpon;
	            }
	            // Suppose:
	            //      spanExpon > splitNumber
	            //      stepExpon := floor(spanExpon / splitNumber)
	            //      splitNumberFloat := spanExpon / stepExpon
	            // There are tow expressions which are identically-true:
	            //      splitNumberFloat - splitNumber <= 1
	            //      stepExpon * ceil(splitNumberFloat) - spanExpon <= stepExpon
	            // So we can calculate as follows:
	            var stepExpon = mathFloor(fixAccurate(spanExpon / splitNumber));

	            // Put the plot in the middle of the min, max.
	            var splitNumberAdjust = mathCeil(fixAccurate(spanExpon / stepExpon));
	            var spanExponAdjust = stepExpon * splitNumberAdjust;
	            var halfDiff = (spanExponAdjust - spanDataLog) / 2;
	            var minExponAdjust = mathFloor(fixAccurate(minDataLog - halfDiff));

	            if (aroundZero(minExponAdjust - minDataLog)) {
	                minExponAdjust -= 1;
	            }

	            // Build logMapping offset
	            logMappingOffset = -minExponAdjust * lnBase;

	            // Build tickList
	            for (var n = minExponAdjust; n - stepExpon <= maxDataLog; n += stepExpon) {
	                tickList.push(mathPow(logLabelBase, n));
	            }
	        }

	        // In this situation, base-2|10 ticks are used to make detailed split.
	        // Base-2|10 ticks: 10^h * 2^k (i.e. 0.1, 0.2, 0.4, 1, 2, 4, 10, 20, 40),
	        // where k in [0, 1, 2].
	        // Because LN2 * 3 < LN10 and LN2 * 4 > LN10, k should be less than 3.
	        // And when k === 3, the tick is too close to that of k === 0, which looks weird.
	        // So we do not use 3.
	        function detailAnalysis() {
	            // Find max exponent and min exponent.
	            // Calculate base on 3-hexadecimal (0, 1, 2, 10, 11, 12, 20).
	            var minDecimal = toDecimalFrom4Hex(minExpon, 0);
	            var endDecimal = minDecimal + 2;
	            while (
	                minDecimal < endDecimal
	                && toH(minDecimal + 1) + toK(minDecimal + 1) * LN2D10 < minDataLog
	            ) {
	                minDecimal++;
	            }
	            var maxDecimal = toDecimalFrom4Hex(maxExpon, 0);
	            var endDecimal = maxDecimal - 2; // maxDecimal is greater than 4
	            while (
	                maxDecimal > endDecimal
	                && toH(maxDecimal - 1) + toK(maxDecimal - 1) * LN2D10 > maxDataLog
	            ) {
	                maxDecimal--;
	            }

	            // Build logMapping offset
	            logMappingOffset = -(toH(minDecimal) * LN10 + toK(minDecimal) * LN2);

	            // Build logMapping tickList
	            for (var i = minDecimal; i <= maxDecimal; i++) {
	                var h = toH(i);
	                var k = toK(i);
	                tickList.push(mathPow(10, h) * mathPow(2, k));
	            }
	        }

	        // Convert to decimal number from 4-hexadecimal number,
	        // where h, k means: if there is a 4-hexadecimal numer 23, then h is 2, k is 3.
	        // h can be any integer (notice: h can be greater than 10 or less than 0),
	        // and k belongs to [0, 1, 2, 3].
	        function toDecimalFrom4Hex(h, k) {
	            return h * 3 + k;
	        }

	        function toK(decimal) {
	            return decimal - toH(decimal) * 3; // Can not calculate by '%'
	        }

	        function toH(decimal) {
	            return mathFloor(fixAccurate(decimal / 3));
	        }
	    }

	    /**
	     * Make result
	     */
	    function makeResult() {
	        var resultTickList = [];
	        for (var i = 0, len = tickList.length; i < len; i++) {
	            resultTickList[i] = (logPositive ? 1 : -1) * tickList[i];
	        }
	        !logPositive && resultTickList.reverse();

	        var dataMappingMethods = makeDataMappingMethods();
	        var value2Coord = dataMappingMethods.value2Coord;

	        var newDataMin = value2Coord(resultTickList[0]);
	        var newDataMax = value2Coord(resultTickList[resultTickList.length - 1]);

	        if (newDataMin === newDataMax) {
	            newDataMin -= 1;
	            newDataMax += 1;
	        }

	        return {
	            dataMin: newDataMin,
	            dataMax: newDataMax,
	            tickList: resultTickList,
	            logPositive: logPositive,
	            labelFormatter: makeLabelFormatter(),
	            dataMappingMethods: dataMappingMethods
	        };
	    }

	    /**
	     * Make axis label formatter.
	     */
	    function makeLabelFormatter() {
	        if (logLabelMode === 'exponent') { // For label style like 3⁴.
	            // Static variables should be fixed in the scope of the methods.
	            var myLogLabelBase = logLabelBase;
	            var myLnBase = lnBase;

	            return function (value) {
	                if (!isFinite(parseFloat(value))) {
	                    return '';
	                }
	                var sign = '';
	                if (value < 0) {
	                    value = -value;
	                    sign = '-';
	                }
	                return sign + myLogLabelBase + makeSuperscriptExponent(mathLog(value) / myLnBase);
	            };
	        }
	        else {
	            return function (value) { // Normal style like 0.001, 10,000,0
	                if (!isFinite(parseFloat(value))) {
	                    return '';
	                }
	                return number.addCommas(formatNumber(value));
	            };
	        }
	    }

	    /**
	     * Make calculate methods.
	     */
	    function makeDataMappingMethods() {
	        // Static variables should be fixed in the scope of the methods.
	        var myLogPositive = logPositive;
	        var myLogMappingOffset = logMappingOffset;

	        return {
	            value2Coord: function (x) {
	                if (x == null || isNaN(x) || !isFinite(x)) {
	                    return x;
	                }
	                x = parseFloat(x); // to number
	                if (!isFinite(x)) {
	                    x = EPSILON;
	                }
	                else if (myLogPositive && x < EPSILON) {
	                    // FIXME
	                    // It is suppose to be ignore, but not be set to EPSILON. See comments above.
	                    x = EPSILON;
	                }
	                else if (!myLogPositive && x > -EPSILON) {
	                    x = -EPSILON;
	                }
	                x = mathAbs(x);
	                return (myLogPositive ? 1 : -1) * (mathLog(x) + myLogMappingOffset);
	            },
	            coord2Value: function (x) {
	                if (x == null || isNaN(x) || !isFinite(x)) {
	                    return x;
	                }
	                x = parseFloat(x); // to number
	                if (!isFinite(x)) {
	                    x = EPSILON;
	                }
	                return myLogPositive
	                    ? mathPow(LOG_BASE, x - myLogMappingOffset)
	                    : -mathPow(LOG_BASE, -x + myLogMappingOffset);
	            }
	        };
	    }

	    /**
	     * For example, Math.log(1000) / Math.LN10 get the result of 2.9999999999999996, rather than 3.
	     * This method trys to fix it.
	     * (accMath.div can not fix this problem yet.)
	     */
	    function fixAccurate(result) {
	        return +Number(+result).toFixed(14);
	    }

	    /**
	     * Avoid show float number like '1e-9', '-1e-10', ...
	     * @return {string}
	     */
	    function formatNumber(num) {
	        return Number(num).toFixed(15).replace(/\.?0*$/, '');
	    }

	    /**
	     * Make superscript exponent
	     */
	    function makeSuperscriptExponent(exponent) {
	        exponent = formatNumber(Math.round(exponent)); // Do not support float superscript.
	                                                       // (because I can not find superscript style of '.')
	        var result = [];
	        for (var i = 0, len = exponent.length; i < len; i++) {
	            var cha = exponent.charAt(i);
	            result.push(SUPERSCRIPTS[cha] || '');
	        }
	        return result.join('');
	    }

	    /**
	     * Decide whether near zero
	     */
	    function aroundZero(val) {
	        return val > -EPSILON && val < EPSILON;
	    }

	    return smartLogSteps;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 544 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * echarts组件： 网格
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	    var Base = __webpack_require__(508);
	    
	    // 图形依赖
	    var RectangleShape = __webpack_require__(476);
	    
	    var ecConfig = __webpack_require__(455);
	    // 网格
	    ecConfig.grid = {
	        zlevel: 0,                  // 一级层叠
	        z: 0,                       // 二级层叠
	        x: 80,
	        y: 60,
	        x2: 80,
	        y2: 60,
	        // width: {totalWidth} - x - x2,
	        // height: {totalHeight} - y - y2,
	        backgroundColor: 'rgba(0,0,0,0)',
	        borderWidth: 1,
	        borderColor: '#ccc'
	    };

	    var zrUtil = __webpack_require__(456);

	    /**
	     * 构造函数
	     * @param {Object} messageCenter echart消息中心
	     * @param {ZRender} zr zrender实例
	     * @param {Object} option 图表选项
	     *      @param {number=} option.grid.x 直角坐标系内绘图网格起始横坐标，数值单位px
	     *      @param {number=} option.grid.y 直角坐标系内绘图网格起始纵坐标，数值单位px
	     *      @param {number=} option.grid.width 直角坐标系内绘图网格宽度，数值单位px
	     *      @param {number=} option.grid.height 直角坐标系内绘图网格高度，数值单位px
	     */
	    function Grid(ecTheme, messageCenter, zr, option, myChart) {
	        Base.call(this, ecTheme, messageCenter, zr, option, myChart);

	        this.refresh(option);
	    }
	    
	    Grid.prototype = {
	        type: ecConfig.COMPONENT_TYPE_GRID,

	        getX: function () {
	            return this._x;
	        },

	        getY: function () {
	            return this._y;
	        },

	        getWidth: function () {
	            return this._width;
	        },

	        getHeight: function () {
	            return this._height;
	        },

	        getXend: function () {
	            return this._x + this._width;
	        },

	        getYend: function () {
	            return this._y + this._height;
	        },

	        getArea: function () {
	            return {
	                x: this._x,
	                y: this._y,
	                width: this._width,
	                height: this._height
	            };
	        },
	        
	        getBbox: function() {
	            return [
	                [ this._x, this._y ],
	                [ this.getXend(), this.getYend() ]
	            ];
	        },
	        
	        /**
	         * 实在找不到合适的地方做了，各种粗暴的写法~ -_-
	         */
	        refixAxisShape: function(component) {
	            var zeroX;
	            var zeroY;
	            var axisList = component.xAxis._axisList.concat(
	                component.yAxis ? component.yAxis._axisList : []
	            );
	            var len = axisList.length;
	            var axis;
	            while (len--) {
	                axis = axisList[len];
	                if (axis.type == ecConfig.COMPONENT_TYPE_AXIS_VALUE 
	                    && axis._min < 0  
	                    && axis._max >= 0
	                ) {
	                    axis.isHorizontal()
	                    ? (zeroX = axis.getCoord(0))
	                    : (zeroY = axis.getCoord(0));
	                }
	            }
	            if (typeof zeroX != 'undefined' || typeof zeroY != 'undefined') {
	                len = axisList.length;
	                while (len--) {
	                    axisList[len].refixAxisShape(zeroX, zeroY);
	                }
	            }
	        },
	        
	        refresh: function (newOption) {
	            if (newOption
	                || this._zrWidth != this.zr.getWidth() 
	                || this._zrHeight != this.zr.getHeight()
	            ) {
	                this.clear();
	                this.option = newOption || this.option;
	                this.option.grid = this.reformOption(this.option.grid);
	    
	                var gridOption = this.option.grid;
	                this._zrWidth = this.zr.getWidth();
	                this._zrHeight = this.zr.getHeight();
	                this._x = this.parsePercent(gridOption.x, this._zrWidth);
	                this._y = this.parsePercent(gridOption.y, this._zrHeight);
	                var x2 = this.parsePercent(gridOption.x2, this._zrWidth);
	                var y2 = this.parsePercent(gridOption.y2, this._zrHeight);
	                
	    
	                if (typeof gridOption.width == 'undefined') {
	                    this._width = this._zrWidth - this._x - x2;
	                }
	                else {
	                    this._width = this.parsePercent(gridOption.width, this._zrWidth);
	                }
	                this._width = this._width <= 0 ? 10 : this._width;
	    
	                if (typeof gridOption.height == 'undefined') {
	                    this._height = this._zrHeight - this._y - y2;
	                }
	                else {
	                    this._height = this.parsePercent(gridOption.height, this._zrHeight);
	                }
	                this._height = this._height <= 0 ? 10 : this._height;
	                
	                this._x = this.subPixelOptimize(this._x, gridOption.borderWidth);
	                this._y = this.subPixelOptimize(this._y, gridOption.borderWidth);
	    
	                this.shapeList.push(new RectangleShape({
	                    zlevel: this.getZlevelBase(),
	                    z: this.getZBase(),
	                    hoverable: false,
	                    style: {
	                        x: this._x,
	                        y: this._y,
	                        width: this._width,
	                        height: this._height,
	                        brushType: gridOption.borderWidth > 0 ? 'both' : 'fill',
	                        color: gridOption.backgroundColor,
	                        strokeColor: gridOption.borderColor,
	                        lineWidth: gridOption.borderWidth
	                        // type: this.option.splitArea.areaStyle.type,
	                    }
	                }));
	                this.zr.addShape(this.shapeList[0]);
	            }
	        }
	    };
	    
	    zrUtil.inherits(Grid, Base);
	    
	    __webpack_require__(516).define('grid', Grid);
	    
	    return Grid;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 545 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * echarts图表类：柱形图
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	    var ChartBase = __webpack_require__(485);
	    
	    // 图形依赖
	    var RectangleShape = __webpack_require__(476);
	    // 组件依赖
	    __webpack_require__(539);
	    __webpack_require__(544);
	    __webpack_require__(536);
	    
	    var ecConfig = __webpack_require__(455);
	    // 柱形图默认参数
	    ecConfig.bar = {
	        zlevel: 0,                  // 一级层叠
	        z: 2,                       // 二级层叠
	        clickable: true,
	        legendHoverLink: true,
	        // stack: null
	        xAxisIndex: 0,
	        yAxisIndex: 0,
	        barMinHeight: 0,          // 最小高度改为0
	        // barWidth: null,        // 默认自适应
	        barGap: '30%',            // 柱间距离，默认为柱形宽度的30%，可设固定值
	        barCategoryGap: '20%',    // 类目间柱形距离，默认为类目间距的20%，可设固定值
	        itemStyle: {
	            normal: {
	                // color: '各异',
	                barBorderColor: '#fff',       // 柱条边线
	                barBorderRadius: 0,           // 柱条边线圆角，单位px，默认为0
	                barBorderWidth: 0,            // 柱条边线线宽，单位px，默认为1
	                label: {
	                    show: false
	                    // formatter: 标签文本格式器，同Tooltip.formatter，不支持异步回调
	                    // position: 默认自适应，水平布局为'top'，垂直布局为'right'，可选为
	                    //           'inside'|'left'|'right'|'top'|'bottom'
	                    // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE
	                }
	            },
	            emphasis: {
	                // color: '各异',
	                barBorderColor: '#fff',            // 柱条边线
	                barBorderRadius: 0,                // 柱条边线圆角，单位px，默认为0
	                barBorderWidth: 0,                 // 柱条边线线宽，单位px，默认为1
	                label: {
	                    show: false
	                    // formatter: 标签文本格式器，同Tooltip.formatter，不支持异步回调
	                    // position: 默认自适应，水平布局为'top'，垂直布局为'right'，可选为
	                    //           'inside'|'left'|'right'|'top'|'bottom'
	                    // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE
	                }
	            }
	        }
	    };

	    var ecData = __webpack_require__(503);
	    var zrUtil = __webpack_require__(456);
	    var zrColor = __webpack_require__(475);
	    
	    /**
	     * 构造函数
	     * @param {Object} messageCenter echart消息中心
	     * @param {ZRender} zr zrender实例
	     * @param {Object} series 数据
	     * @param {Object} component 组件
	     */
	    function Bar(ecTheme, messageCenter, zr, option, myChart){
	        // 图表基类
	        ChartBase.call(this, ecTheme, messageCenter, zr, option, myChart);
	        
	        this.refresh(option);
	    }
	    
	    Bar.prototype = {
	        type: ecConfig.CHART_TYPE_BAR,
	        /**
	         * 绘制图形
	         */
	        _buildShape: function () {
	            this._buildPosition();
	        },
	        
	        _buildNormal: function(seriesArray, maxDataLength, locationMap, xMarkMap, orient) {
	            var series = this.series;
	            // 确定类目轴和数值轴，同一方向随便找一个即可
	            var seriesIndex = locationMap[0][0];
	            var serie = series[seriesIndex];
	            var isHorizontal = orient == 'horizontal';
	            var xAxis = this.component.xAxis;
	            var yAxis = this.component.yAxis;
	            var categoryAxis = isHorizontal 
	                               ? xAxis.getAxis(serie.xAxisIndex)
	                               : yAxis.getAxis(serie.yAxisIndex);
	            var valueAxis;  // 数值轴各异

	            var size = this._mapSize(categoryAxis, locationMap);
	            var gap = size.gap;
	            var barGap = size.barGap;
	            var barWidthMap = size.barWidthMap;
	            var barMaxWidthMap = size.barMaxWidthMap;
	            var barWidth = size.barWidth;                   // 自适应宽度
	            var barMinHeightMap = size.barMinHeightMap;
	            var barHeight;
	            var curBarWidth;
	            var interval = size.interval;

	            var x;
	            var y;
	            var lastP; // 正向堆积处理
	            var baseP;
	            var lastN; // 负向堆积处理
	            var baseN;
	            var barShape;
	            var data;
	            var value;
	            var islandR = this.deepQuery([this.ecTheme, ecConfig], 'island.r');
	            for (var i = 0, l = maxDataLength; i < l; i++) {
	                if (categoryAxis.getNameByIndex(i) == null) {
	                    // 系列数据超出类目轴长度
	                    break;
	                }
	                isHorizontal
	                    ? (x = categoryAxis.getCoordByIndex(i) - gap / 2)
	                    : (y = categoryAxis.getCoordByIndex(i) + gap / 2);

	                for (var j = 0, k = locationMap.length; j < k; j++) {
	                    // 堆积数据用第一条valueAxis
	                    var yAxisIndex = series[locationMap[j][0]].yAxisIndex || 0;
	                    var xAxisIndex = series[locationMap[j][0]].xAxisIndex || 0;
	                    valueAxis = isHorizontal 
	                                ? yAxis.getAxis(yAxisIndex)
	                                : xAxis.getAxis(xAxisIndex);
	                    baseP = lastP = baseN = lastN = valueAxis.getCoord(0);
	                    for (var m = 0, n = locationMap[j].length; m < n; m++) {
	                        seriesIndex = locationMap[j][m];
	                        serie = series[seriesIndex];
	                        data = serie.data[i];
	                        value = this.getDataFromOption(data, '-');
	                        xMarkMap[seriesIndex] = xMarkMap[seriesIndex] 
	                                                || {
	                                                    min: Number.POSITIVE_INFINITY,
	                                                    max: Number.NEGATIVE_INFINITY,
	                                                    sum: 0,
	                                                    counter: 0,
	                                                    average: 0
	                                                };
	                        curBarWidth = Math.min(
	                            barMaxWidthMap[seriesIndex] || Number.MAX_VALUE,
	                            barWidthMap[seriesIndex] || barWidth
	                        );
	                        if (value === '-') {
	                            // 空数据在做完后补充拖拽提示框
	                            continue;
	                        }
	                        if (value > 0) {
	                            // 正向堆积
	                            barHeight = m > 0 
	                                        ? valueAxis.getCoordSize(value)
	                                        : (
	                                            isHorizontal
	                                            ? (baseP - valueAxis.getCoord(value))
	                                            : (valueAxis.getCoord(value) - baseP)
	                                        );
	                            // 非堆积数据最小高度有效
	                            if (n === 1 && barMinHeightMap[seriesIndex] > barHeight) {
	                                barHeight = barMinHeightMap[seriesIndex];
	                            }
	                            if (isHorizontal) {
	                                lastP -= barHeight;
	                                y = lastP;
	                            }
	                            else {
	                                x = lastP;
	                                lastP += barHeight;
	                            }
	                        }
	                        else if (value < 0){
	                            // 负向堆积
	                            barHeight = m > 0 
	                                        ? valueAxis.getCoordSize(value)
	                                        : (
	                                            isHorizontal
	                                            ? (valueAxis.getCoord(value) - baseN)
	                                            : (baseN - valueAxis.getCoord(value))
	                                        );
	                            // 非堆积数据最小高度有效
	                            if (n === 1 && barMinHeightMap[seriesIndex] > barHeight) {
	                                barHeight = barMinHeightMap[seriesIndex];
	                            }
	                            if (isHorizontal) {
	                                y = lastN;
	                                lastN += barHeight;
	                            }
	                            else {
	                                lastN -= barHeight;
	                                x = lastN;
	                            }
	                        }
	                        else {
	                            // 0值
	                            barHeight = 0;
	                            // 最小高度无效
	                            if (isHorizontal) {
	                                lastP -= barHeight;
	                                y = lastP;
	                            }
	                            else {
	                                x = lastP;
	                                lastP += barHeight;
	                            }
	                        }
	                        xMarkMap[seriesIndex][i] = isHorizontal
	                                                   ? (x + curBarWidth / 2) 
	                                                   : (y - curBarWidth / 2);
	                        if (xMarkMap[seriesIndex].min > value) {
	                            xMarkMap[seriesIndex].min = value;
	                            if (isHorizontal) {
	                                xMarkMap[seriesIndex].minY = y;
	                                xMarkMap[seriesIndex].minX = xMarkMap[seriesIndex][i];
	                            }
	                            else {
	                                xMarkMap[seriesIndex].minX = x + barHeight;
	                                xMarkMap[seriesIndex].minY = xMarkMap[seriesIndex][i];
	                            }
	                        }
	                        if (xMarkMap[seriesIndex].max < value) {
	                            xMarkMap[seriesIndex].max = value;
	                            if (isHorizontal) {
	                                xMarkMap[seriesIndex].maxY = y;
	                                xMarkMap[seriesIndex].maxX = xMarkMap[seriesIndex][i];
	                            }
	                            else {
	                                xMarkMap[seriesIndex].maxX = x + barHeight;
	                                xMarkMap[seriesIndex].maxY = xMarkMap[seriesIndex][i];
	                            }
	                            
	                        }
	                        xMarkMap[seriesIndex].sum += value;
	                        xMarkMap[seriesIndex].counter++;
	                        
	                        if (i % interval === 0) {
	                            barShape = this._getBarItem(
	                                seriesIndex, i,
	                                categoryAxis.getNameByIndex(i),
	                                x,
	                                y - (isHorizontal ? 0 : curBarWidth),
	                                isHorizontal ? curBarWidth : barHeight,
	                                isHorizontal ? barHeight : curBarWidth,
	                                isHorizontal ? 'vertical' : 'horizontal'
	                            );
	                            this.shapeList.push(new RectangleShape(barShape));
	                        }
	                    }

	                    // 补充空数据的拖拽提示框
	                    for (var m = 0, n = locationMap[j].length; m < n; m++) {
	                        seriesIndex = locationMap[j][m];
	                        serie = series[seriesIndex];
	                        data = serie.data[i];
	                        value = this.getDataFromOption(data, '-');
	                        curBarWidth = Math.min(
	                            barMaxWidthMap[seriesIndex] || Number.MAX_VALUE,
	                            barWidthMap[seriesIndex] || barWidth
	                        );
	                        if (value != '-') {
	                            // 只关心空数据
	                            continue;
	                        }

	                        if (this.deepQuery([data, serie, this.option], 'calculable')) {
	                            if (isHorizontal) {
	                                lastP -= islandR;
	                                y = lastP;
	                            }
	                            else {
	                                x = lastP;
	                                lastP += islandR;
	                            }
	                            
	                            barShape = this._getBarItem(
	                                seriesIndex, i,
	                                categoryAxis.getNameByIndex(i),
	                                x,
	                                y - (isHorizontal ? 0 : curBarWidth),
	                                isHorizontal ? curBarWidth : islandR,
	                                isHorizontal ? islandR : curBarWidth,
	                                isHorizontal ? 'vertical' : 'horizontal'
	                            );
	                            barShape.hoverable = false;
	                            barShape.draggable = false;
	                            barShape.style.lineWidth = 1;
	                            barShape.style.brushType = 'stroke';
	                            barShape.style.strokeColor = serie.calculableHolderColor
	                                                         || this.ecTheme.calculableHolderColor
	                                                         || ecConfig.calculableHolderColor;

	                            this.shapeList.push(new RectangleShape(barShape));
	                        }
	                    }
	                    isHorizontal
	                        ? (x += (curBarWidth + barGap))
	                        : (y -= (curBarWidth + barGap));
	                }
	            }
	            
	            this._calculMarkMapXY(xMarkMap, locationMap, isHorizontal ? 'y' : 'x');
	        },
	        /**
	         * 构建类目轴为水平方向的柱形图系列
	         */
	        _buildHorizontal: function (seriesArray, maxDataLength, locationMap, xMarkMap) {
	            return this._buildNormal(
	                seriesArray, maxDataLength, locationMap, xMarkMap, 'horizontal'
	            );
	        },

	        /**
	         * 构建类目轴为垂直方向的柱形图系列
	         */
	        _buildVertical: function (seriesArray, maxDataLength, locationMap, xMarkMap) {
	            return this._buildNormal(
	                seriesArray, maxDataLength, locationMap, xMarkMap, 'vertical'
	            );
	        },
	        
	        /**
	         * 构建双数值轴柱形图
	         */
	        _buildOther: function (seriesArray, maxDataLength, locationMap, xMarkMap) {
	            var series = this.series;
	            
	            for (var j = 0, k = locationMap.length; j < k; j++) {
	                for (var m = 0, n = locationMap[j].length; m < n; m++) {
	                    var seriesIndex = locationMap[j][m];
	                    var serie = series[seriesIndex];
	                    var xAxisIndex = serie.xAxisIndex || 0;
	                    var xAxis = this.component.xAxis.getAxis(xAxisIndex);
	                    var baseX = xAxis.getCoord(0);
	                    var yAxisIndex = serie.yAxisIndex || 0;
	                    var yAxis = this.component.yAxis.getAxis(yAxisIndex);
	                    var baseY = yAxis.getCoord(0);
	                    
	                    xMarkMap[seriesIndex] = xMarkMap[seriesIndex] 
	                                            || {
	                                                min0: Number.POSITIVE_INFINITY,
	                                                min1: Number.POSITIVE_INFINITY,
	                                                max0: Number.NEGATIVE_INFINITY,
	                                                max1: Number.NEGATIVE_INFINITY,
	                                                sum0: 0,
	                                                sum1: 0,
	                                                counter0: 0,
	                                                counter1: 0,
	                                                average0: 0,
	                                                average1: 0
	                                            };

	                    for (var i = 0, l = serie.data.length; i < l; i++) {
	                        var data = serie.data[i];
	                        var value = this.getDataFromOption(data, '-');
	                        if (!(value instanceof Array)) {
	                            continue;
	                        }
	                        
	                        var x = xAxis.getCoord(value[0]);
	                        var y = yAxis.getCoord(value[1]);
	                        
	                        var queryTarget = [data, serie];
	                        var barWidth = this.deepQuery(queryTarget, 'barWidth') || 10; // 默认柱形
	                        var barHeight = this.deepQuery(queryTarget, 'barHeight');
	                        var orient;
	                        var barShape;
	                        
	                        if (barHeight != null) {
	                            // 条形图
	                            orient = 'horizontal';
	                            
	                            if (value[0] > 0) {
	                                // 正向
	                                barWidth = x - baseX;
	                                x -= barWidth;
	                            }
	                            else if (value[0] < 0){
	                                // 负向
	                                barWidth = baseX - x;
	                            }
	                            else {
	                                // 0值
	                                barWidth = 0;
	                            }
	                            
	                            barShape = this._getBarItem(
	                                seriesIndex, i,
	                                value[0],
	                                x, 
	                                y - barHeight / 2,
	                                barWidth,
	                                barHeight,
	                                orient
	                            );
	                        }
	                        else {
	                            // 柱形
	                            orient = 'vertical';
	                            
	                            if (value[1] > 0) {
	                            // 正向
	                                barHeight = baseY - y;
	                            }
	                            else if (value[1] < 0){
	                                // 负向
	                                barHeight = y - baseY;
	                                y -= barHeight;
	                            }
	                            else {
	                                // 0值
	                                barHeight = 0;
	                            }
	                            barShape = this._getBarItem(
	                                seriesIndex, i,
	                                value[0],
	                                x - barWidth / 2, 
	                                y,
	                                barWidth,
	                                barHeight,
	                                orient
	                            );
	                        }
	                        this.shapeList.push(new RectangleShape(barShape));
	                        
	                        
	                        x = xAxis.getCoord(value[0]);
	                        y = yAxis.getCoord(value[1]);
	                        if (xMarkMap[seriesIndex].min0 > value[0]) {
	                            xMarkMap[seriesIndex].min0 = value[0];
	                            xMarkMap[seriesIndex].minY0 = y;
	                            xMarkMap[seriesIndex].minX0 = x;
	                        }
	                        if (xMarkMap[seriesIndex].max0 < value[0]) {
	                            xMarkMap[seriesIndex].max0 = value[0];
	                            xMarkMap[seriesIndex].maxY0 = y;
	                            xMarkMap[seriesIndex].maxX0 = x;
	                        }
	                        xMarkMap[seriesIndex].sum0 += value[0];
	                        xMarkMap[seriesIndex].counter0++;
	                        
	                        if (xMarkMap[seriesIndex].min1 > value[1]) {
	                            xMarkMap[seriesIndex].min1 = value[1];
	                            xMarkMap[seriesIndex].minY1 = y;
	                            xMarkMap[seriesIndex].minX1 = x;
	                        }
	                        if (xMarkMap[seriesIndex].max1 < value[1]) {
	                            xMarkMap[seriesIndex].max1 = value[1];
	                            xMarkMap[seriesIndex].maxY1 = y;
	                            xMarkMap[seriesIndex].maxX1 = x;
	                        }
	                        xMarkMap[seriesIndex].sum1 += value[1];
	                        xMarkMap[seriesIndex].counter1++;
	                    }
	                }
	            }
	            
	            this._calculMarkMapXY(xMarkMap, locationMap, 'xy');
	        },
	        
	        /**
	         * 我真是自找麻烦啊，为啥要允许系列级个性化最小宽度和高度啊！！！
	         * @param {CategoryAxis} categoryAxis 类目坐标轴，需要知道类目间隔大小
	         * @param {Array} locationMap 整形数据的系列索引
	         */
	        _mapSize: function (categoryAxis, locationMap, ignoreUserDefined) {
	            var res = this._findSpecialBarSzie(locationMap, ignoreUserDefined);
	            var barWidthMap = res.barWidthMap;
	            var barMaxWidthMap = res.barMaxWidthMap;
	            var barMinHeightMap = res.barMinHeightMap;
	            var sBarWidthCounter = res.sBarWidthCounter;    // 用户指定
	            var sBarWidthTotal = res.sBarWidthTotal;        // 用户指定
	            var barGap = res.barGap;
	            var barCategoryGap = res.barCategoryGap;
	            
	            var gap;
	            var barWidth;
	            var interval = 1;
	            if (locationMap.length != sBarWidthCounter) {
	                // 至少存在一个自适应宽度的柱形图
	                if (!ignoreUserDefined) {
	                    gap = typeof barCategoryGap === 'string' && barCategoryGap.match(/%$/)
	                          // 百分比
	                          ? ((categoryAxis.getGap() * (100 - parseFloat(barCategoryGap)) / 100).toFixed(2) - 0)
	                          // 数值
	                          : (categoryAxis.getGap() - barCategoryGap);
	                    if (typeof barGap === 'string' && barGap.match(/%$/)) {
	                        barGap = parseFloat(barGap) / 100;
	                        barWidth = +(
	                            (gap - sBarWidthTotal) / (
	                                (locationMap.length - 1) * barGap + locationMap.length - sBarWidthCounter
	                            )
	                        ).toFixed(2);
	                        barGap = barWidth * barGap;
	                    }
	                    else {
	                        barGap = parseFloat(barGap);
	                        barWidth = +(
	                            (gap - sBarWidthTotal - barGap * (locationMap.length - 1)) / (
	                                locationMap.length - sBarWidthCounter
	                            )
	                        ).toFixed(2);
	                    }
	                    // 无法满足用户定义的宽度设计，忽略用户宽度，打回重做
	                    if (barWidth <= 0) {
	                        return this._mapSize(categoryAxis, locationMap, true);
	                    }
	                }
	                else {
	                    // 忽略用户定义的宽度设定
	                    gap = categoryAxis.getGap();
	                    barGap = 0;
	                    barWidth = +(gap / locationMap.length).toFixed(2);
	                    // 已经忽略用户定义的宽度设定依然还无法满足显示，只能硬来了;
	                    if (barWidth <= 0) {
	                        interval = Math.floor(locationMap.length / gap);
	                        barWidth = 1;
	                    }
	                }
	            }
	            else {
	                // 全是自定义宽度，barGap无效，系列间隔决定barGap
	                gap = sBarWidthCounter > 1
	                      ? (typeof barCategoryGap === 'string' && barCategoryGap.match(/%$/))
	                          // 百分比
	                          ? +(categoryAxis.getGap() * (100 - parseFloat(barCategoryGap)) / 100).toFixed(2)
	                          // 数值
	                          : (categoryAxis.getGap() - barCategoryGap)
	                      // 只有一个
	                      : sBarWidthTotal;
	                barWidth = 0;
	                barGap = sBarWidthCounter > 1 
	                         ? +((gap - sBarWidthTotal) / (sBarWidthCounter - 1)).toFixed(2)
	                         : 0;
	                if (barGap < 0) {
	                    // 无法满足用户定义的宽度设计，忽略用户宽度，打回重做
	                    return this._mapSize(categoryAxis, locationMap, true);
	                }
	            }
	            
	            // 检查是否满足barMaxWidthMap
	            
	            return this._recheckBarMaxWidth(
	                locationMap,
	                barWidthMap, barMaxWidthMap, barMinHeightMap,
	                gap,   // 总宽度
	                barWidth, barGap, interval
	            );
	        },
	        
	        /**
	         * 计算堆积下用户特殊指定的各种size 
	         */
	        _findSpecialBarSzie: function(locationMap, ignoreUserDefined) {
	            var series = this.series;
	            var barWidthMap = {};
	            var barMaxWidthMap = {};
	            var barMinHeightMap = {};
	            var sBarWidth;              // 用户指定
	            var sBarMaxWidth;           // 用户指定
	            var sBarWidthCounter = 0;   // 用户指定
	            var sBarWidthTotal = 0;     // 用户指定
	            var barGap;
	            var barCategoryGap;
	            for (var j = 0, k = locationMap.length; j < k; j++) {
	                var hasFound = {
	                    barWidth: false,
	                    barMaxWidth: false
	                };
	                for (var m = 0, n = locationMap[j].length; m < n; m++) {
	                    var seriesIndex = locationMap[j][m];
	                    var queryTarget = series[seriesIndex];
	                    if (!ignoreUserDefined) {
	                        if (!hasFound.barWidth) {
	                            sBarWidth = this.query(queryTarget, 'barWidth');
	                            if (sBarWidth != null) {
	                                // 同一堆积第一个生效barWidth
	                                barWidthMap[seriesIndex] = sBarWidth;
	                                sBarWidthTotal += sBarWidth;
	                                sBarWidthCounter++;
	                                hasFound.barWidth = true;
	                                // 复位前面同一堆积但没被定义的
	                                for (var ii = 0, ll = m; ii < ll; ii++) {
	                                    var pSeriesIndex = locationMap[j][ii];
	                                    barWidthMap[pSeriesIndex] = sBarWidth;
	                                }
	                            }
	                        }
	                        else {
	                            barWidthMap[seriesIndex] = sBarWidth;   // 用找到的一个
	                        }
	                        
	                        if (!hasFound.barMaxWidth) {
	                            sBarMaxWidth = this.query(queryTarget, 'barMaxWidth');
	                            if (sBarMaxWidth != null) {
	                                // 同一堆积第一个生效barMaxWidth
	                                barMaxWidthMap[seriesIndex] = sBarMaxWidth;
	                                hasFound.barMaxWidth = true;
	                                // 复位前面同一堆积但没被定义的
	                                for (var ii = 0, ll = m; ii < ll; ii++) {
	                                    var pSeriesIndex = locationMap[j][ii];
	                                    barMaxWidthMap[pSeriesIndex] = sBarMaxWidth;
	                                }
	                            }
	                        }
	                        else {
	                            barMaxWidthMap[seriesIndex] = sBarMaxWidth;   // 用找到的一个
	                        }
	                    }

	                    barMinHeightMap[seriesIndex] = this.query(queryTarget, 'barMinHeight');
	                    barGap = barGap != null ? barGap : this.query(queryTarget, 'barGap');
	                    barCategoryGap = barCategoryGap != null 
	                                     ? barCategoryGap : this.query(queryTarget, 'barCategoryGap');
	                }
	            }
	            
	            return {
	                barWidthMap: barWidthMap,
	                barMaxWidthMap: barMaxWidthMap,
	                barMinHeightMap: barMinHeightMap,
	                sBarWidth: sBarWidth,
	                sBarMaxWidth: sBarMaxWidth,
	                sBarWidthCounter: sBarWidthCounter,
	                sBarWidthTotal: sBarWidthTotal,
	                barGap: barGap,
	                barCategoryGap: barCategoryGap
	            };
	        },
	        
	        /**
	         * 检查是否满足barMaxWidthMap 
	         */
	        _recheckBarMaxWidth: function(
	                locationMap,
	                barWidthMap, barMaxWidthMap, barMinHeightMap,
	                gap,   // 总宽度
	                barWidth, barGap, interval
	        ) {
	            for (var j = 0, k = locationMap.length; j < k; j++) {
	                var seriesIndex = locationMap[j][0];
	                if (barMaxWidthMap[seriesIndex] && barMaxWidthMap[seriesIndex] < barWidth) {
	                    // 不满足最大宽度
	                    gap -= barWidth - barMaxWidthMap[seriesIndex]; // 总宽度减少
	                }
	            }
	            
	            return {
	                barWidthMap: barWidthMap,
	                barMaxWidthMap: barMaxWidthMap,
	                barMinHeightMap: barMinHeightMap ,
	                gap: gap,   // 总宽度
	                barWidth: barWidth,
	                barGap: barGap,
	                interval: interval
	            };
	        },
	        
	        /**
	         * 生成最终图形数据
	         */
	        _getBarItem: function (seriesIndex, dataIndex, name, x, y, width, height, orient) {
	            var series = this.series;
	            var barShape;
	            var serie = series[seriesIndex];
	            var data = serie.data[dataIndex];
	            // 多级控制
	            var defaultColor = this._sIndex2ColorMap[seriesIndex];
	            var queryTarget = [data, serie];
	            
	            var normal = this.deepMerge(queryTarget, 'itemStyle.normal');
	            var emphasis = this.deepMerge(queryTarget, 'itemStyle.emphasis');
	            var normalBorderWidth = normal.barBorderWidth;
	            
	            barShape = {
	                zlevel: serie.zlevel,
	                z: serie.z,
	                clickable: this.deepQuery(queryTarget, 'clickable'),
	                style: {
	                    x: x,
	                    y: y,
	                    width: width,
	                    height: height,
	                    brushType: 'both',
	                    color: this.getItemStyleColor(
	                        this.deepQuery(queryTarget, 'itemStyle.normal.color') || defaultColor,
	                        seriesIndex, dataIndex, data
	                    ),
	                    radius: normal.barBorderRadius,
	                    lineWidth: normalBorderWidth,
	                    strokeColor: normal.barBorderColor
	                },
	                highlightStyle: {
	                    color: this.getItemStyleColor(
	                        this.deepQuery(queryTarget, 'itemStyle.emphasis.color'),
	                        seriesIndex, dataIndex, data
	                    ),
	                    radius: emphasis.barBorderRadius,
	                    lineWidth: emphasis.barBorderWidth,
	                    strokeColor: emphasis.barBorderColor
	                },
	                _orient: orient
	            };
	            var barShapeStyle = barShape.style;
	            barShape.highlightStyle.color = barShape.highlightStyle.color
	                            || (typeof barShapeStyle.color === 'string'
	                                ? zrColor.lift(barShapeStyle.color, -0.3)
	                                : barShapeStyle.color
	                               );
	            //亚像素优化
	            barShapeStyle.x = Math.floor(barShapeStyle.x);
	            barShapeStyle.y = Math.floor(barShapeStyle.y);
	            barShapeStyle.height = Math.ceil(barShapeStyle.height);
	            barShapeStyle.width = Math.ceil(barShapeStyle.width);
	            // 考虑线宽的显示优化
	            if (normalBorderWidth > 0
	                && barShapeStyle.height > normalBorderWidth
	                && barShapeStyle.width > normalBorderWidth
	            ) {
	                barShapeStyle.y += normalBorderWidth / 2;
	                barShapeStyle.height -= normalBorderWidth;
	                barShapeStyle.x += normalBorderWidth / 2;
	                barShapeStyle.width -= normalBorderWidth;
	            }
	            else {
	                // 太小了或者线宽小于0，废了边线
	                barShapeStyle.brushType = 'fill';
	            }
	            
	            barShape.highlightStyle.textColor = barShape.highlightStyle.color;
	            
	            barShape = this.addLabel(barShape, serie, data, name, orient);
	            var barShapeStyleList = [                    // normal emphasis都需要检查
	                barShapeStyle,
	                barShape.highlightStyle
	            ];
	            for (var i = 0, l = barShapeStyleList.length; i < l; i++) {
	                var textPosition = barShapeStyleList[i].textPosition;
	                if (textPosition === 'insideLeft'
	                    || textPosition === 'insideRight'
	                    || textPosition === 'insideTop'
	                    || textPosition === 'insideBottom'
	                ) {
	                    var gap = 5;
	                    switch (textPosition) {
	                        case 'insideLeft':
	                            barShapeStyleList[i].textX = barShapeStyle.x + gap;
	                            barShapeStyleList[i].textY = barShapeStyle.y + barShapeStyle.height / 2;
	                            barShapeStyleList[i].textAlign = 'left';
	                            barShapeStyleList[i].textBaseline = 'middle';
	                            break;
	                        case 'insideRight':
	                            barShapeStyleList[i].textX = barShapeStyle.x + barShapeStyle.width - gap;
	                            barShapeStyleList[i].textY = barShapeStyle.y + barShapeStyle.height / 2;
	                            barShapeStyleList[i].textAlign = 'right';
	                            barShapeStyleList[i].textBaseline = 'middle';
	                            break;
	                        case 'insideTop':
	                            barShapeStyleList[i].textX = barShapeStyle.x + barShapeStyle.width / 2;
	                            barShapeStyleList[i].textY = barShapeStyle.y + gap / 2;
	                            barShapeStyleList[i].textAlign = 'center';
	                            barShapeStyleList[i].textBaseline = 'top';
	                            break;
	                        case 'insideBottom':
	                            barShapeStyleList[i].textX = barShapeStyle.x + barShapeStyle.width / 2;
	                            barShapeStyleList[i].textY = barShapeStyle.y + barShapeStyle.height - gap / 2;
	                            barShapeStyleList[i].textAlign = 'center';
	                            barShapeStyleList[i].textBaseline = 'bottom';
	                            break;
	                    }
	                    barShapeStyleList[i].textPosition = 'specific';
	                    barShapeStyleList[i].textColor = barShapeStyleList[i].textColor || '#fff';
	                }
	            }
	            

	            if (this.deepQuery([data, serie, this.option],'calculable')) {
	                this.setCalculable(barShape);
	                barShape.draggable = true;
	            }

	            ecData.pack(
	                barShape,
	                series[seriesIndex], seriesIndex,
	                series[seriesIndex].data[dataIndex], dataIndex,
	                name
	            );

	            return barShape;
	        },

	        // 位置转换
	        getMarkCoord: function (seriesIndex, mpData) {
	            var serie = this.series[seriesIndex];
	            var xMarkMap = this.xMarkMap[seriesIndex];
	            var xAxis = this.component.xAxis.getAxis(serie.xAxisIndex);
	            var yAxis = this.component.yAxis.getAxis(serie.yAxisIndex);
	            var dataIndex;
	            var pos;
	            if (mpData.type
	                && (mpData.type === 'max' || mpData.type === 'min' || mpData.type === 'average')
	            ) {
	                // 特殊值内置支持
	                var valueIndex = mpData.valueIndex != null 
	                                 ? mpData.valueIndex 
	                                 : xMarkMap.maxX0 != null 
	                                   ? '1' : '';
	                pos = [
	                    xMarkMap[mpData.type + 'X' + valueIndex],
	                    xMarkMap[mpData.type + 'Y' + valueIndex],
	                    xMarkMap[mpData.type + 'Line' + valueIndex],
	                    xMarkMap[mpData.type + valueIndex]
	                ];
	            }
	            else if (xMarkMap.isHorizontal) {
	                // 横向
	                dataIndex = typeof mpData.xAxis === 'string' && xAxis.getIndexByName
	                            ? xAxis.getIndexByName(mpData.xAxis)
	                            : (mpData.xAxis || 0);
	                
	                var x = xMarkMap[dataIndex];
	                x = x != null
	                    ? x 
	                    : typeof mpData.xAxis != 'string' && xAxis.getCoordByIndex
	                      ? xAxis.getCoordByIndex(mpData.xAxis || 0)
	                      : xAxis.getCoord(mpData.xAxis || 0);
	                
	                pos = [x, yAxis.getCoord(mpData.yAxis || 0)];
	            }
	            else {
	                // 纵向
	                dataIndex = typeof mpData.yAxis === 'string' && yAxis.getIndexByName
	                            ? yAxis.getIndexByName(mpData.yAxis)
	                            : (mpData.yAxis || 0);
	                
	                var y = xMarkMap[dataIndex];
	                y = y != null
	                    ? y
	                    : typeof mpData.yAxis != 'string' && yAxis.getCoordByIndex
	                      ? yAxis.getCoordByIndex(mpData.yAxis || 0)
	                      : yAxis.getCoord(mpData.yAxis || 0);
	                
	                pos = [xAxis.getCoord(mpData.xAxis || 0), y];
	            }
	            
	            return pos;
	        },
	        
	        /**
	         * 刷新
	         */
	        refresh: function (newOption) {
	            if (newOption) {
	                this.option = newOption;
	                this.series = newOption.series;
	            }
	            
	            this.backupShapeList();
	            this._buildShape();
	        },
	        
	        /**
	         * 动态数据增加动画 
	         */
	        addDataAnimation: function (params, done) {
	            var series = this.series;
	            var aniMap = {}; // seriesIndex索引参数
	            for (var i = 0, l = params.length; i < l; i++) {
	                aniMap[params[i][0]] = params[i];
	            }
	            var x;
	            var dx;
	            var y;
	            var dy;
	            var serie;
	            var seriesIndex;
	            var dataIndex;

	            var aniCount = 0;
	            function animationDone() {
	                aniCount--;
	                if (aniCount === 0) {
	                    done && done();
	                }
	            }
	            for (var i = this.shapeList.length - 1; i >= 0; i--) {
	                seriesIndex = ecData.get(this.shapeList[i], 'seriesIndex');
	                if (aniMap[seriesIndex] && !aniMap[seriesIndex][3]) {
	                    // 有数据删除才有移动的动画
	                    if (this.shapeList[i].type === 'rectangle') {
	                        // 主动画
	                        dataIndex = ecData.get(this.shapeList[i], 'dataIndex');
	                        serie = series[seriesIndex];
	                        if (aniMap[seriesIndex][2] && dataIndex === serie.data.length - 1) {
	                            // 队头加入删除末尾
	                            this.zr.delShape(this.shapeList[i].id);
	                            continue;
	                        }
	                        else if (!aniMap[seriesIndex][2] && dataIndex === 0) {
	                            // 队尾加入删除头部
	                            this.zr.delShape(this.shapeList[i].id);
	                            continue;
	                        }
	                        if (this.shapeList[i]._orient === 'horizontal') {
	                            // 条形图
	                            dy = this.component.yAxis.getAxis(serie.yAxisIndex || 0).getGap();
	                            y = aniMap[seriesIndex][2] ? -dy : dy;
	                            x = 0;
	                        }
	                        else {
	                            // 柱形图
	                            dx = this.component.xAxis.getAxis(serie.xAxisIndex || 0).getGap();
	                            x = aniMap[seriesIndex][2] ? dx : -dx;
	                            y = 0;
	                        }
	                        this.shapeList[i].position = [0, 0];

	                        aniCount++;
	                        this.zr.animate(this.shapeList[i].id, '')
	                            .when(
	                                this.query(this.option, 'animationDurationUpdate'),
	                                { position: [x, y] }
	                            )
	                            .done(animationDone)
	                            .start();
	                    }
	                }
	            }
	            
	            // 没有动画
	            if (!aniCount) {
	                done && done();
	            }
	        }
	    };
	    
	    zrUtil.inherits(Bar, ChartBase);
	    
	    // 图表注册
	    __webpack_require__(454).define('bar', Bar);
	    
	    return Bar;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 546 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function injectTapEventPlugin () {
	  var React = __webpack_require__(1);
	  React.initializeTouchEvents(true);

	  __webpack_require__(69).injection.injectEventPluginsByName({
	    "ResponderEventPlugin": __webpack_require__(547),
	    "TapEventPlugin":       __webpack_require__(548)
	  });
	};


/***/ },
/* 547 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ResponderEventPlugin
	 */

	"use strict";

	var EventConstants = __webpack_require__(5);
	var EventPluginUtils = __webpack_require__(4);
	var EventPropagators = __webpack_require__(93);
	var SyntheticEvent = __webpack_require__(97);

	var accumulateInto = __webpack_require__(71);
	var keyOf = __webpack_require__(39);

	var isStartish = EventPluginUtils.isStartish;
	var isMoveish = EventPluginUtils.isMoveish;
	var isEndish = EventPluginUtils.isEndish;
	var executeDirectDispatch = EventPluginUtils.executeDirectDispatch;
	var hasDispatches = EventPluginUtils.hasDispatches;
	var executeDispatchesInOrderStopAtTrue =
	  EventPluginUtils.executeDispatchesInOrderStopAtTrue;

	/**
	 * ID of element that should respond to touch/move types of interactions, as
	 * indicated explicitly by relevant callbacks.
	 */
	var responderID = null;
	var isPressing = false;

	var eventTypes = {
	  /**
	   * On a `touchStart`/`mouseDown`, is it desired that this element become the
	   * responder?
	   */
	  startShouldSetResponder: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onStartShouldSetResponder: null}),
	      captured: keyOf({onStartShouldSetResponderCapture: null})
	    }
	  },

	  /**
	   * On a `scroll`, is it desired that this element become the responder? This
	   * is usually not needed, but should be used to retroactively infer that a
	   * `touchStart` had occured during momentum scroll. During a momentum scroll,
	   * a touch start will be immediately followed by a scroll event if the view is
	   * currently scrolling.
	   */
	  scrollShouldSetResponder: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onScrollShouldSetResponder: null}),
	      captured: keyOf({onScrollShouldSetResponderCapture: null})
	    }
	  },

	  /**
	   * On a `touchMove`/`mouseMove`, is it desired that this element become the
	   * responder?
	   */
	  moveShouldSetResponder: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMoveShouldSetResponder: null}),
	      captured: keyOf({onMoveShouldSetResponderCapture: null})
	    }
	  },

	  /**
	   * Direct responder events dispatched directly to responder. Do not bubble.
	   */
	  responderMove: {registrationName: keyOf({onResponderMove: null})},
	  responderRelease: {registrationName: keyOf({onResponderRelease: null})},
	  responderTerminationRequest: {
	    registrationName: keyOf({onResponderTerminationRequest: null})
	  },
	  responderGrant: {registrationName: keyOf({onResponderGrant: null})},
	  responderReject: {registrationName: keyOf({onResponderReject: null})},
	  responderTerminate: {registrationName: keyOf({onResponderTerminate: null})}
	};

	/**
	 * Performs negotiation between any existing/current responder, checks to see if
	 * any new entity is interested in becoming responder, performs that handshake
	 * and returns any events that must be emitted to notify the relevant parties.
	 *
	 * A note about event ordering in the `EventPluginHub`.
	 *
	 * Suppose plugins are injected in the following order:
	 *
	 * `[R, S, C]`
	 *
	 * To help illustrate the example, assume `S` is `SimpleEventPlugin` (for
	 * `onClick` etc) and `R` is `ResponderEventPlugin`.
	 *
	 * "Deferred-Dispatched Events":
	 *
	 * - The current event plugin system will traverse the list of injected plugins,
	 *   in order, and extract events by collecting the plugin's return value of
	 *   `extractEvents()`.
	 * - These events that are returned from `extractEvents` are "deferred
	 *   dispatched events".
	 * - When returned from `extractEvents`, deferred-dispatched events contain an
	 *   "accumulation" of deferred dispatches.
	 * - These deferred dispatches are accumulated/collected before they are
	 *   returned, but processed at a later time by the `EventPluginHub` (hence the
	 *   name deferred).
	 *
	 * In the process of returning their deferred-dispatched events, event plugins
	 * themselves can dispatch events on-demand without returning them from
	 * `extractEvents`. Plugins might want to do this, so that they can use event
	 * dispatching as a tool that helps them decide which events should be extracted
	 * in the first place.
	 *
	 * "On-Demand-Dispatched Events":
	 *
	 * - On-demand-dispatched events are not returned from `extractEvents`.
	 * - On-demand-dispatched events are dispatched during the process of returning
	 *   the deferred-dispatched events.
	 * - They should not have side effects.
	 * - They should be avoided, and/or eventually be replaced with another
	 *   abstraction that allows event plugins to perform multiple "rounds" of event
	 *   extraction.
	 *
	 * Therefore, the sequence of event dispatches becomes:
	 *
	 * - `R`s on-demand events (if any)   (dispatched by `R` on-demand)
	 * - `S`s on-demand events (if any)   (dispatched by `S` on-demand)
	 * - `C`s on-demand events (if any)   (dispatched by `C` on-demand)
	 * - `R`s extracted events (if any)   (dispatched by `EventPluginHub`)
	 * - `S`s extracted events (if any)   (dispatched by `EventPluginHub`)
	 * - `C`s extracted events (if any)   (dispatched by `EventPluginHub`)
	 *
	 * In the case of `ResponderEventPlugin`: If the `startShouldSetResponder`
	 * on-demand dispatch returns `true` (and some other details are satisfied) the
	 * `onResponderGrant` deferred dispatched event is returned from
	 * `extractEvents`. The sequence of dispatch executions in this case
	 * will appear as follows:
	 *
	 * - `startShouldSetResponder` (`ResponderEventPlugin` dispatches on-demand)
	 * - `touchStartCapture`       (`EventPluginHub` dispatches as usual)
	 * - `touchStart`              (`EventPluginHub` dispatches as usual)
	 * - `responderGrant/Reject`   (`EventPluginHub` dispatches as usual)
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {string} topLevelTargetID ID of deepest React rendered element.
	 * @param {object} nativeEvent Native browser event.
	 * @return {*} An accumulation of synthetic events.
	 */
	function setResponderAndExtractTransfer(
	    topLevelType,
	    topLevelTargetID,
	    nativeEvent) {
	  var shouldSetEventType =
	    isStartish(topLevelType) ? eventTypes.startShouldSetResponder :
	    isMoveish(topLevelType) ? eventTypes.moveShouldSetResponder :
	    eventTypes.scrollShouldSetResponder;

	  var bubbleShouldSetFrom = responderID || topLevelTargetID;
	  var shouldSetEvent = SyntheticEvent.getPooled(
	    shouldSetEventType,
	    bubbleShouldSetFrom,
	    nativeEvent
	  );
	  EventPropagators.accumulateTwoPhaseDispatches(shouldSetEvent);
	  var wantsResponderID = executeDispatchesInOrderStopAtTrue(shouldSetEvent);
	  if (!shouldSetEvent.isPersistent()) {
	    shouldSetEvent.constructor.release(shouldSetEvent);
	  }

	  if (!wantsResponderID || wantsResponderID === responderID) {
	    return null;
	  }
	  var extracted;
	  var grantEvent = SyntheticEvent.getPooled(
	    eventTypes.responderGrant,
	    wantsResponderID,
	    nativeEvent
	  );

	  EventPropagators.accumulateDirectDispatches(grantEvent);
	  if (responderID) {
	    var terminationRequestEvent = SyntheticEvent.getPooled(
	      eventTypes.responderTerminationRequest,
	      responderID,
	      nativeEvent
	    );
	    EventPropagators.accumulateDirectDispatches(terminationRequestEvent);
	    var shouldSwitch = !hasDispatches(terminationRequestEvent) ||
	      executeDirectDispatch(terminationRequestEvent);
	    if (!terminationRequestEvent.isPersistent()) {
	      terminationRequestEvent.constructor.release(terminationRequestEvent);
	    }

	    if (shouldSwitch) {
	      var terminateType = eventTypes.responderTerminate;
	      var terminateEvent = SyntheticEvent.getPooled(
	        terminateType,
	        responderID,
	        nativeEvent
	      );
	      EventPropagators.accumulateDirectDispatches(terminateEvent);
	      extracted = accumulateInto(extracted, [grantEvent, terminateEvent]);
	      responderID = wantsResponderID;
	    } else {
	      var rejectEvent = SyntheticEvent.getPooled(
	        eventTypes.responderReject,
	        wantsResponderID,
	        nativeEvent
	      );
	      EventPropagators.accumulateDirectDispatches(rejectEvent);
	      extracted = accumulateInto(extracted, rejectEvent);
	    }
	  } else {
	    extracted = accumulateInto(extracted, grantEvent);
	    responderID = wantsResponderID;
	  }
	  return extracted;
	}

	/**
	 * A transfer is a negotiation between a currently set responder and the next
	 * element to claim responder status. Any start event could trigger a transfer
	 * of responderID. Any move event could trigger a transfer, so long as there is
	 * currently a responder set (in other words as long as the user is pressing
	 * down).
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @return {boolean} True if a transfer of responder could possibly occur.
	 */
	function canTriggerTransfer(topLevelType) {
	  return topLevelType === EventConstants.topLevelTypes.topScroll ||
	         isStartish(topLevelType) ||
	         (isPressing && isMoveish(topLevelType));
	}

	/**
	 * Event plugin for formalizing the negotiation between claiming locks on
	 * receiving touches.
	 */
	var ResponderEventPlugin = {

	  getResponderID: function() {
	    return responderID;
	  },

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    var extracted;
	    // Must have missed an end event - reset the state here.
	    if (responderID && isStartish(topLevelType)) {
	      responderID = null;
	    }
	    if (isStartish(topLevelType)) {
	      isPressing = true;
	    } else if (isEndish(topLevelType)) {
	      isPressing = false;
	    }
	    if (canTriggerTransfer(topLevelType)) {
	      var transfer = setResponderAndExtractTransfer(
	        topLevelType,
	        topLevelTargetID,
	        nativeEvent
	      );
	      if (transfer) {
	        extracted = accumulateInto(extracted, transfer);
	      }
	    }
	    // Now that we know the responder is set correctly, we can dispatch
	    // responder type events (directly to the responder).
	    var type = isMoveish(topLevelType) ? eventTypes.responderMove :
	      isEndish(topLevelType) ? eventTypes.responderRelease :
	      isStartish(topLevelType) ? eventTypes.responderStart : null;
	    if (type) {
	      var gesture = SyntheticEvent.getPooled(
	        type,
	        responderID || '',
	        nativeEvent
	      );
	      EventPropagators.accumulateDirectDispatches(gesture);
	      extracted = accumulateInto(extracted, gesture);
	    }
	    if (type === eventTypes.responderRelease) {
	      responderID = null;
	    }
	    return extracted;
	  }

	};

	module.exports = ResponderEventPlugin;


/***/ },
/* 548 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule TapEventPlugin
	 * @typechecks static-only
	 */

	"use strict";

	var EventConstants = __webpack_require__(5);
	var EventPluginUtils = __webpack_require__(4);
	var EventPropagators = __webpack_require__(93);
	var SyntheticUIEvent = __webpack_require__(106);
	var TouchEventUtils = __webpack_require__(549);
	var ViewportMetrics = __webpack_require__(74);

	var keyOf = __webpack_require__(39);
	var topLevelTypes = EventConstants.topLevelTypes;

	var isStartish = EventPluginUtils.isStartish;
	var isEndish = EventPluginUtils.isEndish;

	var isTouch = function(topLevelType) {
	  var touchTypes = [
	    topLevelTypes.topTouchCancel,
	    topLevelTypes.topTouchEnd,
	    topLevelTypes.topTouchStart,
	    topLevelTypes.topTouchMove
	  ];
	  return touchTypes.indexOf(topLevelType) >= 0;
	}

	/**
	 * Number of pixels that are tolerated in between a `touchStart` and `touchEnd`
	 * in order to still be considered a 'tap' event.
	 */
	var tapMoveThreshold = 10;
	var ignoreMouseThreshold = 750;
	var startCoords = {x: null, y: null};
	var lastTouchEvent = null;

	var Axis = {
	  x: {page: 'pageX', client: 'clientX', envScroll: 'currentPageScrollLeft'},
	  y: {page: 'pageY', client: 'clientY', envScroll: 'currentPageScrollTop'}
	};

	function getAxisCoordOfEvent(axis, nativeEvent) {
	  var singleTouch = TouchEventUtils.extractSingleTouch(nativeEvent);
	  if (singleTouch) {
	    return singleTouch[axis.page];
	  }
	  return axis.page in nativeEvent ?
	    nativeEvent[axis.page] :
	    nativeEvent[axis.client] + ViewportMetrics[axis.envScroll];
	}

	function getDistance(coords, nativeEvent) {
	  var pageX = getAxisCoordOfEvent(Axis.x, nativeEvent);
	  var pageY = getAxisCoordOfEvent(Axis.y, nativeEvent);
	  return Math.pow(
	    Math.pow(pageX - coords.x, 2) + Math.pow(pageY - coords.y, 2),
	    0.5
	  );
	}

	var dependencies = [
	  topLevelTypes.topMouseDown,
	  topLevelTypes.topMouseMove,
	  topLevelTypes.topMouseUp
	];

	if (EventPluginUtils.useTouchEvents) {
	  dependencies.push(
	    topLevelTypes.topTouchEnd,
	    topLevelTypes.topTouchStart,
	    topLevelTypes.topTouchMove
	  );
	}

	var eventTypes = {
	  touchTap: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onTouchTap: null}),
	      captured: keyOf({onTouchTapCapture: null})
	    },
	    dependencies: dependencies
	  }
	};

	var now = function() {
	  if (Date.now) {
	    return Date.now();
	  } else {
	    // IE8 support: http://stackoverflow.com/questions/9430357/please-explain-why-and-how-new-date-works-as-workaround-for-date-now-in
	    return +new Date;
	  }
	}

	var TapEventPlugin = {

	  tapMoveThreshold: tapMoveThreshold,

	  ignoreMouseThreshold: ignoreMouseThreshold,

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {

	    if (isTouch(topLevelType)) {
	      lastTouchEvent = now();
	    } else {
	      if (lastTouchEvent && (now() - lastTouchEvent) < ignoreMouseThreshold) {
	        return null;
	      }
	    }

	    if (!isStartish(topLevelType) && !isEndish(topLevelType)) {
	      return null;
	    }
	    var event = null;
	    var distance = getDistance(startCoords, nativeEvent);
	    if (isEndish(topLevelType) && distance < tapMoveThreshold) {
	      event = SyntheticUIEvent.getPooled(
	        eventTypes.touchTap,
	        topLevelTargetID,
	        nativeEvent
	      );
	    }
	    if (isStartish(topLevelType)) {
	      startCoords.x = getAxisCoordOfEvent(Axis.x, nativeEvent);
	      startCoords.y = getAxisCoordOfEvent(Axis.y, nativeEvent);
	    } else if (isEndish(topLevelType)) {
	      startCoords.x = 0;
	      startCoords.y = 0;
	    }
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  }

	};

	module.exports = TapEventPlugin;


/***/ },
/* 549 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule TouchEventUtils
	 */

	var TouchEventUtils = {
	  /**
	   * Utility function for common case of extracting out the primary touch from a
	   * touch event.
	   * - `touchEnd` events usually do not have the `touches` property.
	   *   http://stackoverflow.com/questions/3666929/
	   *   mobile-sarai-touchend-event-not-firing-when-last-touch-is-removed
	   *
	   * @param {Event} nativeEvent Native event that may or may not be a touch.
	   * @return {TouchesObject?} an object with pageX and pageY or null.
	   */
	  extractSingleTouch: function(nativeEvent) {
	    var touches = nativeEvent.touches;
	    var changedTouches = nativeEvent.changedTouches;
	    var hasTouches = touches && touches.length > 0;
	    var hasChangedTouches = changedTouches && changedTouches.length > 0;

	    return !hasTouches && hasChangedTouches ? changedTouches[0] :
	           hasTouches ? touches[0] :
	           nativeEvent;
	  }
	};

	module.exports = TouchEventUtils;


/***/ }
/******/ ]);